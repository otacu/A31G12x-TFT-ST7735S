/*
 * ARM Limited (ARM) is supplying this software for use with Cortex-M
 * processor based microcontroller, but can be equally used for other
 * suitable processor architectures. This file can be freely distributed.
 * Modifications to this file shall be clearly marked.
 * 
 * THIS SOFTWARE IS PROVIDED "AS IS". NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * @file     A31G12x.h
 * @brief    CMSIS HeaderFile
 * @version  1.0
 * @date     23. July 2020
 * @note     Generated by SVDConv V3.3.18 on Thursday, 23.07.2020 15:12:46
 *           from File 'A31G12x.svd',
 *           last modified on Thursday, 23.07.2020 05:38:08
 */



/** @addtogroup VENDOR ABOV Semiconductor Co., Ltd.
  * @{
  */


/** @addtogroup A31G12x
  * @{
  */


#ifndef A31G12X_H
#define A31G12X_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M0+ Specific Interrupt Numbers  ======================================= */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ==========================================  A31G12x Specific Interrupt Numbers  =========================================== */
  LVI_IRQn                  =   0,              /*!< 0  LVI Interrupt                                                          */
  WUT_IRQn                  =   1,              /*!< 1  WUT Interrupt                                                          */
  WDT_IRQn                  =   2,              /*!< 2  WDT Interrupt                                                          */
  EINT0_IRQn                =   3,              /*!< 3  EINT0 Interrupt                                                        */
  EINT1_IRQn                =   4,              /*!< 4  EINT1 Interrupt                                                        */
  EINT2_IRQn                =   5,              /*!< 5  EINT2 Interrupt                                                        */
  EINT3_IRQn                =   6,              /*!< 6  EINT3 Interrupt                                                        */
  TIMER10_IRQn              =   7,              /*!< 7  TIMER10 Interrupt                                                      */
  TIMER11_IRQn              =   8,              /*!< 8  TIMER11 Interrupt                                                      */
  TIMER12_IRQn              =   9,              /*!< 9  TIMER12 Interrupt                                                      */
  I2C0_IRQn                 =  10,              /*!< 10 I2C0 Interrupt                                                         */
  USART10_IRQn              =  11,              /*!< 11 USART10 Interrupt                                                      */
  WT_IRQn                   =  12,              /*!< 12 WT Interrupt                                                           */
  TIMER30_IRQn              =  13,              /*!< 13 TIMER30 Interrupt                                                      */
  I2C1_IRQn                 =  14,              /*!< 14 I2C1 Interrupt                                                         */
  TIMER20_IRQn              =  15,              /*!< 15 TIMER20 Interrupt                                                      */
  TIMER21_IRQn              =  16,              /*!< 16 TIMER21 Interrupt                                                      */
  USART11_IRQn              =  17,              /*!< 17 USART11 Interrupt                                                      */
  ADC_IRQn                  =  18,              /*!< 18 ADC Interrupt                                                          */
  UART0_IRQn                =  19,              /*!< 19 UART0 Interrupt                                                        */
  UART1_IRQn                =  20,              /*!< 20 UART1 Interrupt                                                        */
  TIMER13_IRQn              =  21,              /*!< 21 TIMER13 Interrupt                                                      */
  TIMER14_IRQn              =  22,              /*!< 22 TIMER14 Interrupt                                                      */
  TIMER15_IRQn              =  23,              /*!< 23 TIMER15 Interrupt                                                      */
  TIMER16_IRQn              =  24,              /*!< 24 TIMER16 Interrupt                                                      */
  I2C2_IRQn                 =  25,              /*!< 25 I2C2 Interrupt                                                         */
  USART12_IRQn              =  26,              /*!< 26 USART12 Interrupt                                                      */
  USART13_IRQn              =  27               /*!< 27 USART13 Interrupt                                                      */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ==========================  Configuration of the ARM Cortex-M0+ Processor and Core Peripherals  =========================== */
#define __CM0PLUS_REV                 0x0001U   /*!< CM0PLUS Core Revision                                                     */
#define __NVIC_PRIO_BITS               2        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __VTOR_PRESENT                 1        /*!< Set to 1 if CPU supports Vector Table Offset Register                     */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm0plus.h"                       /*!< ARM Cortex-M0+ processor and core peripherals                             */
#include "system_A31G12x.h"                     /*!< A31G12x System                                                            */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           INTC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Interrupt Controller (INTC)
  */

typedef struct {                                /*!< (@ 0x40001000) INTC Structure                                             */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t PBTRIG;                      /*!< (@ 0x00000004) Port B Interrupt Trigger Selection Register                */
    
    struct {
      __IOM uint32_t ITRIG0     : 1;            /*!< [0..0] Port B Interrupt Trigger Selection 0                               */
      __IOM uint32_t ITRIG1     : 1;            /*!< [1..1] Port B Interrupt Trigger Selection 1                               */
      __IOM uint32_t ITRIG2     : 1;            /*!< [2..2] Port B Interrupt Trigger Selection 2                               */
      __IOM uint32_t ITRIG3     : 1;            /*!< [3..3] Port B Interrupt Trigger Selection 3                               */
      __IOM uint32_t ITRIG4     : 1;            /*!< [4..4] Port B Interrupt Trigger Selection 4                               */
      __IOM uint32_t ITRIG5     : 1;            /*!< [5..5] Port B Interrupt Trigger Selection 5                               */
      __IOM uint32_t ITRIG6     : 1;            /*!< [6..6] Port B Interrupt Trigger Selection 6                               */
      __IOM uint32_t ITRIG7     : 1;            /*!< [7..7] Port B Interrupt Trigger Selection 7                               */
      __IOM uint32_t ITRIG8     : 1;            /*!< [8..8] Port B Interrupt Trigger Selection 8                               */
      __IOM uint32_t ITRIG9     : 1;            /*!< [9..9] Port B Interrupt Trigger Selection 9                               */
      __IOM uint32_t ITRIG10    : 1;            /*!< [10..10] Port B Interrupt Trigger Selection 10                            */
      __IOM uint32_t ITRIG11    : 1;            /*!< [11..11] Port B Interrupt Trigger Selection 11                            */
    } PBTRIG_b;
  } ;
  
  union {
    __IOM uint32_t PCTRIG;                      /*!< (@ 0x00000008) Port C Interrupt Trigger Selection Register                */
    
    struct {
      __IOM uint32_t ITRIG0     : 1;            /*!< [0..0] Port C Interrupt Trigger Selection 0                               */
      __IOM uint32_t ITRIG1     : 1;            /*!< [1..1] Port C Interrupt Trigger Selection 1                               */
      __IOM uint32_t ITRIG2     : 1;            /*!< [2..2] Port C Interrupt Trigger Selection 2                               */
      __IOM uint32_t ITRIG3     : 1;            /*!< [3..3] Port C Interrupt Trigger Selection 3                               */
    } PCTRIG_b;
  } ;
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t PETRIG;                      /*!< (@ 0x00000010) Port E Interrupt Trigger Selection Register                */
    
    struct {
      __IOM uint32_t ITRIG0     : 1;            /*!< [0..0] Port E Interrupt Trigger Selection 0                               */
      __IOM uint32_t ITRIG1     : 1;            /*!< [1..1] Port E Interrupt Trigger Selection 1                               */
      __IOM uint32_t ITRIG2     : 1;            /*!< [2..2] Port E Interrupt Trigger Selection 2                               */
      __IOM uint32_t ITRIG3     : 1;            /*!< [3..3] Port E Interrupt Trigger Selection 3                               */
    } PETRIG_b;
  } ;
  __IM  uint32_t  RESERVED2[60];
  
  union {
    __IOM uint32_t PBCR;                        /*!< (@ 0x00000104) Port B Interrupt Control Register                          */
    
    struct {
      __IOM uint32_t INTCTL0    : 2;            /*!< [1..0] Port B Interrupt Control 0                                         */
      __IOM uint32_t INTCTL1    : 2;            /*!< [3..2] Port B Interrupt Control 1                                         */
      __IOM uint32_t INTCTL2    : 2;            /*!< [5..4] Port B Interrupt Control 2                                         */
      __IOM uint32_t INTCTL3    : 2;            /*!< [7..6] Port B Interrupt Control 3                                         */
      __IOM uint32_t INTCTL4    : 2;            /*!< [9..8] Port B Interrupt Control 4                                         */
      __IOM uint32_t INTCTL5    : 2;            /*!< [11..10] Port B Interrupt Control 5                                       */
      __IOM uint32_t INTCTL6    : 2;            /*!< [13..12] Port B Interrupt Control 6                                       */
      __IOM uint32_t INTCTL7    : 2;            /*!< [15..14] Port B Interrupt Control 7                                       */
      __IOM uint32_t INTCTL8    : 2;            /*!< [17..16] Port B Interrupt Control 8                                       */
      __IOM uint32_t INTCTL9    : 2;            /*!< [19..18] Port B Interrupt Control 9                                       */
      __IOM uint32_t INTCTL10   : 2;            /*!< [21..20] Port B Interrupt Control 10                                      */
      __IOM uint32_t INTCTL11   : 2;            /*!< [23..22] Port B Interrupt Control 11                                      */
    } PBCR_b;
  } ;
  
  union {
    __IOM uint32_t PCCR;                        /*!< (@ 0x00000108) Port C Interrupt Control Register                          */
    
    struct {
      __IOM uint32_t INTCTL0    : 2;            /*!< [1..0] Port C Interrupt Control 0                                         */
      __IOM uint32_t INTCTL1    : 2;            /*!< [3..2] Port C Interrupt Control 1                                         */
      __IOM uint32_t INTCTL2    : 2;            /*!< [5..4] Port C Interrupt Control 2                                         */
      __IOM uint32_t INTCTL3    : 2;            /*!< [7..6] Port C Interrupt Control 3                                         */
    } PCCR_b;
  } ;
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t PECR;                        /*!< (@ 0x00000110) Port E Interrupt Control Register                          */
    
    struct {
      __IOM uint32_t INTCTL0    : 2;            /*!< [1..0] Port E Interrupt Control 0                                         */
      __IOM uint32_t INTCTL1    : 2;            /*!< [3..2] Port E Interrupt Control 1                                         */
      __IOM uint32_t INTCTL2    : 2;            /*!< [5..4] Port E Interrupt Control 2                                         */
      __IOM uint32_t INTCTL3    : 2;            /*!< [7..6] Port E Interrupt Control 3                                         */
    } PECR_b;
  } ;
  __IM  uint32_t  RESERVED4[60];
  
  union {
    __IOM uint32_t PBFLAG;                      /*!< (@ 0x00000204) Port B Interrupt Flag Register                             */
    
    struct {
      __IOM uint32_t FLAG0      : 1;            /*!< [0..0] Port B Interrupt Flag 0                                            */
      __IOM uint32_t FLAG1      : 1;            /*!< [1..1] Port B Interrupt Flag 1                                            */
      __IOM uint32_t FLAG2      : 1;            /*!< [2..2] Port B Interrupt Flag 2                                            */
      __IOM uint32_t FLAG3      : 1;            /*!< [3..3] Port B Interrupt Flag 3                                            */
      __IOM uint32_t FLAG4      : 1;            /*!< [4..4] Port B Interrupt Flag 4                                            */
      __IOM uint32_t FLAG5      : 1;            /*!< [5..5] Port B Interrupt Flag 5                                            */
      __IOM uint32_t FLAG6      : 1;            /*!< [6..6] Port B Interrupt Flag 6                                            */
      __IOM uint32_t FLAG7      : 1;            /*!< [7..7] Port B Interrupt Flag 7                                            */
      __IOM uint32_t FLAG8      : 1;            /*!< [8..8] Port B Interrupt Flag 8                                            */
      __IOM uint32_t FLAG9      : 1;            /*!< [9..9] Port B Interrupt Flag 9                                            */
      __IOM uint32_t FLAG10     : 1;            /*!< [10..10] Port B Interrupt Flag 10                                         */
      __IOM uint32_t FLAG11     : 1;            /*!< [11..11] Port B Interrupt Flag 11                                         */
    } PBFLAG_b;
  } ;
  
  union {
    __IOM uint32_t PCFLAG;                      /*!< (@ 0x00000208) Port C Interrupt Flag Register                             */
    
    struct {
      __IOM uint32_t FLAG0      : 1;            /*!< [0..0] Port C Interrupt Flag 0                                            */
      __IOM uint32_t FLAG1      : 1;            /*!< [1..1] Port C Interrupt Flag 1                                            */
      __IOM uint32_t FLAG2      : 1;            /*!< [2..2] Port C Interrupt Flag 2                                            */
      __IOM uint32_t FLAG3      : 1;            /*!< [3..3] Port C Interrupt Flag 3                                            */
    } PCFLAG_b;
  } ;
  __IM  uint32_t  RESERVED5;
  
  union {
    __IOM uint32_t PEFLAG;                      /*!< (@ 0x00000210) Port E Interrupt Flag Register                             */
    
    struct {
      __IOM uint32_t FLAG0      : 1;            /*!< [0..0] Port E Interrupt Flag 0                                            */
      __IOM uint32_t FLAG1      : 1;            /*!< [1..1] Port E Interrupt Flag 1                                            */
      __IOM uint32_t FLAG2      : 1;            /*!< [2..2] Port E Interrupt Flag 2                                            */
      __IOM uint32_t FLAG3      : 1;            /*!< [3..3] Port E Interrupt Flag 3                                            */
    } PEFLAG_b;
  } ;
  __IM  uint32_t  RESERVED6[59];
  
  union {
    __IOM uint32_t EINT0CONF1;                  /*!< (@ 0x00000300) External Interrupt 0 Configuration Register 1              */
    
    struct {
      __IOM uint32_t CONF0      : 4;            /*!< [3..0] External Interrupt 0 Configuration 0                               */
      __IOM uint32_t CONF1      : 4;            /*!< [7..4] External Interrupt 0 Configuration 1                               */
      __IOM uint32_t CONF2      : 4;            /*!< [11..8] External Interrupt 0 Configuration 2                              */
      __IOM uint32_t CONF3      : 4;            /*!< [15..12] External Interrupt 0 Configuration 3                             */
      __IOM uint32_t CONF4      : 4;            /*!< [19..16] External Interrupt 0 Configuration 4                             */
      __IOM uint32_t CONF5      : 4;            /*!< [23..20] External Interrupt 0 Configuration 5                             */
      __IOM uint32_t CONF6      : 4;            /*!< [27..24] External Interrupt 0 Configuration 6                             */
      __IOM uint32_t CONF7      : 4;            /*!< [31..28] External Interrupt 0 Configuration 7                             */
    } EINT0CONF1_b;
  } ;
  
  union {
    __IOM uint32_t EINT1CONF1;                  /*!< (@ 0x00000304) External Interrupt 1 Configuration Register 1              */
    
    struct {
      __IOM uint32_t CONF0      : 4;            /*!< [3..0] External Interrupt 1 Configuration 0                               */
      __IOM uint32_t CONF1      : 4;            /*!< [7..4] External Interrupt 1 Configuration 1                               */
      __IOM uint32_t CONF2      : 4;            /*!< [11..8] External Interrupt 1 Configuration 2                              */
      __IOM uint32_t CONF3      : 4;            /*!< [15..12] External Interrupt 1 Configuration 3                             */
      __IOM uint32_t CONF4      : 4;            /*!< [19..16] External Interrupt 1 Configuration 4                             */
      __IOM uint32_t CONF5      : 4;            /*!< [23..20] External Interrupt 1 Configuration 5                             */
      __IOM uint32_t CONF6      : 4;            /*!< [27..24] External Interrupt 1 Configuration 6                             */
      __IOM uint32_t CONF7      : 4;            /*!< [31..28] External Interrupt 1 Configuration 7                             */
    } EINT1CONF1_b;
  } ;
  
  union {
    __IOM uint32_t EINT2CONF1;                  /*!< (@ 0x00000308) External Interrupt 2 Configuration Register 1              */
    
    struct {
      __IOM uint32_t CONF0      : 4;            /*!< [3..0] External Interrupt 2 Configuration 0                               */
      __IOM uint32_t CONF1      : 4;            /*!< [7..4] External Interrupt 2 Configuration 1                               */
      __IOM uint32_t CONF2      : 4;            /*!< [11..8] External Interrupt 2 Configuration 2                              */
      __IOM uint32_t CONF3      : 4;            /*!< [15..12] External Interrupt 2 Configuration 3                             */
      __IOM uint32_t CONF4      : 4;            /*!< [19..16] External Interrupt 2 Configuration 4                             */
      __IOM uint32_t CONF5      : 4;            /*!< [23..20] External Interrupt 2 Configuration 5                             */
      __IOM uint32_t CONF6      : 4;            /*!< [27..24] External Interrupt 2 Configuration 6                             */
      __IOM uint32_t CONF7      : 4;            /*!< [31..28] External Interrupt 2 Configuration 7                             */
    } EINT2CONF1_b;
  } ;
  
  union {
    __IOM uint32_t EINT3CONF1;                  /*!< (@ 0x0000030C) External Interrupt 3 Configuration Register 1              */
    
    struct {
      __IOM uint32_t CONF0      : 4;            /*!< [3..0] External Interrupt 3 Configuration 0                               */
      __IOM uint32_t CONF1      : 4;            /*!< [7..4] External Interrupt 3 Configuration 1                               */
      __IOM uint32_t CONF2      : 4;            /*!< [11..8] External Interrupt 3 Configuration 2                              */
      __IOM uint32_t CONF3      : 4;            /*!< [15..12] External Interrupt 3 Configuration 3                             */
      __IOM uint32_t CONF4      : 4;            /*!< [19..16] External Interrupt 3 Configuration 4                             */
      __IOM uint32_t CONF5      : 4;            /*!< [23..20] External Interrupt 3 Configuration 5                             */
      __IOM uint32_t CONF6      : 4;            /*!< [27..24] External Interrupt 3 Configuration 6                             */
      __IOM uint32_t CONF7      : 4;            /*!< [31..28] External Interrupt 3 Configuration 7                             */
    } EINT3CONF1_b;
  } ;
  
  union {
    __IOM uint32_t EINT0CONF2;                  /*!< (@ 0x00000310) External Interrupt 0 Configuration Register 2              */
    
    struct {
      __IOM uint32_t CONF8      : 4;            /*!< [3..0] External Interrupt 0 Configuration 8                               */
      __IOM uint32_t CONF9      : 4;            /*!< [7..4] External Interrupt 0 Configuration 9                               */
      __IOM uint32_t CONF10     : 4;            /*!< [11..8] External Interrupt 0 Configuration 10                             */
      __IOM uint32_t CONF11     : 4;            /*!< [15..12] External Interrupt 0 Configuration 11                            */
    } EINT0CONF2_b;
  } ;
  
  union {
    __IOM uint32_t EINT1CONF2;                  /*!< (@ 0x00000314) External Interrupt 1 Configuration Register 2              */
    
    struct {
      __IOM uint32_t CONF8      : 4;            /*!< [3..0] External Interrupt 1 Configuration 8                               */
      __IOM uint32_t CONF9      : 4;            /*!< [7..4] External Interrupt 1 Configuration 9                               */
      __IOM uint32_t CONF10     : 4;            /*!< [11..8] External Interrupt 1 Configuration 10                             */
      __IOM uint32_t CONF11     : 4;            /*!< [15..12] External Interrupt 1 Configuration 11                            */
    } EINT1CONF2_b;
  } ;
  
  union {
    __IOM uint32_t EINT2CONF2;                  /*!< (@ 0x00000318) External Interrupt 2 Configuration Register 2              */
    
    struct {
      __IOM uint32_t CONF8      : 4;            /*!< [3..0] External Interrupt 2 Configuration 8                               */
      __IOM uint32_t CONF9      : 4;            /*!< [7..4] External Interrupt 2 Configuration 9                               */
      __IOM uint32_t CONF10     : 4;            /*!< [11..8] External Interrupt 2 Configuration 10                             */
      __IOM uint32_t CONF11     : 4;            /*!< [15..12] External Interrupt 2 Configuration 11                            */
    } EINT2CONF2_b;
  } ;
  
  union {
    __IOM uint32_t EINT3CONF2;                  /*!< (@ 0x0000031C) External Interrupt 3 Configuration Register 2              */
    
    struct {
      __IOM uint32_t CONF8      : 4;            /*!< [3..0] External Interrupt 3 Configuration 8                               */
      __IOM uint32_t CONF9      : 4;            /*!< [7..4] External Interrupt 3 Configuration 9                               */
      __IOM uint32_t CONF10     : 4;            /*!< [11..8] External Interrupt 3 Configuration 10                             */
      __IOM uint32_t CONF11     : 4;            /*!< [15..12] External Interrupt 3 Configuration 11                            */
    } EINT3CONF2_b;
  } ;
  __IM  uint32_t  RESERVED7[56];
  
  union {
    __IOM uint32_t MSK;                         /*!< (@ 0x00000400) Interrupt Source Mask Register                             */
    
    struct {
      __IOM uint32_t IMSK0_LVI  : 1;            /*!< [0..0] Interrupt Source Mask 0 (LVI)                                      */
      __IOM uint32_t IMSK1_WUT  : 1;            /*!< [1..1] Interrupt Source Mask 1 (WUT)                                      */
      __IOM uint32_t IMSK2_WDT  : 1;            /*!< [2..2] Interrupt Source Mask 2 (WDT)                                      */
      __IOM uint32_t IMSK3_EINT0 : 1;           /*!< [3..3] Interrupt Source Mask 3 (EINT0)                                    */
      __IOM uint32_t IMSK4_EINT1 : 1;           /*!< [4..4] Interrupt Source Mask 4 (EINT1)                                    */
      __IOM uint32_t IMSK5_EINT2 : 1;           /*!< [5..5] Interrupt Source Mask 5 (EINT2)                                    */
      __IOM uint32_t IMSK6_EINT3 : 1;           /*!< [6..6] Interrupt Source Mask 6 (EINT3)                                    */
      __IOM uint32_t IMSK7_TIMER10 : 1;         /*!< [7..7] Interrupt Source Mask 7 (TIMER10)                                  */
      __IOM uint32_t IMSK8_TIMER11 : 1;         /*!< [8..8] Interrupt Source Mask 8 (TIMER11)                                  */
      __IOM uint32_t IMSK9_TIMER12 : 1;         /*!< [9..9] Interrupt Source Mask 9 (TIMER12)                                  */
      __IOM uint32_t IMSK10_I2C0 : 1;           /*!< [10..10] Interrupt Source Mask 10 (I2C0)                                  */
      __IOM uint32_t IMSK11_USART10 : 1;        /*!< [11..11] Interrupt Source Mask 11 (USART10)                               */
      __IOM uint32_t IMSK12_WT  : 1;            /*!< [12..12] Interrupt Source Mask 12 (WT)                                    */
      __IOM uint32_t IMSK13_TIMER30 : 1;        /*!< [13..13] Interrupt Source Mask 13 (TIMER30)                               */
      __IOM uint32_t IMSK14_I2C1 : 1;           /*!< [14..14] Interrupt Source Mask 14 (I2C1)                                  */
      __IOM uint32_t IMSK15_TIMER20 : 1;        /*!< [15..15] Interrupt Source Mask 15 (TIMER20)                               */
      __IOM uint32_t IMSK16_TIMER21 : 1;        /*!< [16..16] Interrupt Source Mask 16 (TIMER21)                               */
      __IOM uint32_t IMSK17_USART11 : 1;        /*!< [17..17] Interrupt Source Mask 17 (USART11)                               */
      __IOM uint32_t IMSK18_ADC : 1;            /*!< [18..18] Interrupt Source Mask 18 (ADC)                                   */
      __IOM uint32_t IMSK19_UART0 : 1;          /*!< [19..19] Interrupt Source Mask 19 (UART0)                                 */
      __IOM uint32_t IMSK20_UART1 : 1;          /*!< [20..20] Interrupt Source Mask 20 (UART1)                                 */
      __IOM uint32_t IMSK21_TIMER13 : 1;        /*!< [21..21] Interrupt Source Mask 21 (TIMER13)                               */
      __IOM uint32_t IMSK22_TIMER14 : 1;        /*!< [22..22] Interrupt Source Mask 22 (TIMER14)                               */
      __IOM uint32_t IMSK23_TIMER15 : 1;        /*!< [23..23] Interrupt Source Mask 23 (TIMER15)                               */
      __IOM uint32_t IMSK24_TIMER16 : 1;        /*!< [24..24] Interrupt Source Mask 24 (TIMER16)                               */
      __IOM uint32_t IMSK25_I2C2 : 1;           /*!< [25..25] Interrupt Source Mask 25 (I2C2)                                  */
      __IOM uint32_t IMSK26_USART12 : 1;        /*!< [26..26] Interrupt Source Mask 26 (USART12)                               */
      __IOM uint32_t IMSK27_USART13 : 1;        /*!< [27..27] Interrupt Source Mask 27 (USART13)                               */
      __IOM uint32_t IMSK28_NULL : 1;           /*!< [28..28] Interrupt Source Mask 28 (RSVD)                                  */
      __IOM uint32_t IMSK29_NULL : 1;           /*!< [29..29] Interrupt Source Mask 29 (RSVD)                                  */
      __IOM uint32_t IMSK30_NULL : 1;           /*!< [30..30] Interrupt Source Mask 30 (RSVD)                                  */
      __IOM uint32_t IMSK31_NULL : 1;           /*!< [31..31] Interrupt Source Mask 31 (RSVD)                                  */
    } MSK_b;
  } ;
} INTC_Type;                                    /*!< Size = 1028 (0x404)                                                       */



/* =========================================================================================================================== */
/* ================                                           SCUCC                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief System Control Unit: Chip Configuration (SCUCC)
  */

typedef struct {                                /*!< (@ 0x4000F000) SCUCC Structure                                            */
  
  union {
    __IM  uint32_t VENDORID;                    /*!< (@ 0x00000000) Vendor Identification Register                             */
    
    struct {
      __IM  uint32_t VENDID     : 32;           /*!< [31..0] Vendor Identification                                             */
    } VENDORID_b;
  } ;
  
  union {
    __IM  uint32_t CHIPID;                      /*!< (@ 0x00000004) Chip Identification Register                               */
    
    struct {
      __IM  uint32_t CHIPID     : 32;           /*!< [31..0] Chip Identification                                               */
    } CHIPID_b;
  } ;
  
  union {
    __IM  uint32_t REVNR;                       /*!< (@ 0x00000008) Revision Number Register                                   */
    
    struct {
      __IM  uint32_t REVNO      : 8;            /*!< [7..0] Chip Revision Number                                               */
    } REVNR_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t PMREMAP;                     /*!< (@ 0x00000014) Program Memory Remap Register                              */
    
    struct {
      __IOM uint32_t PMREM      : 8;            /*!< [7..0] Program Memory Remap                                               */
      __OM  uint32_t nPMREM     : 8;            /*!< [15..8] Write Complement Key                                              */
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0xe2f1)                                */
    } PMREMAP_b;
  } ;
  
  union {
    __IOM uint32_t BTPSCR;                      /*!< (@ 0x00000018) Boot Pin Status and Control Register                       */
    
    struct {
      __IM  uint32_t BTPSTA     : 1;            /*!< [0..0] BOOT Pin Status                                                    */
      __IM  uint32_t            : 4;
      __IOM uint32_t BFIND      : 2;            /*!< [6..5] BOOT Pin Function Indicator                                        */
    } BTPSCR_b;
  } ;
  
  union {
    __IOM uint32_t RSTSSR;                      /*!< (@ 0x0000001C) Reset Source Status Register                               */
    
    struct {
      __IOM uint32_t PORSTA     : 1;            /*!< [0..0] POR Reset Status                                                   */
      __IOM uint32_t LVRSTA     : 1;            /*!< [1..1] LVR Reset Status                                                   */
      __IOM uint32_t WDTSTA     : 1;            /*!< [2..2] Watch-Dog Timer Reset Status                                       */
      __IOM uint32_t EXTSTA     : 1;            /*!< [3..3] External Pin Reset Status                                          */
      __IOM uint32_t SWSTA      : 1;            /*!< [4..4] Software Reset Status                                              */
      __IOM uint32_t MONSTA     : 1;            /*!< [5..5] Clock Monitoring Reset Status                                      */
    } RSTSSR_b;
  } ;
  
  union {
    __IOM uint32_t NMISRCR;                     /*!< (@ 0x00000020) NMI Source Selection Register                              */
    
    struct {
      __IOM uint32_t NMISRC     : 5;            /*!< [4..0] Non-Maskable Interrupt Source Selection                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t MONINT     : 1;            /*!< [6..6] Clock Monitoring Interrupt Selection                               */
      __IOM uint32_t NMICON     : 1;            /*!< [7..7] Non-Maskable Interrupt (NMI) Control                               */
    } NMISRCR_b;
  } ;
  
  union {
    __OM  uint32_t SWRSTR;                      /*!< (@ 0x00000024) Software Reset Register                                    */
    
    struct {
      __OM  uint32_t SWRST      : 8;            /*!< [7..0] Software Reset (System Reset)                                      */
      __IM  uint32_t            : 8;
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0x9eb3)                                */
    } SWRSTR_b;
  } ;
  
  union {
    __IM  uint32_t SRSTVR;                      /*!< (@ 0x00000028) System Reset Validation Register                           */
    
    struct {
      __IM  uint32_t VALID      : 8;            /*!< [7..0] System Reset Validation                                            */
    } SRSTVR_b;
  } ;
  
  union {
    __IOM uint32_t WUTCR;                       /*!< (@ 0x0000002C) Wake-Up Timer Control Register                             */
    
    struct {
      __IOM uint32_t WUTIFLAG   : 1;            /*!< [0..0] Wake-Up Timer Interrupt Flag                                       */
      __IOM uint32_t CNTRLD     : 1;            /*!< [1..1] Counter Reload                                                     */
      __IM  uint32_t            : 5;
      __IOM uint32_t WUTIEN     : 1;            /*!< [7..7] Wake-Up Timer Interrupt Enable                                     */
    } WUTCR_b;
  } ;
  
  union {
    __IOM uint32_t WUTDR;                       /*!< (@ 0x00000030) Wake-Up Timer Data Register                                */
    
    struct {
      __IOM uint32_t WUTDATA    : 16;           /*!< [15..0] Wake-Up Timer Data                                                */
    } WUTDR_b;
  } ;
  __IM  uint32_t  RESERVED1[29];
  
  union {
    __IOM uint32_t HIRCTRM;                     /*!< (@ 0x000000A8) High Frequency Internal RC Trim Register (HIRCNFIG)        */
    
    struct {
      __IOM uint32_t FTRMH      : 5;            /*!< [4..0] Factory HIRC Fine Trim                                             */
      __IM  uint32_t CTRMH      : 3;            /*!< [7..5] Factory HIRC Coarse Trim                                           */
      __OM  uint32_t nTRMH      : 8;            /*!< [15..8] Write Complement Key                                              */
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0xa6b5)                                */
    } HIRCTRM_b;
  } ;
  
  union {
    __IOM uint32_t WDTRCTRM;                    /*!< (@ 0x000000AC) Watch-Dog Timer RC Trim Register (WDTRCNFIG)               */
    
    struct {
      __IOM uint32_t FTRMW      : 3;            /*!< [2..0] Factory WDTRC Fine Trim                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t CTRMW      : 4;            /*!< [7..4] Factory WDTRC Coarse Trim                                          */
      __OM  uint32_t nTRMW      : 8;            /*!< [15..8] Write Complement Key                                              */
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0x4c3d)                                */
    } WDTRCTRM_b;
  } ;
} SCUCC_Type;                                   /*!< Size = 176 (0xb0)                                                         */



/* =========================================================================================================================== */
/* ================                                           SCUCG                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief System Control Unit: Clock Generation (SCUCG)
  */

typedef struct {                                /*!< (@ 0x40001800) SCUCG Structure                                            */
  
  union {
    __IOM uint32_t SCCR;                        /*!< (@ 0x00000000) System Clock Control Register                              */
    
    struct {
      __IOM uint32_t MCLKSEL    : 2;            /*!< [1..0] Main Clock Selection, MCLK                                         */
      __IM  uint32_t            : 14;
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0x570a)                                */
    } SCCR_b;
  } ;
  
  union {
    __IOM uint32_t CLKSRCR;                     /*!< (@ 0x00000004) Clock Source Control Register                              */
    
    struct {
      __IOM uint32_t XSOSCEN    : 1;            /*!< [0..0] XSOSC Enable                                                       */
      __IOM uint32_t XMOSCEN    : 1;            /*!< [1..1] XMOSC Enable                                                       */
      __IOM uint32_t HIRCEN     : 1;            /*!< [2..2] HIRC Enable                                                        */
      __IOM uint32_t WDTRCEN    : 1;            /*!< [3..3] WDTRC Enable                                                       */
      __IM  uint32_t            : 4;
      __IOM uint32_t XMFRNG     : 1;            /*!< [8..8] Main Oscillator Type and Frequency Range Selection                 */
      __IM  uint32_t            : 3;
      __IOM uint32_t HIRCSEL    : 2;            /*!< [13..12] HIRC Frequency Selection                                         */
      __IM  uint32_t            : 2;
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0xa507)                                */
    } CLKSRCR_b;
  } ;
  
  union {
    __IOM uint32_t SCDIVR1;                     /*!< (@ 0x00000008) System Clock Divide Register 1                             */
    
    struct {
      __IOM uint32_t HDIV       : 3;            /*!< [2..0] Clock Divide for HCLK, Divider 0                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t WLDIV      : 3;            /*!< [6..4] Clock Divide for Watch Timer and LCD Driver, Divider
                                                     2                                                                         */
    } SCDIVR1_b;
  } ;
  
  union {
    __IOM uint32_t SCDIVR2;                     /*!< (@ 0x0000000C) System Clock Divide Register 2                             */
    
    struct {
      __IOM uint32_t PDIV       : 2;            /*!< [1..0] Clock Divide for PCLK, Divider 1                                   */
      __IM  uint32_t            : 2;
      __IOM uint32_t SYSTDIV    : 2;            /*!< [5..4] Clock Divide for SysTick Timer, Divider 3                          */
    } SCDIVR2_b;
  } ;
  
  union {
    __IOM uint32_t CLKOCR;                      /*!< (@ 0x00000010) Clock Output Control Register                              */
    
    struct {
      __IOM uint32_t CLKOS      : 3;            /*!< [2..0] Clock Output Selection                                             */
      __IOM uint32_t CLKODIV    : 3;            /*!< [5..3] Output Clock Divide, Divider 4                                     */
      __IOM uint32_t POLSEL     : 1;            /*!< [6..6] Clock Output Polarity Selection when Disable                       */
      __IOM uint32_t CLKOEN     : 1;            /*!< [7..7] Clock Output Enable                                                */
    } CLKOCR_b;
  } ;
  
  union {
    __IOM uint32_t CMONCR;                      /*!< (@ 0x00000014) Clock Monitoring Control Register                          */
    
    struct {
      __IOM uint32_t MONCS      : 2;            /*!< [1..0] Monitored Clock Selection                                          */
      __IOM uint32_t NMINTFG    : 1;            /*!< [2..2] Clock Monitoring Interrupt Flag                                    */
      __IOM uint32_t MONFLAG    : 1;            /*!< [3..3] Clock Monitoring Result Flag                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t MACTS      : 2;            /*!< [6..5] Clock Monitoring Action Selection                                  */
      __IOM uint32_t MONEN      : 1;            /*!< [7..7] Clock Monitoring Enable                                            */
    } CMONCR_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t PPCLKEN1;                    /*!< (@ 0x00000020) Peripheral Clock Enable Register 1                         */
    
    struct {
      __IOM uint32_t PACLKE     : 1;            /*!< [0..0] Port A Clock Enable                                                */
      __IOM uint32_t PBCLKE     : 1;            /*!< [1..1] Port B Clock Enable                                                */
      __IOM uint32_t PCCLKE     : 1;            /*!< [2..2] Port C Clock Enable                                                */
      __IOM uint32_t PDCLKE     : 1;            /*!< [3..3] Port D Clock Enable                                                */
      __IOM uint32_t PECLKE     : 1;            /*!< [4..4] Port E Clock Enable                                                */
      __IOM uint32_t PFCLKE     : 1;            /*!< [5..5] Port F Clock Enable                                                */
      __IM  uint32_t            : 2;
      __IOM uint32_t T13CLKE    : 1;            /*!< [8..8] TIMER13 Clock Enable                                               */
      __IOM uint32_t T14CLKE    : 1;            /*!< [9..9] TIMER14 Clock Enable                                               */
      __IOM uint32_t T15CLKE    : 1;            /*!< [10..10] TIMER15 Clock Enable                                             */
      __IOM uint32_t T16CLKE    : 1;            /*!< [11..11] TIMER16 Clock Enable                                             */
      __IM  uint32_t            : 4;
      __IOM uint32_t T10CLKE    : 1;            /*!< [16..16] TIMER10 Clock Enable                                             */
      __IOM uint32_t T11CLKE    : 1;            /*!< [17..17] TIMER11 Clock Enable                                             */
      __IOM uint32_t T12CLKE    : 1;            /*!< [18..18] TIMER12 Clock Enable                                             */
      __IOM uint32_t T30CLKE    : 1;            /*!< [19..19] TIMER30 Clock Enable                                             */
      __IOM uint32_t T20CLKE    : 1;            /*!< [20..20] TIMER20 Clock Enable                                             */
      __IOM uint32_t T21CLKE    : 1;            /*!< [21..21] TIMER21 Clock Enable                                             */
    } PPCLKEN1_b;
  } ;
  
  union {
    __IOM uint32_t PPCLKEN2;                    /*!< (@ 0x00000024) Peripheral Clock Enable Register 2                         */
    
    struct {
      __IOM uint32_t UST10CLKE  : 1;            /*!< [0..0] USART10 Clock Enable                                               */
      __IOM uint32_t UST11CLKE  : 1;            /*!< [1..1] USART11 Clock Enable                                               */
      __IOM uint32_t UT0CLKE    : 1;            /*!< [2..2] UART0 Clock Enable                                                 */
      __IOM uint32_t UT1CLKE    : 1;            /*!< [3..3] UART1 Clock Enable                                                 */
      __IOM uint32_t UST12CLKE  : 1;            /*!< [4..4] USART12 Clock Enable                                               */
      __IOM uint32_t UST13CLKE  : 1;            /*!< [5..5] USART13 Clock Enable                                               */
      __IOM uint32_t I2C0CLKE   : 1;            /*!< [6..6] I2C0 (Inter-IC) Clock Enable                                       */
      __IOM uint32_t I2C1CLKE   : 1;            /*!< [7..7] I2C1 (Inter-IC) Clock Enable                                       */
      __IOM uint32_t I2C2CLKE   : 1;            /*!< [8..8] I2C2 (Inter-IC) Clock Enable                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t ADCLKE     : 1;            /*!< [10..10] ADC (Analog to Digital Converter) Clock Enable                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t CRCLKE     : 1;            /*!< [12..12] CRC (Cyclic Redundancy Check) Clock Enable                       */
      __IOM uint32_t LCDCLKE    : 1;            /*!< [13..13] LCD (LCD Driver) Clock Enable                                    */
      __IM  uint32_t            : 2;
      __IOM uint32_t WTCLKE     : 1;            /*!< [16..16] WT (Watch Timer) Clock Enable                                    */
      __IOM uint32_t WDTCLKE    : 1;            /*!< [17..17] WDT (Watch-Dog Timer) Clock Enable                               */
      __IOM uint32_t LVICLKE    : 1;            /*!< [18..18] LVI (Low Voltage Indicator) Clock Enable                         */
      __IOM uint32_t FMCLKE     : 1;            /*!< [19..19] FMC (Flash Memory Controller) Clock Enable                       */
    } PPCLKEN2_b;
  } ;
  __IM  uint32_t  RESERVED1[6];
  
  union {
    __IOM uint32_t PPCLKSR;                     /*!< (@ 0x00000040) Peripheral Clock Selection Register                        */
    
    struct {
      __IOM uint32_t WDTCLK     : 1;            /*!< [0..0] WDT (Watch-Dog Timer) Clock Selection                              */
      __IM  uint32_t            : 2;
      __IOM uint32_t WTCLK      : 2;            /*!< [4..3] WT (Watch Timer) Clock Selection                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t LCDCLK     : 2;            /*!< [7..6] LCD (LCD Driver) Clock Selection                                   */
      __IM  uint32_t            : 9;
      __IOM uint32_t T30CLK     : 1;            /*!< [17..17] TIMER30 Clock Selection                                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t T20CLK     : 1;            /*!< [20..20] TIMER20 Clock Selection                                          */
    } PPCLKSR_b;
  } ;
  __IM  uint32_t  RESERVED2[7];
  
  union {
    __IOM uint32_t PPRST1;                      /*!< (@ 0x00000060) Peripheral Reset Register 1                                */
    
    struct {
      __IOM uint32_t PARST      : 1;            /*!< [0..0] Port A Reset                                                       */
      __IOM uint32_t PBRST      : 1;            /*!< [1..1] Port B Reset                                                       */
      __IOM uint32_t PCRST      : 1;            /*!< [2..2] Port C Reset                                                       */
      __IOM uint32_t PDRST      : 1;            /*!< [3..3] Port D Reset                                                       */
      __IOM uint32_t PERST      : 1;            /*!< [4..4] Port E Reset                                                       */
      __IOM uint32_t PFRST      : 1;            /*!< [5..5] Port F Reset                                                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t T13RST     : 1;            /*!< [8..8] TIMER13 Reset                                                      */
      __IOM uint32_t T14RST     : 1;            /*!< [9..9] TIMER14 Reset                                                      */
      __IOM uint32_t T15RST     : 1;            /*!< [10..10] TIMER15 Reset                                                    */
      __IOM uint32_t T16RST     : 1;            /*!< [11..11] TIMER16 Reset                                                    */
      __IM  uint32_t            : 4;
      __IOM uint32_t T10RST     : 1;            /*!< [16..16] TIMER10 Reset                                                    */
      __IOM uint32_t T11RST     : 1;            /*!< [17..17] TIMER11 Reset                                                    */
      __IOM uint32_t T12RST     : 1;            /*!< [18..18] TIMER12 Reset                                                    */
      __IOM uint32_t T30RST     : 1;            /*!< [19..19] TIMER30 Reset                                                    */
      __IOM uint32_t T20RST     : 1;            /*!< [20..20] TIMER20 Reset                                                    */
      __IOM uint32_t T21RST     : 1;            /*!< [21..21] TIMER21 Reset                                                    */
    } PPRST1_b;
  } ;
  
  union {
    __IOM uint32_t PPRST2;                      /*!< (@ 0x00000064) Peripheral Reset Register 2                                */
    
    struct {
      __IOM uint32_t UST10RST   : 1;            /*!< [0..0] USART10 Reset                                                      */
      __IOM uint32_t UST11RST   : 1;            /*!< [1..1] USART11 Reset                                                      */
      __IOM uint32_t UT0RST     : 1;            /*!< [2..2] UART0 Reset                                                        */
      __IOM uint32_t UT1RST     : 1;            /*!< [3..3] UART1 Reset                                                        */
      __IOM uint32_t UST12RST   : 1;            /*!< [4..4] USART12 Reset                                                      */
      __IOM uint32_t UST13RST   : 1;            /*!< [5..5] USART13 Reset                                                      */
      __IOM uint32_t I2C0RST    : 1;            /*!< [6..6] I2C0 (Inter-IC) Reset                                              */
      __IOM uint32_t I2C1RST    : 1;            /*!< [7..7] I2C1 (Inter-IC) Reset                                              */
      __IOM uint32_t I2C2RST    : 1;            /*!< [8..8] I2C2 (Inter-IC) Reset                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t ADRST      : 1;            /*!< [10..10] ADC (Analog to Digital Converter) Reset                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t CRRST      : 1;            /*!< [12..12] CRC (Cyclic Redundancy Check) Reset                              */
      __IOM uint32_t LCDRST     : 1;            /*!< [13..13] LCD (LCD Driver) Reset                                           */
      __IM  uint32_t            : 2;
      __IOM uint32_t WTRST      : 1;            /*!< [16..16] WT (Watch Timer) Reset                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t LVIRST     : 1;            /*!< [18..18] LVI (Low Voltage Indicator) Reset                                */
      __IOM uint32_t FMCRST     : 1;            /*!< [19..19] FMC (Flash Memory Controller) Reset                              */
    } PPRST2_b;
  } ;
  __IM  uint32_t  RESERVED3[6];
  
  union {
    __IOM uint32_t XTFLSR;                      /*!< (@ 0x00000080) X-tal Filter Selection Register                            */
    
    struct {
      __IOM uint32_t XRNS       : 3;            /*!< [2..0] External Main Oscillator Filter Selection                          */
      __IM  uint32_t            : 13;
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0x9b37)                                */
    } XTFLSR_b;
  } ;
} SCUCG_Type;                                   /*!< Size = 132 (0x84)                                                         */



/* =========================================================================================================================== */
/* ================                                           SCULV                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief System Control Unit: LVI and LVR (SCULV)
  */

typedef struct {                                /*!< (@ 0x40005100) SCULV Structure                                            */
  
  union {
    __IOM uint32_t LVICR;                       /*!< (@ 0x00000000) Low Voltage Indicator Control Register                     */
    
    struct {
      __IOM uint32_t LVIVS      : 4;            /*!< [3..0] LVI Voltage Selection                                              */
      __IOM uint32_t LVIFLAG    : 1;            /*!< [4..4] LVI Interrupt Flag                                                 */
      __IOM uint32_t LVINTEN    : 1;            /*!< [5..5] LVI Interrupt Enable                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t LVIEN      : 1;            /*!< [7..7] LVI Enable                                                         */
    } LVICR_b;
  } ;
  
  union {
    __IOM uint32_t LVRCR;                       /*!< (@ 0x00000004) Low Voltage Reset Control Register                         */
    
    struct {
      __IOM uint32_t LVREN      : 8;            /*!< [7..0] LVR Enable                                                         */
    } LVRCR_b;
  } ;
} SCULV_Type;                                   /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                            Pn                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Port Control Unit & GPIO Port n (Pn)
  */

typedef struct {                                /*!< (@ 0x50000000) Pn Structure                                               */
  
  union {
    __IOM uint32_t MOD;                         /*!< (@ 0x00000000) Port n Mode Register                                       */
    
    struct {
      __IOM uint32_t MODE0      : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
      __IOM uint32_t MODE1      : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
      __IOM uint32_t MODE2      : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
      __IOM uint32_t MODE3      : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
      __IOM uint32_t MODE4      : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
      __IOM uint32_t MODE5      : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
      __IOM uint32_t MODE6      : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
      __IOM uint32_t MODE7      : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
      __IOM uint32_t MODE8      : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
      __IOM uint32_t MODE9      : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
      __IOM uint32_t MODE10     : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
      __IOM uint32_t MODE11     : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
      __IOM uint32_t MODE12     : 2;            /*!< [25..24] Port n Mode Selection 12                                         */
      __IOM uint32_t MODE13     : 2;            /*!< [27..26] Port n Mode Selection 13                                         */
      __IOM uint32_t MODE14     : 2;            /*!< [29..28] Port n Mode Selection 14                                         */
      __IOM uint32_t MODE15     : 2;            /*!< [31..30] Port n Mode Selection 15                                         */
    } MOD_b;
  } ;
  
  union {
    __IOM uint32_t TYP;                         /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
    
    struct {
      __IOM uint32_t TYP0       : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
      __IOM uint32_t TYP1       : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
      __IOM uint32_t TYP2       : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
      __IOM uint32_t TYP3       : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
      __IOM uint32_t TYP4       : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
      __IOM uint32_t TYP5       : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
      __IOM uint32_t TYP6       : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
      __IOM uint32_t TYP7       : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
      __IOM uint32_t TYP8       : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
      __IOM uint32_t TYP9       : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
      __IOM uint32_t TYP10      : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
      __IOM uint32_t TYP11      : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
      __IOM uint32_t TYP12      : 1;            /*!< [12..12] Port n Output Type Selection 12                                  */
      __IOM uint32_t TYP13      : 1;            /*!< [13..13] Port n Output Type Selection 13                                  */
      __IOM uint32_t TYP14      : 1;            /*!< [14..14] Port n Output Type Selection 14                                  */
      __IOM uint32_t TYP15      : 1;            /*!< [15..15] Port n Output Type Selection 15                                  */
    } TYP_b;
  } ;
  
  union {
    __IOM uint32_t AFSR1;                       /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
    
    struct {
      __IOM uint32_t AFSR0      : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
      __IOM uint32_t AFSR1      : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
      __IOM uint32_t AFSR2      : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
      __IOM uint32_t AFSR3      : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
      __IOM uint32_t AFSR4      : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
      __IOM uint32_t AFSR5      : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
      __IOM uint32_t AFSR6      : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
      __IOM uint32_t AFSR7      : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
    } AFSR1_b;
  } ;
  
  union {
    __IOM uint32_t AFSR2;                       /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
    
    struct {
      __IOM uint32_t AFSR8      : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
      __IOM uint32_t AFSR9      : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
      __IOM uint32_t AFSR10     : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
      __IOM uint32_t AFSR11     : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
      __IOM uint32_t AFSR12     : 4;            /*!< [19..16] Port n Alternative Function Selection 12                         */
      __IOM uint32_t AFSR13     : 4;            /*!< [23..20] Port n Alternative Function Selection 13                         */
      __IOM uint32_t AFSR14     : 4;            /*!< [27..24] Port n Alternative Function Selection 14                         */
      __IOM uint32_t AFSR15     : 4;            /*!< [31..28] Port n Alternative Function Selection 15                         */
    } AFSR2_b;
  } ;
  
  union {
    __IOM uint32_t PUPD;                        /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
    
    struct {
      __IOM uint32_t PUPD0      : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
      __IOM uint32_t PUPD1      : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
      __IOM uint32_t PUPD2      : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
      __IOM uint32_t PUPD3      : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
      __IOM uint32_t PUPD4      : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
      __IOM uint32_t PUPD5      : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
      __IOM uint32_t PUPD6      : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
      __IOM uint32_t PUPD7      : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
      __IOM uint32_t PUPD8      : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
      __IOM uint32_t PUPD9      : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
      __IOM uint32_t PUPD10     : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
      __IOM uint32_t PUPD11     : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
      __IOM uint32_t PUPD12     : 2;            /*!< [25..24] Port n Pull-Up/Down Resistor Selection 12                        */
      __IOM uint32_t PUPD13     : 2;            /*!< [27..26] Port n Pull-Up/Down Resistor Selection 13                        */
      __IOM uint32_t PUPD14     : 2;            /*!< [29..28] Port n Pull-Up/Down Resistor Selection 14                        */
      __IOM uint32_t PUPD15     : 2;            /*!< [31..30] Port n Pull-Up/Down Resistor Selection 15                        */
    } PUPD_b;
  } ;
  
  union {
    __IM  uint32_t INDR;                        /*!< (@ 0x00000014) Port n Input Data Register                                 */
    
    struct {
      __IM  uint32_t INDR0      : 1;            /*!< [0..0] Port n Input Data 0                                                */
      __IM  uint32_t INDR1      : 1;            /*!< [1..1] Port n Input Data 1                                                */
      __IM  uint32_t INDR2      : 1;            /*!< [2..2] Port n Input Data 2                                                */
      __IM  uint32_t INDR3      : 1;            /*!< [3..3] Port n Input Data 3                                                */
      __IM  uint32_t INDR4      : 1;            /*!< [4..4] Port n Input Data 4                                                */
      __IM  uint32_t INDR5      : 1;            /*!< [5..5] Port n Input Data 5                                                */
      __IM  uint32_t INDR6      : 1;            /*!< [6..6] Port n Input Data 6                                                */
      __IM  uint32_t INDR7      : 1;            /*!< [7..7] Port n Input Data 7                                                */
      __IM  uint32_t INDR8      : 1;            /*!< [8..8] Port n Input Data 8                                                */
      __IM  uint32_t INDR9      : 1;            /*!< [9..9] Port n Input Data 9                                                */
      __IM  uint32_t INDR10     : 1;            /*!< [10..10] Port n Input Data 10                                             */
      __IM  uint32_t INDR11     : 1;            /*!< [11..11] Port n Input Data 11                                             */
      __IM  uint32_t INDR12     : 1;            /*!< [12..12] Port n Input Data 12                                             */
      __IM  uint32_t INDR13     : 1;            /*!< [13..13] Port n Input Data 13                                             */
      __IM  uint32_t INDR14     : 1;            /*!< [14..14] Port n Input Data 14                                             */
      __IM  uint32_t INDR15     : 1;            /*!< [15..15] Port n Input Data 15                                             */
    } INDR_b;
  } ;
  
  union {
    __IOM uint32_t OUTDR;                       /*!< (@ 0x00000018) Port n Output Data Register                                */
    
    struct {
      __IOM uint32_t OUTDR0     : 1;            /*!< [0..0] Port n Output Data 0                                               */
      __IOM uint32_t OUTDR1     : 1;            /*!< [1..1] Port n Output Data 1                                               */
      __IOM uint32_t OUTDR2     : 1;            /*!< [2..2] Port n Output Data 2                                               */
      __IOM uint32_t OUTDR3     : 1;            /*!< [3..3] Port n Output Data 3                                               */
      __IOM uint32_t OUTDR4     : 1;            /*!< [4..4] Port n Output Data 4                                               */
      __IOM uint32_t OUTDR5     : 1;            /*!< [5..5] Port n Output Data 5                                               */
      __IOM uint32_t OUTDR6     : 1;            /*!< [6..6] Port n Output Data 6                                               */
      __IOM uint32_t OUTDR7     : 1;            /*!< [7..7] Port n Output Data 7                                               */
      __IOM uint32_t OUTDR8     : 1;            /*!< [8..8] Port n Output Data 8                                               */
      __IOM uint32_t OUTDR9     : 1;            /*!< [9..9] Port n Output Data 9                                               */
      __IOM uint32_t OUTDR10    : 1;            /*!< [10..10] Port n Output Data 10                                            */
      __IOM uint32_t OUTDR11    : 1;            /*!< [11..11] Port n Output Data 11                                            */
      __IOM uint32_t OUTDR12    : 1;            /*!< [12..12] Port n Output Data 12                                            */
      __IOM uint32_t OUTDR13    : 1;            /*!< [13..13] Port n Output Data 13                                            */
      __IOM uint32_t OUTDR14    : 1;            /*!< [14..14] Port n Output Data 14                                            */
      __IOM uint32_t OUTDR15    : 1;            /*!< [15..15] Port n Output Data 15                                            */
    } OUTDR_b;
  } ;
  
  union {
    __OM  uint32_t BSR;                         /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
    
    struct {
      __OM  uint32_t BSR0       : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
      __OM  uint32_t BSR1       : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
      __OM  uint32_t BSR2       : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
      __OM  uint32_t BSR3       : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
      __OM  uint32_t BSR4       : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
      __OM  uint32_t BSR5       : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
      __OM  uint32_t BSR6       : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
      __OM  uint32_t BSR7       : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
      __OM  uint32_t BSR8       : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
      __OM  uint32_t BSR9       : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
      __OM  uint32_t BSR10      : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
      __OM  uint32_t BSR11      : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
      __OM  uint32_t BSR12      : 1;            /*!< [12..12] Port n Output Bit Set 12                                         */
      __OM  uint32_t BSR13      : 1;            /*!< [13..13] Port n Output Bit Set 13                                         */
      __OM  uint32_t BSR14      : 1;            /*!< [14..14] Port n Output Bit Set 14                                         */
      __OM  uint32_t BSR15      : 1;            /*!< [15..15] Port n Output Bit Set 15                                         */
    } BSR_b;
  } ;
  
  union {
    __OM  uint32_t BCR;                         /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
    
    struct {
      __OM  uint32_t BCR0       : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
      __OM  uint32_t BCR1       : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
      __OM  uint32_t BCR2       : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
      __OM  uint32_t BCR3       : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
      __OM  uint32_t BCR4       : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
      __OM  uint32_t BCR5       : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
      __OM  uint32_t BCR6       : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
      __OM  uint32_t BCR7       : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
      __OM  uint32_t BCR8       : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
      __OM  uint32_t BCR9       : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
      __OM  uint32_t BCR10      : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
      __OM  uint32_t BCR11      : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
      __OM  uint32_t BCR12      : 1;            /*!< [12..12] Port n Output Bit Clear 12                                       */
      __OM  uint32_t BCR13      : 1;            /*!< [13..13] Port n Output Bit Clear 13                                       */
      __OM  uint32_t BCR14      : 1;            /*!< [14..14] Port n Output Bit Clear 14                                       */
      __OM  uint32_t BCR15      : 1;            /*!< [15..15] Port n Output Bit Clear 15                                       */
    } BCR_b;
  } ;
  
  union {
    __IOM uint32_t OUTDMSK;                     /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
    
    struct {
      __IOM uint32_t OUTDMSK0   : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
      __IOM uint32_t OUTDMSK1   : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
      __IOM uint32_t OUTDMSK2   : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
      __IOM uint32_t OUTDMSK3   : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
      __IOM uint32_t OUTDMSK4   : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
      __IOM uint32_t OUTDMSK5   : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
      __IOM uint32_t OUTDMSK6   : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
      __IOM uint32_t OUTDMSK7   : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
      __IOM uint32_t OUTDMSK8   : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
      __IOM uint32_t OUTDMSK9   : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
      __IOM uint32_t OUTDMSK10  : 1;            /*!< [10..10] Port n Output Data Mask 10                                       */
      __IOM uint32_t OUTDMSK11  : 1;            /*!< [11..11] Port n Output Data Mask 11                                       */
      __IOM uint32_t OUTDMSK12  : 1;            /*!< [12..12] Port n Output Data Mask 12                                       */
      __IOM uint32_t OUTDMSK13  : 1;            /*!< [13..13] Port n Output Data Mask 13                                       */
      __IOM uint32_t OUTDMSK14  : 1;            /*!< [14..14] Port n Output Data Mask 14                                       */
      __IOM uint32_t OUTDMSK15  : 1;            /*!< [15..15] Port n Output Data Mask 15                                       */
    } OUTDMSK_b;
  } ;
  
  union {
    __IOM uint32_t DBCR;                        /*!< (@ 0x00000028) Port n Debounce Control Register                           */
    
    struct {
      __IOM uint32_t DBEN0      : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
      __IOM uint32_t DBEN1      : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
      __IOM uint32_t DBEN2      : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
      __IOM uint32_t DBEN3      : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
      __IOM uint32_t DBEN4      : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
      __IOM uint32_t DBEN5      : 1;            /*!< [5..5] Port n Debounce Enable 5                                           */
      __IOM uint32_t DBEN6      : 1;            /*!< [6..6] Port n Debounce Enable 6                                           */
      __IOM uint32_t DBEN7      : 1;            /*!< [7..7] Port n Debounce Enable 7                                           */
      __IOM uint32_t DBEN8      : 1;            /*!< [8..8] Port n Debounce Enable 8                                           */
      __IOM uint32_t DBEN9      : 1;            /*!< [9..9] Port n Debounce Enable 9                                           */
      __IOM uint32_t DBEN10     : 1;            /*!< [10..10] Port n Debounce Enable 10                                        */
      __IOM uint32_t DBEN11     : 1;            /*!< [11..11] Port n Debounce Enable 11                                        */
      __IM  uint32_t            : 4;
      __IOM uint32_t DBCLK      : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
    } DBCR_b;
  } ;
} Pn_Type;                                      /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            PA                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Port Control Unit & GPIO Port A (PA)
  */

typedef struct {                                /*!< (@ 0x30000000) PA Structure                                               */
  
  union {
    union {
      __IOM uint32_t MOD;                       /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
        __IOM uint32_t MODE10   : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
        __IOM uint32_t MODE11   : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
        __IOM uint32_t MODE12   : 2;            /*!< [25..24] Port n Mode Selection 12                                         */
        __IOM uint32_t MODE13   : 2;            /*!< [27..26] Port n Mode Selection 13                                         */
        __IOM uint32_t MODE14   : 2;            /*!< [29..28] Port n Mode Selection 14                                         */
        __IOM uint32_t MODE15   : 2;            /*!< [31..30] Port n Mode Selection 15                                         */
      } MOD_b;
    } ;
    
    union {
      __IOM uint32_t PA_MOD;                    /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
        __IOM uint32_t MODE10   : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
        __IOM uint32_t MODE11   : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
      } PA_MOD_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t TYP;                       /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
        __IOM uint32_t TYP10    : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
        __IOM uint32_t TYP11    : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
        __IOM uint32_t TYP12    : 1;            /*!< [12..12] Port n Output Type Selection 12                                  */
        __IOM uint32_t TYP13    : 1;            /*!< [13..13] Port n Output Type Selection 13                                  */
        __IOM uint32_t TYP14    : 1;            /*!< [14..14] Port n Output Type Selection 14                                  */
        __IOM uint32_t TYP15    : 1;            /*!< [15..15] Port n Output Type Selection 15                                  */
      } TYP_b;
    } ;
    
    union {
      __IOM uint32_t PA_TYP;                    /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
        __IOM uint32_t TYP10    : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
        __IOM uint32_t TYP11    : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
      } PA_TYP_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR1;                     /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } AFSR1_b;
    } ;
    
    union {
      __IOM uint32_t PA_AFSR1;                  /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } PA_AFSR1_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR2;                     /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
        __IOM uint32_t AFSR10   : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
        __IOM uint32_t AFSR11   : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
        __IOM uint32_t AFSR12   : 4;            /*!< [19..16] Port n Alternative Function Selection 12                         */
        __IOM uint32_t AFSR13   : 4;            /*!< [23..20] Port n Alternative Function Selection 13                         */
        __IOM uint32_t AFSR14   : 4;            /*!< [27..24] Port n Alternative Function Selection 14                         */
        __IOM uint32_t AFSR15   : 4;            /*!< [31..28] Port n Alternative Function Selection 15                         */
      } AFSR2_b;
    } ;
    
    union {
      __IOM uint32_t PA_AFSR2;                  /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
        __IOM uint32_t AFSR10   : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
        __IOM uint32_t AFSR11   : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
      } PA_AFSR2_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t PUPD;                      /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
        __IOM uint32_t PUPD10   : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
        __IOM uint32_t PUPD11   : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
        __IOM uint32_t PUPD12   : 2;            /*!< [25..24] Port n Pull-Up/Down Resistor Selection 12                        */
        __IOM uint32_t PUPD13   : 2;            /*!< [27..26] Port n Pull-Up/Down Resistor Selection 13                        */
        __IOM uint32_t PUPD14   : 2;            /*!< [29..28] Port n Pull-Up/Down Resistor Selection 14                        */
        __IOM uint32_t PUPD15   : 2;            /*!< [31..30] Port n Pull-Up/Down Resistor Selection 15                        */
      } PUPD_b;
    } ;
    
    union {
      __IOM uint32_t PA_PUPD;                   /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
        __IOM uint32_t PUPD10   : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
        __IOM uint32_t PUPD11   : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
      } PA_PUPD_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t INDR;                      /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
        __IM  uint32_t INDR10   : 1;            /*!< [10..10] Port n Input Data 10                                             */
        __IM  uint32_t INDR11   : 1;            /*!< [11..11] Port n Input Data 11                                             */
        __IM  uint32_t INDR12   : 1;            /*!< [12..12] Port n Input Data 12                                             */
        __IM  uint32_t INDR13   : 1;            /*!< [13..13] Port n Input Data 13                                             */
        __IM  uint32_t INDR14   : 1;            /*!< [14..14] Port n Input Data 14                                             */
        __IM  uint32_t INDR15   : 1;            /*!< [15..15] Port n Input Data 15                                             */
      } INDR_b;
    } ;
    
    union {
      __IM  uint32_t PA_INDR;                   /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
        __IM  uint32_t INDR10   : 1;            /*!< [10..10] Port n Input Data 10                                             */
        __IM  uint32_t INDR11   : 1;            /*!< [11..11] Port n Input Data 11                                             */
      } PA_INDR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDR;                     /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
        __IOM uint32_t OUTDR10  : 1;            /*!< [10..10] Port n Output Data 10                                            */
        __IOM uint32_t OUTDR11  : 1;            /*!< [11..11] Port n Output Data 11                                            */
        __IOM uint32_t OUTDR12  : 1;            /*!< [12..12] Port n Output Data 12                                            */
        __IOM uint32_t OUTDR13  : 1;            /*!< [13..13] Port n Output Data 13                                            */
        __IOM uint32_t OUTDR14  : 1;            /*!< [14..14] Port n Output Data 14                                            */
        __IOM uint32_t OUTDR15  : 1;            /*!< [15..15] Port n Output Data 15                                            */
      } OUTDR_b;
    } ;
    
    union {
      __IOM uint32_t PA_OUTDR;                  /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
        __IOM uint32_t OUTDR10  : 1;            /*!< [10..10] Port n Output Data 10                                            */
        __IOM uint32_t OUTDR11  : 1;            /*!< [11..11] Port n Output Data 11                                            */
      } PA_OUTDR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BSR;                       /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
        __OM  uint32_t BSR10    : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
        __OM  uint32_t BSR11    : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
        __OM  uint32_t BSR12    : 1;            /*!< [12..12] Port n Output Bit Set 12                                         */
        __OM  uint32_t BSR13    : 1;            /*!< [13..13] Port n Output Bit Set 13                                         */
        __OM  uint32_t BSR14    : 1;            /*!< [14..14] Port n Output Bit Set 14                                         */
        __OM  uint32_t BSR15    : 1;            /*!< [15..15] Port n Output Bit Set 15                                         */
      } BSR_b;
    } ;
    
    union {
      __OM  uint32_t PA_BSR;                    /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
        __OM  uint32_t BSR10    : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
        __OM  uint32_t BSR11    : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
      } PA_BSR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BCR;                       /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
        __OM  uint32_t BCR10    : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
        __OM  uint32_t BCR11    : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
        __OM  uint32_t BCR12    : 1;            /*!< [12..12] Port n Output Bit Clear 12                                       */
        __OM  uint32_t BCR13    : 1;            /*!< [13..13] Port n Output Bit Clear 13                                       */
        __OM  uint32_t BCR14    : 1;            /*!< [14..14] Port n Output Bit Clear 14                                       */
        __OM  uint32_t BCR15    : 1;            /*!< [15..15] Port n Output Bit Clear 15                                       */
      } BCR_b;
    } ;
    
    union {
      __OM  uint32_t PA_BCR;                    /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
        __OM  uint32_t BCR10    : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
        __OM  uint32_t BCR11    : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
      } PA_BCR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDMSK;                   /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
        __IOM uint32_t OUTDMSK10 : 1;           /*!< [10..10] Port n Output Data Mask 10                                       */
        __IOM uint32_t OUTDMSK11 : 1;           /*!< [11..11] Port n Output Data Mask 11                                       */
        __IOM uint32_t OUTDMSK12 : 1;           /*!< [12..12] Port n Output Data Mask 12                                       */
        __IOM uint32_t OUTDMSK13 : 1;           /*!< [13..13] Port n Output Data Mask 13                                       */
        __IOM uint32_t OUTDMSK14 : 1;           /*!< [14..14] Port n Output Data Mask 14                                       */
        __IOM uint32_t OUTDMSK15 : 1;           /*!< [15..15] Port n Output Data Mask 15                                       */
      } OUTDMSK_b;
    } ;
    
    union {
      __IOM uint32_t PA_OUTDMSK;                /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
        __IOM uint32_t OUTDMSK10 : 1;           /*!< [10..10] Port n Output Data Mask 10                                       */
        __IOM uint32_t OUTDMSK11 : 1;           /*!< [11..11] Port n Output Data Mask 11                                       */
      } PA_OUTDMSK_b;
    } ;
  };
  
  union {
    __IOM uint32_t DBCR;                        /*!< (@ 0x00000028) Port n Debounce Control Register                           */
    
    struct {
      __IOM uint32_t DBEN0      : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
      __IOM uint32_t DBEN1      : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
      __IOM uint32_t DBEN2      : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
      __IOM uint32_t DBEN3      : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
      __IOM uint32_t DBEN4      : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
      __IOM uint32_t DBEN5      : 1;            /*!< [5..5] Port n Debounce Enable 5                                           */
      __IOM uint32_t DBEN6      : 1;            /*!< [6..6] Port n Debounce Enable 6                                           */
      __IOM uint32_t DBEN7      : 1;            /*!< [7..7] Port n Debounce Enable 7                                           */
      __IOM uint32_t DBEN8      : 1;            /*!< [8..8] Port n Debounce Enable 8                                           */
      __IOM uint32_t DBEN9      : 1;            /*!< [9..9] Port n Debounce Enable 9                                           */
      __IOM uint32_t DBEN10     : 1;            /*!< [10..10] Port n Debounce Enable 10                                        */
      __IOM uint32_t DBEN11     : 1;            /*!< [11..11] Port n Debounce Enable 11                                        */
      __IM  uint32_t            : 4;
      __IOM uint32_t DBCLK      : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
    } DBCR_b;
  } ;
} PA_Type;                                      /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            PB                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Port Control Unit & GPIO Port B (PB)
  */

typedef struct {                                /*!< (@ 0x30000100) PB Structure                                               */
  
  union {
    union {
      __IOM uint32_t MOD;                       /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
        __IOM uint32_t MODE10   : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
        __IOM uint32_t MODE11   : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
        __IOM uint32_t MODE12   : 2;            /*!< [25..24] Port n Mode Selection 12                                         */
        __IOM uint32_t MODE13   : 2;            /*!< [27..26] Port n Mode Selection 13                                         */
        __IOM uint32_t MODE14   : 2;            /*!< [29..28] Port n Mode Selection 14                                         */
        __IOM uint32_t MODE15   : 2;            /*!< [31..30] Port n Mode Selection 15                                         */
      } MOD_b;
    } ;
    
    union {
      __IOM uint32_t PB_MOD;                    /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
        __IOM uint32_t MODE10   : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
        __IOM uint32_t MODE11   : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
        __IOM uint32_t MODE12   : 2;            /*!< [25..24] Port n Mode Selection 12                                         */
        __IOM uint32_t MODE13   : 2;            /*!< [27..26] Port n Mode Selection 13                                         */
        __IOM uint32_t MODE14   : 2;            /*!< [29..28] Port n Mode Selection 14                                         */
        __IOM uint32_t MODE15   : 2;            /*!< [31..30] Port n Mode Selection 15                                         */
      } PB_MOD_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t TYP;                       /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
        __IOM uint32_t TYP10    : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
        __IOM uint32_t TYP11    : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
        __IOM uint32_t TYP12    : 1;            /*!< [12..12] Port n Output Type Selection 12                                  */
        __IOM uint32_t TYP13    : 1;            /*!< [13..13] Port n Output Type Selection 13                                  */
        __IOM uint32_t TYP14    : 1;            /*!< [14..14] Port n Output Type Selection 14                                  */
        __IOM uint32_t TYP15    : 1;            /*!< [15..15] Port n Output Type Selection 15                                  */
      } TYP_b;
    } ;
    
    union {
      __IOM uint32_t PB_TYP;                    /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
        __IOM uint32_t TYP10    : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
        __IOM uint32_t TYP11    : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
        __IOM uint32_t TYP12    : 1;            /*!< [12..12] Port n Output Type Selection 12                                  */
        __IOM uint32_t TYP13    : 1;            /*!< [13..13] Port n Output Type Selection 13                                  */
        __IOM uint32_t TYP14    : 1;            /*!< [14..14] Port n Output Type Selection 14                                  */
        __IOM uint32_t TYP15    : 1;            /*!< [15..15] Port n Output Type Selection 15                                  */
      } PB_TYP_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR1;                     /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } AFSR1_b;
    } ;
    
    union {
      __IOM uint32_t PB_AFSR1;                  /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } PB_AFSR1_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR2;                     /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
        __IOM uint32_t AFSR10   : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
        __IOM uint32_t AFSR11   : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
        __IOM uint32_t AFSR12   : 4;            /*!< [19..16] Port n Alternative Function Selection 12                         */
        __IOM uint32_t AFSR13   : 4;            /*!< [23..20] Port n Alternative Function Selection 13                         */
        __IOM uint32_t AFSR14   : 4;            /*!< [27..24] Port n Alternative Function Selection 14                         */
        __IOM uint32_t AFSR15   : 4;            /*!< [31..28] Port n Alternative Function Selection 15                         */
      } AFSR2_b;
    } ;
    
    union {
      __IOM uint32_t PB_AFSR2;                  /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
        __IOM uint32_t AFSR10   : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
        __IOM uint32_t AFSR11   : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
        __IOM uint32_t AFSR12   : 4;            /*!< [19..16] Port n Alternative Function Selection 12                         */
        __IOM uint32_t AFSR13   : 4;            /*!< [23..20] Port n Alternative Function Selection 13                         */
        __IOM uint32_t AFSR14   : 4;            /*!< [27..24] Port n Alternative Function Selection 14                         */
        __IOM uint32_t AFSR15   : 4;            /*!< [31..28] Port n Alternative Function Selection 15                         */
      } PB_AFSR2_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t PUPD;                      /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
        __IOM uint32_t PUPD10   : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
        __IOM uint32_t PUPD11   : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
        __IOM uint32_t PUPD12   : 2;            /*!< [25..24] Port n Pull-Up/Down Resistor Selection 12                        */
        __IOM uint32_t PUPD13   : 2;            /*!< [27..26] Port n Pull-Up/Down Resistor Selection 13                        */
        __IOM uint32_t PUPD14   : 2;            /*!< [29..28] Port n Pull-Up/Down Resistor Selection 14                        */
        __IOM uint32_t PUPD15   : 2;            /*!< [31..30] Port n Pull-Up/Down Resistor Selection 15                        */
      } PUPD_b;
    } ;
    
    union {
      __IOM uint32_t PB_PUPD;                   /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
        __IOM uint32_t PUPD10   : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
        __IOM uint32_t PUPD11   : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
        __IOM uint32_t PUPD12   : 2;            /*!< [25..24] Port n Pull-Up/Down Resistor Selection 12                        */
        __IOM uint32_t PUPD13   : 2;            /*!< [27..26] Port n Pull-Up/Down Resistor Selection 13                        */
        __IOM uint32_t PUPD14   : 2;            /*!< [29..28] Port n Pull-Up/Down Resistor Selection 14                        */
        __IOM uint32_t PUPD15   : 2;            /*!< [31..30] Port n Pull-Up/Down Resistor Selection 15                        */
      } PB_PUPD_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t INDR;                      /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
        __IM  uint32_t INDR10   : 1;            /*!< [10..10] Port n Input Data 10                                             */
        __IM  uint32_t INDR11   : 1;            /*!< [11..11] Port n Input Data 11                                             */
        __IM  uint32_t INDR12   : 1;            /*!< [12..12] Port n Input Data 12                                             */
        __IM  uint32_t INDR13   : 1;            /*!< [13..13] Port n Input Data 13                                             */
        __IM  uint32_t INDR14   : 1;            /*!< [14..14] Port n Input Data 14                                             */
        __IM  uint32_t INDR15   : 1;            /*!< [15..15] Port n Input Data 15                                             */
      } INDR_b;
    } ;
    
    union {
      __IM  uint32_t PB_INDR;                   /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
        __IM  uint32_t INDR10   : 1;            /*!< [10..10] Port n Input Data 10                                             */
        __IM  uint32_t INDR11   : 1;            /*!< [11..11] Port n Input Data 11                                             */
        __IM  uint32_t INDR12   : 1;            /*!< [12..12] Port n Input Data 12                                             */
        __IM  uint32_t INDR13   : 1;            /*!< [13..13] Port n Input Data 13                                             */
        __IM  uint32_t INDR14   : 1;            /*!< [14..14] Port n Input Data 14                                             */
        __IM  uint32_t INDR15   : 1;            /*!< [15..15] Port n Input Data 15                                             */
      } PB_INDR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDR;                     /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
        __IOM uint32_t OUTDR10  : 1;            /*!< [10..10] Port n Output Data 10                                            */
        __IOM uint32_t OUTDR11  : 1;            /*!< [11..11] Port n Output Data 11                                            */
        __IOM uint32_t OUTDR12  : 1;            /*!< [12..12] Port n Output Data 12                                            */
        __IOM uint32_t OUTDR13  : 1;            /*!< [13..13] Port n Output Data 13                                            */
        __IOM uint32_t OUTDR14  : 1;            /*!< [14..14] Port n Output Data 14                                            */
        __IOM uint32_t OUTDR15  : 1;            /*!< [15..15] Port n Output Data 15                                            */
      } OUTDR_b;
    } ;
    
    union {
      __IOM uint32_t PB_OUTDR;                  /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
        __IOM uint32_t OUTDR10  : 1;            /*!< [10..10] Port n Output Data 10                                            */
        __IOM uint32_t OUTDR11  : 1;            /*!< [11..11] Port n Output Data 11                                            */
        __IOM uint32_t OUTDR12  : 1;            /*!< [12..12] Port n Output Data 12                                            */
        __IOM uint32_t OUTDR13  : 1;            /*!< [13..13] Port n Output Data 13                                            */
        __IOM uint32_t OUTDR14  : 1;            /*!< [14..14] Port n Output Data 14                                            */
        __IOM uint32_t OUTDR15  : 1;            /*!< [15..15] Port n Output Data 15                                            */
      } PB_OUTDR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BSR;                       /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
        __OM  uint32_t BSR10    : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
        __OM  uint32_t BSR11    : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
        __OM  uint32_t BSR12    : 1;            /*!< [12..12] Port n Output Bit Set 12                                         */
        __OM  uint32_t BSR13    : 1;            /*!< [13..13] Port n Output Bit Set 13                                         */
        __OM  uint32_t BSR14    : 1;            /*!< [14..14] Port n Output Bit Set 14                                         */
        __OM  uint32_t BSR15    : 1;            /*!< [15..15] Port n Output Bit Set 15                                         */
      } BSR_b;
    } ;
    
    union {
      __OM  uint32_t PB_BSR;                    /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
        __OM  uint32_t BSR10    : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
        __OM  uint32_t BSR11    : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
        __OM  uint32_t BSR12    : 1;            /*!< [12..12] Port n Output Bit Set 12                                         */
        __OM  uint32_t BSR13    : 1;            /*!< [13..13] Port n Output Bit Set 13                                         */
        __OM  uint32_t BSR14    : 1;            /*!< [14..14] Port n Output Bit Set 14                                         */
        __OM  uint32_t BSR15    : 1;            /*!< [15..15] Port n Output Bit Set 15                                         */
      } PB_BSR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BCR;                       /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
        __OM  uint32_t BCR10    : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
        __OM  uint32_t BCR11    : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
        __OM  uint32_t BCR12    : 1;            /*!< [12..12] Port n Output Bit Clear 12                                       */
        __OM  uint32_t BCR13    : 1;            /*!< [13..13] Port n Output Bit Clear 13                                       */
        __OM  uint32_t BCR14    : 1;            /*!< [14..14] Port n Output Bit Clear 14                                       */
        __OM  uint32_t BCR15    : 1;            /*!< [15..15] Port n Output Bit Clear 15                                       */
      } BCR_b;
    } ;
    
    union {
      __OM  uint32_t PB_BCR;                    /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
        __OM  uint32_t BCR10    : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
        __OM  uint32_t BCR11    : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
        __OM  uint32_t BCR12    : 1;            /*!< [12..12] Port n Output Bit Clear 12                                       */
        __OM  uint32_t BCR13    : 1;            /*!< [13..13] Port n Output Bit Clear 13                                       */
        __OM  uint32_t BCR14    : 1;            /*!< [14..14] Port n Output Bit Clear 14                                       */
        __OM  uint32_t BCR15    : 1;            /*!< [15..15] Port n Output Bit Clear 15                                       */
      } PB_BCR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDMSK;                   /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
        __IOM uint32_t OUTDMSK10 : 1;           /*!< [10..10] Port n Output Data Mask 10                                       */
        __IOM uint32_t OUTDMSK11 : 1;           /*!< [11..11] Port n Output Data Mask 11                                       */
        __IOM uint32_t OUTDMSK12 : 1;           /*!< [12..12] Port n Output Data Mask 12                                       */
        __IOM uint32_t OUTDMSK13 : 1;           /*!< [13..13] Port n Output Data Mask 13                                       */
        __IOM uint32_t OUTDMSK14 : 1;           /*!< [14..14] Port n Output Data Mask 14                                       */
        __IOM uint32_t OUTDMSK15 : 1;           /*!< [15..15] Port n Output Data Mask 15                                       */
      } OUTDMSK_b;
    } ;
    
    union {
      __IOM uint32_t PB_OUTDMSK;                /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
        __IOM uint32_t OUTDMSK10 : 1;           /*!< [10..10] Port n Output Data Mask 10                                       */
        __IOM uint32_t OUTDMSK11 : 1;           /*!< [11..11] Port n Output Data Mask 11                                       */
        __IOM uint32_t OUTDMSK12 : 1;           /*!< [12..12] Port n Output Data Mask 12                                       */
        __IOM uint32_t OUTDMSK13 : 1;           /*!< [13..13] Port n Output Data Mask 13                                       */
        __IOM uint32_t OUTDMSK14 : 1;           /*!< [14..14] Port n Output Data Mask 14                                       */
        __IOM uint32_t OUTDMSK15 : 1;           /*!< [15..15] Port n Output Data Mask 15                                       */
      } PB_OUTDMSK_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t DBCR;                      /*!< (@ 0x00000028) Port n Debounce Control Register                           */
      
      struct {
        __IOM uint32_t DBEN0    : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
        __IOM uint32_t DBEN1    : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
        __IOM uint32_t DBEN2    : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
        __IOM uint32_t DBEN3    : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
        __IOM uint32_t DBEN4    : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
        __IOM uint32_t DBEN5    : 1;            /*!< [5..5] Port n Debounce Enable 5                                           */
        __IOM uint32_t DBEN6    : 1;            /*!< [6..6] Port n Debounce Enable 6                                           */
        __IOM uint32_t DBEN7    : 1;            /*!< [7..7] Port n Debounce Enable 7                                           */
        __IOM uint32_t DBEN8    : 1;            /*!< [8..8] Port n Debounce Enable 8                                           */
        __IOM uint32_t DBEN9    : 1;            /*!< [9..9] Port n Debounce Enable 9                                           */
        __IOM uint32_t DBEN10   : 1;            /*!< [10..10] Port n Debounce Enable 10                                        */
        __IOM uint32_t DBEN11   : 1;            /*!< [11..11] Port n Debounce Enable 11                                        */
        __IM  uint32_t          : 4;
        __IOM uint32_t DBCLK    : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
      } DBCR_b;
    } ;
    
    union {
      __IOM uint32_t PB_DBCR;                   /*!< (@ 0x00000028) Port n Debounce Control Register                           */
      
      struct {
        __IOM uint32_t DBEN0    : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
        __IOM uint32_t DBEN1    : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
        __IOM uint32_t DBEN2    : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
        __IOM uint32_t DBEN3    : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
        __IOM uint32_t DBEN4    : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
        __IOM uint32_t DBEN5    : 1;            /*!< [5..5] Port n Debounce Enable 5                                           */
        __IOM uint32_t DBEN6    : 1;            /*!< [6..6] Port n Debounce Enable 6                                           */
        __IOM uint32_t DBEN7    : 1;            /*!< [7..7] Port n Debounce Enable 7                                           */
        __IOM uint32_t DBEN8    : 1;            /*!< [8..8] Port n Debounce Enable 8                                           */
        __IOM uint32_t DBEN9    : 1;            /*!< [9..9] Port n Debounce Enable 9                                           */
        __IOM uint32_t DBEN10   : 1;            /*!< [10..10] Port n Debounce Enable 10                                        */
        __IOM uint32_t DBEN11   : 1;            /*!< [11..11] Port n Debounce Enable 11                                        */
        __IM  uint32_t          : 4;
        __IOM uint32_t DBCLK    : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
      } PB_DBCR_b;
    } ;
  };
} PB_Type;                                      /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            PC                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Port Control Unit & GPIO Port C (PC)
  */

typedef struct {                                /*!< (@ 0x30000200) PC Structure                                               */
  
  union {
    union {
      __IOM uint32_t MOD;                       /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
        __IOM uint32_t MODE10   : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
        __IOM uint32_t MODE11   : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
        __IOM uint32_t MODE12   : 2;            /*!< [25..24] Port n Mode Selection 12                                         */
        __IOM uint32_t MODE13   : 2;            /*!< [27..26] Port n Mode Selection 13                                         */
        __IOM uint32_t MODE14   : 2;            /*!< [29..28] Port n Mode Selection 14                                         */
        __IOM uint32_t MODE15   : 2;            /*!< [31..30] Port n Mode Selection 15                                         */
      } MOD_b;
    } ;
    
    union {
      __IOM uint32_t PC_MOD;                    /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
        __IOM uint32_t MODE10   : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
        __IOM uint32_t MODE11   : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
        __IOM uint32_t MODE12   : 2;            /*!< [25..24] Port n Mode Selection 12                                         */
      } PC_MOD_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t TYP;                       /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
        __IOM uint32_t TYP10    : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
        __IOM uint32_t TYP11    : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
        __IOM uint32_t TYP12    : 1;            /*!< [12..12] Port n Output Type Selection 12                                  */
        __IOM uint32_t TYP13    : 1;            /*!< [13..13] Port n Output Type Selection 13                                  */
        __IOM uint32_t TYP14    : 1;            /*!< [14..14] Port n Output Type Selection 14                                  */
        __IOM uint32_t TYP15    : 1;            /*!< [15..15] Port n Output Type Selection 15                                  */
      } TYP_b;
    } ;
    
    union {
      __IOM uint32_t PC_TYP;                    /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
        __IOM uint32_t TYP10    : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
        __IOM uint32_t TYP11    : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
        __IOM uint32_t TYP12    : 1;            /*!< [12..12] Port n Output Type Selection 12                                  */
      } PC_TYP_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR1;                     /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } AFSR1_b;
    } ;
    
    union {
      __IOM uint32_t PC_AFSR1;                  /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } PC_AFSR1_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR2;                     /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
        __IOM uint32_t AFSR10   : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
        __IOM uint32_t AFSR11   : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
        __IOM uint32_t AFSR12   : 4;            /*!< [19..16] Port n Alternative Function Selection 12                         */
        __IOM uint32_t AFSR13   : 4;            /*!< [23..20] Port n Alternative Function Selection 13                         */
        __IOM uint32_t AFSR14   : 4;            /*!< [27..24] Port n Alternative Function Selection 14                         */
        __IOM uint32_t AFSR15   : 4;            /*!< [31..28] Port n Alternative Function Selection 15                         */
      } AFSR2_b;
    } ;
    
    union {
      __IOM uint32_t PC_AFSR2;                  /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
        __IOM uint32_t AFSR10   : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
        __IOM uint32_t AFSR11   : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
        __IOM uint32_t AFSR12   : 4;            /*!< [19..16] Port n Alternative Function Selection 12                         */
      } PC_AFSR2_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t PUPD;                      /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
        __IOM uint32_t PUPD10   : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
        __IOM uint32_t PUPD11   : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
        __IOM uint32_t PUPD12   : 2;            /*!< [25..24] Port n Pull-Up/Down Resistor Selection 12                        */
        __IOM uint32_t PUPD13   : 2;            /*!< [27..26] Port n Pull-Up/Down Resistor Selection 13                        */
        __IOM uint32_t PUPD14   : 2;            /*!< [29..28] Port n Pull-Up/Down Resistor Selection 14                        */
        __IOM uint32_t PUPD15   : 2;            /*!< [31..30] Port n Pull-Up/Down Resistor Selection 15                        */
      } PUPD_b;
    } ;
    
    union {
      __IOM uint32_t PC_PUPD;                   /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
        __IOM uint32_t PUPD10   : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
        __IOM uint32_t PUPD11   : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
        __IOM uint32_t PUPD12   : 2;            /*!< [25..24] Port n Pull-Up/Down Resistor Selection 12                        */
      } PC_PUPD_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t INDR;                      /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
        __IM  uint32_t INDR10   : 1;            /*!< [10..10] Port n Input Data 10                                             */
        __IM  uint32_t INDR11   : 1;            /*!< [11..11] Port n Input Data 11                                             */
        __IM  uint32_t INDR12   : 1;            /*!< [12..12] Port n Input Data 12                                             */
        __IM  uint32_t INDR13   : 1;            /*!< [13..13] Port n Input Data 13                                             */
        __IM  uint32_t INDR14   : 1;            /*!< [14..14] Port n Input Data 14                                             */
        __IM  uint32_t INDR15   : 1;            /*!< [15..15] Port n Input Data 15                                             */
      } INDR_b;
    } ;
    
    union {
      __IM  uint32_t PC_INDR;                   /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
        __IM  uint32_t INDR10   : 1;            /*!< [10..10] Port n Input Data 10                                             */
        __IM  uint32_t INDR11   : 1;            /*!< [11..11] Port n Input Data 11                                             */
        __IM  uint32_t INDR12   : 1;            /*!< [12..12] Port n Input Data 12                                             */
      } PC_INDR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDR;                     /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
        __IOM uint32_t OUTDR10  : 1;            /*!< [10..10] Port n Output Data 10                                            */
        __IOM uint32_t OUTDR11  : 1;            /*!< [11..11] Port n Output Data 11                                            */
        __IOM uint32_t OUTDR12  : 1;            /*!< [12..12] Port n Output Data 12                                            */
        __IOM uint32_t OUTDR13  : 1;            /*!< [13..13] Port n Output Data 13                                            */
        __IOM uint32_t OUTDR14  : 1;            /*!< [14..14] Port n Output Data 14                                            */
        __IOM uint32_t OUTDR15  : 1;            /*!< [15..15] Port n Output Data 15                                            */
      } OUTDR_b;
    } ;
    
    union {
      __IOM uint32_t PC_OUTDR;                  /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
        __IOM uint32_t OUTDR10  : 1;            /*!< [10..10] Port n Output Data 10                                            */
        __IOM uint32_t OUTDR11  : 1;            /*!< [11..11] Port n Output Data 11                                            */
        __IOM uint32_t OUTDR12  : 1;            /*!< [12..12] Port n Output Data 12                                            */
      } PC_OUTDR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BSR;                       /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
        __OM  uint32_t BSR10    : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
        __OM  uint32_t BSR11    : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
        __OM  uint32_t BSR12    : 1;            /*!< [12..12] Port n Output Bit Set 12                                         */
        __OM  uint32_t BSR13    : 1;            /*!< [13..13] Port n Output Bit Set 13                                         */
        __OM  uint32_t BSR14    : 1;            /*!< [14..14] Port n Output Bit Set 14                                         */
        __OM  uint32_t BSR15    : 1;            /*!< [15..15] Port n Output Bit Set 15                                         */
      } BSR_b;
    } ;
    
    union {
      __OM  uint32_t PC_BSR;                    /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
        __OM  uint32_t BSR10    : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
        __OM  uint32_t BSR11    : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
        __OM  uint32_t BSR12    : 1;            /*!< [12..12] Port n Output Bit Set 12                                         */
      } PC_BSR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BCR;                       /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
        __OM  uint32_t BCR10    : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
        __OM  uint32_t BCR11    : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
        __OM  uint32_t BCR12    : 1;            /*!< [12..12] Port n Output Bit Clear 12                                       */
        __OM  uint32_t BCR13    : 1;            /*!< [13..13] Port n Output Bit Clear 13                                       */
        __OM  uint32_t BCR14    : 1;            /*!< [14..14] Port n Output Bit Clear 14                                       */
        __OM  uint32_t BCR15    : 1;            /*!< [15..15] Port n Output Bit Clear 15                                       */
      } BCR_b;
    } ;
    
    union {
      __OM  uint32_t PC_BCR;                    /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
        __OM  uint32_t BCR10    : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
        __OM  uint32_t BCR11    : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
        __OM  uint32_t BCR12    : 1;            /*!< [12..12] Port n Output Bit Clear 12                                       */
      } PC_BCR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDMSK;                   /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
        __IOM uint32_t OUTDMSK10 : 1;           /*!< [10..10] Port n Output Data Mask 10                                       */
        __IOM uint32_t OUTDMSK11 : 1;           /*!< [11..11] Port n Output Data Mask 11                                       */
        __IOM uint32_t OUTDMSK12 : 1;           /*!< [12..12] Port n Output Data Mask 12                                       */
        __IOM uint32_t OUTDMSK13 : 1;           /*!< [13..13] Port n Output Data Mask 13                                       */
        __IOM uint32_t OUTDMSK14 : 1;           /*!< [14..14] Port n Output Data Mask 14                                       */
        __IOM uint32_t OUTDMSK15 : 1;           /*!< [15..15] Port n Output Data Mask 15                                       */
      } OUTDMSK_b;
    } ;
    
    union {
      __IOM uint32_t PC_OUTDMSK;                /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
        __IOM uint32_t OUTDMSK10 : 1;           /*!< [10..10] Port n Output Data Mask 10                                       */
        __IOM uint32_t OUTDMSK11 : 1;           /*!< [11..11] Port n Output Data Mask 11                                       */
        __IOM uint32_t OUTDMSK12 : 1;           /*!< [12..12] Port n Output Data Mask 12                                       */
      } PC_OUTDMSK_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t DBCR;                      /*!< (@ 0x00000028) Port n Debounce Control Register                           */
      
      struct {
        __IOM uint32_t DBEN0    : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
        __IOM uint32_t DBEN1    : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
        __IOM uint32_t DBEN2    : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
        __IOM uint32_t DBEN3    : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
        __IOM uint32_t DBEN4    : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
        __IOM uint32_t DBEN5    : 1;            /*!< [5..5] Port n Debounce Enable 5                                           */
        __IOM uint32_t DBEN6    : 1;            /*!< [6..6] Port n Debounce Enable 6                                           */
        __IOM uint32_t DBEN7    : 1;            /*!< [7..7] Port n Debounce Enable 7                                           */
        __IOM uint32_t DBEN8    : 1;            /*!< [8..8] Port n Debounce Enable 8                                           */
        __IOM uint32_t DBEN9    : 1;            /*!< [9..9] Port n Debounce Enable 9                                           */
        __IOM uint32_t DBEN10   : 1;            /*!< [10..10] Port n Debounce Enable 10                                        */
        __IOM uint32_t DBEN11   : 1;            /*!< [11..11] Port n Debounce Enable 11                                        */
        __IM  uint32_t          : 4;
        __IOM uint32_t DBCLK    : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
      } DBCR_b;
    } ;
    
    union {
      __IOM uint32_t PC_DBCR;                   /*!< (@ 0x00000028) Port n Debounce Control Register                           */
      
      struct {
        __IOM uint32_t DBEN0    : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
        __IOM uint32_t DBEN1    : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
        __IOM uint32_t DBEN2    : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
        __IOM uint32_t DBEN3    : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
        __IM  uint32_t          : 12;
        __IOM uint32_t DBCLK    : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
      } PC_DBCR_b;
    } ;
  };
} PC_Type;                                      /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            PD                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Port Control Unit & GPIO Port D (PD)
  */

typedef struct {                                /*!< (@ 0x30000300) PD Structure                                               */
  
  union {
    union {
      __IOM uint32_t MOD;                       /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
        __IOM uint32_t MODE10   : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
        __IOM uint32_t MODE11   : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
        __IOM uint32_t MODE12   : 2;            /*!< [25..24] Port n Mode Selection 12                                         */
        __IOM uint32_t MODE13   : 2;            /*!< [27..26] Port n Mode Selection 13                                         */
        __IOM uint32_t MODE14   : 2;            /*!< [29..28] Port n Mode Selection 14                                         */
        __IOM uint32_t MODE15   : 2;            /*!< [31..30] Port n Mode Selection 15                                         */
      } MOD_b;
    } ;
    
    union {
      __IOM uint32_t PD_MOD;                    /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
      } PD_MOD_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t TYP;                       /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
        __IOM uint32_t TYP10    : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
        __IOM uint32_t TYP11    : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
        __IOM uint32_t TYP12    : 1;            /*!< [12..12] Port n Output Type Selection 12                                  */
        __IOM uint32_t TYP13    : 1;            /*!< [13..13] Port n Output Type Selection 13                                  */
        __IOM uint32_t TYP14    : 1;            /*!< [14..14] Port n Output Type Selection 14                                  */
        __IOM uint32_t TYP15    : 1;            /*!< [15..15] Port n Output Type Selection 15                                  */
      } TYP_b;
    } ;
    
    union {
      __IOM uint32_t PD_TYP;                    /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
      } PD_TYP_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR1;                     /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } AFSR1_b;
    } ;
    
    union {
      __IOM uint32_t PD_AFSR1;                  /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } PD_AFSR1_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR2;                     /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
        __IOM uint32_t AFSR10   : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
        __IOM uint32_t AFSR11   : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
        __IOM uint32_t AFSR12   : 4;            /*!< [19..16] Port n Alternative Function Selection 12                         */
        __IOM uint32_t AFSR13   : 4;            /*!< [23..20] Port n Alternative Function Selection 13                         */
        __IOM uint32_t AFSR14   : 4;            /*!< [27..24] Port n Alternative Function Selection 14                         */
        __IOM uint32_t AFSR15   : 4;            /*!< [31..28] Port n Alternative Function Selection 15                         */
      } AFSR2_b;
    } ;
    __IOM uint32_t PD_AFSR2;                    /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
  };
  
  union {
    union {
      __IOM uint32_t PUPD;                      /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
        __IOM uint32_t PUPD10   : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
        __IOM uint32_t PUPD11   : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
        __IOM uint32_t PUPD12   : 2;            /*!< [25..24] Port n Pull-Up/Down Resistor Selection 12                        */
        __IOM uint32_t PUPD13   : 2;            /*!< [27..26] Port n Pull-Up/Down Resistor Selection 13                        */
        __IOM uint32_t PUPD14   : 2;            /*!< [29..28] Port n Pull-Up/Down Resistor Selection 14                        */
        __IOM uint32_t PUPD15   : 2;            /*!< [31..30] Port n Pull-Up/Down Resistor Selection 15                        */
      } PUPD_b;
    } ;
    
    union {
      __IOM uint32_t PD_PUPD;                   /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
      } PD_PUPD_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t INDR;                      /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
        __IM  uint32_t INDR10   : 1;            /*!< [10..10] Port n Input Data 10                                             */
        __IM  uint32_t INDR11   : 1;            /*!< [11..11] Port n Input Data 11                                             */
        __IM  uint32_t INDR12   : 1;            /*!< [12..12] Port n Input Data 12                                             */
        __IM  uint32_t INDR13   : 1;            /*!< [13..13] Port n Input Data 13                                             */
        __IM  uint32_t INDR14   : 1;            /*!< [14..14] Port n Input Data 14                                             */
        __IM  uint32_t INDR15   : 1;            /*!< [15..15] Port n Input Data 15                                             */
      } INDR_b;
    } ;
    
    union {
      __IM  uint32_t PD_INDR;                   /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
      } PD_INDR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDR;                     /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
        __IOM uint32_t OUTDR10  : 1;            /*!< [10..10] Port n Output Data 10                                            */
        __IOM uint32_t OUTDR11  : 1;            /*!< [11..11] Port n Output Data 11                                            */
        __IOM uint32_t OUTDR12  : 1;            /*!< [12..12] Port n Output Data 12                                            */
        __IOM uint32_t OUTDR13  : 1;            /*!< [13..13] Port n Output Data 13                                            */
        __IOM uint32_t OUTDR14  : 1;            /*!< [14..14] Port n Output Data 14                                            */
        __IOM uint32_t OUTDR15  : 1;            /*!< [15..15] Port n Output Data 15                                            */
      } OUTDR_b;
    } ;
    
    union {
      __IOM uint32_t PD_OUTDR;                  /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
      } PD_OUTDR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BSR;                       /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
        __OM  uint32_t BSR10    : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
        __OM  uint32_t BSR11    : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
        __OM  uint32_t BSR12    : 1;            /*!< [12..12] Port n Output Bit Set 12                                         */
        __OM  uint32_t BSR13    : 1;            /*!< [13..13] Port n Output Bit Set 13                                         */
        __OM  uint32_t BSR14    : 1;            /*!< [14..14] Port n Output Bit Set 14                                         */
        __OM  uint32_t BSR15    : 1;            /*!< [15..15] Port n Output Bit Set 15                                         */
      } BSR_b;
    } ;
    
    union {
      __OM  uint32_t PD_BSR;                    /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
      } PD_BSR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BCR;                       /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
        __OM  uint32_t BCR10    : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
        __OM  uint32_t BCR11    : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
        __OM  uint32_t BCR12    : 1;            /*!< [12..12] Port n Output Bit Clear 12                                       */
        __OM  uint32_t BCR13    : 1;            /*!< [13..13] Port n Output Bit Clear 13                                       */
        __OM  uint32_t BCR14    : 1;            /*!< [14..14] Port n Output Bit Clear 14                                       */
        __OM  uint32_t BCR15    : 1;            /*!< [15..15] Port n Output Bit Clear 15                                       */
      } BCR_b;
    } ;
    
    union {
      __OM  uint32_t PD_BCR;                    /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
      } PD_BCR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDMSK;                   /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
        __IOM uint32_t OUTDMSK10 : 1;           /*!< [10..10] Port n Output Data Mask 10                                       */
        __IOM uint32_t OUTDMSK11 : 1;           /*!< [11..11] Port n Output Data Mask 11                                       */
        __IOM uint32_t OUTDMSK12 : 1;           /*!< [12..12] Port n Output Data Mask 12                                       */
        __IOM uint32_t OUTDMSK13 : 1;           /*!< [13..13] Port n Output Data Mask 13                                       */
        __IOM uint32_t OUTDMSK14 : 1;           /*!< [14..14] Port n Output Data Mask 14                                       */
        __IOM uint32_t OUTDMSK15 : 1;           /*!< [15..15] Port n Output Data Mask 15                                       */
      } OUTDMSK_b;
    } ;
    
    union {
      __IOM uint32_t PD_OUTDMSK;                /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
      } PD_OUTDMSK_b;
    } ;
  };
  
  union {
    __IOM uint32_t DBCR;                        /*!< (@ 0x00000028) Port n Debounce Control Register                           */
    
    struct {
      __IOM uint32_t DBEN0      : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
      __IOM uint32_t DBEN1      : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
      __IOM uint32_t DBEN2      : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
      __IOM uint32_t DBEN3      : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
      __IOM uint32_t DBEN4      : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
      __IOM uint32_t DBEN5      : 1;            /*!< [5..5] Port n Debounce Enable 5                                           */
      __IOM uint32_t DBEN6      : 1;            /*!< [6..6] Port n Debounce Enable 6                                           */
      __IOM uint32_t DBEN7      : 1;            /*!< [7..7] Port n Debounce Enable 7                                           */
      __IOM uint32_t DBEN8      : 1;            /*!< [8..8] Port n Debounce Enable 8                                           */
      __IOM uint32_t DBEN9      : 1;            /*!< [9..9] Port n Debounce Enable 9                                           */
      __IOM uint32_t DBEN10     : 1;            /*!< [10..10] Port n Debounce Enable 10                                        */
      __IOM uint32_t DBEN11     : 1;            /*!< [11..11] Port n Debounce Enable 11                                        */
      __IM  uint32_t            : 4;
      __IOM uint32_t DBCLK      : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
    } DBCR_b;
  } ;
} PD_Type;                                      /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            PE                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Port Control Unit & GPIO Port E (PE)
  */

typedef struct {                                /*!< (@ 0x30000400) PE Structure                                               */
  
  union {
    union {
      __IOM uint32_t MOD;                       /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
        __IOM uint32_t MODE10   : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
        __IOM uint32_t MODE11   : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
        __IOM uint32_t MODE12   : 2;            /*!< [25..24] Port n Mode Selection 12                                         */
        __IOM uint32_t MODE13   : 2;            /*!< [27..26] Port n Mode Selection 13                                         */
        __IOM uint32_t MODE14   : 2;            /*!< [29..28] Port n Mode Selection 14                                         */
        __IOM uint32_t MODE15   : 2;            /*!< [31..30] Port n Mode Selection 15                                         */
      } MOD_b;
    } ;
    
    union {
      __IOM uint32_t PE_MOD;                    /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
        __IOM uint32_t MODE10   : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
        __IOM uint32_t MODE11   : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
        __IOM uint32_t MODE12   : 2;            /*!< [25..24] Port n Mode Selection 12                                         */
        __IOM uint32_t MODE13   : 2;            /*!< [27..26] Port n Mode Selection 13                                         */
        __IOM uint32_t MODE14   : 2;            /*!< [29..28] Port n Mode Selection 14                                         */
        __IOM uint32_t MODE15   : 2;            /*!< [31..30] Port n Mode Selection 15                                         */
      } PE_MOD_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t TYP;                       /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
        __IOM uint32_t TYP10    : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
        __IOM uint32_t TYP11    : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
        __IOM uint32_t TYP12    : 1;            /*!< [12..12] Port n Output Type Selection 12                                  */
        __IOM uint32_t TYP13    : 1;            /*!< [13..13] Port n Output Type Selection 13                                  */
        __IOM uint32_t TYP14    : 1;            /*!< [14..14] Port n Output Type Selection 14                                  */
        __IOM uint32_t TYP15    : 1;            /*!< [15..15] Port n Output Type Selection 15                                  */
      } TYP_b;
    } ;
    
    union {
      __IOM uint32_t PE_TYP;                    /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
        __IOM uint32_t TYP10    : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
        __IOM uint32_t TYP11    : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
        __IOM uint32_t TYP12    : 1;            /*!< [12..12] Port n Output Type Selection 12                                  */
        __IOM uint32_t TYP13    : 1;            /*!< [13..13] Port n Output Type Selection 13                                  */
        __IOM uint32_t TYP14    : 1;            /*!< [14..14] Port n Output Type Selection 14                                  */
        __IOM uint32_t TYP15    : 1;            /*!< [15..15] Port n Output Type Selection 15                                  */
      } PE_TYP_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR1;                     /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } AFSR1_b;
    } ;
    
    union {
      __IOM uint32_t PE_AFSR1;                  /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } PE_AFSR1_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR2;                     /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
        __IOM uint32_t AFSR10   : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
        __IOM uint32_t AFSR11   : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
        __IOM uint32_t AFSR12   : 4;            /*!< [19..16] Port n Alternative Function Selection 12                         */
        __IOM uint32_t AFSR13   : 4;            /*!< [23..20] Port n Alternative Function Selection 13                         */
        __IOM uint32_t AFSR14   : 4;            /*!< [27..24] Port n Alternative Function Selection 14                         */
        __IOM uint32_t AFSR15   : 4;            /*!< [31..28] Port n Alternative Function Selection 15                         */
      } AFSR2_b;
    } ;
    
    union {
      __IOM uint32_t PE_AFSR2;                  /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
        __IOM uint32_t AFSR10   : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
        __IOM uint32_t AFSR11   : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
        __IOM uint32_t AFSR12   : 4;            /*!< [19..16] Port n Alternative Function Selection 12                         */
        __IOM uint32_t AFSR13   : 4;            /*!< [23..20] Port n Alternative Function Selection 13                         */
        __IOM uint32_t AFSR14   : 4;            /*!< [27..24] Port n Alternative Function Selection 14                         */
        __IOM uint32_t AFSR15   : 4;            /*!< [31..28] Port n Alternative Function Selection 15                         */
      } PE_AFSR2_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t PUPD;                      /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
        __IOM uint32_t PUPD10   : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
        __IOM uint32_t PUPD11   : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
        __IOM uint32_t PUPD12   : 2;            /*!< [25..24] Port n Pull-Up/Down Resistor Selection 12                        */
        __IOM uint32_t PUPD13   : 2;            /*!< [27..26] Port n Pull-Up/Down Resistor Selection 13                        */
        __IOM uint32_t PUPD14   : 2;            /*!< [29..28] Port n Pull-Up/Down Resistor Selection 14                        */
        __IOM uint32_t PUPD15   : 2;            /*!< [31..30] Port n Pull-Up/Down Resistor Selection 15                        */
      } PUPD_b;
    } ;
    
    union {
      __IOM uint32_t PE_PUPD;                   /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
        __IOM uint32_t PUPD10   : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
        __IOM uint32_t PUPD11   : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
        __IOM uint32_t PUPD12   : 2;            /*!< [25..24] Port n Pull-Up/Down Resistor Selection 12                        */
        __IOM uint32_t PUPD13   : 2;            /*!< [27..26] Port n Pull-Up/Down Resistor Selection 13                        */
        __IOM uint32_t PUPD14   : 2;            /*!< [29..28] Port n Pull-Up/Down Resistor Selection 14                        */
        __IOM uint32_t PUPD15   : 2;            /*!< [31..30] Port n Pull-Up/Down Resistor Selection 15                        */
      } PE_PUPD_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t INDR;                      /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
        __IM  uint32_t INDR10   : 1;            /*!< [10..10] Port n Input Data 10                                             */
        __IM  uint32_t INDR11   : 1;            /*!< [11..11] Port n Input Data 11                                             */
        __IM  uint32_t INDR12   : 1;            /*!< [12..12] Port n Input Data 12                                             */
        __IM  uint32_t INDR13   : 1;            /*!< [13..13] Port n Input Data 13                                             */
        __IM  uint32_t INDR14   : 1;            /*!< [14..14] Port n Input Data 14                                             */
        __IM  uint32_t INDR15   : 1;            /*!< [15..15] Port n Input Data 15                                             */
      } INDR_b;
    } ;
    
    union {
      __IM  uint32_t PE_INDR;                   /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
        __IM  uint32_t INDR10   : 1;            /*!< [10..10] Port n Input Data 10                                             */
        __IM  uint32_t INDR11   : 1;            /*!< [11..11] Port n Input Data 11                                             */
        __IM  uint32_t INDR12   : 1;            /*!< [12..12] Port n Input Data 12                                             */
        __IM  uint32_t INDR13   : 1;            /*!< [13..13] Port n Input Data 13                                             */
        __IM  uint32_t INDR14   : 1;            /*!< [14..14] Port n Input Data 14                                             */
        __IM  uint32_t INDR15   : 1;            /*!< [15..15] Port n Input Data 15                                             */
      } PE_INDR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDR;                     /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
        __IOM uint32_t OUTDR10  : 1;            /*!< [10..10] Port n Output Data 10                                            */
        __IOM uint32_t OUTDR11  : 1;            /*!< [11..11] Port n Output Data 11                                            */
        __IOM uint32_t OUTDR12  : 1;            /*!< [12..12] Port n Output Data 12                                            */
        __IOM uint32_t OUTDR13  : 1;            /*!< [13..13] Port n Output Data 13                                            */
        __IOM uint32_t OUTDR14  : 1;            /*!< [14..14] Port n Output Data 14                                            */
        __IOM uint32_t OUTDR15  : 1;            /*!< [15..15] Port n Output Data 15                                            */
      } OUTDR_b;
    } ;
    
    union {
      __IOM uint32_t PE_OUTDR;                  /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
        __IOM uint32_t OUTDR10  : 1;            /*!< [10..10] Port n Output Data 10                                            */
        __IOM uint32_t OUTDR11  : 1;            /*!< [11..11] Port n Output Data 11                                            */
        __IOM uint32_t OUTDR12  : 1;            /*!< [12..12] Port n Output Data 12                                            */
        __IOM uint32_t OUTDR13  : 1;            /*!< [13..13] Port n Output Data 13                                            */
        __IOM uint32_t OUTDR14  : 1;            /*!< [14..14] Port n Output Data 14                                            */
        __IOM uint32_t OUTDR15  : 1;            /*!< [15..15] Port n Output Data 15                                            */
      } PE_OUTDR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BSR;                       /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
        __OM  uint32_t BSR10    : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
        __OM  uint32_t BSR11    : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
        __OM  uint32_t BSR12    : 1;            /*!< [12..12] Port n Output Bit Set 12                                         */
        __OM  uint32_t BSR13    : 1;            /*!< [13..13] Port n Output Bit Set 13                                         */
        __OM  uint32_t BSR14    : 1;            /*!< [14..14] Port n Output Bit Set 14                                         */
        __OM  uint32_t BSR15    : 1;            /*!< [15..15] Port n Output Bit Set 15                                         */
      } BSR_b;
    } ;
    
    union {
      __OM  uint32_t PE_BSR;                    /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
        __OM  uint32_t BSR10    : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
        __OM  uint32_t BSR11    : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
        __OM  uint32_t BSR12    : 1;            /*!< [12..12] Port n Output Bit Set 12                                         */
        __OM  uint32_t BSR13    : 1;            /*!< [13..13] Port n Output Bit Set 13                                         */
        __OM  uint32_t BSR14    : 1;            /*!< [14..14] Port n Output Bit Set 14                                         */
        __OM  uint32_t BSR15    : 1;            /*!< [15..15] Port n Output Bit Set 15                                         */
      } PE_BSR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BCR;                       /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
        __OM  uint32_t BCR10    : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
        __OM  uint32_t BCR11    : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
        __OM  uint32_t BCR12    : 1;            /*!< [12..12] Port n Output Bit Clear 12                                       */
        __OM  uint32_t BCR13    : 1;            /*!< [13..13] Port n Output Bit Clear 13                                       */
        __OM  uint32_t BCR14    : 1;            /*!< [14..14] Port n Output Bit Clear 14                                       */
        __OM  uint32_t BCR15    : 1;            /*!< [15..15] Port n Output Bit Clear 15                                       */
      } BCR_b;
    } ;
    
    union {
      __OM  uint32_t PE_BCR;                    /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
        __OM  uint32_t BCR10    : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
        __OM  uint32_t BCR11    : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
        __OM  uint32_t BCR12    : 1;            /*!< [12..12] Port n Output Bit Clear 12                                       */
        __OM  uint32_t BCR13    : 1;            /*!< [13..13] Port n Output Bit Clear 13                                       */
        __OM  uint32_t BCR14    : 1;            /*!< [14..14] Port n Output Bit Clear 14                                       */
        __OM  uint32_t BCR15    : 1;            /*!< [15..15] Port n Output Bit Clear 15                                       */
      } PE_BCR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDMSK;                   /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
        __IOM uint32_t OUTDMSK10 : 1;           /*!< [10..10] Port n Output Data Mask 10                                       */
        __IOM uint32_t OUTDMSK11 : 1;           /*!< [11..11] Port n Output Data Mask 11                                       */
        __IOM uint32_t OUTDMSK12 : 1;           /*!< [12..12] Port n Output Data Mask 12                                       */
        __IOM uint32_t OUTDMSK13 : 1;           /*!< [13..13] Port n Output Data Mask 13                                       */
        __IOM uint32_t OUTDMSK14 : 1;           /*!< [14..14] Port n Output Data Mask 14                                       */
        __IOM uint32_t OUTDMSK15 : 1;           /*!< [15..15] Port n Output Data Mask 15                                       */
      } OUTDMSK_b;
    } ;
    
    union {
      __IOM uint32_t PE_OUTDMSK;                /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
        __IOM uint32_t OUTDMSK10 : 1;           /*!< [10..10] Port n Output Data Mask 10                                       */
        __IOM uint32_t OUTDMSK11 : 1;           /*!< [11..11] Port n Output Data Mask 11                                       */
        __IOM uint32_t OUTDMSK12 : 1;           /*!< [12..12] Port n Output Data Mask 12                                       */
        __IOM uint32_t OUTDMSK13 : 1;           /*!< [13..13] Port n Output Data Mask 13                                       */
        __IOM uint32_t OUTDMSK14 : 1;           /*!< [14..14] Port n Output Data Mask 14                                       */
        __IOM uint32_t OUTDMSK15 : 1;           /*!< [15..15] Port n Output Data Mask 15                                       */
      } PE_OUTDMSK_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t DBCR;                      /*!< (@ 0x00000028) Port n Debounce Control Register                           */
      
      struct {
        __IOM uint32_t DBEN0    : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
        __IOM uint32_t DBEN1    : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
        __IOM uint32_t DBEN2    : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
        __IOM uint32_t DBEN3    : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
        __IOM uint32_t DBEN4    : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
        __IOM uint32_t DBEN5    : 1;            /*!< [5..5] Port n Debounce Enable 5                                           */
        __IOM uint32_t DBEN6    : 1;            /*!< [6..6] Port n Debounce Enable 6                                           */
        __IOM uint32_t DBEN7    : 1;            /*!< [7..7] Port n Debounce Enable 7                                           */
        __IOM uint32_t DBEN8    : 1;            /*!< [8..8] Port n Debounce Enable 8                                           */
        __IOM uint32_t DBEN9    : 1;            /*!< [9..9] Port n Debounce Enable 9                                           */
        __IOM uint32_t DBEN10   : 1;            /*!< [10..10] Port n Debounce Enable 10                                        */
        __IOM uint32_t DBEN11   : 1;            /*!< [11..11] Port n Debounce Enable 11                                        */
        __IM  uint32_t          : 4;
        __IOM uint32_t DBCLK    : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
      } DBCR_b;
    } ;
    
    union {
      __IOM uint32_t PE_DBCR;                   /*!< (@ 0x00000028) Port n Debounce Control Register                           */
      
      struct {
        __IOM uint32_t DBEN0    : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
        __IOM uint32_t DBEN1    : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
        __IOM uint32_t DBEN2    : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
        __IOM uint32_t DBEN3    : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
        __IM  uint32_t          : 12;
        __IOM uint32_t DBCLK    : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
      } PE_DBCR_b;
    } ;
  };
} PE_Type;                                      /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            PF                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Port Control Unit & GPIO Port F (PF)
  */

typedef struct {                                /*!< (@ 0x30000500) PF Structure                                               */
  
  union {
    union {
      __IOM uint32_t MOD;                       /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
        __IOM uint32_t MODE10   : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
        __IOM uint32_t MODE11   : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
        __IOM uint32_t MODE12   : 2;            /*!< [25..24] Port n Mode Selection 12                                         */
        __IOM uint32_t MODE13   : 2;            /*!< [27..26] Port n Mode Selection 13                                         */
        __IOM uint32_t MODE14   : 2;            /*!< [29..28] Port n Mode Selection 14                                         */
        __IOM uint32_t MODE15   : 2;            /*!< [31..30] Port n Mode Selection 15                                         */
      } MOD_b;
    } ;
    
    union {
      __IOM uint32_t PF_MOD;                    /*!< (@ 0x00000000) Port n Mode Register                                       */
      
      struct {
        __IOM uint32_t MODE0    : 2;            /*!< [1..0] Port n Mode Selection 0                                            */
        __IOM uint32_t MODE1    : 2;            /*!< [3..2] Port n Mode Selection 1                                            */
        __IOM uint32_t MODE2    : 2;            /*!< [5..4] Port n Mode Selection 2                                            */
        __IOM uint32_t MODE3    : 2;            /*!< [7..6] Port n Mode Selection 3                                            */
        __IOM uint32_t MODE4    : 2;            /*!< [9..8] Port n Mode Selection 4                                            */
        __IOM uint32_t MODE5    : 2;            /*!< [11..10] Port n Mode Selection 5                                          */
        __IOM uint32_t MODE6    : 2;            /*!< [13..12] Port n Mode Selection 6                                          */
        __IOM uint32_t MODE7    : 2;            /*!< [15..14] Port n Mode Selection 7                                          */
        __IOM uint32_t MODE8    : 2;            /*!< [17..16] Port n Mode Selection 8                                          */
        __IOM uint32_t MODE9    : 2;            /*!< [19..18] Port n Mode Selection 9                                          */
        __IOM uint32_t MODE10   : 2;            /*!< [21..20] Port n Mode Selection 10                                         */
        __IOM uint32_t MODE11   : 2;            /*!< [23..22] Port n Mode Selection 11                                         */
      } PF_MOD_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t TYP;                       /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
        __IOM uint32_t TYP10    : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
        __IOM uint32_t TYP11    : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
        __IOM uint32_t TYP12    : 1;            /*!< [12..12] Port n Output Type Selection 12                                  */
        __IOM uint32_t TYP13    : 1;            /*!< [13..13] Port n Output Type Selection 13                                  */
        __IOM uint32_t TYP14    : 1;            /*!< [14..14] Port n Output Type Selection 14                                  */
        __IOM uint32_t TYP15    : 1;            /*!< [15..15] Port n Output Type Selection 15                                  */
      } TYP_b;
    } ;
    
    union {
      __IOM uint32_t PF_TYP;                    /*!< (@ 0x00000004) Port n Output Type Selection Register                      */
      
      struct {
        __IOM uint32_t TYP0     : 1;            /*!< [0..0] Port n Output Type Selection 0                                     */
        __IOM uint32_t TYP1     : 1;            /*!< [1..1] Port n Output Type Selection 1                                     */
        __IOM uint32_t TYP2     : 1;            /*!< [2..2] Port n Output Type Selection 2                                     */
        __IOM uint32_t TYP3     : 1;            /*!< [3..3] Port n Output Type Selection 3                                     */
        __IOM uint32_t TYP4     : 1;            /*!< [4..4] Port n Output Type Selection 4                                     */
        __IOM uint32_t TYP5     : 1;            /*!< [5..5] Port n Output Type Selection 5                                     */
        __IOM uint32_t TYP6     : 1;            /*!< [6..6] Port n Output Type Selection 6                                     */
        __IOM uint32_t TYP7     : 1;            /*!< [7..7] Port n Output Type Selection 7                                     */
        __IOM uint32_t TYP8     : 1;            /*!< [8..8] Port n Output Type Selection 8                                     */
        __IOM uint32_t TYP9     : 1;            /*!< [9..9] Port n Output Type Selection 9                                     */
        __IOM uint32_t TYP10    : 1;            /*!< [10..10] Port n Output Type Selection 10                                  */
        __IOM uint32_t TYP11    : 1;            /*!< [11..11] Port n Output Type Selection 11                                  */
      } PF_TYP_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR1;                     /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } AFSR1_b;
    } ;
    
    union {
      __IOM uint32_t PF_AFSR1;                  /*!< (@ 0x00000008) Port n Alternative Function Selection Register
                                                                    1                                                          */
      
      struct {
        __IOM uint32_t AFSR0    : 4;            /*!< [3..0] Port n Alternative Function Selection 0                            */
        __IOM uint32_t AFSR1    : 4;            /*!< [7..4] Port n Alternative Function Selection 1                            */
        __IOM uint32_t AFSR2    : 4;            /*!< [11..8] Port n Alternative Function Selection 2                           */
        __IOM uint32_t AFSR3    : 4;            /*!< [15..12] Port n Alternative Function Selection 3                          */
        __IOM uint32_t AFSR4    : 4;            /*!< [19..16] Port n Alternative Function Selection 4                          */
        __IOM uint32_t AFSR5    : 4;            /*!< [23..20] Port n Alternative Function Selection 5                          */
        __IOM uint32_t AFSR6    : 4;            /*!< [27..24] Port n Alternative Function Selection 6                          */
        __IOM uint32_t AFSR7    : 4;            /*!< [31..28] Port n Alternative Function Selection 7                          */
      } PF_AFSR1_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t AFSR2;                     /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
        __IOM uint32_t AFSR10   : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
        __IOM uint32_t AFSR11   : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
        __IOM uint32_t AFSR12   : 4;            /*!< [19..16] Port n Alternative Function Selection 12                         */
        __IOM uint32_t AFSR13   : 4;            /*!< [23..20] Port n Alternative Function Selection 13                         */
        __IOM uint32_t AFSR14   : 4;            /*!< [27..24] Port n Alternative Function Selection 14                         */
        __IOM uint32_t AFSR15   : 4;            /*!< [31..28] Port n Alternative Function Selection 15                         */
      } AFSR2_b;
    } ;
    
    union {
      __IOM uint32_t PF_AFSR2;                  /*!< (@ 0x0000000C) Port n Alternative Function Selection Register
                                                                    2                                                          */
      
      struct {
        __IOM uint32_t AFSR8    : 4;            /*!< [3..0] Port n Alternative Function Selection 8                            */
        __IOM uint32_t AFSR9    : 4;            /*!< [7..4] Port n Alternative Function Selection 9                            */
        __IOM uint32_t AFSR10   : 4;            /*!< [11..8] Port n Alternative Function Selection 10                          */
        __IOM uint32_t AFSR11   : 4;            /*!< [15..12] Port n Alternative Function Selection 11                         */
      } PF_AFSR2_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t PUPD;                      /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
        __IOM uint32_t PUPD10   : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
        __IOM uint32_t PUPD11   : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
        __IOM uint32_t PUPD12   : 2;            /*!< [25..24] Port n Pull-Up/Down Resistor Selection 12                        */
        __IOM uint32_t PUPD13   : 2;            /*!< [27..26] Port n Pull-Up/Down Resistor Selection 13                        */
        __IOM uint32_t PUPD14   : 2;            /*!< [29..28] Port n Pull-Up/Down Resistor Selection 14                        */
        __IOM uint32_t PUPD15   : 2;            /*!< [31..30] Port n Pull-Up/Down Resistor Selection 15                        */
      } PUPD_b;
    } ;
    
    union {
      __IOM uint32_t PF_PUPD;                   /*!< (@ 0x00000010) Port n Pull-Up/Down Resistor Selection Register            */
      
      struct {
        __IOM uint32_t PUPD0    : 2;            /*!< [1..0] Port n Pull-Up/Down Resistor Selection 0                           */
        __IOM uint32_t PUPD1    : 2;            /*!< [3..2] Port n Pull-Up/Down Resistor Selection 1                           */
        __IOM uint32_t PUPD2    : 2;            /*!< [5..4] Port n Pull-Up/Down Resistor Selection 2                           */
        __IOM uint32_t PUPD3    : 2;            /*!< [7..6] Port n Pull-Up/Down Resistor Selection 3                           */
        __IOM uint32_t PUPD4    : 2;            /*!< [9..8] Port n Pull-Up/Down Resistor Selection 4                           */
        __IOM uint32_t PUPD5    : 2;            /*!< [11..10] Port n Pull-Up/Down Resistor Selection 5                         */
        __IOM uint32_t PUPD6    : 2;            /*!< [13..12] Port n Pull-Up/Down Resistor Selection 6                         */
        __IOM uint32_t PUPD7    : 2;            /*!< [15..14] Port n Pull-Up/Down Resistor Selection 7                         */
        __IOM uint32_t PUPD8    : 2;            /*!< [17..16] Port n Pull-Up/Down Resistor Selection 8                         */
        __IOM uint32_t PUPD9    : 2;            /*!< [19..18] Port n Pull-Up/Down Resistor Selection 9                         */
        __IOM uint32_t PUPD10   : 2;            /*!< [21..20] Port n Pull-Up/Down Resistor Selection 10                        */
        __IOM uint32_t PUPD11   : 2;            /*!< [23..22] Port n Pull-Up/Down Resistor Selection 11                        */
      } PF_PUPD_b;
    } ;
  };
  
  union {
    union {
      __IM  uint32_t INDR;                      /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
        __IM  uint32_t INDR10   : 1;            /*!< [10..10] Port n Input Data 10                                             */
        __IM  uint32_t INDR11   : 1;            /*!< [11..11] Port n Input Data 11                                             */
        __IM  uint32_t INDR12   : 1;            /*!< [12..12] Port n Input Data 12                                             */
        __IM  uint32_t INDR13   : 1;            /*!< [13..13] Port n Input Data 13                                             */
        __IM  uint32_t INDR14   : 1;            /*!< [14..14] Port n Input Data 14                                             */
        __IM  uint32_t INDR15   : 1;            /*!< [15..15] Port n Input Data 15                                             */
      } INDR_b;
    } ;
    
    union {
      __IM  uint32_t PF_INDR;                   /*!< (@ 0x00000014) Port n Input Data Register                                 */
      
      struct {
        __IM  uint32_t INDR0    : 1;            /*!< [0..0] Port n Input Data 0                                                */
        __IM  uint32_t INDR1    : 1;            /*!< [1..1] Port n Input Data 1                                                */
        __IM  uint32_t INDR2    : 1;            /*!< [2..2] Port n Input Data 2                                                */
        __IM  uint32_t INDR3    : 1;            /*!< [3..3] Port n Input Data 3                                                */
        __IM  uint32_t INDR4    : 1;            /*!< [4..4] Port n Input Data 4                                                */
        __IM  uint32_t INDR5    : 1;            /*!< [5..5] Port n Input Data 5                                                */
        __IM  uint32_t INDR6    : 1;            /*!< [6..6] Port n Input Data 6                                                */
        __IM  uint32_t INDR7    : 1;            /*!< [7..7] Port n Input Data 7                                                */
        __IM  uint32_t INDR8    : 1;            /*!< [8..8] Port n Input Data 8                                                */
        __IM  uint32_t INDR9    : 1;            /*!< [9..9] Port n Input Data 9                                                */
        __IM  uint32_t INDR10   : 1;            /*!< [10..10] Port n Input Data 10                                             */
        __IM  uint32_t INDR11   : 1;            /*!< [11..11] Port n Input Data 11                                             */
      } PF_INDR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDR;                     /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
        __IOM uint32_t OUTDR10  : 1;            /*!< [10..10] Port n Output Data 10                                            */
        __IOM uint32_t OUTDR11  : 1;            /*!< [11..11] Port n Output Data 11                                            */
        __IOM uint32_t OUTDR12  : 1;            /*!< [12..12] Port n Output Data 12                                            */
        __IOM uint32_t OUTDR13  : 1;            /*!< [13..13] Port n Output Data 13                                            */
        __IOM uint32_t OUTDR14  : 1;            /*!< [14..14] Port n Output Data 14                                            */
        __IOM uint32_t OUTDR15  : 1;            /*!< [15..15] Port n Output Data 15                                            */
      } OUTDR_b;
    } ;
    
    union {
      __IOM uint32_t PF_OUTDR;                  /*!< (@ 0x00000018) Port n Output Data Register                                */
      
      struct {
        __IOM uint32_t OUTDR0   : 1;            /*!< [0..0] Port n Output Data 0                                               */
        __IOM uint32_t OUTDR1   : 1;            /*!< [1..1] Port n Output Data 1                                               */
        __IOM uint32_t OUTDR2   : 1;            /*!< [2..2] Port n Output Data 2                                               */
        __IOM uint32_t OUTDR3   : 1;            /*!< [3..3] Port n Output Data 3                                               */
        __IOM uint32_t OUTDR4   : 1;            /*!< [4..4] Port n Output Data 4                                               */
        __IOM uint32_t OUTDR5   : 1;            /*!< [5..5] Port n Output Data 5                                               */
        __IOM uint32_t OUTDR6   : 1;            /*!< [6..6] Port n Output Data 6                                               */
        __IOM uint32_t OUTDR7   : 1;            /*!< [7..7] Port n Output Data 7                                               */
        __IOM uint32_t OUTDR8   : 1;            /*!< [8..8] Port n Output Data 8                                               */
        __IOM uint32_t OUTDR9   : 1;            /*!< [9..9] Port n Output Data 9                                               */
        __IOM uint32_t OUTDR10  : 1;            /*!< [10..10] Port n Output Data 10                                            */
        __IOM uint32_t OUTDR11  : 1;            /*!< [11..11] Port n Output Data 11                                            */
      } PF_OUTDR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BSR;                       /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
        __OM  uint32_t BSR10    : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
        __OM  uint32_t BSR11    : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
        __OM  uint32_t BSR12    : 1;            /*!< [12..12] Port n Output Bit Set 12                                         */
        __OM  uint32_t BSR13    : 1;            /*!< [13..13] Port n Output Bit Set 13                                         */
        __OM  uint32_t BSR14    : 1;            /*!< [14..14] Port n Output Bit Set 14                                         */
        __OM  uint32_t BSR15    : 1;            /*!< [15..15] Port n Output Bit Set 15                                         */
      } BSR_b;
    } ;
    
    union {
      __OM  uint32_t PF_BSR;                    /*!< (@ 0x0000001C) Port n Output Bit Set Register                             */
      
      struct {
        __OM  uint32_t BSR0     : 1;            /*!< [0..0] Port n Output Bit Set 0                                            */
        __OM  uint32_t BSR1     : 1;            /*!< [1..1] Port n Output Bit Set 1                                            */
        __OM  uint32_t BSR2     : 1;            /*!< [2..2] Port n Output Bit Set 2                                            */
        __OM  uint32_t BSR3     : 1;            /*!< [3..3] Port n Output Bit Set 3                                            */
        __OM  uint32_t BSR4     : 1;            /*!< [4..4] Port n Output Bit Set 4                                            */
        __OM  uint32_t BSR5     : 1;            /*!< [5..5] Port n Output Bit Set 5                                            */
        __OM  uint32_t BSR6     : 1;            /*!< [6..6] Port n Output Bit Set 6                                            */
        __OM  uint32_t BSR7     : 1;            /*!< [7..7] Port n Output Bit Set 7                                            */
        __OM  uint32_t BSR8     : 1;            /*!< [8..8] Port n Output Bit Set 8                                            */
        __OM  uint32_t BSR9     : 1;            /*!< [9..9] Port n Output Bit Set 9                                            */
        __OM  uint32_t BSR10    : 1;            /*!< [10..10] Port n Output Bit Set 10                                         */
        __OM  uint32_t BSR11    : 1;            /*!< [11..11] Port n Output Bit Set 11                                         */
      } PF_BSR_b;
    } ;
  };
  
  union {
    union {
      __OM  uint32_t BCR;                       /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
        __OM  uint32_t BCR10    : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
        __OM  uint32_t BCR11    : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
        __OM  uint32_t BCR12    : 1;            /*!< [12..12] Port n Output Bit Clear 12                                       */
        __OM  uint32_t BCR13    : 1;            /*!< [13..13] Port n Output Bit Clear 13                                       */
        __OM  uint32_t BCR14    : 1;            /*!< [14..14] Port n Output Bit Clear 14                                       */
        __OM  uint32_t BCR15    : 1;            /*!< [15..15] Port n Output Bit Clear 15                                       */
      } BCR_b;
    } ;
    
    union {
      __OM  uint32_t PF_BCR;                    /*!< (@ 0x00000020) Port n Output Bit Clear Register                           */
      
      struct {
        __OM  uint32_t BCR0     : 1;            /*!< [0..0] Port n Output Bit Clear 0                                          */
        __OM  uint32_t BCR1     : 1;            /*!< [1..1] Port n Output Bit Clear 1                                          */
        __OM  uint32_t BCR2     : 1;            /*!< [2..2] Port n Output Bit Clear 2                                          */
        __OM  uint32_t BCR3     : 1;            /*!< [3..3] Port n Output Bit Clear 3                                          */
        __OM  uint32_t BCR4     : 1;            /*!< [4..4] Port n Output Bit Clear 4                                          */
        __OM  uint32_t BCR5     : 1;            /*!< [5..5] Port n Output Bit Clear 5                                          */
        __OM  uint32_t BCR6     : 1;            /*!< [6..6] Port n Output Bit Clear 6                                          */
        __OM  uint32_t BCR7     : 1;            /*!< [7..7] Port n Output Bit Clear 7                                          */
        __OM  uint32_t BCR8     : 1;            /*!< [8..8] Port n Output Bit Clear 8                                          */
        __OM  uint32_t BCR9     : 1;            /*!< [9..9] Port n Output Bit Clear 9                                          */
        __OM  uint32_t BCR10    : 1;            /*!< [10..10] Port n Output Bit Clear 10                                       */
        __OM  uint32_t BCR11    : 1;            /*!< [11..11] Port n Output Bit Clear 11                                       */
      } PF_BCR_b;
    } ;
  };
  
  union {
    union {
      __IOM uint32_t OUTDMSK;                   /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
        __IOM uint32_t OUTDMSK10 : 1;           /*!< [10..10] Port n Output Data Mask 10                                       */
        __IOM uint32_t OUTDMSK11 : 1;           /*!< [11..11] Port n Output Data Mask 11                                       */
        __IOM uint32_t OUTDMSK12 : 1;           /*!< [12..12] Port n Output Data Mask 12                                       */
        __IOM uint32_t OUTDMSK13 : 1;           /*!< [13..13] Port n Output Data Mask 13                                       */
        __IOM uint32_t OUTDMSK14 : 1;           /*!< [14..14] Port n Output Data Mask 14                                       */
        __IOM uint32_t OUTDMSK15 : 1;           /*!< [15..15] Port n Output Data Mask 15                                       */
      } OUTDMSK_b;
    } ;
    
    union {
      __IOM uint32_t PF_OUTDMSK;                /*!< (@ 0x00000024) Port n Output Data Mask Register                           */
      
      struct {
        __IOM uint32_t OUTDMSK0 : 1;            /*!< [0..0] Port n Output Data Mask 0                                          */
        __IOM uint32_t OUTDMSK1 : 1;            /*!< [1..1] Port n Output Data Mask 1                                          */
        __IOM uint32_t OUTDMSK2 : 1;            /*!< [2..2] Port n Output Data Mask 2                                          */
        __IOM uint32_t OUTDMSK3 : 1;            /*!< [3..3] Port n Output Data Mask 3                                          */
        __IOM uint32_t OUTDMSK4 : 1;            /*!< [4..4] Port n Output Data Mask 4                                          */
        __IOM uint32_t OUTDMSK5 : 1;            /*!< [5..5] Port n Output Data Mask 5                                          */
        __IOM uint32_t OUTDMSK6 : 1;            /*!< [6..6] Port n Output Data Mask 6                                          */
        __IOM uint32_t OUTDMSK7 : 1;            /*!< [7..7] Port n Output Data Mask 7                                          */
        __IOM uint32_t OUTDMSK8 : 1;            /*!< [8..8] Port n Output Data Mask 8                                          */
        __IOM uint32_t OUTDMSK9 : 1;            /*!< [9..9] Port n Output Data Mask 9                                          */
        __IOM uint32_t OUTDMSK10 : 1;           /*!< [10..10] Port n Output Data Mask 10                                       */
        __IOM uint32_t OUTDMSK11 : 1;           /*!< [11..11] Port n Output Data Mask 11                                       */
      } PF_OUTDMSK_b;
    } ;
  };
  
  union {
    __IOM uint32_t DBCR;                        /*!< (@ 0x00000028) Port n Debounce Control Register                           */
    
    struct {
      __IOM uint32_t DBEN0      : 1;            /*!< [0..0] Port n Debounce Enable 0                                           */
      __IOM uint32_t DBEN1      : 1;            /*!< [1..1] Port n Debounce Enable 1                                           */
      __IOM uint32_t DBEN2      : 1;            /*!< [2..2] Port n Debounce Enable 2                                           */
      __IOM uint32_t DBEN3      : 1;            /*!< [3..3] Port n Debounce Enable 3                                           */
      __IOM uint32_t DBEN4      : 1;            /*!< [4..4] Port n Debounce Enable 4                                           */
      __IOM uint32_t DBEN5      : 1;            /*!< [5..5] Port n Debounce Enable 5                                           */
      __IOM uint32_t DBEN6      : 1;            /*!< [6..6] Port n Debounce Enable 6                                           */
      __IOM uint32_t DBEN7      : 1;            /*!< [7..7] Port n Debounce Enable 7                                           */
      __IOM uint32_t DBEN8      : 1;            /*!< [8..8] Port n Debounce Enable 8                                           */
      __IOM uint32_t DBEN9      : 1;            /*!< [9..9] Port n Debounce Enable 9                                           */
      __IOM uint32_t DBEN10     : 1;            /*!< [10..10] Port n Debounce Enable 10                                        */
      __IOM uint32_t DBEN11     : 1;            /*!< [11..11] Port n Debounce Enable 11                                        */
      __IM  uint32_t            : 4;
      __IOM uint32_t DBCLK      : 3;            /*!< [18..16] Port n Debounce Filter Sampling Clock Selection                  */
    } DBCR_b;
  } ;
} PF_Type;                                      /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                            FMC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Flash Memory Controller (FMC)
  */

typedef struct {                                /*!< (@ 0x40001B00) FMC Structure                                              */
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000000) Flash Memory Address Register                              */
    
    struct {
      __IOM uint32_t ADDR       : 32;           /*!< [31..0] Flash Memory Address Pointer                                      */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t IDR1;                        /*!< (@ 0x00000004) Flash Memory Identification Register 1                     */
    
    struct {
      __IOM uint32_t ID1        : 32;           /*!< [31..0] Flash Memory Identification 1                                     */
    } IDR1_b;
  } ;
  
  union {
    __IOM uint32_t IDR2;                        /*!< (@ 0x00000008) Flash Memory Identification Register 2                     */
    
    struct {
      __IOM uint32_t ID2        : 32;           /*!< [31..0] Flash Memory Identification 2                                     */
    } IDR2_b;
  } ;
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x0000000C) Flash Memory Control Register                              */
    
    struct {
      __IOM uint32_t FMOD       : 4;            /*!< [3..0] Flash Memory Operation Mode Selection                              */
      __IM  uint32_t            : 3;
      __IM  uint32_t FMBUSY     : 1;            /*!< [7..7] Flash Memory Operation Mode Busy                                   */
      __IOM uint32_t FMKEY      : 8;            /*!< [15..8] Flash Memory Operation Area Selection                             */
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0x6c93)                                */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t BCR;                         /*!< (@ 0x00000010) Flash Memory Configure Area Bulk Erase Control
                                                                    Register                                                   */
    
    struct {
      __IOM uint32_t CNF1BEN    : 4;            /*!< [3..0] Configure Option Page 1 Bulk Erase Enable                          */
      __IOM uint32_t CNF2BEN    : 4;            /*!< [7..4] Configure Option Page 2 Bulk Erase Enable                          */
      __IOM uint32_t CNF3BEN    : 4;            /*!< [11..8] Configure Option Page 3 Bulk Erase Enable                         */
      __IM  uint32_t            : 4;
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0xc1be)                                */
    } BCR_b;
  } ;
  
  union {
    __IOM uint32_t ERFLAG;                      /*!< (@ 0x00000014) Flash Memory Error Flag                                    */
    
    struct {
      __IOM uint32_t FMOPFLAG   : 1;            /*!< [0..0] Error bit of Flash Memory Operation Procedure                      */
      __IOM uint32_t INSTFLAG   : 1;            /*!< [1..1] Don't care                                                         */
    } ERFLAG_b;
  } ;
  __IM  uint32_t  RESERVED[58];
  __OM  uint32_t  PAGEBUF;                      /*!< (@ 0x00000100) Flash Memory Page Buffer Area (128bytes/Accessed
                                                                    by 32bit Word Only)                                        */
} FMC_Type;                                     /*!< Size = 260 (0x104)                                                        */



/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Watch-Dog Timer (WDT)
  */

typedef struct {                                /*!< (@ 0x40001A00) WDT Structure                                              */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) Watch-Dog Timer Control Register                           */
    
    struct {
      __IOM uint32_t CLKDIV     : 2;            /*!< [1..0] Watch-Dog Timer Clock Divider                                      */
      __IOM uint32_t UNFIEN     : 1;            /*!< [2..2] Watch-Dog Timer Underflow Interrupt Enable                         */
      __IOM uint32_t WINMIEN    : 1;            /*!< [3..3] Watch-Dog Timer Window Match Interrupt Enable                      */
      __IOM uint32_t CNTEN      : 6;            /*!< [9..4] Watch-Dog Timer Counter Enable                                     */
      __IOM uint32_t RSTEN      : 6;            /*!< [15..10] Watch-Dog Timer Reset Enable                                     */
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key (0x5a69)                                */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t SR;                          /*!< (@ 0x00000004) Watch-Dog Timer Status Register                            */
    
    struct {
      __IOM uint32_t UNFIFLAG   : 1;            /*!< [0..0] Watch-Dog Timer Underflow Interrupt Flag                           */
      __IOM uint32_t WINMIFLAG  : 1;            /*!< [1..1] Watch-Dog Timer Window Match Interrupt Flag                        */
      __IM  uint32_t            : 5;
      __IOM uint32_t DBGCNTEN   : 1;            /*!< [7..7] Watch-Dog Timer Counter Enable when the core is halted
                                                     in debug mode                                                             */
    } SR_b;
  } ;
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000008) Watch-Dog Timer Data Register                              */
    
    struct {
      __IOM uint32_t DATA       : 24;           /*!< [23..0] Watch-Dog Timer Data                                              */
    } DR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x0000000C) Watch-Dog Timer Counter Register                           */
    
    struct {
      __IM  uint32_t CNT        : 24;           /*!< [23..0] Watch-Dog Timer Counter                                           */
    } CNT_b;
  } ;
  
  union {
    __IOM uint32_t WINDR;                       /*!< (@ 0x00000010) Watch-Dog Timer Window Data Register                       */
    
    struct {
      __IOM uint32_t WDATA      : 24;           /*!< [23..0] Watch-Dog Timer Window Data                                       */
    } WINDR_b;
  } ;
  
  union {
    __OM  uint32_t CNTR;                        /*!< (@ 0x00000014) Watch-Dog Timer Counter Reload Register                    */
    
    struct {
      __OM  uint32_t CNTR       : 8;            /*!< [7..0] Watch-Dog Timer Counter Reload                                     */
    } CNTR_b;
  } ;
} WDT_Type;                                     /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                            WT                                             ================ */
/* =========================================================================================================================== */


/**
  * @brief Watch Timer (WT)
  */

typedef struct {                                /*!< (@ 0x40002000) WT Structure                                               */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) Watch Timer Control Register                               */
    
    struct {
      __IOM uint32_t WTCLR      : 1;            /*!< [0..0] Watch Timer Counter and Divider Clear                              */
      __IOM uint32_t WTIFLAG    : 1;            /*!< [1..1] Watch Timer Interrupt Flag                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t WTIEN      : 1;            /*!< [3..3] Watch Timer Interrupt Enable                                       */
      __IOM uint32_t WTINTV     : 2;            /*!< [5..4] Watch Timer Interval Selection                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t WTEN       : 1;            /*!< [7..7] Watch Timer Operation Enable                                       */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000004) Watch Timer Data Register                                  */
    
    struct {
      __IOM uint32_t WTDATA     : 12;           /*!< [11..0] Watch Timer Data                                                  */
    } DR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x00000008) Watch Timer Counter Register                               */
    
    struct {
      __IM  uint32_t CNT        : 12;           /*!< [11..0] Watch Timer Counter                                               */
    } CNT_b;
  } ;
} WT_Type;                                      /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                          TIMER1n                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 1n (TIMER1n)
  */

typedef struct {                                /*!< (@ 0x51000000) TIMER1n Structure                                          */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) TIMER1n Control Register                                   */
    
    struct {
      __IOM uint32_t T1nCLR     : 1;            /*!< [0..0] TIMER1n Counter and Prescaler Clear                                */
      __IOM uint32_t T1nPAU     : 1;            /*!< [1..1] TIMER1n Counter Temporary Pause Control                            */
      __IOM uint32_t T1nCIFLAG  : 1;            /*!< [2..2] TIMER1n Capture Interrupt Flag                                     */
      __IOM uint32_t T1nMIFLAG  : 1;            /*!< [3..3] TIMER1n Match Interrupt Flag                                       */
      __IOM uint32_t T1nCIEN    : 1;            /*!< [4..4] TIMER1n Capture Interrupt Enable                                   */
      __IOM uint32_t T1nMIEN    : 1;            /*!< [5..5] TIMER1n Match Interrupt Enable                                     */
      __IOM uint32_t T1nCPOL    : 2;            /*!< [7..6] TIMER1n Capture Polarity Selection                                 */
      __IOM uint32_t T1nOPOL    : 1;            /*!< [8..8] TIMER1n Output Polarity Selection                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t T1nECE     : 1;            /*!< [11..11] TIMER1n External Clock Edge Selection                            */
      __IOM uint32_t T1nMS      : 2;            /*!< [13..12] TIMER1n Operation Mode Selection                                 */
      __IOM uint32_t T1nCLK     : 1;            /*!< [14..14] TIMER1n Clock Selection                                          */
      __IOM uint32_t T1nEN      : 1;            /*!< [15..15] TIMER1n Operation Enable                                         */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000004) TIMER1n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 16;           /*!< [15..0] TIMER1n A Data                                                    */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000008) TIMER1n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] TIMER1n B Data                                                    */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x0000000C) TIMER1n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 16;           /*!< [15..0] TIMER1n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000010) TIMER1n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 12;           /*!< [11..0] TIMER1n Prescaler Data                                            */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x00000014) TIMER1n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 16;           /*!< [15..0] TIMER1n Counter                                                   */
    } CNT_b;
  } ;
} TIMER1n_Type;                                 /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER10                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 10 (TIMER10)
  */

typedef struct {                                /*!< (@ 0x40002100) TIMER10 Structure                                          */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) TIMER1n Control Register                                   */
    
    struct {
      __IOM uint32_t T1nCLR     : 1;            /*!< [0..0] TIMER1n Counter and Prescaler Clear                                */
      __IOM uint32_t T1nPAU     : 1;            /*!< [1..1] TIMER1n Counter Temporary Pause Control                            */
      __IOM uint32_t T1nCIFLAG  : 1;            /*!< [2..2] TIMER1n Capture Interrupt Flag                                     */
      __IOM uint32_t T1nMIFLAG  : 1;            /*!< [3..3] TIMER1n Match Interrupt Flag                                       */
      __IOM uint32_t T1nCIEN    : 1;            /*!< [4..4] TIMER1n Capture Interrupt Enable                                   */
      __IOM uint32_t T1nMIEN    : 1;            /*!< [5..5] TIMER1n Match Interrupt Enable                                     */
      __IOM uint32_t T1nCPOL    : 2;            /*!< [7..6] TIMER1n Capture Polarity Selection                                 */
      __IOM uint32_t T1nOPOL    : 1;            /*!< [8..8] TIMER1n Output Polarity Selection                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t T1nECE     : 1;            /*!< [11..11] TIMER1n External Clock Edge Selection                            */
      __IOM uint32_t T1nMS      : 2;            /*!< [13..12] TIMER1n Operation Mode Selection                                 */
      __IOM uint32_t T1nCLK     : 1;            /*!< [14..14] TIMER1n Clock Selection                                          */
      __IOM uint32_t T1nEN      : 1;            /*!< [15..15] TIMER1n Operation Enable                                         */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000004) TIMER1n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 16;           /*!< [15..0] TIMER1n A Data                                                    */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000008) TIMER1n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] TIMER1n B Data                                                    */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x0000000C) TIMER1n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 16;           /*!< [15..0] TIMER1n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000010) TIMER1n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 12;           /*!< [11..0] TIMER1n Prescaler Data                                            */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x00000014) TIMER1n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 16;           /*!< [15..0] TIMER1n Counter                                                   */
    } CNT_b;
  } ;
} TIMER10_Type;                                 /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER11                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 11 (TIMER11)
  */

typedef struct {                                /*!< (@ 0x40002200) TIMER11 Structure                                          */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) TIMER1n Control Register                                   */
    
    struct {
      __IOM uint32_t T1nCLR     : 1;            /*!< [0..0] TIMER1n Counter and Prescaler Clear                                */
      __IOM uint32_t T1nPAU     : 1;            /*!< [1..1] TIMER1n Counter Temporary Pause Control                            */
      __IOM uint32_t T1nCIFLAG  : 1;            /*!< [2..2] TIMER1n Capture Interrupt Flag                                     */
      __IOM uint32_t T1nMIFLAG  : 1;            /*!< [3..3] TIMER1n Match Interrupt Flag                                       */
      __IOM uint32_t T1nCIEN    : 1;            /*!< [4..4] TIMER1n Capture Interrupt Enable                                   */
      __IOM uint32_t T1nMIEN    : 1;            /*!< [5..5] TIMER1n Match Interrupt Enable                                     */
      __IOM uint32_t T1nCPOL    : 2;            /*!< [7..6] TIMER1n Capture Polarity Selection                                 */
      __IOM uint32_t T1nOPOL    : 1;            /*!< [8..8] TIMER1n Output Polarity Selection                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t T1nECE     : 1;            /*!< [11..11] TIMER1n External Clock Edge Selection                            */
      __IOM uint32_t T1nMS      : 2;            /*!< [13..12] TIMER1n Operation Mode Selection                                 */
      __IOM uint32_t T1nCLK     : 1;            /*!< [14..14] TIMER1n Clock Selection                                          */
      __IOM uint32_t T1nEN      : 1;            /*!< [15..15] TIMER1n Operation Enable                                         */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000004) TIMER1n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 16;           /*!< [15..0] TIMER1n A Data                                                    */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000008) TIMER1n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] TIMER1n B Data                                                    */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x0000000C) TIMER1n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 16;           /*!< [15..0] TIMER1n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000010) TIMER1n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 12;           /*!< [11..0] TIMER1n Prescaler Data                                            */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x00000014) TIMER1n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 16;           /*!< [15..0] TIMER1n Counter                                                   */
    } CNT_b;
  } ;
} TIMER11_Type;                                 /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER12                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 12 (TIMER12)
  */

typedef struct {                                /*!< (@ 0x40002300) TIMER12 Structure                                          */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) TIMER1n Control Register                                   */
    
    struct {
      __IOM uint32_t T1nCLR     : 1;            /*!< [0..0] TIMER1n Counter and Prescaler Clear                                */
      __IOM uint32_t T1nPAU     : 1;            /*!< [1..1] TIMER1n Counter Temporary Pause Control                            */
      __IOM uint32_t T1nCIFLAG  : 1;            /*!< [2..2] TIMER1n Capture Interrupt Flag                                     */
      __IOM uint32_t T1nMIFLAG  : 1;            /*!< [3..3] TIMER1n Match Interrupt Flag                                       */
      __IOM uint32_t T1nCIEN    : 1;            /*!< [4..4] TIMER1n Capture Interrupt Enable                                   */
      __IOM uint32_t T1nMIEN    : 1;            /*!< [5..5] TIMER1n Match Interrupt Enable                                     */
      __IOM uint32_t T1nCPOL    : 2;            /*!< [7..6] TIMER1n Capture Polarity Selection                                 */
      __IOM uint32_t T1nOPOL    : 1;            /*!< [8..8] TIMER1n Output Polarity Selection                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t T1nECE     : 1;            /*!< [11..11] TIMER1n External Clock Edge Selection                            */
      __IOM uint32_t T1nMS      : 2;            /*!< [13..12] TIMER1n Operation Mode Selection                                 */
      __IOM uint32_t T1nCLK     : 1;            /*!< [14..14] TIMER1n Clock Selection                                          */
      __IOM uint32_t T1nEN      : 1;            /*!< [15..15] TIMER1n Operation Enable                                         */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000004) TIMER1n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 16;           /*!< [15..0] TIMER1n A Data                                                    */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000008) TIMER1n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] TIMER1n B Data                                                    */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x0000000C) TIMER1n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 16;           /*!< [15..0] TIMER1n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000010) TIMER1n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 12;           /*!< [11..0] TIMER1n Prescaler Data                                            */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x00000014) TIMER1n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 16;           /*!< [15..0] TIMER1n Counter                                                   */
    } CNT_b;
  } ;
} TIMER12_Type;                                 /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER13                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 13 (TIMER13)
  */

typedef struct {                                /*!< (@ 0x40002700) TIMER13 Structure                                          */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) TIMER1n Control Register                                   */
    
    struct {
      __IOM uint32_t T1nCLR     : 1;            /*!< [0..0] TIMER1n Counter and Prescaler Clear                                */
      __IOM uint32_t T1nPAU     : 1;            /*!< [1..1] TIMER1n Counter Temporary Pause Control                            */
      __IOM uint32_t T1nCIFLAG  : 1;            /*!< [2..2] TIMER1n Capture Interrupt Flag                                     */
      __IOM uint32_t T1nMIFLAG  : 1;            /*!< [3..3] TIMER1n Match Interrupt Flag                                       */
      __IOM uint32_t T1nCIEN    : 1;            /*!< [4..4] TIMER1n Capture Interrupt Enable                                   */
      __IOM uint32_t T1nMIEN    : 1;            /*!< [5..5] TIMER1n Match Interrupt Enable                                     */
      __IOM uint32_t T1nCPOL    : 2;            /*!< [7..6] TIMER1n Capture Polarity Selection                                 */
      __IOM uint32_t T1nOPOL    : 1;            /*!< [8..8] TIMER1n Output Polarity Selection                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t T1nECE     : 1;            /*!< [11..11] TIMER1n External Clock Edge Selection                            */
      __IOM uint32_t T1nMS      : 2;            /*!< [13..12] TIMER1n Operation Mode Selection                                 */
      __IOM uint32_t T1nCLK     : 1;            /*!< [14..14] TIMER1n Clock Selection                                          */
      __IOM uint32_t T1nEN      : 1;            /*!< [15..15] TIMER1n Operation Enable                                         */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000004) TIMER1n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 16;           /*!< [15..0] TIMER1n A Data                                                    */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000008) TIMER1n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] TIMER1n B Data                                                    */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x0000000C) TIMER1n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 16;           /*!< [15..0] TIMER1n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000010) TIMER1n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 12;           /*!< [11..0] TIMER1n Prescaler Data                                            */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x00000014) TIMER1n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 16;           /*!< [15..0] TIMER1n Counter                                                   */
    } CNT_b;
  } ;
} TIMER13_Type;                                 /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER14                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 14 (TIMER14)
  */

typedef struct {                                /*!< (@ 0x40002800) TIMER14 Structure                                          */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) TIMER1n Control Register                                   */
    
    struct {
      __IOM uint32_t T1nCLR     : 1;            /*!< [0..0] TIMER1n Counter and Prescaler Clear                                */
      __IOM uint32_t T1nPAU     : 1;            /*!< [1..1] TIMER1n Counter Temporary Pause Control                            */
      __IOM uint32_t T1nCIFLAG  : 1;            /*!< [2..2] TIMER1n Capture Interrupt Flag                                     */
      __IOM uint32_t T1nMIFLAG  : 1;            /*!< [3..3] TIMER1n Match Interrupt Flag                                       */
      __IOM uint32_t T1nCIEN    : 1;            /*!< [4..4] TIMER1n Capture Interrupt Enable                                   */
      __IOM uint32_t T1nMIEN    : 1;            /*!< [5..5] TIMER1n Match Interrupt Enable                                     */
      __IOM uint32_t T1nCPOL    : 2;            /*!< [7..6] TIMER1n Capture Polarity Selection                                 */
      __IOM uint32_t T1nOPOL    : 1;            /*!< [8..8] TIMER1n Output Polarity Selection                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t T1nECE     : 1;            /*!< [11..11] TIMER1n External Clock Edge Selection                            */
      __IOM uint32_t T1nMS      : 2;            /*!< [13..12] TIMER1n Operation Mode Selection                                 */
      __IOM uint32_t T1nCLK     : 1;            /*!< [14..14] TIMER1n Clock Selection                                          */
      __IOM uint32_t T1nEN      : 1;            /*!< [15..15] TIMER1n Operation Enable                                         */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000004) TIMER1n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 16;           /*!< [15..0] TIMER1n A Data                                                    */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000008) TIMER1n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] TIMER1n B Data                                                    */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x0000000C) TIMER1n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 16;           /*!< [15..0] TIMER1n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000010) TIMER1n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 12;           /*!< [11..0] TIMER1n Prescaler Data                                            */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x00000014) TIMER1n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 16;           /*!< [15..0] TIMER1n Counter                                                   */
    } CNT_b;
  } ;
} TIMER14_Type;                                 /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER15                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 15 (TIMER15)
  */

typedef struct {                                /*!< (@ 0x40002900) TIMER15 Structure                                          */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) TIMER1n Control Register                                   */
    
    struct {
      __IOM uint32_t T1nCLR     : 1;            /*!< [0..0] TIMER1n Counter and Prescaler Clear                                */
      __IOM uint32_t T1nPAU     : 1;            /*!< [1..1] TIMER1n Counter Temporary Pause Control                            */
      __IOM uint32_t T1nCIFLAG  : 1;            /*!< [2..2] TIMER1n Capture Interrupt Flag                                     */
      __IOM uint32_t T1nMIFLAG  : 1;            /*!< [3..3] TIMER1n Match Interrupt Flag                                       */
      __IOM uint32_t T1nCIEN    : 1;            /*!< [4..4] TIMER1n Capture Interrupt Enable                                   */
      __IOM uint32_t T1nMIEN    : 1;            /*!< [5..5] TIMER1n Match Interrupt Enable                                     */
      __IOM uint32_t T1nCPOL    : 2;            /*!< [7..6] TIMER1n Capture Polarity Selection                                 */
      __IOM uint32_t T1nOPOL    : 1;            /*!< [8..8] TIMER1n Output Polarity Selection                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t T1nECE     : 1;            /*!< [11..11] TIMER1n External Clock Edge Selection                            */
      __IOM uint32_t T1nMS      : 2;            /*!< [13..12] TIMER1n Operation Mode Selection                                 */
      __IOM uint32_t T1nCLK     : 1;            /*!< [14..14] TIMER1n Clock Selection                                          */
      __IOM uint32_t T1nEN      : 1;            /*!< [15..15] TIMER1n Operation Enable                                         */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000004) TIMER1n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 16;           /*!< [15..0] TIMER1n A Data                                                    */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000008) TIMER1n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] TIMER1n B Data                                                    */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x0000000C) TIMER1n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 16;           /*!< [15..0] TIMER1n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000010) TIMER1n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 12;           /*!< [11..0] TIMER1n Prescaler Data                                            */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x00000014) TIMER1n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 16;           /*!< [15..0] TIMER1n Counter                                                   */
    } CNT_b;
  } ;
} TIMER15_Type;                                 /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER16                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 16 (TIMER16)
  */

typedef struct {                                /*!< (@ 0x40002A00) TIMER16 Structure                                          */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) TIMER1n Control Register                                   */
    
    struct {
      __IOM uint32_t T1nCLR     : 1;            /*!< [0..0] TIMER1n Counter and Prescaler Clear                                */
      __IOM uint32_t T1nPAU     : 1;            /*!< [1..1] TIMER1n Counter Temporary Pause Control                            */
      __IOM uint32_t T1nCIFLAG  : 1;            /*!< [2..2] TIMER1n Capture Interrupt Flag                                     */
      __IOM uint32_t T1nMIFLAG  : 1;            /*!< [3..3] TIMER1n Match Interrupt Flag                                       */
      __IOM uint32_t T1nCIEN    : 1;            /*!< [4..4] TIMER1n Capture Interrupt Enable                                   */
      __IOM uint32_t T1nMIEN    : 1;            /*!< [5..5] TIMER1n Match Interrupt Enable                                     */
      __IOM uint32_t T1nCPOL    : 2;            /*!< [7..6] TIMER1n Capture Polarity Selection                                 */
      __IOM uint32_t T1nOPOL    : 1;            /*!< [8..8] TIMER1n Output Polarity Selection                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t T1nECE     : 1;            /*!< [11..11] TIMER1n External Clock Edge Selection                            */
      __IOM uint32_t T1nMS      : 2;            /*!< [13..12] TIMER1n Operation Mode Selection                                 */
      __IOM uint32_t T1nCLK     : 1;            /*!< [14..14] TIMER1n Clock Selection                                          */
      __IOM uint32_t T1nEN      : 1;            /*!< [15..15] TIMER1n Operation Enable                                         */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000004) TIMER1n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 16;           /*!< [15..0] TIMER1n A Data                                                    */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000008) TIMER1n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] TIMER1n B Data                                                    */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x0000000C) TIMER1n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 16;           /*!< [15..0] TIMER1n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000010) TIMER1n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 12;           /*!< [11..0] TIMER1n Prescaler Data                                            */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x00000014) TIMER1n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 16;           /*!< [15..0] TIMER1n Counter                                                   */
    } CNT_b;
  } ;
} TIMER16_Type;                                 /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER2n                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 2n (TIMER2n)
  */

typedef struct {                                /*!< (@ 0x52000000) TIMER2n Structure                                          */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) TIMER2n Control Register                                   */
    
    struct {
      __IOM uint32_t T2nCLR     : 1;            /*!< [0..0] TIMER2n Counter and Prescaler Clear                                */
      __IOM uint32_t T2nPAU     : 1;            /*!< [1..1] TIMER2n Counter Temporary Pause Control                            */
      __IOM uint32_t T2nCIFLAG  : 1;            /*!< [2..2] TIMER2n Capture Interrupt Flag                                     */
      __IOM uint32_t T2nMIFLAG  : 1;            /*!< [3..3] TIMER2n Match Interrupt Flag                                       */
      __IOM uint32_t T2nCIEN    : 1;            /*!< [4..4] TIMER2n Capture Interrupt Enable                                   */
      __IOM uint32_t T2nMIEN    : 1;            /*!< [5..5] TIMER2n Match Interrupt Enable                                     */
      __IOM uint32_t T2nCPOL    : 2;            /*!< [7..6] TIMER2n Capture Polarity Selection                                 */
      __IOM uint32_t T2nOPOL    : 1;            /*!< [8..8] TIMER2n Output Polarity Selection                                  */
      __IOM uint32_t CAPSEL     : 2;            /*!< [10..9] TIMER2n Capture Signal Selection                                  */
      __IOM uint32_t T2nECE     : 1;            /*!< [11..11] TIMER2n External Clock Edge Selection                            */
      __IOM uint32_t T2nMS      : 2;            /*!< [13..12] TIMER2n Operation Mode Selection                                 */
      __IOM uint32_t T2nCLK     : 1;            /*!< [14..14] TIMER2n Clock Selection                                          */
      __IOM uint32_t T2nEN      : 1;            /*!< [15..15] TIMER2n Operation Enable                                         */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000004) TIMER2n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 32;           /*!< [31..0] TIMER2n A Data                                                    */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000008) TIMER2n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 32;           /*!< [31..0] TIMER2n B Data                                                    */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x0000000C) TIMER2n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 32;           /*!< [31..0] TIMER2n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000010) TIMER2n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 12;           /*!< [11..0] TIMER2n Prescaler Data                                            */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x00000014) TIMER2n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 32;           /*!< [31..0] TIMER2n Counter                                                   */
    } CNT_b;
  } ;
} TIMER2n_Type;                                 /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER20                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 20 (TIMER20)
  */

typedef struct {                                /*!< (@ 0x40002500) TIMER20 Structure                                          */
  
  union {
    union {
      __IOM uint32_t CR;                        /*!< (@ 0x00000000) TIMER2n Control Register                                   */
      
      struct {
        __IOM uint32_t T2nCLR   : 1;            /*!< [0..0] TIMER2n Counter and Prescaler Clear                                */
        __IOM uint32_t T2nPAU   : 1;            /*!< [1..1] TIMER2n Counter Temporary Pause Control                            */
        __IOM uint32_t T2nCIFLAG : 1;           /*!< [2..2] TIMER2n Capture Interrupt Flag                                     */
        __IOM uint32_t T2nMIFLAG : 1;           /*!< [3..3] TIMER2n Match Interrupt Flag                                       */
        __IOM uint32_t T2nCIEN  : 1;            /*!< [4..4] TIMER2n Capture Interrupt Enable                                   */
        __IOM uint32_t T2nMIEN  : 1;            /*!< [5..5] TIMER2n Match Interrupt Enable                                     */
        __IOM uint32_t T2nCPOL  : 2;            /*!< [7..6] TIMER2n Capture Polarity Selection                                 */
        __IOM uint32_t T2nOPOL  : 1;            /*!< [8..8] TIMER2n Output Polarity Selection                                  */
        __IOM uint32_t CAPSEL   : 2;            /*!< [10..9] TIMER2n Capture Signal Selection                                  */
        __IOM uint32_t T2nECE   : 1;            /*!< [11..11] TIMER2n External Clock Edge Selection                            */
        __IOM uint32_t T2nMS    : 2;            /*!< [13..12] TIMER2n Operation Mode Selection                                 */
        __IOM uint32_t T2nCLK   : 1;            /*!< [14..14] TIMER2n Clock Selection                                          */
        __IOM uint32_t T2nEN    : 1;            /*!< [15..15] TIMER2n Operation Enable                                         */
      } CR_b;
    } ;
    
    union {
      __IOM uint32_t TIMER20_CR;                /*!< (@ 0x00000000) TIMER2n Control Register                                   */
      
      struct {
        __IOM uint32_t T2nCLR   : 1;            /*!< [0..0] TIMER2n Counter and Prescaler Clear                                */
        __IOM uint32_t T2nPAU   : 1;            /*!< [1..1] TIMER2n Counter Temporary Pause Control                            */
        __IOM uint32_t T2nCIFLAG : 1;           /*!< [2..2] TIMER2n Capture Interrupt Flag                                     */
        __IOM uint32_t T2nMIFLAG : 1;           /*!< [3..3] TIMER2n Match Interrupt Flag                                       */
        __IOM uint32_t T2nCIEN  : 1;            /*!< [4..4] TIMER2n Capture Interrupt Enable                                   */
        __IOM uint32_t T2nMIEN  : 1;            /*!< [5..5] TIMER2n Match Interrupt Enable                                     */
        __IOM uint32_t T2nCPOL  : 2;            /*!< [7..6] TIMER2n Capture Polarity Selection                                 */
        __IOM uint32_t T2nOPOL  : 1;            /*!< [8..8] TIMER2n Output Polarity Selection                                  */
        __IOM uint32_t CAPSEL   : 2;            /*!< [10..9] TIMER2n Capture Signal Selection                                  */
        __IOM uint32_t T2nECE   : 1;            /*!< [11..11] TIMER2n External Clock Edge Selection                            */
        __IOM uint32_t T2nMS    : 2;            /*!< [13..12] TIMER2n Operation Mode Selection                                 */
        __IOM uint32_t T2nCLK   : 1;            /*!< [14..14] TIMER2n Clock Selection                                          */
        __IOM uint32_t T2nEN    : 1;            /*!< [15..15] TIMER2n Operation Enable                                         */
      } TIMER20_CR_b;
    } ;
  };
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000004) TIMER2n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 32;           /*!< [31..0] TIMER2n A Data                                                    */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000008) TIMER2n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 32;           /*!< [31..0] TIMER2n B Data                                                    */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x0000000C) TIMER2n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 32;           /*!< [31..0] TIMER2n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000010) TIMER2n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 12;           /*!< [11..0] TIMER2n Prescaler Data                                            */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x00000014) TIMER2n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 32;           /*!< [31..0] TIMER2n Counter                                                   */
    } CNT_b;
  } ;
} TIMER20_Type;                                 /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER21                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 21 (TIMER21)
  */

typedef struct {                                /*!< (@ 0x40002600) TIMER21 Structure                                          */
  
  union {
    union {
      __IOM uint32_t CR;                        /*!< (@ 0x00000000) TIMER2n Control Register                                   */
      
      struct {
        __IOM uint32_t T2nCLR   : 1;            /*!< [0..0] TIMER2n Counter and Prescaler Clear                                */
        __IOM uint32_t T2nPAU   : 1;            /*!< [1..1] TIMER2n Counter Temporary Pause Control                            */
        __IOM uint32_t T2nCIFLAG : 1;           /*!< [2..2] TIMER2n Capture Interrupt Flag                                     */
        __IOM uint32_t T2nMIFLAG : 1;           /*!< [3..3] TIMER2n Match Interrupt Flag                                       */
        __IOM uint32_t T2nCIEN  : 1;            /*!< [4..4] TIMER2n Capture Interrupt Enable                                   */
        __IOM uint32_t T2nMIEN  : 1;            /*!< [5..5] TIMER2n Match Interrupt Enable                                     */
        __IOM uint32_t T2nCPOL  : 2;            /*!< [7..6] TIMER2n Capture Polarity Selection                                 */
        __IOM uint32_t T2nOPOL  : 1;            /*!< [8..8] TIMER2n Output Polarity Selection                                  */
        __IOM uint32_t CAPSEL   : 2;            /*!< [10..9] TIMER2n Capture Signal Selection                                  */
        __IOM uint32_t T2nECE   : 1;            /*!< [11..11] TIMER2n External Clock Edge Selection                            */
        __IOM uint32_t T2nMS    : 2;            /*!< [13..12] TIMER2n Operation Mode Selection                                 */
        __IOM uint32_t T2nCLK   : 1;            /*!< [14..14] TIMER2n Clock Selection                                          */
        __IOM uint32_t T2nEN    : 1;            /*!< [15..15] TIMER2n Operation Enable                                         */
      } CR_b;
    } ;
    
    union {
      __IOM uint32_t TIMER21_CR;                /*!< (@ 0x00000000) TIMER2n Control Register                                   */
      
      struct {
        __IOM uint32_t T2nCLR   : 1;            /*!< [0..0] TIMER2n Counter and Prescaler Clear                                */
        __IOM uint32_t T2nPAU   : 1;            /*!< [1..1] TIMER2n Counter Temporary Pause Control                            */
        __IOM uint32_t T2nCIFLAG : 1;           /*!< [2..2] TIMER2n Capture Interrupt Flag                                     */
        __IOM uint32_t T2nMIFLAG : 1;           /*!< [3..3] TIMER2n Match Interrupt Flag                                       */
        __IOM uint32_t T2nCIEN  : 1;            /*!< [4..4] TIMER2n Capture Interrupt Enable                                   */
        __IOM uint32_t T2nMIEN  : 1;            /*!< [5..5] TIMER2n Match Interrupt Enable                                     */
        __IOM uint32_t T2nCPOL  : 2;            /*!< [7..6] TIMER2n Capture Polarity Selection                                 */
        __IOM uint32_t T2nOPOL  : 1;            /*!< [8..8] TIMER2n Output Polarity Selection                                  */
        __IM  uint32_t          : 2;
        __IOM uint32_t T2nECE   : 1;            /*!< [11..11] TIMER2n External Clock Edge Selection                            */
        __IOM uint32_t T2nMS    : 2;            /*!< [13..12] TIMER2n Operation Mode Selection                                 */
        __IOM uint32_t T2nCLK   : 1;            /*!< [14..14] TIMER2n Clock Selection                                          */
        __IOM uint32_t T2nEN    : 1;            /*!< [15..15] TIMER2n Operation Enable                                         */
      } TIMER21_CR_b;
    } ;
  };
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000004) TIMER2n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 32;           /*!< [31..0] TIMER2n A Data                                                    */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000008) TIMER2n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 32;           /*!< [31..0] TIMER2n B Data                                                    */
    } BDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x0000000C) TIMER2n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 32;           /*!< [31..0] TIMER2n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000010) TIMER2n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 12;           /*!< [11..0] TIMER2n Prescaler Data                                            */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x00000014) TIMER2n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 32;           /*!< [31..0] TIMER2n Counter                                                   */
    } CNT_b;
  } ;
} TIMER21_Type;                                 /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER3n                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 3n (TIMER3n)
  */

typedef struct {                                /*!< (@ 0x53000000) TIMER3n Structure                                          */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) TIMER3n Control Register                                   */
    
    struct {
      __IOM uint32_t T3nCLR     : 1;            /*!< [0..0] TIMER3n Counter and Prescaler Clear                                */
      __IOM uint32_t PMOC       : 3;            /*!< [3..1] Period Match Interrupt Occurrence Selection                        */
      __IOM uint32_t UPDT       : 2;            /*!< [5..4] Data Reload Time Selection                                         */
      __IOM uint32_t T3nCPOL    : 2;            /*!< [7..6] TIMER3n Capture Polarity Selection                                 */
      __IOM uint32_t DLYPOS     : 1;            /*!< [8..8] Delay Time Insertion Position                                      */
      __IOM uint32_t DLYEN      : 1;            /*!< [9..9] Delay Time Insertion Enable                                        */
      __IOM uint32_t FORCA      : 1;            /*!< [10..10] TIMER3n Output Mode Selection                                    */
      __IOM uint32_t T3nECE     : 1;            /*!< [11..11] TIMER3n External Clock Edge Selection                            */
      __IOM uint32_t T3nMS      : 2;            /*!< [13..12] TIMER3n Operation Mode Selection                                 */
      __IOM uint32_t T3nCLK     : 1;            /*!< [14..14] TIMER3n Clock Selection                                          */
      __IOM uint32_t T3nEN      : 1;            /*!< [15..15] TIMER3n Operation Enable                                         */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t PDR;                         /*!< (@ 0x00000004) TIMER3n Period Data Register                               */
    
    struct {
      __IOM uint32_t PDATA      : 16;           /*!< [15..0] TIMER3n Period Data                                               */
    } PDR_b;
  } ;
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000008) TIMER3n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 16;           /*!< [15..0] TIMER3n A Data                                                    */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x0000000C) TIMER3n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] TIMER3n B Data                                                    */
    } BDR_b;
  } ;
  
  union {
    __IOM uint32_t CDR;                         /*!< (@ 0x00000010) TIMER3n C Data Register                                    */
    
    struct {
      __IOM uint32_t CDATA      : 16;           /*!< [15..0] TIMER3n C Data                                                    */
    } CDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x00000014) TIMER3n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 16;           /*!< [15..0] TIMER3n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000018) TIMER3n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 12;           /*!< [11..0] TIMER3n Prescaler Data                                            */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x0000001C) TIMER3n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 16;           /*!< [15..0] TIMER3n Counter                                                   */
    } CNT_b;
  } ;
  
  union {
    __IOM uint32_t OUTCR;                       /*!< (@ 0x00000020) TIMER3n Output Control Register                            */
    
    struct {
      __IOM uint32_t LVLCA      : 1;            /*!< [0..0] Configure PWM3nCA Output when Disable                              */
      __IOM uint32_t LVLBA      : 1;            /*!< [1..1] Configure PWM3nBA Output when Disable                              */
      __IOM uint32_t LVLAA      : 1;            /*!< [2..2] Configure PWM3nAA Output when Disable                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t LVLCB      : 1;            /*!< [4..4] Configure PWM3nCB Output when Disable                              */
      __IOM uint32_t LVLBB      : 1;            /*!< [5..5] Configure PWM3nBB Output when Disable                              */
      __IOM uint32_t LVLAB      : 1;            /*!< [6..6] Configure PWM3nAB Output when Disable                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t PCAOE      : 1;            /*!< [8..8] PWM3nCA Output Enable                                              */
      __IOM uint32_t PBAOE      : 1;            /*!< [9..9] PWM3nBA Output Enable                                              */
      __IOM uint32_t PAAOE      : 1;            /*!< [10..10] PWM3nAA Output Enable                                            */
      __IOM uint32_t PCBOE      : 1;            /*!< [11..11] PWM3nCB Output Enable                                            */
      __IOM uint32_t PBBOE      : 1;            /*!< [12..12] PWM3nBB Output Enable                                            */
      __IOM uint32_t PABOE      : 1;            /*!< [13..13] PWM3nAB Output Enable                                            */
      __IOM uint32_t POLA       : 1;            /*!< [14..14] PWM3nxA Output Polarity Selection                                */
      __IOM uint32_t POLB       : 1;            /*!< [15..15] PWM3nxB Output Polarity Selection                                */
      __OM  uint32_t WTIDKY     : 16;           /*!< [31..16] Write Identification Key                                         */
    } OUTCR_b;
  } ;
  
  union {
    __IOM uint32_t DLY;                         /*!< (@ 0x00000024) TIMER3n PWM Output Delay Data Register                     */
    
    struct {
      __IOM uint32_t DLY        : 10;           /*!< [9..0] TIMER3n PWM Delay Data                                             */
    } DLY_b;
  } ;
  
  union {
    __IOM uint32_t INTCR;                       /*!< (@ 0x00000028) TIMER3n Interrupt Control Register                         */
    
    struct {
      __IOM uint32_t T3nCMIEN   : 1;            /*!< [0..0] TIMER3n C-ch Match Interrupt Enable                                */
      __IOM uint32_t T3nBMIEN   : 1;            /*!< [1..1] TIMER3n B-ch Match Interrupt Enable                                */
      __IOM uint32_t T3nAMIEN   : 1;            /*!< [2..2] TIMER3n A-ch Match Interrupt Enable                                */
      __IOM uint32_t T3nPMIEN   : 1;            /*!< [3..3] TIMER3n Period Match Interrupt Enable                              */
      __IOM uint32_t T3nBTIEN   : 1;            /*!< [4..4] TIMER3n Bottom Interrupt Enable                                    */
      __IOM uint32_t T3nCIEN    : 1;            /*!< [5..5] TIMER3n Capture Interrupt Enable                                   */
      __IOM uint32_t HIZIEN     : 1;            /*!< [6..6] TIMER3n Output High-Impedance Interrupt Enable                     */
    } INTCR_b;
  } ;
  
  union {
    __IOM uint32_t INTFLAG;                     /*!< (@ 0x0000002C) TIMER3n Interrupt Flag Register                            */
    
    struct {
      __IOM uint32_t T3nCMIFLAG : 1;            /*!< [0..0] TIMER3n C-ch Match Interrupt Flag                                  */
      __IOM uint32_t T3nBMIFLAG : 1;            /*!< [1..1] TIMER3n B-ch Match Interrupt Flag                                  */
      __IOM uint32_t T3nAMIFLAG : 1;            /*!< [2..2] TIMER3n A-ch Match Interrupt Flag                                  */
      __IOM uint32_t T3nPMIFLAG : 1;            /*!< [3..3] TIMER3n Period Match Interrupt Flag                                */
      __IOM uint32_t T3nBTIFLAG : 1;            /*!< [4..4] TIMER3n Bottom Interrupt Flag                                      */
      __IOM uint32_t T3nCIFLAG  : 1;            /*!< [5..5] TIMER3n Capture Interrupt Flag                                     */
      __IOM uint32_t HIZIFLAG   : 1;            /*!< [6..6] TIMER3n Output High-Impedance Interrupt Flag                       */
    } INTFLAG_b;
  } ;
  
  union {
    __IOM uint32_t HIZCR;                       /*!< (@ 0x00000030) TIMER3n High-Impedance Control Register                    */
    
    struct {
      __IOM uint32_t HIZCLR     : 1;            /*!< [0..0] High-Impedance Output Clear                                        */
      __IM  uint32_t HIZSTA     : 1;            /*!< [1..1] High-Impedance Status                                              */
      __IOM uint32_t HEDGE      : 1;            /*!< [2..2] High-Impedance Edge Selection                                      */
      __IM  uint32_t            : 1;
      __IOM uint32_t HIZSW      : 1;            /*!< [4..4] High-Impedance Output Software Setting                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t HIZEN      : 1;            /*!< [7..7] PWM3nxA/PWM3nxB Output High-Impedance Enable                       */
    } HIZCR_b;
  } ;
  
  union {
    __IOM uint32_t ADTCR;                       /*!< (@ 0x00000034) TIMER3n ADC Trigger Control Register                       */
    
    struct {
      __IOM uint32_t T3nCMTG    : 1;            /*!< [0..0] Select TIMER3n C-ch Match for ADC Trigger Signal Generator.        */
      __IOM uint32_t T3nBMTG    : 1;            /*!< [1..1] Select TIMER3n B-ch Match for ADC Trigger Signal Generator.        */
      __IOM uint32_t T3nAMTG    : 1;            /*!< [2..2] Select TIMER3n A-ch Match for ADC Trigger Signal Generator.        */
      __IOM uint32_t T3nPMTG    : 1;            /*!< [3..3] Select TIMER3n Period Match for ADC Trigger Signal Generator.      */
      __IOM uint32_t T3nBTTG    : 1;            /*!< [4..4] Select TIMER3n Bottom for ADC Trigger Signal Generator.            */
    } ADTCR_b;
  } ;
  
  union {
    __IOM uint32_t ADTDR;                       /*!< (@ 0x00000038) TIMER3n ADC Trigger Generator Data Register                */
    
    struct {
      __IOM uint32_t ADTDATA    : 14;           /*!< [13..0] TIMER3n ADC Trigger Generation Data                               */
    } ADTDR_b;
  } ;
} TIMER3n_Type;                                 /*!< Size = 60 (0x3c)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER30                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief Timer/Counter 30 (TIMER30)
  */

typedef struct {                                /*!< (@ 0x40002400) TIMER30 Structure                                          */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) TIMER3n Control Register                                   */
    
    struct {
      __IOM uint32_t T3nCLR     : 1;            /*!< [0..0] TIMER3n Counter and Prescaler Clear                                */
      __IOM uint32_t PMOC       : 3;            /*!< [3..1] Period Match Interrupt Occurrence Selection                        */
      __IOM uint32_t UPDT       : 2;            /*!< [5..4] Data Reload Time Selection                                         */
      __IOM uint32_t T3nCPOL    : 2;            /*!< [7..6] TIMER3n Capture Polarity Selection                                 */
      __IOM uint32_t DLYPOS     : 1;            /*!< [8..8] Delay Time Insertion Position                                      */
      __IOM uint32_t DLYEN      : 1;            /*!< [9..9] Delay Time Insertion Enable                                        */
      __IOM uint32_t FORCA      : 1;            /*!< [10..10] TIMER3n Output Mode Selection                                    */
      __IOM uint32_t T3nECE     : 1;            /*!< [11..11] TIMER3n External Clock Edge Selection                            */
      __IOM uint32_t T3nMS      : 2;            /*!< [13..12] TIMER3n Operation Mode Selection                                 */
      __IOM uint32_t T3nCLK     : 1;            /*!< [14..14] TIMER3n Clock Selection                                          */
      __IOM uint32_t T3nEN      : 1;            /*!< [15..15] TIMER3n Operation Enable                                         */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t PDR;                         /*!< (@ 0x00000004) TIMER3n Period Data Register                               */
    
    struct {
      __IOM uint32_t PDATA      : 16;           /*!< [15..0] TIMER3n Period Data                                               */
    } PDR_b;
  } ;
  
  union {
    __IOM uint32_t ADR;                         /*!< (@ 0x00000008) TIMER3n A Data Register                                    */
    
    struct {
      __IOM uint32_t ADATA      : 16;           /*!< [15..0] TIMER3n A Data                                                    */
    } ADR_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x0000000C) TIMER3n B Data Register                                    */
    
    struct {
      __IOM uint32_t BDATA      : 16;           /*!< [15..0] TIMER3n B Data                                                    */
    } BDR_b;
  } ;
  
  union {
    __IOM uint32_t CDR;                         /*!< (@ 0x00000010) TIMER3n C Data Register                                    */
    
    struct {
      __IOM uint32_t CDATA      : 16;           /*!< [15..0] TIMER3n C Data                                                    */
    } CDR_b;
  } ;
  
  union {
    __IM  uint32_t CAPDR;                       /*!< (@ 0x00000014) TIMER3n Capture Data Register                              */
    
    struct {
      __IM  uint32_t CAPD       : 16;           /*!< [15..0] TIMER3n Capture Data                                              */
    } CAPDR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000018) TIMER3n Prescaler Data Register                            */
    
    struct {
      __IOM uint32_t PRED       : 12;           /*!< [11..0] TIMER3n Prescaler Data                                            */
    } PREDR_b;
  } ;
  
  union {
    __IM  uint32_t CNT;                         /*!< (@ 0x0000001C) TIMER3n Counter Register                                   */
    
    struct {
      __IM  uint32_t CNT        : 16;           /*!< [15..0] TIMER3n Counter                                                   */
    } CNT_b;
  } ;
  
  union {
    union {
      __IOM uint32_t OUTCR;                     /*!< (@ 0x00000020) TIMER3n Output Control Register                            */
      
      struct {
        __IOM uint32_t LVLCA    : 1;            /*!< [0..0] Configure PWM3nCA Output when Disable                              */
        __IOM uint32_t LVLBA    : 1;            /*!< [1..1] Configure PWM3nBA Output when Disable                              */
        __IOM uint32_t LVLAA    : 1;            /*!< [2..2] Configure PWM3nAA Output when Disable                              */
        __IM  uint32_t          : 1;
        __IOM uint32_t LVLCB    : 1;            /*!< [4..4] Configure PWM3nCB Output when Disable                              */
        __IOM uint32_t LVLBB    : 1;            /*!< [5..5] Configure PWM3nBB Output when Disable                              */
        __IOM uint32_t LVLAB    : 1;            /*!< [6..6] Configure PWM3nAB Output when Disable                              */
        __IM  uint32_t          : 1;
        __IOM uint32_t PCAOE    : 1;            /*!< [8..8] PWM3nCA Output Enable                                              */
        __IOM uint32_t PBAOE    : 1;            /*!< [9..9] PWM3nBA Output Enable                                              */
        __IOM uint32_t PAAOE    : 1;            /*!< [10..10] PWM3nAA Output Enable                                            */
        __IOM uint32_t PCBOE    : 1;            /*!< [11..11] PWM3nCB Output Enable                                            */
        __IOM uint32_t PBBOE    : 1;            /*!< [12..12] PWM3nBB Output Enable                                            */
        __IOM uint32_t PABOE    : 1;            /*!< [13..13] PWM3nAB Output Enable                                            */
        __IOM uint32_t POLA     : 1;            /*!< [14..14] PWM3nxA Output Polarity Selection                                */
        __IOM uint32_t POLB     : 1;            /*!< [15..15] PWM3nxB Output Polarity Selection                                */
        __OM  uint32_t WTIDKY   : 16;           /*!< [31..16] Write Identification Key                                         */
      } OUTCR_b;
    } ;
    
    union {
      __IOM uint32_t T30_OUTCR;                 /*!< (@ 0x00000020) TIMER3n Output Control Register                            */
      
      struct {
        __IOM uint32_t LVLCA    : 1;            /*!< [0..0] Configure PWM3nCA Output when Disable                              */
        __IOM uint32_t LVLBA    : 1;            /*!< [1..1] Configure PWM3nBA Output when Disable                              */
        __IOM uint32_t LVLAA    : 1;            /*!< [2..2] Configure PWM3nAA Output when Disable                              */
        __IM  uint32_t          : 1;
        __IOM uint32_t LVLCB    : 1;            /*!< [4..4] Configure PWM3nCB Output when Disable                              */
        __IOM uint32_t LVLBB    : 1;            /*!< [5..5] Configure PWM3nBB Output when Disable                              */
        __IOM uint32_t LVLAB    : 1;            /*!< [6..6] Configure PWM3nAB Output when Disable                              */
        __IM  uint32_t          : 1;
        __IOM uint32_t PCAOE    : 1;            /*!< [8..8] PWM3nCA Output Enable                                              */
        __IOM uint32_t PBAOE    : 1;            /*!< [9..9] PWM3nBA Output Enable                                              */
        __IOM uint32_t PAAOE    : 1;            /*!< [10..10] PWM3nAA Output Enable                                            */
        __IOM uint32_t PCBOE    : 1;            /*!< [11..11] PWM3nCB Output Enable                                            */
        __IOM uint32_t PBBOE    : 1;            /*!< [12..12] PWM3nBB Output Enable                                            */
        __IOM uint32_t PABOE    : 1;            /*!< [13..13] PWM3nAB Output Enable                                            */
        __IOM uint32_t POLA     : 1;            /*!< [14..14] PWM3nxA Output Polarity Selection                                */
        __IOM uint32_t POLB     : 1;            /*!< [15..15] PWM3nxB Output Polarity Selection                                */
        __OM  uint32_t WTIDKY   : 16;           /*!< [31..16] Write Identification Key (0xe06c)                                */
      } T30_OUTCR_b;
    } ;
  };
  
  union {
    __IOM uint32_t DLY;                         /*!< (@ 0x00000024) TIMER3n PWM Output Delay Data Register                     */
    
    struct {
      __IOM uint32_t DLY        : 10;           /*!< [9..0] TIMER3n PWM Delay Data                                             */
    } DLY_b;
  } ;
  
  union {
    __IOM uint32_t INTCR;                       /*!< (@ 0x00000028) TIMER3n Interrupt Control Register                         */
    
    struct {
      __IOM uint32_t T3nCMIEN   : 1;            /*!< [0..0] TIMER3n C-ch Match Interrupt Enable                                */
      __IOM uint32_t T3nBMIEN   : 1;            /*!< [1..1] TIMER3n B-ch Match Interrupt Enable                                */
      __IOM uint32_t T3nAMIEN   : 1;            /*!< [2..2] TIMER3n A-ch Match Interrupt Enable                                */
      __IOM uint32_t T3nPMIEN   : 1;            /*!< [3..3] TIMER3n Period Match Interrupt Enable                              */
      __IOM uint32_t T3nBTIEN   : 1;            /*!< [4..4] TIMER3n Bottom Interrupt Enable                                    */
      __IOM uint32_t T3nCIEN    : 1;            /*!< [5..5] TIMER3n Capture Interrupt Enable                                   */
      __IOM uint32_t HIZIEN     : 1;            /*!< [6..6] TIMER3n Output High-Impedance Interrupt Enable                     */
    } INTCR_b;
  } ;
  
  union {
    __IOM uint32_t INTFLAG;                     /*!< (@ 0x0000002C) TIMER3n Interrupt Flag Register                            */
    
    struct {
      __IOM uint32_t T3nCMIFLAG : 1;            /*!< [0..0] TIMER3n C-ch Match Interrupt Flag                                  */
      __IOM uint32_t T3nBMIFLAG : 1;            /*!< [1..1] TIMER3n B-ch Match Interrupt Flag                                  */
      __IOM uint32_t T3nAMIFLAG : 1;            /*!< [2..2] TIMER3n A-ch Match Interrupt Flag                                  */
      __IOM uint32_t T3nPMIFLAG : 1;            /*!< [3..3] TIMER3n Period Match Interrupt Flag                                */
      __IOM uint32_t T3nBTIFLAG : 1;            /*!< [4..4] TIMER3n Bottom Interrupt Flag                                      */
      __IOM uint32_t T3nCIFLAG  : 1;            /*!< [5..5] TIMER3n Capture Interrupt Flag                                     */
      __IOM uint32_t HIZIFLAG   : 1;            /*!< [6..6] TIMER3n Output High-Impedance Interrupt Flag                       */
    } INTFLAG_b;
  } ;
  
  union {
    __IOM uint32_t HIZCR;                       /*!< (@ 0x00000030) TIMER3n High-Impedance Control Register                    */
    
    struct {
      __IOM uint32_t HIZCLR     : 1;            /*!< [0..0] High-Impedance Output Clear                                        */
      __IM  uint32_t HIZSTA     : 1;            /*!< [1..1] High-Impedance Status                                              */
      __IOM uint32_t HEDGE      : 1;            /*!< [2..2] High-Impedance Edge Selection                                      */
      __IM  uint32_t            : 1;
      __IOM uint32_t HIZSW      : 1;            /*!< [4..4] High-Impedance Output Software Setting                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t HIZEN      : 1;            /*!< [7..7] PWM3nxA/PWM3nxB Output High-Impedance Enable                       */
    } HIZCR_b;
  } ;
  
  union {
    __IOM uint32_t ADTCR;                       /*!< (@ 0x00000034) TIMER3n ADC Trigger Control Register                       */
    
    struct {
      __IOM uint32_t T3nCMTG    : 1;            /*!< [0..0] Select TIMER3n C-ch Match for ADC Trigger Signal Generator.        */
      __IOM uint32_t T3nBMTG    : 1;            /*!< [1..1] Select TIMER3n B-ch Match for ADC Trigger Signal Generator.        */
      __IOM uint32_t T3nAMTG    : 1;            /*!< [2..2] Select TIMER3n A-ch Match for ADC Trigger Signal Generator.        */
      __IOM uint32_t T3nPMTG    : 1;            /*!< [3..3] Select TIMER3n Period Match for ADC Trigger Signal Generator.      */
      __IOM uint32_t T3nBTTG    : 1;            /*!< [4..4] Select TIMER3n Bottom for ADC Trigger Signal Generator.            */
    } ADTCR_b;
  } ;
  
  union {
    __IOM uint32_t ADTDR;                       /*!< (@ 0x00000038) TIMER3n ADC Trigger Generator Data Register                */
    
    struct {
      __IOM uint32_t ADTDATA    : 14;           /*!< [13..0] TIMER3n ADC Trigger Generation Data                               */
    } ADTDR_b;
  } ;
} TIMER30_Type;                                 /*!< Size = 60 (0x3c)                                                          */



/* =========================================================================================================================== */
/* ================                                            ADC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief 12 Bit A/D Converter (ADC)
  */

typedef struct {                                /*!< (@ 0x40003000) ADC Structure                                              */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) A/D Converter Control Register                             */
    
    struct {
      __IOM uint32_t ADSEL      : 4;            /*!< [3..0] A/D Converter Channel Selection                                    */
      __IOM uint32_t ADCIFLAG   : 1;            /*!< [4..4] ADC Interrupt Flag                                                 */
      __IOM uint32_t ADCIEN     : 1;            /*!< [5..5] ADC Interrupt Enable                                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t ADST       : 1;            /*!< [8..8] ADC Conversion Start                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t REFSEL     : 1;            /*!< [10..10] ADC Reference Selection                                          */
      __IOM uint32_t TRIG       : 3;            /*!< [13..11] ADC Trigger Signal Selection                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t ADCEN      : 1;            /*!< [15..15] ADC Module Enable                                                */
    } CR_b;
  } ;
  
  union {
    __IM  uint32_t DR;                          /*!< (@ 0x00000004) A/D Converter Data Register                                */
    
    struct {
      __IM  uint32_t ADDATA     : 12;           /*!< [11..0] A/D Converter Result Data                                         */
    } DR_b;
  } ;
  
  union {
    __IOM uint32_t PREDR;                       /*!< (@ 0x00000008) A/D Converter Prescaler Data Register                      */
    
    struct {
      __IOM uint32_t PRED       : 5;            /*!< [4..0] A/D Converter Prescaler Data                                       */
    } PREDR_b;
  } ;
} ADC_Type;                                     /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                          USART1n                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief USART 1n (USART + SPI) (USART1n)
  */

typedef struct {                                /*!< (@ 0x54000000) USART1n Structure                                          */
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000000) USART1n Control Register 1                                 */
    
    struct {
      __IOM uint32_t RXEn       : 1;            /*!< [0..0] Enable the receiver unit.                                          */
      __IOM uint32_t TXEn       : 1;            /*!< [1..1] Enable the transmitter unit.                                       */
      __IOM uint32_t WAKEIEn    : 1;            /*!< [2..2] Asynchronous Wake-Up Interrupt Enable in Deep Sleep Mode           */
      __IOM uint32_t RXCIEn     : 1;            /*!< [3..3] Receive Complete Interrupt Enable                                  */
      __IOM uint32_t TXCIEn     : 1;            /*!< [4..4] Transmit Complete Interrupt Enable                                 */
      __IOM uint32_t DRIEn      : 1;            /*!< [5..5] Transmit Data Register Empty Interrupt Enable                      */
      __IOM uint32_t CPHAn      : 1;            /*!< [6..6] The CPOLn and this bit determine if data are sampled
                                                     on the leading or trailing edge of SCK (only SPI mode)                    */
      __IOM uint32_t CPOLn      : 1;            /*!< [7..7] Selects the Clock Polarity of ACK in Synchronous or SPI
                                                     mode                                                                      */
      __IOM uint32_t ORDn       : 1;            /*!< [8..8] Selects the first data bit to be transmitted (only SPI
                                                     mode)                                                                     */
      __IOM uint32_t USTnS      : 3;            /*!< [11..9] Selects the length of data bit in a frame when Asynchronous
                                                     or Synchronous mode                                                       */
      __IOM uint32_t USTnP      : 2;            /*!< [13..12] Selects Parity Generation and Check method (only UART
                                                     mode)                                                                     */
      __IOM uint32_t USTnMS     : 2;            /*!< [15..14] USART1n Operation Mode Selection                                 */
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t CR2;                         /*!< (@ 0x00000004) USART1n Control Register 2                                 */
    
    struct {
      __IOM uint32_t USTnRX8    : 1;            /*!< [0..0] The ninth bit of data frame in Asynchronous or Synchronous
                                                     mode of operation                                                         */
      __IOM uint32_t USTnTX8    : 1;            /*!< [1..1] The ninth bit of data frame in Asynchronous or Synchronous
                                                     mode of operation                                                         */
      __IOM uint32_t USTnSB     : 1;            /*!< [2..2] Selects the length of stop bit in Asynchronous or Synchronous
                                                     mode                                                                      */
      __IOM uint32_t FXCHn      : 1;            /*!< [3..3] SPI1n port function exchange control (only SPI mode)               */
      __IOM uint32_t USTnSSEN   : 1;            /*!< [4..4] This bit controls the SS1n pin operation (only SPI mode)           */
      __IOM uint32_t DISSCKn    : 1;            /*!< [5..5] In synchronous mode operation, selects the waveform of
                                                     SCK1n output                                                              */
      __IOM uint32_t LOOPSn     : 1;            /*!< [6..6] Control the Loop Back mode of USART1n for test mode                */
      __IOM uint32_t MASTERn    : 1;            /*!< [7..7] Selects master or slave in SPI1n or Synchronous mode
                                                     and controls the direction of SCK1n pin                                   */
      __IOM uint32_t DBLSn      : 1;            /*!< [8..8] Selects receiver sampling rate (only UART mode)                    */
      __IOM uint32_t USTnEN     : 1;            /*!< [9..9] Activate USART1n Block                                             */
    } CR2_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t ST;                          /*!< (@ 0x0000000C) USART1n Status Register                                    */
    
    struct {
      __IOM uint32_t PEn        : 1;            /*!< [0..0] This bit is set if the next character in the receive
                                                     buffer has a Parity Error while parity is checked                         */
      __IOM uint32_t FEn        : 1;            /*!< [1..1] This bit is set if the first stop bit of next character
                                                     in the receive buffer is detected as '0'                                  */
      __IM  uint32_t DORn       : 1;            /*!< [2..2] This bit is set if data OverRun takes place                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t WAKEn      : 1;            /*!< [4..4] Asynchronous Wake-Up Interrupt Flag                                */
      __IM  uint32_t RXCn       : 1;            /*!< [5..5] Receive Complete Interrupt Flag                                    */
      __IOM uint32_t TXCn       : 1;            /*!< [6..6] Transmit Complete Interrupt Flag                                   */
      __IOM uint32_t DREn       : 1;            /*!< [7..7] Transmit Data Register Empty Interrupt Flag                        */
    } ST_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000010) USART1n Baud Rate Generation Register                      */
    
    struct {
      __IOM uint32_t BDATA      : 12;           /*!< [11..0] The value in this register is used to generate internal
                                                     baud rate in UART mode or to generate SCK clock in SPI
                                                     mode                                                                      */
    } BDR_b;
  } ;
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000014) USART1n Data Register                                      */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] The USART Transmit buffer and Receive buffer share the
                                                     same I/O address with this DATA register                                  */
    } DR_b;
  } ;
} USART1n_Type;                                 /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                          USART10                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief USART 10 (USART + SPI) (USART10)
  */

typedef struct {                                /*!< (@ 0x40003800) USART10 Structure                                          */
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000000) USART1n Control Register 1                                 */
    
    struct {
      __IOM uint32_t RXEn       : 1;            /*!< [0..0] Enable the receiver unit.                                          */
      __IOM uint32_t TXEn       : 1;            /*!< [1..1] Enable the transmitter unit.                                       */
      __IOM uint32_t WAKEIEn    : 1;            /*!< [2..2] Asynchronous Wake-Up Interrupt Enable in Deep Sleep Mode           */
      __IOM uint32_t RXCIEn     : 1;            /*!< [3..3] Receive Complete Interrupt Enable                                  */
      __IOM uint32_t TXCIEn     : 1;            /*!< [4..4] Transmit Complete Interrupt Enable                                 */
      __IOM uint32_t DRIEn      : 1;            /*!< [5..5] Transmit Data Register Empty Interrupt Enable                      */
      __IOM uint32_t CPHAn      : 1;            /*!< [6..6] The CPOLn and this bit determine if data are sampled
                                                     on the leading or trailing edge of SCK (only SPI mode)                    */
      __IOM uint32_t CPOLn      : 1;            /*!< [7..7] Selects the Clock Polarity of ACK in Synchronous or SPI
                                                     mode                                                                      */
      __IOM uint32_t ORDn       : 1;            /*!< [8..8] Selects the first data bit to be transmitted (only SPI
                                                     mode)                                                                     */
      __IOM uint32_t USTnS      : 3;            /*!< [11..9] Selects the length of data bit in a frame when Asynchronous
                                                     or Synchronous mode                                                       */
      __IOM uint32_t USTnP      : 2;            /*!< [13..12] Selects Parity Generation and Check method (only UART
                                                     mode)                                                                     */
      __IOM uint32_t USTnMS     : 2;            /*!< [15..14] USART1n Operation Mode Selection                                 */
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t CR2;                         /*!< (@ 0x00000004) USART1n Control Register 2                                 */
    
    struct {
      __IOM uint32_t USTnRX8    : 1;            /*!< [0..0] The ninth bit of data frame in Asynchronous or Synchronous
                                                     mode of operation                                                         */
      __IOM uint32_t USTnTX8    : 1;            /*!< [1..1] The ninth bit of data frame in Asynchronous or Synchronous
                                                     mode of operation                                                         */
      __IOM uint32_t USTnSB     : 1;            /*!< [2..2] Selects the length of stop bit in Asynchronous or Synchronous
                                                     mode                                                                      */
      __IOM uint32_t FXCHn      : 1;            /*!< [3..3] SPI1n port function exchange control (only SPI mode)               */
      __IOM uint32_t USTnSSEN   : 1;            /*!< [4..4] This bit controls the SS1n pin operation (only SPI mode)           */
      __IOM uint32_t DISSCKn    : 1;            /*!< [5..5] In synchronous mode operation, selects the waveform of
                                                     SCK1n output                                                              */
      __IOM uint32_t LOOPSn     : 1;            /*!< [6..6] Control the Loop Back mode of USART1n for test mode                */
      __IOM uint32_t MASTERn    : 1;            /*!< [7..7] Selects master or slave in SPI1n or Synchronous mode
                                                     and controls the direction of SCK1n pin                                   */
      __IOM uint32_t DBLSn      : 1;            /*!< [8..8] Selects receiver sampling rate (only UART mode)                    */
      __IOM uint32_t USTnEN     : 1;            /*!< [9..9] Activate USART1n Block                                             */
    } CR2_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t ST;                          /*!< (@ 0x0000000C) USART1n Status Register                                    */
    
    struct {
      __IOM uint32_t PEn        : 1;            /*!< [0..0] This bit is set if the next character in the receive
                                                     buffer has a Parity Error while parity is checked                         */
      __IOM uint32_t FEn        : 1;            /*!< [1..1] This bit is set if the first stop bit of next character
                                                     in the receive buffer is detected as '0'                                  */
      __IM  uint32_t DORn       : 1;            /*!< [2..2] This bit is set if data OverRun takes place                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t WAKEn      : 1;            /*!< [4..4] Asynchronous Wake-Up Interrupt Flag                                */
      __IM  uint32_t RXCn       : 1;            /*!< [5..5] Receive Complete Interrupt Flag                                    */
      __IOM uint32_t TXCn       : 1;            /*!< [6..6] Transmit Complete Interrupt Flag                                   */
      __IOM uint32_t DREn       : 1;            /*!< [7..7] Transmit Data Register Empty Interrupt Flag                        */
    } ST_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000010) USART1n Baud Rate Generation Register                      */
    
    struct {
      __IOM uint32_t BDATA      : 12;           /*!< [11..0] The value in this register is used to generate internal
                                                     baud rate in UART mode or to generate SCK clock in SPI
                                                     mode                                                                      */
    } BDR_b;
  } ;
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000014) USART1n Data Register                                      */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] The USART Transmit buffer and Receive buffer share the
                                                     same I/O address with this DATA register                                  */
    } DR_b;
  } ;
} USART10_Type;                                 /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                          USART11                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief USART 11 (USART + SPI) (USART11)
  */

typedef struct {                                /*!< (@ 0x40003900) USART11 Structure                                          */
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000000) USART1n Control Register 1                                 */
    
    struct {
      __IOM uint32_t RXEn       : 1;            /*!< [0..0] Enable the receiver unit.                                          */
      __IOM uint32_t TXEn       : 1;            /*!< [1..1] Enable the transmitter unit.                                       */
      __IOM uint32_t WAKEIEn    : 1;            /*!< [2..2] Asynchronous Wake-Up Interrupt Enable in Deep Sleep Mode           */
      __IOM uint32_t RXCIEn     : 1;            /*!< [3..3] Receive Complete Interrupt Enable                                  */
      __IOM uint32_t TXCIEn     : 1;            /*!< [4..4] Transmit Complete Interrupt Enable                                 */
      __IOM uint32_t DRIEn      : 1;            /*!< [5..5] Transmit Data Register Empty Interrupt Enable                      */
      __IOM uint32_t CPHAn      : 1;            /*!< [6..6] The CPOLn and this bit determine if data are sampled
                                                     on the leading or trailing edge of SCK (only SPI mode)                    */
      __IOM uint32_t CPOLn      : 1;            /*!< [7..7] Selects the Clock Polarity of ACK in Synchronous or SPI
                                                     mode                                                                      */
      __IOM uint32_t ORDn       : 1;            /*!< [8..8] Selects the first data bit to be transmitted (only SPI
                                                     mode)                                                                     */
      __IOM uint32_t USTnS      : 3;            /*!< [11..9] Selects the length of data bit in a frame when Asynchronous
                                                     or Synchronous mode                                                       */
      __IOM uint32_t USTnP      : 2;            /*!< [13..12] Selects Parity Generation and Check method (only UART
                                                     mode)                                                                     */
      __IOM uint32_t USTnMS     : 2;            /*!< [15..14] USART1n Operation Mode Selection                                 */
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t CR2;                         /*!< (@ 0x00000004) USART1n Control Register 2                                 */
    
    struct {
      __IOM uint32_t USTnRX8    : 1;            /*!< [0..0] The ninth bit of data frame in Asynchronous or Synchronous
                                                     mode of operation                                                         */
      __IOM uint32_t USTnTX8    : 1;            /*!< [1..1] The ninth bit of data frame in Asynchronous or Synchronous
                                                     mode of operation                                                         */
      __IOM uint32_t USTnSB     : 1;            /*!< [2..2] Selects the length of stop bit in Asynchronous or Synchronous
                                                     mode                                                                      */
      __IOM uint32_t FXCHn      : 1;            /*!< [3..3] SPI1n port function exchange control (only SPI mode)               */
      __IOM uint32_t USTnSSEN   : 1;            /*!< [4..4] This bit controls the SS1n pin operation (only SPI mode)           */
      __IOM uint32_t DISSCKn    : 1;            /*!< [5..5] In synchronous mode operation, selects the waveform of
                                                     SCK1n output                                                              */
      __IOM uint32_t LOOPSn     : 1;            /*!< [6..6] Control the Loop Back mode of USART1n for test mode                */
      __IOM uint32_t MASTERn    : 1;            /*!< [7..7] Selects master or slave in SPI1n or Synchronous mode
                                                     and controls the direction of SCK1n pin                                   */
      __IOM uint32_t DBLSn      : 1;            /*!< [8..8] Selects receiver sampling rate (only UART mode)                    */
      __IOM uint32_t USTnEN     : 1;            /*!< [9..9] Activate USART1n Block                                             */
    } CR2_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t ST;                          /*!< (@ 0x0000000C) USART1n Status Register                                    */
    
    struct {
      __IOM uint32_t PEn        : 1;            /*!< [0..0] This bit is set if the next character in the receive
                                                     buffer has a Parity Error while parity is checked                         */
      __IOM uint32_t FEn        : 1;            /*!< [1..1] This bit is set if the first stop bit of next character
                                                     in the receive buffer is detected as '0'                                  */
      __IM  uint32_t DORn       : 1;            /*!< [2..2] This bit is set if data OverRun takes place                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t WAKEn      : 1;            /*!< [4..4] Asynchronous Wake-Up Interrupt Flag                                */
      __IM  uint32_t RXCn       : 1;            /*!< [5..5] Receive Complete Interrupt Flag                                    */
      __IOM uint32_t TXCn       : 1;            /*!< [6..6] Transmit Complete Interrupt Flag                                   */
      __IOM uint32_t DREn       : 1;            /*!< [7..7] Transmit Data Register Empty Interrupt Flag                        */
    } ST_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000010) USART1n Baud Rate Generation Register                      */
    
    struct {
      __IOM uint32_t BDATA      : 12;           /*!< [11..0] The value in this register is used to generate internal
                                                     baud rate in UART mode or to generate SCK clock in SPI
                                                     mode                                                                      */
    } BDR_b;
  } ;
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000014) USART1n Data Register                                      */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] The USART Transmit buffer and Receive buffer share the
                                                     same I/O address with this DATA register                                  */
    } DR_b;
  } ;
} USART11_Type;                                 /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                          USART12                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief USART 12 (USART + SPI) (USART12)
  */

typedef struct {                                /*!< (@ 0x40003A00) USART12 Structure                                          */
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000000) USART1n Control Register 1                                 */
    
    struct {
      __IOM uint32_t RXEn       : 1;            /*!< [0..0] Enable the receiver unit.                                          */
      __IOM uint32_t TXEn       : 1;            /*!< [1..1] Enable the transmitter unit.                                       */
      __IOM uint32_t WAKEIEn    : 1;            /*!< [2..2] Asynchronous Wake-Up Interrupt Enable in Deep Sleep Mode           */
      __IOM uint32_t RXCIEn     : 1;            /*!< [3..3] Receive Complete Interrupt Enable                                  */
      __IOM uint32_t TXCIEn     : 1;            /*!< [4..4] Transmit Complete Interrupt Enable                                 */
      __IOM uint32_t DRIEn      : 1;            /*!< [5..5] Transmit Data Register Empty Interrupt Enable                      */
      __IOM uint32_t CPHAn      : 1;            /*!< [6..6] The CPOLn and this bit determine if data are sampled
                                                     on the leading or trailing edge of SCK (only SPI mode)                    */
      __IOM uint32_t CPOLn      : 1;            /*!< [7..7] Selects the Clock Polarity of ACK in Synchronous or SPI
                                                     mode                                                                      */
      __IOM uint32_t ORDn       : 1;            /*!< [8..8] Selects the first data bit to be transmitted (only SPI
                                                     mode)                                                                     */
      __IOM uint32_t USTnS      : 3;            /*!< [11..9] Selects the length of data bit in a frame when Asynchronous
                                                     or Synchronous mode                                                       */
      __IOM uint32_t USTnP      : 2;            /*!< [13..12] Selects Parity Generation and Check method (only UART
                                                     mode)                                                                     */
      __IOM uint32_t USTnMS     : 2;            /*!< [15..14] USART1n Operation Mode Selection                                 */
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t CR2;                         /*!< (@ 0x00000004) USART1n Control Register 2                                 */
    
    struct {
      __IOM uint32_t USTnRX8    : 1;            /*!< [0..0] The ninth bit of data frame in Asynchronous or Synchronous
                                                     mode of operation                                                         */
      __IOM uint32_t USTnTX8    : 1;            /*!< [1..1] The ninth bit of data frame in Asynchronous or Synchronous
                                                     mode of operation                                                         */
      __IOM uint32_t USTnSB     : 1;            /*!< [2..2] Selects the length of stop bit in Asynchronous or Synchronous
                                                     mode                                                                      */
      __IOM uint32_t FXCHn      : 1;            /*!< [3..3] SPI1n port function exchange control (only SPI mode)               */
      __IOM uint32_t USTnSSEN   : 1;            /*!< [4..4] This bit controls the SS1n pin operation (only SPI mode)           */
      __IOM uint32_t DISSCKn    : 1;            /*!< [5..5] In synchronous mode operation, selects the waveform of
                                                     SCK1n output                                                              */
      __IOM uint32_t LOOPSn     : 1;            /*!< [6..6] Control the Loop Back mode of USART1n for test mode                */
      __IOM uint32_t MASTERn    : 1;            /*!< [7..7] Selects master or slave in SPI1n or Synchronous mode
                                                     and controls the direction of SCK1n pin                                   */
      __IOM uint32_t DBLSn      : 1;            /*!< [8..8] Selects receiver sampling rate (only UART mode)                    */
      __IOM uint32_t USTnEN     : 1;            /*!< [9..9] Activate USART1n Block                                             */
    } CR2_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t ST;                          /*!< (@ 0x0000000C) USART1n Status Register                                    */
    
    struct {
      __IOM uint32_t PEn        : 1;            /*!< [0..0] This bit is set if the next character in the receive
                                                     buffer has a Parity Error while parity is checked                         */
      __IOM uint32_t FEn        : 1;            /*!< [1..1] This bit is set if the first stop bit of next character
                                                     in the receive buffer is detected as '0'                                  */
      __IM  uint32_t DORn       : 1;            /*!< [2..2] This bit is set if data OverRun takes place                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t WAKEn      : 1;            /*!< [4..4] Asynchronous Wake-Up Interrupt Flag                                */
      __IM  uint32_t RXCn       : 1;            /*!< [5..5] Receive Complete Interrupt Flag                                    */
      __IOM uint32_t TXCn       : 1;            /*!< [6..6] Transmit Complete Interrupt Flag                                   */
      __IOM uint32_t DREn       : 1;            /*!< [7..7] Transmit Data Register Empty Interrupt Flag                        */
    } ST_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000010) USART1n Baud Rate Generation Register                      */
    
    struct {
      __IOM uint32_t BDATA      : 12;           /*!< [11..0] The value in this register is used to generate internal
                                                     baud rate in UART mode or to generate SCK clock in SPI
                                                     mode                                                                      */
    } BDR_b;
  } ;
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000014) USART1n Data Register                                      */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] The USART Transmit buffer and Receive buffer share the
                                                     same I/O address with this DATA register                                  */
    } DR_b;
  } ;
} USART12_Type;                                 /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                          USART13                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief USART 13 (USART + SPI) (USART13)
  */

typedef struct {                                /*!< (@ 0x40003B00) USART13 Structure                                          */
  
  union {
    __IOM uint32_t CR1;                         /*!< (@ 0x00000000) USART1n Control Register 1                                 */
    
    struct {
      __IOM uint32_t RXEn       : 1;            /*!< [0..0] Enable the receiver unit.                                          */
      __IOM uint32_t TXEn       : 1;            /*!< [1..1] Enable the transmitter unit.                                       */
      __IOM uint32_t WAKEIEn    : 1;            /*!< [2..2] Asynchronous Wake-Up Interrupt Enable in Deep Sleep Mode           */
      __IOM uint32_t RXCIEn     : 1;            /*!< [3..3] Receive Complete Interrupt Enable                                  */
      __IOM uint32_t TXCIEn     : 1;            /*!< [4..4] Transmit Complete Interrupt Enable                                 */
      __IOM uint32_t DRIEn      : 1;            /*!< [5..5] Transmit Data Register Empty Interrupt Enable                      */
      __IOM uint32_t CPHAn      : 1;            /*!< [6..6] The CPOLn and this bit determine if data are sampled
                                                     on the leading or trailing edge of SCK (only SPI mode)                    */
      __IOM uint32_t CPOLn      : 1;            /*!< [7..7] Selects the Clock Polarity of ACK in Synchronous or SPI
                                                     mode                                                                      */
      __IOM uint32_t ORDn       : 1;            /*!< [8..8] Selects the first data bit to be transmitted (only SPI
                                                     mode)                                                                     */
      __IOM uint32_t USTnS      : 3;            /*!< [11..9] Selects the length of data bit in a frame when Asynchronous
                                                     or Synchronous mode                                                       */
      __IOM uint32_t USTnP      : 2;            /*!< [13..12] Selects Parity Generation and Check method (only UART
                                                     mode)                                                                     */
      __IOM uint32_t USTnMS     : 2;            /*!< [15..14] USART1n Operation Mode Selection                                 */
    } CR1_b;
  } ;
  
  union {
    __IOM uint32_t CR2;                         /*!< (@ 0x00000004) USART1n Control Register 2                                 */
    
    struct {
      __IOM uint32_t USTnRX8    : 1;            /*!< [0..0] The ninth bit of data frame in Asynchronous or Synchronous
                                                     mode of operation                                                         */
      __IOM uint32_t USTnTX8    : 1;            /*!< [1..1] The ninth bit of data frame in Asynchronous or Synchronous
                                                     mode of operation                                                         */
      __IOM uint32_t USTnSB     : 1;            /*!< [2..2] Selects the length of stop bit in Asynchronous or Synchronous
                                                     mode                                                                      */
      __IOM uint32_t FXCHn      : 1;            /*!< [3..3] SPI1n port function exchange control (only SPI mode)               */
      __IOM uint32_t USTnSSEN   : 1;            /*!< [4..4] This bit controls the SS1n pin operation (only SPI mode)           */
      __IOM uint32_t DISSCKn    : 1;            /*!< [5..5] In synchronous mode operation, selects the waveform of
                                                     SCK1n output                                                              */
      __IOM uint32_t LOOPSn     : 1;            /*!< [6..6] Control the Loop Back mode of USART1n for test mode                */
      __IOM uint32_t MASTERn    : 1;            /*!< [7..7] Selects master or slave in SPI1n or Synchronous mode
                                                     and controls the direction of SCK1n pin                                   */
      __IOM uint32_t DBLSn      : 1;            /*!< [8..8] Selects receiver sampling rate (only UART mode)                    */
      __IOM uint32_t USTnEN     : 1;            /*!< [9..9] Activate USART1n Block                                             */
    } CR2_b;
  } ;
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t ST;                          /*!< (@ 0x0000000C) USART1n Status Register                                    */
    
    struct {
      __IOM uint32_t PEn        : 1;            /*!< [0..0] This bit is set if the next character in the receive
                                                     buffer has a Parity Error while parity is checked                         */
      __IOM uint32_t FEn        : 1;            /*!< [1..1] This bit is set if the first stop bit of next character
                                                     in the receive buffer is detected as '0'                                  */
      __IM  uint32_t DORn       : 1;            /*!< [2..2] This bit is set if data OverRun takes place                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t WAKEn      : 1;            /*!< [4..4] Asynchronous Wake-Up Interrupt Flag                                */
      __IM  uint32_t RXCn       : 1;            /*!< [5..5] Receive Complete Interrupt Flag                                    */
      __IOM uint32_t TXCn       : 1;            /*!< [6..6] Transmit Complete Interrupt Flag                                   */
      __IOM uint32_t DREn       : 1;            /*!< [7..7] Transmit Data Register Empty Interrupt Flag                        */
    } ST_b;
  } ;
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000010) USART1n Baud Rate Generation Register                      */
    
    struct {
      __IOM uint32_t BDATA      : 12;           /*!< [11..0] The value in this register is used to generate internal
                                                     baud rate in UART mode or to generate SCK clock in SPI
                                                     mode                                                                      */
    } BDR_b;
  } ;
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000014) USART1n Data Register                                      */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] The USART Transmit buffer and Receive buffer share the
                                                     same I/O address with this DATA register                                  */
    } DR_b;
  } ;
} USART13_Type;                                 /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           UARTn                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief UART n (UARTn)
  */

typedef struct {                                /*!< (@ 0x55000000) UARTn Structure                                            */
  
  union {
    union {
      __IM  uint32_t RBR;                       /*!< (@ 0x00000000) UARTn Receive Data Buffer Register                         */
      
      struct {
        __IM  uint32_t RBR      : 8;            /*!< [7..0] UARTn Receive Data Buffer                                          */
      } RBR_b;
    } ;
    
    union {
      __OM  uint32_t THR;                       /*!< (@ 0x00000000) UARTn Transmit Data Hold Register                          */
      
      struct {
        __OM  uint32_t THR      : 8;            /*!< [7..0] UARTn Transmit Data Hold                                           */
      } THR_b;
    } ;
  };
  
  union {
    __IOM uint32_t IER;                         /*!< (@ 0x00000004) UARTn Interrupt Enable Register                            */
    
    struct {
      __IOM uint32_t DRIE       : 1;            /*!< [0..0] Data Receive Interrupt Enable                                      */
      __IOM uint32_t THREIE     : 1;            /*!< [1..1] Transmit Holding Register Empty Interrupt Enable                   */
      __IOM uint32_t RLSIE      : 1;            /*!< [2..2] Receiver Line Status Interrupt Enable                              */
      __IOM uint32_t TXEIE      : 1;            /*!< [3..3] Transmit Empty Interrupt Enable                                    */
    } IER_b;
  } ;
  
  union {
    __IM  uint32_t IIR;                         /*!< (@ 0x00000008) UARTn Interrupt ID Register                                */
    
    struct {
      __IM  uint32_t IPEN       : 1;            /*!< [0..0] Interrupt Pending                                                  */
      __IM  uint32_t IID        : 2;            /*!< [2..1] UARTn Interrupt ID                                                 */
      __IM  uint32_t            : 1;
      __IM  uint32_t TXE        : 1;            /*!< [4..4] Transmit Complete Interrupt Source ID                              */
    } IIR_b;
  } ;
  
  union {
    __IOM uint32_t LCR;                         /*!< (@ 0x0000000C) UARTn Line Control Register                                */
    
    struct {
      __IOM uint32_t DLEN       : 2;            /*!< [1..0] Data Length Selection                                              */
      __IOM uint32_t STOPBIT    : 1;            /*!< [2..2] Stop Bit Length Selection                                          */
      __IOM uint32_t PEN        : 1;            /*!< [3..3] Parity Bit Transfer Enable                                         */
      __IOM uint32_t PARITY     : 1;            /*!< [4..4] Parity Mode and Parity Stuck Selection                             */
      __IOM uint32_t STICKP     : 1;            /*!< [5..5] Force Parity                                                       */
      __IOM uint32_t BREAK      : 1;            /*!< [6..6] Transfer Break Control                                             */
    } LCR_b;
  } ;
  
  union {
    __IOM uint32_t DCR;                         /*!< (@ 0x00000010) UARTn Data Control Register                                */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t TXINV      : 1;            /*!< [2..2] Transmit Data Inversion Selection                                  */
      __IOM uint32_t RXINV      : 1;            /*!< [3..3] Receive Data Inversion Selection                                   */
      __IOM uint32_t LBON       : 1;            /*!< [4..4] Local Loopback Test Mode Enable                                    */
    } DCR_b;
  } ;
  
  union {
    __IM  uint32_t LSR;                         /*!< (@ 0x00000014) UARTn Line Status Register                                 */
    
    struct {
      __IM  uint32_t DR         : 1;            /*!< [0..0] Data Receive Indicator                                             */
      __IM  uint32_t OE         : 1;            /*!< [1..1] Overrun Error Indicator                                            */
      __IM  uint32_t PE         : 1;            /*!< [2..2] Parity Error Indicator                                             */
      __IM  uint32_t FE         : 1;            /*!< [3..3] Frame Error Indicator                                              */
      __IM  uint32_t BI         : 1;            /*!< [4..4] Break Condition Indication                                         */
      __IM  uint32_t THRE       : 1;            /*!< [5..5] Transmit Hold Register Empty                                       */
      __IM  uint32_t TEMT       : 1;            /*!< [6..6] Transmit Register Empty                                            */
    } LSR_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000020) UARTn Baud Rate Divisor Latch Register                     */
    
    struct {
      __IOM uint32_t BDR        : 16;           /*!< [15..0] Baud Rate Divider Latch Value                                     */
    } BDR_b;
  } ;
  
  union {
    __IOM uint32_t BFR;                         /*!< (@ 0x00000024) UARTn Baud Rate Fractional Counter Value                   */
    
    struct {
      __IOM uint32_t BFR        : 8;            /*!< [7..0] Fraction Counter value                                             */
    } BFR_b;
  } ;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IOM uint32_t IDTR;                        /*!< (@ 0x00000030) UARTn Inter-frame Delay Time Register                      */
    
    struct {
      __IOM uint32_t WAITVAL    : 3;            /*!< [2..0] Wait Time Value                                                    */
      __IM  uint32_t            : 3;
      __IOM uint32_t DMS        : 1;            /*!< [6..6] Data Bit Multi Sampling Enable                                     */
      __IOM uint32_t SMS        : 1;            /*!< [7..7] Start Bit Multi Sampling Enable                                    */
    } IDTR_b;
  } ;
} UARTn_Type;                                   /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                           UART0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief UART 0 (UART0)
  */

typedef struct {                                /*!< (@ 0x40004000) UART0 Structure                                            */
  
  union {
    union {
      __IM  uint32_t RBR;                       /*!< (@ 0x00000000) UARTn Receive Data Buffer Register                         */
      
      struct {
        __IM  uint32_t RBR      : 8;            /*!< [7..0] UARTn Receive Data Buffer                                          */
      } RBR_b;
    } ;
    
    union {
      __OM  uint32_t THR;                       /*!< (@ 0x00000000) UARTn Transmit Data Hold Register                          */
      
      struct {
        __OM  uint32_t THR      : 8;            /*!< [7..0] UARTn Transmit Data Hold                                           */
      } THR_b;
    } ;
  };
  
  union {
    __IOM uint32_t IER;                         /*!< (@ 0x00000004) UARTn Interrupt Enable Register                            */
    
    struct {
      __IOM uint32_t DRIE       : 1;            /*!< [0..0] Data Receive Interrupt Enable                                      */
      __IOM uint32_t THREIE     : 1;            /*!< [1..1] Transmit Holding Register Empty Interrupt Enable                   */
      __IOM uint32_t RLSIE      : 1;            /*!< [2..2] Receiver Line Status Interrupt Enable                              */
      __IOM uint32_t TXEIE      : 1;            /*!< [3..3] Transmit Empty Interrupt Enable                                    */
    } IER_b;
  } ;
  
  union {
    __IM  uint32_t IIR;                         /*!< (@ 0x00000008) UARTn Interrupt ID Register                                */
    
    struct {
      __IM  uint32_t IPEN       : 1;            /*!< [0..0] Interrupt Pending                                                  */
      __IM  uint32_t IID        : 2;            /*!< [2..1] UARTn Interrupt ID                                                 */
      __IM  uint32_t            : 1;
      __IM  uint32_t TXE        : 1;            /*!< [4..4] Transmit Complete Interrupt Source ID                              */
    } IIR_b;
  } ;
  
  union {
    __IOM uint32_t LCR;                         /*!< (@ 0x0000000C) UARTn Line Control Register                                */
    
    struct {
      __IOM uint32_t DLEN       : 2;            /*!< [1..0] Data Length Selection                                              */
      __IOM uint32_t STOPBIT    : 1;            /*!< [2..2] Stop Bit Length Selection                                          */
      __IOM uint32_t PEN        : 1;            /*!< [3..3] Parity Bit Transfer Enable                                         */
      __IOM uint32_t PARITY     : 1;            /*!< [4..4] Parity Mode and Parity Stuck Selection                             */
      __IOM uint32_t STICKP     : 1;            /*!< [5..5] Force Parity                                                       */
      __IOM uint32_t BREAK      : 1;            /*!< [6..6] Transfer Break Control                                             */
    } LCR_b;
  } ;
  
  union {
    __IOM uint32_t DCR;                         /*!< (@ 0x00000010) UARTn Data Control Register                                */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t TXINV      : 1;            /*!< [2..2] Transmit Data Inversion Selection                                  */
      __IOM uint32_t RXINV      : 1;            /*!< [3..3] Receive Data Inversion Selection                                   */
      __IOM uint32_t LBON       : 1;            /*!< [4..4] Local Loopback Test Mode Enable                                    */
    } DCR_b;
  } ;
  
  union {
    __IM  uint32_t LSR;                         /*!< (@ 0x00000014) UARTn Line Status Register                                 */
    
    struct {
      __IM  uint32_t DR         : 1;            /*!< [0..0] Data Receive Indicator                                             */
      __IM  uint32_t OE         : 1;            /*!< [1..1] Overrun Error Indicator                                            */
      __IM  uint32_t PE         : 1;            /*!< [2..2] Parity Error Indicator                                             */
      __IM  uint32_t FE         : 1;            /*!< [3..3] Frame Error Indicator                                              */
      __IM  uint32_t BI         : 1;            /*!< [4..4] Break Condition Indication                                         */
      __IM  uint32_t THRE       : 1;            /*!< [5..5] Transmit Hold Register Empty                                       */
      __IM  uint32_t TEMT       : 1;            /*!< [6..6] Transmit Register Empty                                            */
    } LSR_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000020) UARTn Baud Rate Divisor Latch Register                     */
    
    struct {
      __IOM uint32_t BDR        : 16;           /*!< [15..0] Baud Rate Divider Latch Value                                     */
    } BDR_b;
  } ;
  
  union {
    __IOM uint32_t BFR;                         /*!< (@ 0x00000024) UARTn Baud Rate Fractional Counter Value                   */
    
    struct {
      __IOM uint32_t BFR        : 8;            /*!< [7..0] Fraction Counter value                                             */
    } BFR_b;
  } ;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IOM uint32_t IDTR;                        /*!< (@ 0x00000030) UARTn Inter-frame Delay Time Register                      */
    
    struct {
      __IOM uint32_t WAITVAL    : 3;            /*!< [2..0] Wait Time Value                                                    */
      __IM  uint32_t            : 3;
      __IOM uint32_t DMS        : 1;            /*!< [6..6] Data Bit Multi Sampling Enable                                     */
      __IOM uint32_t SMS        : 1;            /*!< [7..7] Start Bit Multi Sampling Enable                                    */
    } IDTR_b;
  } ;
} UART0_Type;                                   /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                           UART1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief UART 1 (UART1)
  */

typedef struct {                                /*!< (@ 0x40004100) UART1 Structure                                            */
  
  union {
    union {
      __IM  uint32_t RBR;                       /*!< (@ 0x00000000) UARTn Receive Data Buffer Register                         */
      
      struct {
        __IM  uint32_t RBR      : 8;            /*!< [7..0] UARTn Receive Data Buffer                                          */
      } RBR_b;
    } ;
    
    union {
      __OM  uint32_t THR;                       /*!< (@ 0x00000000) UARTn Transmit Data Hold Register                          */
      
      struct {
        __OM  uint32_t THR      : 8;            /*!< [7..0] UARTn Transmit Data Hold                                           */
      } THR_b;
    } ;
  };
  
  union {
    __IOM uint32_t IER;                         /*!< (@ 0x00000004) UARTn Interrupt Enable Register                            */
    
    struct {
      __IOM uint32_t DRIE       : 1;            /*!< [0..0] Data Receive Interrupt Enable                                      */
      __IOM uint32_t THREIE     : 1;            /*!< [1..1] Transmit Holding Register Empty Interrupt Enable                   */
      __IOM uint32_t RLSIE      : 1;            /*!< [2..2] Receiver Line Status Interrupt Enable                              */
      __IOM uint32_t TXEIE      : 1;            /*!< [3..3] Transmit Empty Interrupt Enable                                    */
    } IER_b;
  } ;
  
  union {
    __IM  uint32_t IIR;                         /*!< (@ 0x00000008) UARTn Interrupt ID Register                                */
    
    struct {
      __IM  uint32_t IPEN       : 1;            /*!< [0..0] Interrupt Pending                                                  */
      __IM  uint32_t IID        : 2;            /*!< [2..1] UARTn Interrupt ID                                                 */
      __IM  uint32_t            : 1;
      __IM  uint32_t TXE        : 1;            /*!< [4..4] Transmit Complete Interrupt Source ID                              */
    } IIR_b;
  } ;
  
  union {
    __IOM uint32_t LCR;                         /*!< (@ 0x0000000C) UARTn Line Control Register                                */
    
    struct {
      __IOM uint32_t DLEN       : 2;            /*!< [1..0] Data Length Selection                                              */
      __IOM uint32_t STOPBIT    : 1;            /*!< [2..2] Stop Bit Length Selection                                          */
      __IOM uint32_t PEN        : 1;            /*!< [3..3] Parity Bit Transfer Enable                                         */
      __IOM uint32_t PARITY     : 1;            /*!< [4..4] Parity Mode and Parity Stuck Selection                             */
      __IOM uint32_t STICKP     : 1;            /*!< [5..5] Force Parity                                                       */
      __IOM uint32_t BREAK      : 1;            /*!< [6..6] Transfer Break Control                                             */
    } LCR_b;
  } ;
  
  union {
    __IOM uint32_t DCR;                         /*!< (@ 0x00000010) UARTn Data Control Register                                */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t TXINV      : 1;            /*!< [2..2] Transmit Data Inversion Selection                                  */
      __IOM uint32_t RXINV      : 1;            /*!< [3..3] Receive Data Inversion Selection                                   */
      __IOM uint32_t LBON       : 1;            /*!< [4..4] Local Loopback Test Mode Enable                                    */
    } DCR_b;
  } ;
  
  union {
    __IM  uint32_t LSR;                         /*!< (@ 0x00000014) UARTn Line Status Register                                 */
    
    struct {
      __IM  uint32_t DR         : 1;            /*!< [0..0] Data Receive Indicator                                             */
      __IM  uint32_t OE         : 1;            /*!< [1..1] Overrun Error Indicator                                            */
      __IM  uint32_t PE         : 1;            /*!< [2..2] Parity Error Indicator                                             */
      __IM  uint32_t FE         : 1;            /*!< [3..3] Frame Error Indicator                                              */
      __IM  uint32_t BI         : 1;            /*!< [4..4] Break Condition Indication                                         */
      __IM  uint32_t THRE       : 1;            /*!< [5..5] Transmit Hold Register Empty                                       */
      __IM  uint32_t TEMT       : 1;            /*!< [6..6] Transmit Register Empty                                            */
    } LSR_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t BDR;                         /*!< (@ 0x00000020) UARTn Baud Rate Divisor Latch Register                     */
    
    struct {
      __IOM uint32_t BDR        : 16;           /*!< [15..0] Baud Rate Divider Latch Value                                     */
    } BDR_b;
  } ;
  
  union {
    __IOM uint32_t BFR;                         /*!< (@ 0x00000024) UARTn Baud Rate Fractional Counter Value                   */
    
    struct {
      __IOM uint32_t BFR        : 8;            /*!< [7..0] Fraction Counter value                                             */
    } BFR_b;
  } ;
  __IM  uint32_t  RESERVED1[2];
  
  union {
    __IOM uint32_t IDTR;                        /*!< (@ 0x00000030) UARTn Inter-frame Delay Time Register                      */
    
    struct {
      __IOM uint32_t WAITVAL    : 3;            /*!< [2..0] Wait Time Value                                                    */
      __IM  uint32_t            : 3;
      __IOM uint32_t DMS        : 1;            /*!< [6..6] Data Bit Multi Sampling Enable                                     */
      __IOM uint32_t SMS        : 1;            /*!< [7..7] Start Bit Multi Sampling Enable                                    */
    } IDTR_b;
  } ;
} UART1_Type;                                   /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                           I2Cn                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief I2C n (I2Cn)
  */

typedef struct {                                /*!< (@ 0x56000000) I2Cn Structure                                             */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) I2Cn Control Register                                      */
    
    struct {
      __IOM uint32_t STARTCn    : 1;            /*!< [0..0] START Condition Generation when I2Cn is master                     */
      __IOM uint32_t STOPCn     : 1;            /*!< [1..1] STOP Condition Generation when I2Cn is master                      */
      __IM  uint32_t IMASTERn   : 1;            /*!< [2..2] Represent Operation Mode of I2Cn                                   */
      __IOM uint32_t ACKnEN     : 1;            /*!< [3..3] Controls ACK signal generation at ninth SCL period                 */
      __IOM uint32_t I2CnIFLAG  : 1;            /*!< [4..4] I2Cn Interrupt Flag                                                */
      __IOM uint32_t I2CnIEN    : 1;            /*!< [5..5] I2Cn Interrupt Enable                                              */
      __IOM uint32_t TXDLYENBn  : 1;            /*!< [6..6] SDHR Register Control                                              */
      __IOM uint32_t I2CnEN     : 1;            /*!< [7..7] Activate I2Cn Block by supplying                                   */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ST;                          /*!< (@ 0x00000004) I2Cn Status Register                                       */
    
    struct {
      __IOM uint32_t RXACKn     : 1;            /*!< [0..0] This bit shows the state of ACK signal                             */
      __IM  uint32_t TMODEn     : 1;            /*!< [1..1] This bit is used to indicate whether I2C is transmitter
                                                     or receiver                                                               */
      __IOM uint32_t BUSYn      : 1;            /*!< [2..2] This bit reflects bus status                                       */
      __IOM uint32_t MLOSTn     : 1;            /*!< [3..3] This bit represents the result of bus arbitration in
                                                     master mode                                                               */
      __IOM uint32_t SSELn      : 1;            /*!< [4..4] This bit is set when I2C is addressed by other master              */
      __IOM uint32_t STOPDn     : 1;            /*!< [5..5] This bit is set when a STOP condition is detected                  */
      __IOM uint32_t TENDn      : 1;            /*!< [6..6] This bit is set when 1-byte of data is transferred completely      */
      __IOM uint32_t GCALLn     : 1;            /*!< [7..7] This bit has different meaning depending on whether I2C
                                                     is master or slave. When I2C is a master, this bit represents
                                                     whether it received AACK (address ACK) from slave. When
                                                     I2C is a slave, this bit is used to indicate general call.                */
    } ST_b;
  } ;
  
  union {
    __IOM uint32_t SAR1;                        /*!< (@ 0x00000008) I2Cn Slave Address Register 1                              */
    
    struct {
      __IOM uint32_t GCALLnEN   : 1;            /*!< [0..0] This bit decides whether I2Cn allows general call address
                                                     1 or not in I2Cn slave mode                                               */
      __IOM uint32_t SLAn       : 7;            /*!< [7..1] These bits configure the slave address 1 in slave mode             */
    } SAR1_b;
  } ;
  
  union {
    __IOM uint32_t SAR2;                        /*!< (@ 0x0000000C) I2Cn Slave Address Register 2                              */
    
    struct {
      __IOM uint32_t GCALLnEN   : 1;            /*!< [0..0] This bit decides whether I2Cn allows general call address
                                                     2 or not in I2Cn slave mode                                               */
      __IOM uint32_t SLAn       : 7;            /*!< [7..1] These bits configure the slave address 2 in slave mode             */
    } SAR2_b;
  } ;
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000010) I2Cn Data Register                                         */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] The DR Transmit buffer and Receive buffer share the same
                                                     I/O address with this DATA register                                       */
    } DR_b;
  } ;
  
  union {
    __IOM uint32_t SDHR;                        /*!< (@ 0x00000014) I2Cn SDA Hold Time Register                                */
    
    struct {
      __IOM uint32_t HLDT       : 12;           /*!< [11..0] This register is used to control SDA output timing from
                                                     the falling edge of SCL                                                   */
    } SDHR_b;
  } ;
  
  union {
    __IOM uint32_t SCLR;                        /*!< (@ 0x00000018) I2Cn SCL Low Period Register                               */
    
    struct {
      __IOM uint32_t SCLL       : 12;           /*!< [11..0] This register defines the low period of SCL in master
                                                     mode                                                                      */
    } SCLR_b;
  } ;
  
  union {
    __IOM uint32_t SCHR;                        /*!< (@ 0x0000001C) I2Cn SCL High Period Register                              */
    
    struct {
      __IOM uint32_t SCLH       : 12;           /*!< [11..0] This register defines the high period of SCL in master
                                                     mode                                                                      */
    } SCHR_b;
  } ;
} I2Cn_Type;                                    /*!< Size = 32 (0x20)                                                          */



/* =========================================================================================================================== */
/* ================                                           I2C0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief I2C 0 (I2C0)
  */

typedef struct {                                /*!< (@ 0x40004800) I2C0 Structure                                             */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) I2Cn Control Register                                      */
    
    struct {
      __IOM uint32_t STARTCn    : 1;            /*!< [0..0] START Condition Generation when I2Cn is master                     */
      __IOM uint32_t STOPCn     : 1;            /*!< [1..1] STOP Condition Generation when I2Cn is master                      */
      __IM  uint32_t IMASTERn   : 1;            /*!< [2..2] Represent Operation Mode of I2Cn                                   */
      __IOM uint32_t ACKnEN     : 1;            /*!< [3..3] Controls ACK signal generation at ninth SCL period                 */
      __IOM uint32_t I2CnIFLAG  : 1;            /*!< [4..4] I2Cn Interrupt Flag                                                */
      __IOM uint32_t I2CnIEN    : 1;            /*!< [5..5] I2Cn Interrupt Enable                                              */
      __IOM uint32_t TXDLYENBn  : 1;            /*!< [6..6] SDHR Register Control                                              */
      __IOM uint32_t I2CnEN     : 1;            /*!< [7..7] Activate I2Cn Block by supplying                                   */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ST;                          /*!< (@ 0x00000004) I2Cn Status Register                                       */
    
    struct {
      __IOM uint32_t RXACKn     : 1;            /*!< [0..0] This bit shows the state of ACK signal                             */
      __IM  uint32_t TMODEn     : 1;            /*!< [1..1] This bit is used to indicate whether I2C is transmitter
                                                     or receiver                                                               */
      __IOM uint32_t BUSYn      : 1;            /*!< [2..2] This bit reflects bus status                                       */
      __IOM uint32_t MLOSTn     : 1;            /*!< [3..3] This bit represents the result of bus arbitration in
                                                     master mode                                                               */
      __IOM uint32_t SSELn      : 1;            /*!< [4..4] This bit is set when I2C is addressed by other master              */
      __IOM uint32_t STOPDn     : 1;            /*!< [5..5] This bit is set when a STOP condition is detected                  */
      __IOM uint32_t TENDn      : 1;            /*!< [6..6] This bit is set when 1-byte of data is transferred completely      */
      __IOM uint32_t GCALLn     : 1;            /*!< [7..7] This bit has different meaning depending on whether I2C
                                                     is master or slave. When I2C is a master, this bit represents
                                                     whether it received AACK (address ACK) from slave. When
                                                     I2C is a slave, this bit is used to indicate general call.                */
    } ST_b;
  } ;
  
  union {
    __IOM uint32_t SAR1;                        /*!< (@ 0x00000008) I2Cn Slave Address Register 1                              */
    
    struct {
      __IOM uint32_t GCALLnEN   : 1;            /*!< [0..0] This bit decides whether I2Cn allows general call address
                                                     1 or not in I2Cn slave mode                                               */
      __IOM uint32_t SLAn       : 7;            /*!< [7..1] These bits configure the slave address 1 in slave mode             */
    } SAR1_b;
  } ;
  
  union {
    __IOM uint32_t SAR2;                        /*!< (@ 0x0000000C) I2Cn Slave Address Register 2                              */
    
    struct {
      __IOM uint32_t GCALLnEN   : 1;            /*!< [0..0] This bit decides whether I2Cn allows general call address
                                                     2 or not in I2Cn slave mode                                               */
      __IOM uint32_t SLAn       : 7;            /*!< [7..1] These bits configure the slave address 2 in slave mode             */
    } SAR2_b;
  } ;
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000010) I2Cn Data Register                                         */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] The DR Transmit buffer and Receive buffer share the same
                                                     I/O address with this DATA register                                       */
    } DR_b;
  } ;
  
  union {
    __IOM uint32_t SDHR;                        /*!< (@ 0x00000014) I2Cn SDA Hold Time Register                                */
    
    struct {
      __IOM uint32_t HLDT       : 12;           /*!< [11..0] This register is used to control SDA output timing from
                                                     the falling edge of SCL                                                   */
    } SDHR_b;
  } ;
  
  union {
    __IOM uint32_t SCLR;                        /*!< (@ 0x00000018) I2Cn SCL Low Period Register                               */
    
    struct {
      __IOM uint32_t SCLL       : 12;           /*!< [11..0] This register defines the low period of SCL in master
                                                     mode                                                                      */
    } SCLR_b;
  } ;
  
  union {
    __IOM uint32_t SCHR;                        /*!< (@ 0x0000001C) I2Cn SCL High Period Register                              */
    
    struct {
      __IOM uint32_t SCLH       : 12;           /*!< [11..0] This register defines the high period of SCL in master
                                                     mode                                                                      */
    } SCHR_b;
  } ;
} I2C0_Type;                                    /*!< Size = 32 (0x20)                                                          */



/* =========================================================================================================================== */
/* ================                                           I2C1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief I2C 1 (I2C1)
  */

typedef struct {                                /*!< (@ 0x40004900) I2C1 Structure                                             */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) I2Cn Control Register                                      */
    
    struct {
      __IOM uint32_t STARTCn    : 1;            /*!< [0..0] START Condition Generation when I2Cn is master                     */
      __IOM uint32_t STOPCn     : 1;            /*!< [1..1] STOP Condition Generation when I2Cn is master                      */
      __IM  uint32_t IMASTERn   : 1;            /*!< [2..2] Represent Operation Mode of I2Cn                                   */
      __IOM uint32_t ACKnEN     : 1;            /*!< [3..3] Controls ACK signal generation at ninth SCL period                 */
      __IOM uint32_t I2CnIFLAG  : 1;            /*!< [4..4] I2Cn Interrupt Flag                                                */
      __IOM uint32_t I2CnIEN    : 1;            /*!< [5..5] I2Cn Interrupt Enable                                              */
      __IOM uint32_t TXDLYENBn  : 1;            /*!< [6..6] SDHR Register Control                                              */
      __IOM uint32_t I2CnEN     : 1;            /*!< [7..7] Activate I2Cn Block by supplying                                   */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ST;                          /*!< (@ 0x00000004) I2Cn Status Register                                       */
    
    struct {
      __IOM uint32_t RXACKn     : 1;            /*!< [0..0] This bit shows the state of ACK signal                             */
      __IM  uint32_t TMODEn     : 1;            /*!< [1..1] This bit is used to indicate whether I2C is transmitter
                                                     or receiver                                                               */
      __IOM uint32_t BUSYn      : 1;            /*!< [2..2] This bit reflects bus status                                       */
      __IOM uint32_t MLOSTn     : 1;            /*!< [3..3] This bit represents the result of bus arbitration in
                                                     master mode                                                               */
      __IOM uint32_t SSELn      : 1;            /*!< [4..4] This bit is set when I2C is addressed by other master              */
      __IOM uint32_t STOPDn     : 1;            /*!< [5..5] This bit is set when a STOP condition is detected                  */
      __IOM uint32_t TENDn      : 1;            /*!< [6..6] This bit is set when 1-byte of data is transferred completely      */
      __IOM uint32_t GCALLn     : 1;            /*!< [7..7] This bit has different meaning depending on whether I2C
                                                     is master or slave. When I2C is a master, this bit represents
                                                     whether it received AACK (address ACK) from slave. When
                                                     I2C is a slave, this bit is used to indicate general call.                */
    } ST_b;
  } ;
  
  union {
    __IOM uint32_t SAR1;                        /*!< (@ 0x00000008) I2Cn Slave Address Register 1                              */
    
    struct {
      __IOM uint32_t GCALLnEN   : 1;            /*!< [0..0] This bit decides whether I2Cn allows general call address
                                                     1 or not in I2Cn slave mode                                               */
      __IOM uint32_t SLAn       : 7;            /*!< [7..1] These bits configure the slave address 1 in slave mode             */
    } SAR1_b;
  } ;
  
  union {
    __IOM uint32_t SAR2;                        /*!< (@ 0x0000000C) I2Cn Slave Address Register 2                              */
    
    struct {
      __IOM uint32_t GCALLnEN   : 1;            /*!< [0..0] This bit decides whether I2Cn allows general call address
                                                     2 or not in I2Cn slave mode                                               */
      __IOM uint32_t SLAn       : 7;            /*!< [7..1] These bits configure the slave address 2 in slave mode             */
    } SAR2_b;
  } ;
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000010) I2Cn Data Register                                         */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] The DR Transmit buffer and Receive buffer share the same
                                                     I/O address with this DATA register                                       */
    } DR_b;
  } ;
  
  union {
    __IOM uint32_t SDHR;                        /*!< (@ 0x00000014) I2Cn SDA Hold Time Register                                */
    
    struct {
      __IOM uint32_t HLDT       : 12;           /*!< [11..0] This register is used to control SDA output timing from
                                                     the falling edge of SCL                                                   */
    } SDHR_b;
  } ;
  
  union {
    __IOM uint32_t SCLR;                        /*!< (@ 0x00000018) I2Cn SCL Low Period Register                               */
    
    struct {
      __IOM uint32_t SCLL       : 12;           /*!< [11..0] This register defines the low period of SCL in master
                                                     mode                                                                      */
    } SCLR_b;
  } ;
  
  union {
    __IOM uint32_t SCHR;                        /*!< (@ 0x0000001C) I2Cn SCL High Period Register                              */
    
    struct {
      __IOM uint32_t SCLH       : 12;           /*!< [11..0] This register defines the high period of SCL in master
                                                     mode                                                                      */
    } SCHR_b;
  } ;
} I2C1_Type;                                    /*!< Size = 32 (0x20)                                                          */



/* =========================================================================================================================== */
/* ================                                           I2C2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief I2C 2 (I2C2)
  */

typedef struct {                                /*!< (@ 0x40004A00) I2C2 Structure                                             */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) I2Cn Control Register                                      */
    
    struct {
      __IOM uint32_t STARTCn    : 1;            /*!< [0..0] START Condition Generation when I2Cn is master                     */
      __IOM uint32_t STOPCn     : 1;            /*!< [1..1] STOP Condition Generation when I2Cn is master                      */
      __IM  uint32_t IMASTERn   : 1;            /*!< [2..2] Represent Operation Mode of I2Cn                                   */
      __IOM uint32_t ACKnEN     : 1;            /*!< [3..3] Controls ACK signal generation at ninth SCL period                 */
      __IOM uint32_t I2CnIFLAG  : 1;            /*!< [4..4] I2Cn Interrupt Flag                                                */
      __IOM uint32_t I2CnIEN    : 1;            /*!< [5..5] I2Cn Interrupt Enable                                              */
      __IOM uint32_t TXDLYENBn  : 1;            /*!< [6..6] SDHR Register Control                                              */
      __IOM uint32_t I2CnEN     : 1;            /*!< [7..7] Activate I2Cn Block by supplying                                   */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t ST;                          /*!< (@ 0x00000004) I2Cn Status Register                                       */
    
    struct {
      __IOM uint32_t RXACKn     : 1;            /*!< [0..0] This bit shows the state of ACK signal                             */
      __IM  uint32_t TMODEn     : 1;            /*!< [1..1] This bit is used to indicate whether I2C is transmitter
                                                     or receiver                                                               */
      __IOM uint32_t BUSYn      : 1;            /*!< [2..2] This bit reflects bus status                                       */
      __IOM uint32_t MLOSTn     : 1;            /*!< [3..3] This bit represents the result of bus arbitration in
                                                     master mode                                                               */
      __IOM uint32_t SSELn      : 1;            /*!< [4..4] This bit is set when I2C is addressed by other master              */
      __IOM uint32_t STOPDn     : 1;            /*!< [5..5] This bit is set when a STOP condition is detected                  */
      __IOM uint32_t TENDn      : 1;            /*!< [6..6] This bit is set when 1-byte of data is transferred completely      */
      __IOM uint32_t GCALLn     : 1;            /*!< [7..7] This bit has different meaning depending on whether I2C
                                                     is master or slave. When I2C is a master, this bit represents
                                                     whether it received AACK (address ACK) from slave. When
                                                     I2C is a slave, this bit is used to indicate general call.                */
    } ST_b;
  } ;
  
  union {
    __IOM uint32_t SAR1;                        /*!< (@ 0x00000008) I2Cn Slave Address Register 1                              */
    
    struct {
      __IOM uint32_t GCALLnEN   : 1;            /*!< [0..0] This bit decides whether I2Cn allows general call address
                                                     1 or not in I2Cn slave mode                                               */
      __IOM uint32_t SLAn       : 7;            /*!< [7..1] These bits configure the slave address 1 in slave mode             */
    } SAR1_b;
  } ;
  
  union {
    __IOM uint32_t SAR2;                        /*!< (@ 0x0000000C) I2Cn Slave Address Register 2                              */
    
    struct {
      __IOM uint32_t GCALLnEN   : 1;            /*!< [0..0] This bit decides whether I2Cn allows general call address
                                                     2 or not in I2Cn slave mode                                               */
      __IOM uint32_t SLAn       : 7;            /*!< [7..1] These bits configure the slave address 2 in slave mode             */
    } SAR2_b;
  } ;
  
  union {
    __IOM uint32_t DR;                          /*!< (@ 0x00000010) I2Cn Data Register                                         */
    
    struct {
      __IOM uint32_t DATA       : 8;            /*!< [7..0] The DR Transmit buffer and Receive buffer share the same
                                                     I/O address with this DATA register                                       */
    } DR_b;
  } ;
  
  union {
    __IOM uint32_t SDHR;                        /*!< (@ 0x00000014) I2Cn SDA Hold Time Register                                */
    
    struct {
      __IOM uint32_t HLDT       : 12;           /*!< [11..0] This register is used to control SDA output timing from
                                                     the falling edge of SCL                                                   */
    } SDHR_b;
  } ;
  
  union {
    __IOM uint32_t SCLR;                        /*!< (@ 0x00000018) I2Cn SCL Low Period Register                               */
    
    struct {
      __IOM uint32_t SCLL       : 12;           /*!< [11..0] This register defines the low period of SCL in master
                                                     mode                                                                      */
    } SCLR_b;
  } ;
  
  union {
    __IOM uint32_t SCHR;                        /*!< (@ 0x0000001C) I2Cn SCL High Period Register                              */
    
    struct {
      __IOM uint32_t SCLH       : 12;           /*!< [11..0] This register defines the high period of SCL in master
                                                     mode                                                                      */
    } SCHR_b;
  } ;
} I2C2_Type;                                    /*!< Size = 32 (0x20)                                                          */



/* =========================================================================================================================== */
/* ================                                            LCD                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief LCD Driver (LCD)
  */

typedef struct {                                /*!< (@ 0x40005000) LCD Structure                                              */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) LCD Driver Control Register                                */
    
    struct {
      __IOM uint32_t DISP       : 1;            /*!< [0..0] LCD Display Control                                                */
      __IOM uint32_t LCLK       : 2;            /*!< [2..1] LCD Clock Selection (When fLCD = 32.768kHz)                        */
      __IOM uint32_t DBS        : 3;            /*!< [5..3] LCD Duty and Bias Selection                                        */
      __IOM uint32_t IRSEL      : 2;            /*!< [7..6] Internal LCD Bias Dividing Resistor Selection                      */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t BCCR;                        /*!< (@ 0x00000004) LCD Automatic Bias and Contrast Control Register           */
    
    struct {
      __IOM uint32_t VLCD       : 4;            /*!< [3..0] VLC0 Voltage Control when the contrast is enabled                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t LCTEN      : 1;            /*!< [5..5] LCD Driver Contrast Control                                        */
      __IM  uint32_t            : 2;
      __IOM uint32_t BMSEL      : 3;            /*!< [10..8] 'Bias Mode A' Time Selection                                      */
      __IM  uint32_t            : 1;
      __IOM uint32_t LCDABC     : 1;            /*!< [12..12] LCD Automatic Bias Control                                       */
    } BCCR_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  __IOM uint8_t   DR0;                          /*!< (@ 0x00000010) LCD Display Data Register 0                                */
  __IOM uint8_t   DR1;                          /*!< (@ 0x00000011) LCD Display Data Register 1                                */
  __IOM uint8_t   DR2;                          /*!< (@ 0x00000012) LCD Display Data Register 2                                */
  __IOM uint8_t   DR3;                          /*!< (@ 0x00000013) LCD Display Data Register 3                                */
  __IOM uint8_t   DR4;                          /*!< (@ 0x00000014) LCD Display Data Register 4                                */
  __IOM uint8_t   DR5;                          /*!< (@ 0x00000015) LCD Display Data Register 5                                */
  __IOM uint8_t   DR6;                          /*!< (@ 0x00000016) LCD Display Data Register 6                                */
  __IOM uint8_t   DR7;                          /*!< (@ 0x00000017) LCD Display Data Register 7                                */
  __IOM uint8_t   DR8;                          /*!< (@ 0x00000018) LCD Display Data Register 8                                */
  __IOM uint8_t   DR9;                          /*!< (@ 0x00000019) LCD Display Data Register 9                                */
  __IOM uint8_t   DR10;                         /*!< (@ 0x0000001A) LCD Display Data Register 10                               */
  __IOM uint8_t   DR11;                         /*!< (@ 0x0000001B) LCD Display Data Register 11                               */
  __IOM uint8_t   DR12;                         /*!< (@ 0x0000001C) LCD Display Data Register 12                               */
  __IOM uint8_t   DR13;                         /*!< (@ 0x0000001D) LCD Display Data Register 13                               */
  __IOM uint8_t   DR14;                         /*!< (@ 0x0000001E) LCD Display Data Register 14                               */
  __IOM uint8_t   DR15;                         /*!< (@ 0x0000001F) LCD Display Data Register 15                               */
  __IOM uint8_t   DR16;                         /*!< (@ 0x00000020) LCD Display Data Register 16                               */
  __IOM uint8_t   DR17;                         /*!< (@ 0x00000021) LCD Display Data Register 17                               */
  __IOM uint8_t   DR18;                         /*!< (@ 0x00000022) LCD Display Data Register 18                               */
  __IOM uint8_t   DR19;                         /*!< (@ 0x00000023) LCD Display Data Register 19                               */
  __IOM uint8_t   DR20;                         /*!< (@ 0x00000024) LCD Display Data Register 20                               */
  __IOM uint8_t   DR21;                         /*!< (@ 0x00000025) LCD Display Data Register 21                               */
  __IOM uint8_t   DR22;                         /*!< (@ 0x00000026) LCD Display Data Register 22                               */
  __IOM uint8_t   DR23;                         /*!< (@ 0x00000027) LCD Display Data Register 23                               */
  __IOM uint8_t   DR24;                         /*!< (@ 0x00000028) LCD Display Data Register 24                               */
  __IOM uint8_t   DR25;                         /*!< (@ 0x00000029) LCD Display Data Register 25                               */
  __IOM uint8_t   DR26;                         /*!< (@ 0x0000002A) LCD Display Data Register 26                               */
  __IOM uint8_t   DR27;                         /*!< (@ 0x0000002B) LCD Display Data Register 27                               */
  __IOM uint8_t   DR28;                         /*!< (@ 0x0000002C) LCD Display Data Register 28                               */
  __IOM uint8_t   DR29;                         /*!< (@ 0x0000002D) LCD Display Data Register 29                               */
  __IOM uint8_t   DR30;                         /*!< (@ 0x0000002E) LCD Display Data Register 30                               */
  __IOM uint8_t   DR31;                         /*!< (@ 0x0000002F) LCD Display Data Register 31                               */
  __IOM uint8_t   DR32;                         /*!< (@ 0x00000030) LCD Display Data Register 32                               */
  __IOM uint8_t   DR33;                         /*!< (@ 0x00000031) LCD Display Data Register 33                               */
  __IOM uint8_t   DR34;                         /*!< (@ 0x00000032) LCD Display Data Register 34                               */
  __IOM uint8_t   DR35;                         /*!< (@ 0x00000033) LCD Display Data Register 35                               */
  __IOM uint8_t   DR36;                         /*!< (@ 0x00000034) LCD Display Data Register 36                               */
  __IOM uint8_t   DR37;                         /*!< (@ 0x00000035) LCD Display Data Register 37                               */
  __IOM uint8_t   DR38;                         /*!< (@ 0x00000036) LCD Display Data Register 38                               */
  __IOM uint8_t   DR39;                         /*!< (@ 0x00000037) LCD Display Data Register 39                               */
  __IOM uint8_t   DR40;                         /*!< (@ 0x00000038) LCD Display Data Register 40                               */
  __IOM uint8_t   DR41;                         /*!< (@ 0x00000039) LCD Display Data Register 41                               */
  __IOM uint8_t   DR42;                         /*!< (@ 0x0000003A) LCD Display Data Register 42                               */
  __IOM uint8_t   DR43;                         /*!< (@ 0x0000003B) LCD Display Data Register 43                               */
} LCD_Type;                                     /*!< Size = 60 (0x3c)                                                          */



/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Cyclic Redundancy Check and Checksum (CRC)
  */

typedef struct {                                /*!< (@ 0x30001000) CRC Structure                                              */
  
  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) CRC/Checksum Control Register                              */
    
    struct {
      __IOM uint32_t CRCRUN     : 1;            /*!< [0..0] CRC/Checksum Start Control and Busy                                */
      __IOM uint32_t FIRSTBS    : 1;            /*!< [1..1] First Shifted-in Selection (CRC only)                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t SARINC     : 1;            /*!< [3..3] CRC/Checksum Start Address Auto Increment Control (User
                                                     mode only)                                                                */
      __IOM uint32_t POLYS      : 1;            /*!< [4..4] Polynomial Selection (CRC only)                                    */
      __IOM uint32_t MDSEL      : 1;            /*!< [5..5] CRC/Checksum Selection                                             */
      __IOM uint32_t RLTCLR     : 1;            /*!< [6..6] CRC/Checksum Result Data Register (CRCRLT) Initialization          */
      __IOM uint32_t MODS       : 1;            /*!< [7..7] User/Auto Mode Selection                                           */
    } CR_b;
  } ;
  
  union {
    __IOM uint32_t IN;                          /*!< (@ 0x00000004) CRC/Checksum Input Data Register                           */
    
    struct {
      __IOM uint32_t INDATA     : 32;           /*!< [31..0] CRC Input Data                                                    */
    } IN_b;
  } ;
  
  union {
    __IM  uint32_t RLT;                         /*!< (@ 0x00000008) CRC/Checksum Result Data Register                          */
    
    struct {
      __IM  uint32_t RLTDATA    : 16;           /*!< [15..0] CRC Result Data                                                   */
    } RLT_b;
  } ;
  
  union {
    __IOM uint32_t INIT;                        /*!< (@ 0x0000000C) CRC/Checksum Initial Data Register                         */
    
    struct {
      __IOM uint32_t INIDATA    : 16;           /*!< [15..0] CRC Initial Data                                                  */
    } INIT_b;
  } ;
  
  union {
    __IOM uint32_t SADR;                        /*!< (@ 0x00000010) CRC/Checksum Start Address Register                        */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t SADR       : 30;           /*!< [31..2] CRC Start Address                                                 */
    } SADR_b;
  } ;
  
  union {
    __IOM uint32_t EADR;                        /*!< (@ 0x00000014) CRC/Checksum End Address Register                          */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t EADR       : 30;           /*!< [31..2] CRC End Address                                                   */
    } EADR_b;
  } ;
} CRC_Type;                                     /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           COA0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Configuration Option Area Page 0: System Related Trimming Value (COA0)
  */

typedef struct {                                /*!< (@ 0x1FFFF000) COA0 Structure                                             */
  __IM  uint32_t  TRIM00;                       /*!< (@ 0x00000000) System Related Trim Value 00                               */
  __IM  uint32_t  TRIM01;                       /*!< (@ 0x00000004) System Related Trim Value 01                               */
  __IM  uint32_t  TRIM02;                       /*!< (@ 0x00000008) System Related Trim Value 02                               */
  __IM  uint32_t  TRIM03;                       /*!< (@ 0x0000000C) System Related Trim Value 03                               */
  __IM  uint32_t  TRIM04;                       /*!< (@ 0x00000010) System Related Trim Value 04                               */
  __IM  uint32_t  TRIM05;                       /*!< (@ 0x00000014) System Related Trim Value 05                               */
  __IM  uint32_t  TRIM06;                       /*!< (@ 0x00000018) System Related Trim Value 06                               */
  __IM  uint32_t  TRIM07;                       /*!< (@ 0x0000001C) System Related Trim Value 07                               */
  __IM  uint32_t  TRIM08;                       /*!< (@ 0x00000020) System Related Trim Value 08                               */
  __IM  uint32_t  TRIM09;                       /*!< (@ 0x00000024) System Related Trim Value 09                               */
  __IM  uint32_t  TRIM10;                       /*!< (@ 0x00000028) System Related Trim Value 10                               */
  __IM  uint32_t  TRIM11;                       /*!< (@ 0x0000002C) System Related Trim Value 11                               */
  __IM  uint32_t  TRIM12;                       /*!< (@ 0x00000030) System Related Trim Value 12                               */
  __IM  uint32_t  TRIM13;                       /*!< (@ 0x00000034) System Related Trim Value 13                               */
  __IM  uint32_t  TRIM14;                       /*!< (@ 0x00000038) System Related Trim Value 14                               */
  __IM  uint32_t  TRIM15;                       /*!< (@ 0x0000003C) System Related Trim Value 15                               */
  __IM  uint32_t  TRIM16;                       /*!< (@ 0x00000040) System Related Trim Value 16                               */
  __IM  uint32_t  TRIM17;                       /*!< (@ 0x00000044) System Related Trim Value 17                               */
  __IM  uint32_t  TRIM18;                       /*!< (@ 0x00000048) System Related Trim Value 18                               */
  __IM  uint32_t  TRIM19;                       /*!< (@ 0x0000004C) System Related Trim Value 19                               */
  
  union {
    __IM  uint32_t CONF_MF1CNFIG;               /*!< (@ 0x00000050) Manufacture Information 1                                  */
    
    struct {
      __IM  uint32_t XYCDN      : 32;           /*!< [31..0] X and Y Coordinates                                               */
    } CONF_MF1CNFIG_b;
  } ;
  
  union {
    __IM  uint32_t CONF_MF2CNFIG;               /*!< (@ 0x00000054) Manufacture Information 2                                  */
    
    struct {
      __IM  uint32_t WAFNO      : 8;            /*!< [7..0] Wafer Number                                                       */
      __IM  uint32_t LOTNO      : 24;           /*!< [31..8] Lot Number [23:0]                                                 */
    } CONF_MF2CNFIG_b;
  } ;
  
  union {
    __IM  uint32_t CONF_MF3CNFIG;               /*!< (@ 0x00000058) Manufacture Information 3                                  */
    
    struct {
      __IM  uint32_t LOTNO      : 32;           /*!< [31..0] Lot Number [55:24]                                                */
    } CONF_MF3CNFIG_b;
  } ;
  
  union {
    __IM  uint32_t CONF_MF4CNFIG;               /*!< (@ 0x0000005C) Manufacture Information 4                                  */
    
    struct {
      __IM  uint32_t LOTNO      : 32;           /*!< [31..0] Lot Number [87:56]                                                */
    } CONF_MF4CNFIG_b;
  } ;
  __IM  uint32_t  TRIM24;                       /*!< (@ 0x00000060) System Related Trim Value 24                               */
  __IM  uint32_t  TRIM25;                       /*!< (@ 0x00000064) System Related Trim Value 25                               */
  __IM  uint32_t  TRIM26;                       /*!< (@ 0x00000068) System Related Trim Value 26                               */
  __IM  uint32_t  TRIM27;                       /*!< (@ 0x0000006C) System Related Trim Value 27                               */
  __IM  uint32_t  TRIM28;                       /*!< (@ 0x00000070) System Related Trim Value 28                               */
  __IM  uint32_t  TRIM29;                       /*!< (@ 0x00000074) System Related Trim Value 29                               */
  __IM  uint32_t  TRIM30;                       /*!< (@ 0x00000078) System Related Trim Value 30                               */
  __IM  uint32_t  TRIM31;                       /*!< (@ 0x0000007C) System Related Trim Value 31                               */
} COA0_Type;                                    /*!< Size = 128 (0x80)                                                         */



/* =========================================================================================================================== */
/* ================                                           COA1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Configuration Option Area Page 1: User Option (COA1)
  */

typedef struct {                                /*!< (@ 0x1FFFF200) COA1 Structure                                             */
  
  union {
    __IM  uint32_t RPCNFIG;                     /*!< (@ 0x00000000) Configuration for Read Protection                          */
    
    struct {
      __IM  uint32_t READP      : 2;            /*!< [1..0] Read Protection for Flash Memory Area                              */
      __IM  uint32_t            : 2;
      __IM  uint32_t WTIDKY     : 28;           /*!< [31..4] Write Identification Key (0x69c8a27)                              */
    } RPCNFIG_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IM  uint32_t WDTCNFIG;                    /*!< (@ 0x0000000C) Configuration for Watch-Dog Timer                          */
    
    struct {
      __IM  uint32_t WCNTMF     : 1;            /*!< [0..0] Watch-Dog Timer Counter Enable Master Configuration                */
      __IM  uint32_t WRSTMF     : 1;            /*!< [1..1] Watch-Dog Timer Reset Enable Master Configuration                  */
      __IM  uint32_t WCLKMF     : 1;            /*!< [2..2] Watch-Dog Timer Clock Selection Master Configuration               */
      __IM  uint32_t            : 1;
      __IM  uint32_t WRCMF      : 12;           /*!< [15..4] Watch-Dog Timer RC Oscillator Master Configuration                */
    } WDTCNFIG_b;
  } ;
  
  union {
    __IM  uint32_t LVRCNFIG;                    /*!< (@ 0x00000010) Configuration for Low Voltage Reset                        */
    
    struct {
      __IM  uint32_t LVRVS      : 4;            /*!< [3..0] LVR Voltage Selection                                              */
      __IM  uint32_t            : 4;
      __IM  uint32_t LVRENM     : 8;            /*!< [15..8] LVR Reset Operation Control Master Configuration                  */
    } LVRCNFIG_b;
  } ;
  
  union {
    __IM  uint32_t CNFIGWTP1;                   /*!< (@ 0x00000014) Erase/Write Protection for Configure Option Page
                                                                    1/2/3                                                      */
    
    struct {
      __IM  uint32_t CP1WP      : 1;            /*!< [0..0] Configure Option Page 1 Erase/Write Protection                     */
      __IM  uint32_t CP2WP      : 1;            /*!< [1..1] Configure Option Page 2 Erase/Write Protection                     */
      __IM  uint32_t CP3WP      : 1;            /*!< [2..2] Configure Option Page 3 Erase/Write Protection                     */
    } CNFIGWTP1_b;
  } ;
  __IM  uint32_t  RESERVED1[10];
  
  union {
    __IM  uint32_t FMWTP1;                      /*!< (@ 0x00000040) Erase/Write Protection for Flash Memory                    */
    
    struct {
      __IM  uint32_t SWTP0      : 1;            /*!< [0..0] Flash Memory Erase/Write Protection 0                              */
      __IM  uint32_t SWTP1      : 1;            /*!< [1..1] Flash Memory Erase/Write Protection 1                              */
      __IM  uint32_t SWTP2      : 1;            /*!< [2..2] Flash Memory Erase/Write Protection 2                              */
      __IM  uint32_t SWTP3      : 1;            /*!< [3..3] Flash Memory Erase/Write Protection 3                              */
      __IM  uint32_t SWTP4      : 1;            /*!< [4..4] Flash Memory Erase/Write Protection 4                              */
      __IM  uint32_t SWTP5      : 1;            /*!< [5..5] Flash Memory Erase/Write Protection 5                              */
      __IM  uint32_t SWTP6      : 1;            /*!< [6..6] Flash Memory Erase/Write Protection 6                              */
      __IM  uint32_t SWTP7      : 1;            /*!< [7..7] Flash Memory Erase/Write Protection 7                              */
      __IM  uint32_t SWTP8      : 1;            /*!< [8..8] Flash Memory Erase/Write Protection 8                              */
      __IM  uint32_t SWTP9      : 1;            /*!< [9..9] Flash Memory Erase/Write Protection 9                              */
      __IM  uint32_t SWTP10     : 1;            /*!< [10..10] Flash Memory Erase/Write Protection 10                           */
      __IM  uint32_t SWTP11     : 1;            /*!< [11..11] Flash Memory Erase/Write Protection 11                           */
      __IM  uint32_t SWTP12     : 1;            /*!< [12..12] Flash Memory Erase/Write Protection 12                           */
      __IM  uint32_t SWTP13     : 1;            /*!< [13..13] Flash Memory Erase/Write Protection 13                           */
      __IM  uint32_t SWTP14     : 1;            /*!< [14..14] Flash Memory Erase/Write Protection 14                           */
      __IM  uint32_t SWTP15     : 1;            /*!< [15..15] Flash Memory Erase/Write Protection 15                           */
      __IM  uint32_t SWTP16     : 1;            /*!< [16..16] Flash Memory Erase/Write Protection 16                           */
      __IM  uint32_t SWTP17     : 1;            /*!< [17..17] Flash Memory Erase/Write Protection 17                           */
      __IM  uint32_t SWTP18     : 1;            /*!< [18..18] Flash Memory Erase/Write Protection 18                           */
      __IM  uint32_t SWTP19     : 1;            /*!< [19..19] Flash Memory Erase/Write Protection 19                           */
      __IM  uint32_t SWTP20     : 1;            /*!< [20..20] Flash Memory Erase/Write Protection 20                           */
      __IM  uint32_t SWTP21     : 1;            /*!< [21..21] Flash Memory Erase/Write Protection 21                           */
      __IM  uint32_t SWTP22     : 1;            /*!< [22..22] Flash Memory Erase/Write Protection 22                           */
      __IM  uint32_t SWTP23     : 1;            /*!< [23..23] Flash Memory Erase/Write Protection 23                           */
      __IM  uint32_t SWTP24     : 1;            /*!< [24..24] Flash Memory Erase/Write Protection 24                           */
      __IM  uint32_t SWTP25     : 1;            /*!< [25..25] Flash Memory Erase/Write Protection 25                           */
      __IM  uint32_t SWTP26     : 1;            /*!< [26..26] Flash Memory Erase/Write Protection 26                           */
      __IM  uint32_t SWTP27     : 1;            /*!< [27..27] Flash Memory Erase/Write Protection 27                           */
      __IM  uint32_t SWTP28     : 1;            /*!< [28..28] Flash Memory Erase/Write Protection 28                           */
      __IM  uint32_t SWTP29     : 1;            /*!< [29..29] Flash Memory Erase/Write Protection 29                           */
      __IM  uint32_t SWTP30     : 1;            /*!< [30..30] Flash Memory Erase/Write Protection 30                           */
      __IM  uint32_t SWTP31     : 1;            /*!< [31..31] Flash Memory Erase/Write Protection 31                           */
    } FMWTP1_b;
  } ;
} COA1_Type;                                    /*!< Size = 68 (0x44)                                                          */



/* =========================================================================================================================== */
/* ================                                           COA2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Configuration Option Area Page 2: User Data Area 0 (COA2)
  */

typedef struct {                                /*!< (@ 0x1FFFF400) COA2 Structure                                             */
  __IM  uint32_t  UDATA00;                      /*!< (@ 0x00000000) User Data 00                                               */
  __IM  uint32_t  UDATA01;                      /*!< (@ 0x00000004) User Data 01                                               */
  __IM  uint32_t  UDATA02;                      /*!< (@ 0x00000008) User Data 02                                               */
  __IM  uint32_t  UDATA03;                      /*!< (@ 0x0000000C) User Data 03                                               */
  __IM  uint32_t  UDATA04;                      /*!< (@ 0x00000010) User Data 04                                               */
  __IM  uint32_t  UDATA05;                      /*!< (@ 0x00000014) User Data 05                                               */
  __IM  uint32_t  UDATA06;                      /*!< (@ 0x00000018) User Data 06                                               */
  __IM  uint32_t  UDATA07;                      /*!< (@ 0x0000001C) User Data 07                                               */
  __IM  uint32_t  UDATA08;                      /*!< (@ 0x00000020) User Data 08                                               */
  __IM  uint32_t  UDATA09;                      /*!< (@ 0x00000024) User Data 09                                               */
  __IM  uint32_t  UDATA10;                      /*!< (@ 0x00000028) User Data 10                                               */
  __IM  uint32_t  UDATA11;                      /*!< (@ 0x0000002C) User Data 11                                               */
  __IM  uint32_t  UDATA12;                      /*!< (@ 0x00000030) User Data 12                                               */
  __IM  uint32_t  UDATA13;                      /*!< (@ 0x00000034) User Data 13                                               */
  __IM  uint32_t  UDATA14;                      /*!< (@ 0x00000038) User Data 14                                               */
  __IM  uint32_t  UDATA15;                      /*!< (@ 0x0000003C) User Data 15                                               */
  __IM  uint32_t  UDATA16;                      /*!< (@ 0x00000040) User Data 16                                               */
  __IM  uint32_t  UDATA17;                      /*!< (@ 0x00000044) User Data 17                                               */
  __IM  uint32_t  UDATA18;                      /*!< (@ 0x00000048) User Data 18                                               */
  __IM  uint32_t  UDATA19;                      /*!< (@ 0x0000004C) User Data 19                                               */
  __IM  uint32_t  UDATA20;                      /*!< (@ 0x00000050) User Data 20                                               */
  __IM  uint32_t  UDATA21;                      /*!< (@ 0x00000054) User Data 21                                               */
  __IM  uint32_t  UDATA22;                      /*!< (@ 0x00000058) User Data 22                                               */
  __IM  uint32_t  UDATA23;                      /*!< (@ 0x0000005C) User Data 23                                               */
  __IM  uint32_t  UDATA24;                      /*!< (@ 0x00000060) User Data 24                                               */
  __IM  uint32_t  UDATA25;                      /*!< (@ 0x00000064) User Data 25                                               */
  __IM  uint32_t  UDATA26;                      /*!< (@ 0x00000068) User Data 26                                               */
  __IM  uint32_t  UDATA27;                      /*!< (@ 0x0000006C) User Data 27                                               */
  __IM  uint32_t  UDATA28;                      /*!< (@ 0x00000070) User Data 28                                               */
  __IM  uint32_t  UDATA29;                      /*!< (@ 0x00000074) User Data 29                                               */
  __IM  uint32_t  UDATA30;                      /*!< (@ 0x00000078) User Data 30                                               */
  __IM  uint32_t  UDATA31;                      /*!< (@ 0x0000007C) User Data 31                                               */
} COA2_Type;                                    /*!< Size = 128 (0x80)                                                         */



/* =========================================================================================================================== */
/* ================                                           COA3                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Configuration Option Area Page 3: User Data Area 1 (COA3)
  */

typedef struct {                                /*!< (@ 0x1FFFF600) COA3 Structure                                             */
  __IM  uint32_t  UDATA00;                      /*!< (@ 0x00000000) User Data 00                                               */
  __IM  uint32_t  UDATA01;                      /*!< (@ 0x00000004) User Data 01                                               */
  __IM  uint32_t  UDATA02;                      /*!< (@ 0x00000008) User Data 02                                               */
  __IM  uint32_t  UDATA03;                      /*!< (@ 0x0000000C) User Data 03                                               */
  __IM  uint32_t  UDATA04;                      /*!< (@ 0x00000010) User Data 04                                               */
  __IM  uint32_t  UDATA05;                      /*!< (@ 0x00000014) User Data 05                                               */
  __IM  uint32_t  UDATA06;                      /*!< (@ 0x00000018) User Data 06                                               */
  __IM  uint32_t  UDATA07;                      /*!< (@ 0x0000001C) User Data 07                                               */
  __IM  uint32_t  UDATA08;                      /*!< (@ 0x00000020) User Data 08                                               */
  __IM  uint32_t  UDATA09;                      /*!< (@ 0x00000024) User Data 09                                               */
  __IM  uint32_t  UDATA10;                      /*!< (@ 0x00000028) User Data 10                                               */
  __IM  uint32_t  UDATA11;                      /*!< (@ 0x0000002C) User Data 11                                               */
  __IM  uint32_t  UDATA12;                      /*!< (@ 0x00000030) User Data 12                                               */
  __IM  uint32_t  UDATA13;                      /*!< (@ 0x00000034) User Data 13                                               */
  __IM  uint32_t  UDATA14;                      /*!< (@ 0x00000038) User Data 14                                               */
  __IM  uint32_t  UDATA15;                      /*!< (@ 0x0000003C) User Data 15                                               */
  __IM  uint32_t  UDATA16;                      /*!< (@ 0x00000040) User Data 16                                               */
  __IM  uint32_t  UDATA17;                      /*!< (@ 0x00000044) User Data 17                                               */
  __IM  uint32_t  UDATA18;                      /*!< (@ 0x00000048) User Data 18                                               */
  __IM  uint32_t  UDATA19;                      /*!< (@ 0x0000004C) User Data 19                                               */
  __IM  uint32_t  UDATA20;                      /*!< (@ 0x00000050) User Data 20                                               */
  __IM  uint32_t  UDATA21;                      /*!< (@ 0x00000054) User Data 21                                               */
  __IM  uint32_t  UDATA22;                      /*!< (@ 0x00000058) User Data 22                                               */
  __IM  uint32_t  UDATA23;                      /*!< (@ 0x0000005C) User Data 23                                               */
  __IM  uint32_t  UDATA24;                      /*!< (@ 0x00000060) User Data 24                                               */
  __IM  uint32_t  UDATA25;                      /*!< (@ 0x00000064) User Data 25                                               */
  __IM  uint32_t  UDATA26;                      /*!< (@ 0x00000068) User Data 26                                               */
  __IM  uint32_t  UDATA27;                      /*!< (@ 0x0000006C) User Data 27                                               */
  __IM  uint32_t  UDATA28;                      /*!< (@ 0x00000070) User Data 28                                               */
  __IM  uint32_t  UDATA29;                      /*!< (@ 0x00000074) User Data 29                                               */
  __IM  uint32_t  UDATA30;                      /*!< (@ 0x00000078) User Data 30                                               */
  __IM  uint32_t  UDATA31;                      /*!< (@ 0x0000007C) User Data 31                                               */
} COA3_Type;                                    /*!< Size = 128 (0x80)                                                         */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define INTC_BASE                   0x40001000UL
#define SCUCC_BASE                  0x4000F000UL
#define SCUCG_BASE                  0x40001800UL
#define SCULV_BASE                  0x40005100UL
#define Pn_BASE                     0x50000000UL
#define PA_BASE                     0x30000000UL
#define PB_BASE                     0x30000100UL
#define PC_BASE                     0x30000200UL
#define PD_BASE                     0x30000300UL
#define PE_BASE                     0x30000400UL
#define PF_BASE                     0x30000500UL
#define FMC_BASE                    0x40001B00UL
#define WDT_BASE                    0x40001A00UL
#define WT_BASE                     0x40002000UL
#define TIMER1n_BASE                0x51000000UL
#define TIMER10_BASE                0x40002100UL
#define TIMER11_BASE                0x40002200UL
#define TIMER12_BASE                0x40002300UL
#define TIMER13_BASE                0x40002700UL
#define TIMER14_BASE                0x40002800UL
#define TIMER15_BASE                0x40002900UL
#define TIMER16_BASE                0x40002A00UL
#define TIMER2n_BASE                0x52000000UL
#define TIMER20_BASE                0x40002500UL
#define TIMER21_BASE                0x40002600UL
#define TIMER3n_BASE                0x53000000UL
#define TIMER30_BASE                0x40002400UL
#define ADC_BASE                    0x40003000UL
#define USART1n_BASE                0x54000000UL
#define USART10_BASE                0x40003800UL
#define USART11_BASE                0x40003900UL
#define USART12_BASE                0x40003A00UL
#define USART13_BASE                0x40003B00UL
#define UARTn_BASE                  0x55000000UL
#define UART0_BASE                  0x40004000UL
#define UART1_BASE                  0x40004100UL
#define I2Cn_BASE                   0x56000000UL
#define I2C0_BASE                   0x40004800UL
#define I2C1_BASE                   0x40004900UL
#define I2C2_BASE                   0x40004A00UL
#define LCD_BASE                    0x40005000UL
#define CRC_BASE                    0x30001000UL
#define COA0_BASE                   0x1FFFF000UL
#define COA1_BASE                   0x1FFFF200UL
#define COA2_BASE                   0x1FFFF400UL
#define COA3_BASE                   0x1FFFF600UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define INTC                        ((INTC_Type*)              INTC_BASE)
#define SCUCC                       ((SCUCC_Type*)             SCUCC_BASE)
#define SCUCG                       ((SCUCG_Type*)             SCUCG_BASE)
#define SCULV                       ((SCULV_Type*)             SCULV_BASE)
#define Pn                          ((Pn_Type*)                Pn_BASE)
#define PA                          ((PA_Type*)                PA_BASE)
#define PB                          ((PB_Type*)                PB_BASE)
#define PC                          ((PC_Type*)                PC_BASE)
#define PD                          ((PD_Type*)                PD_BASE)
#define PE                          ((PE_Type*)                PE_BASE)
#define PF                          ((PF_Type*)                PF_BASE)
#define FMC                         ((FMC_Type*)               FMC_BASE)
#define WDT                         ((WDT_Type*)               WDT_BASE)
#define WT                          ((WT_Type*)                WT_BASE)
#define TIMER1n                     ((TIMER1n_Type*)           TIMER1n_BASE)
#define TIMER10                     ((TIMER10_Type*)           TIMER10_BASE)
#define TIMER11                     ((TIMER11_Type*)           TIMER11_BASE)
#define TIMER12                     ((TIMER12_Type*)           TIMER12_BASE)
#define TIMER13                     ((TIMER13_Type*)           TIMER13_BASE)
#define TIMER14                     ((TIMER14_Type*)           TIMER14_BASE)
#define TIMER15                     ((TIMER15_Type*)           TIMER15_BASE)
#define TIMER16                     ((TIMER16_Type*)           TIMER16_BASE)
#define TIMER2n                     ((TIMER2n_Type*)           TIMER2n_BASE)
#define TIMER20                     ((TIMER20_Type*)           TIMER20_BASE)
#define TIMER21                     ((TIMER21_Type*)           TIMER21_BASE)
#define TIMER3n                     ((TIMER3n_Type*)           TIMER3n_BASE)
#define TIMER30                     ((TIMER30_Type*)           TIMER30_BASE)
#define ADC                         ((ADC_Type*)               ADC_BASE)
#define USART1n                     ((USART1n_Type*)           USART1n_BASE)
#define USART10                     ((USART10_Type*)           USART10_BASE)
#define USART11                     ((USART11_Type*)           USART11_BASE)
#define USART12                     ((USART12_Type*)           USART12_BASE)
#define USART13                     ((USART13_Type*)           USART13_BASE)
#define UARTn                       ((UARTn_Type*)             UARTn_BASE)
#define UART0                       ((UART0_Type*)             UART0_BASE)
#define UART1                       ((UART1_Type*)             UART1_BASE)
#define I2Cn                        ((I2Cn_Type*)              I2Cn_BASE)
#define I2C0                        ((I2C0_Type*)              I2C0_BASE)
#define I2C1                        ((I2C1_Type*)              I2C1_BASE)
#define I2C2                        ((I2C2_Type*)              I2C2_BASE)
#define LCD                         ((LCD_Type*)               LCD_BASE)
#define CRC                         ((CRC_Type*)               CRC_BASE)
#define COA0                        ((COA0_Type*)              COA0_BASE)
#define COA1                        ((COA1_Type*)              COA1_BASE)
#define COA2                        ((COA2_Type*)              COA2_BASE)
#define COA3                        ((COA3_Type*)              COA3_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           INTC                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  PBTRIG  ========================================================= */
#define INTC_PBTRIG_ITRIG11_Pos           (11UL)                    /*!< INTC PBTRIG: ITRIG11 (Bit 11)                         */
#define INTC_PBTRIG_ITRIG11_Msk           (0x800UL)                 /*!< INTC PBTRIG: ITRIG11 (Bitfield-Mask: 0x01)            */
#define INTC_PBTRIG_ITRIG10_Pos           (10UL)                    /*!< INTC PBTRIG: ITRIG10 (Bit 10)                         */
#define INTC_PBTRIG_ITRIG10_Msk           (0x400UL)                 /*!< INTC PBTRIG: ITRIG10 (Bitfield-Mask: 0x01)            */
#define INTC_PBTRIG_ITRIG9_Pos            (9UL)                     /*!< INTC PBTRIG: ITRIG9 (Bit 9)                           */
#define INTC_PBTRIG_ITRIG9_Msk            (0x200UL)                 /*!< INTC PBTRIG: ITRIG9 (Bitfield-Mask: 0x01)             */
#define INTC_PBTRIG_ITRIG8_Pos            (8UL)                     /*!< INTC PBTRIG: ITRIG8 (Bit 8)                           */
#define INTC_PBTRIG_ITRIG8_Msk            (0x100UL)                 /*!< INTC PBTRIG: ITRIG8 (Bitfield-Mask: 0x01)             */
#define INTC_PBTRIG_ITRIG7_Pos            (7UL)                     /*!< INTC PBTRIG: ITRIG7 (Bit 7)                           */
#define INTC_PBTRIG_ITRIG7_Msk            (0x80UL)                  /*!< INTC PBTRIG: ITRIG7 (Bitfield-Mask: 0x01)             */
#define INTC_PBTRIG_ITRIG6_Pos            (6UL)                     /*!< INTC PBTRIG: ITRIG6 (Bit 6)                           */
#define INTC_PBTRIG_ITRIG6_Msk            (0x40UL)                  /*!< INTC PBTRIG: ITRIG6 (Bitfield-Mask: 0x01)             */
#define INTC_PBTRIG_ITRIG5_Pos            (5UL)                     /*!< INTC PBTRIG: ITRIG5 (Bit 5)                           */
#define INTC_PBTRIG_ITRIG5_Msk            (0x20UL)                  /*!< INTC PBTRIG: ITRIG5 (Bitfield-Mask: 0x01)             */
#define INTC_PBTRIG_ITRIG4_Pos            (4UL)                     /*!< INTC PBTRIG: ITRIG4 (Bit 4)                           */
#define INTC_PBTRIG_ITRIG4_Msk            (0x10UL)                  /*!< INTC PBTRIG: ITRIG4 (Bitfield-Mask: 0x01)             */
#define INTC_PBTRIG_ITRIG3_Pos            (3UL)                     /*!< INTC PBTRIG: ITRIG3 (Bit 3)                           */
#define INTC_PBTRIG_ITRIG3_Msk            (0x8UL)                   /*!< INTC PBTRIG: ITRIG3 (Bitfield-Mask: 0x01)             */
#define INTC_PBTRIG_ITRIG2_Pos            (2UL)                     /*!< INTC PBTRIG: ITRIG2 (Bit 2)                           */
#define INTC_PBTRIG_ITRIG2_Msk            (0x4UL)                   /*!< INTC PBTRIG: ITRIG2 (Bitfield-Mask: 0x01)             */
#define INTC_PBTRIG_ITRIG1_Pos            (1UL)                     /*!< INTC PBTRIG: ITRIG1 (Bit 1)                           */
#define INTC_PBTRIG_ITRIG1_Msk            (0x2UL)                   /*!< INTC PBTRIG: ITRIG1 (Bitfield-Mask: 0x01)             */
#define INTC_PBTRIG_ITRIG0_Pos            (0UL)                     /*!< INTC PBTRIG: ITRIG0 (Bit 0)                           */
#define INTC_PBTRIG_ITRIG0_Msk            (0x1UL)                   /*!< INTC PBTRIG: ITRIG0 (Bitfield-Mask: 0x01)             */
/* ========================================================  PCTRIG  ========================================================= */
#define INTC_PCTRIG_ITRIG3_Pos            (3UL)                     /*!< INTC PCTRIG: ITRIG3 (Bit 3)                           */
#define INTC_PCTRIG_ITRIG3_Msk            (0x8UL)                   /*!< INTC PCTRIG: ITRIG3 (Bitfield-Mask: 0x01)             */
#define INTC_PCTRIG_ITRIG2_Pos            (2UL)                     /*!< INTC PCTRIG: ITRIG2 (Bit 2)                           */
#define INTC_PCTRIG_ITRIG2_Msk            (0x4UL)                   /*!< INTC PCTRIG: ITRIG2 (Bitfield-Mask: 0x01)             */
#define INTC_PCTRIG_ITRIG1_Pos            (1UL)                     /*!< INTC PCTRIG: ITRIG1 (Bit 1)                           */
#define INTC_PCTRIG_ITRIG1_Msk            (0x2UL)                   /*!< INTC PCTRIG: ITRIG1 (Bitfield-Mask: 0x01)             */
#define INTC_PCTRIG_ITRIG0_Pos            (0UL)                     /*!< INTC PCTRIG: ITRIG0 (Bit 0)                           */
#define INTC_PCTRIG_ITRIG0_Msk            (0x1UL)                   /*!< INTC PCTRIG: ITRIG0 (Bitfield-Mask: 0x01)             */
/* ========================================================  PETRIG  ========================================================= */
#define INTC_PETRIG_ITRIG3_Pos            (3UL)                     /*!< INTC PETRIG: ITRIG3 (Bit 3)                           */
#define INTC_PETRIG_ITRIG3_Msk            (0x8UL)                   /*!< INTC PETRIG: ITRIG3 (Bitfield-Mask: 0x01)             */
#define INTC_PETRIG_ITRIG2_Pos            (2UL)                     /*!< INTC PETRIG: ITRIG2 (Bit 2)                           */
#define INTC_PETRIG_ITRIG2_Msk            (0x4UL)                   /*!< INTC PETRIG: ITRIG2 (Bitfield-Mask: 0x01)             */
#define INTC_PETRIG_ITRIG1_Pos            (1UL)                     /*!< INTC PETRIG: ITRIG1 (Bit 1)                           */
#define INTC_PETRIG_ITRIG1_Msk            (0x2UL)                   /*!< INTC PETRIG: ITRIG1 (Bitfield-Mask: 0x01)             */
#define INTC_PETRIG_ITRIG0_Pos            (0UL)                     /*!< INTC PETRIG: ITRIG0 (Bit 0)                           */
#define INTC_PETRIG_ITRIG0_Msk            (0x1UL)                   /*!< INTC PETRIG: ITRIG0 (Bitfield-Mask: 0x01)             */
/* =========================================================  PBCR  ========================================================== */
#define INTC_PBCR_INTCTL11_Pos            (22UL)                    /*!< INTC PBCR: INTCTL11 (Bit 22)                          */
#define INTC_PBCR_INTCTL11_Msk            (0xc00000UL)              /*!< INTC PBCR: INTCTL11 (Bitfield-Mask: 0x03)             */
#define INTC_PBCR_INTCTL10_Pos            (20UL)                    /*!< INTC PBCR: INTCTL10 (Bit 20)                          */
#define INTC_PBCR_INTCTL10_Msk            (0x300000UL)              /*!< INTC PBCR: INTCTL10 (Bitfield-Mask: 0x03)             */
#define INTC_PBCR_INTCTL9_Pos             (18UL)                    /*!< INTC PBCR: INTCTL9 (Bit 18)                           */
#define INTC_PBCR_INTCTL9_Msk             (0xc0000UL)               /*!< INTC PBCR: INTCTL9 (Bitfield-Mask: 0x03)              */
#define INTC_PBCR_INTCTL8_Pos             (16UL)                    /*!< INTC PBCR: INTCTL8 (Bit 16)                           */
#define INTC_PBCR_INTCTL8_Msk             (0x30000UL)               /*!< INTC PBCR: INTCTL8 (Bitfield-Mask: 0x03)              */
#define INTC_PBCR_INTCTL7_Pos             (14UL)                    /*!< INTC PBCR: INTCTL7 (Bit 14)                           */
#define INTC_PBCR_INTCTL7_Msk             (0xc000UL)                /*!< INTC PBCR: INTCTL7 (Bitfield-Mask: 0x03)              */
#define INTC_PBCR_INTCTL6_Pos             (12UL)                    /*!< INTC PBCR: INTCTL6 (Bit 12)                           */
#define INTC_PBCR_INTCTL6_Msk             (0x3000UL)                /*!< INTC PBCR: INTCTL6 (Bitfield-Mask: 0x03)              */
#define INTC_PBCR_INTCTL5_Pos             (10UL)                    /*!< INTC PBCR: INTCTL5 (Bit 10)                           */
#define INTC_PBCR_INTCTL5_Msk             (0xc00UL)                 /*!< INTC PBCR: INTCTL5 (Bitfield-Mask: 0x03)              */
#define INTC_PBCR_INTCTL4_Pos             (8UL)                     /*!< INTC PBCR: INTCTL4 (Bit 8)                            */
#define INTC_PBCR_INTCTL4_Msk             (0x300UL)                 /*!< INTC PBCR: INTCTL4 (Bitfield-Mask: 0x03)              */
#define INTC_PBCR_INTCTL3_Pos             (6UL)                     /*!< INTC PBCR: INTCTL3 (Bit 6)                            */
#define INTC_PBCR_INTCTL3_Msk             (0xc0UL)                  /*!< INTC PBCR: INTCTL3 (Bitfield-Mask: 0x03)              */
#define INTC_PBCR_INTCTL2_Pos             (4UL)                     /*!< INTC PBCR: INTCTL2 (Bit 4)                            */
#define INTC_PBCR_INTCTL2_Msk             (0x30UL)                  /*!< INTC PBCR: INTCTL2 (Bitfield-Mask: 0x03)              */
#define INTC_PBCR_INTCTL1_Pos             (2UL)                     /*!< INTC PBCR: INTCTL1 (Bit 2)                            */
#define INTC_PBCR_INTCTL1_Msk             (0xcUL)                   /*!< INTC PBCR: INTCTL1 (Bitfield-Mask: 0x03)              */
#define INTC_PBCR_INTCTL0_Pos             (0UL)                     /*!< INTC PBCR: INTCTL0 (Bit 0)                            */
#define INTC_PBCR_INTCTL0_Msk             (0x3UL)                   /*!< INTC PBCR: INTCTL0 (Bitfield-Mask: 0x03)              */
/* =========================================================  PCCR  ========================================================== */
#define INTC_PCCR_INTCTL3_Pos             (6UL)                     /*!< INTC PCCR: INTCTL3 (Bit 6)                            */
#define INTC_PCCR_INTCTL3_Msk             (0xc0UL)                  /*!< INTC PCCR: INTCTL3 (Bitfield-Mask: 0x03)              */
#define INTC_PCCR_INTCTL2_Pos             (4UL)                     /*!< INTC PCCR: INTCTL2 (Bit 4)                            */
#define INTC_PCCR_INTCTL2_Msk             (0x30UL)                  /*!< INTC PCCR: INTCTL2 (Bitfield-Mask: 0x03)              */
#define INTC_PCCR_INTCTL1_Pos             (2UL)                     /*!< INTC PCCR: INTCTL1 (Bit 2)                            */
#define INTC_PCCR_INTCTL1_Msk             (0xcUL)                   /*!< INTC PCCR: INTCTL1 (Bitfield-Mask: 0x03)              */
#define INTC_PCCR_INTCTL0_Pos             (0UL)                     /*!< INTC PCCR: INTCTL0 (Bit 0)                            */
#define INTC_PCCR_INTCTL0_Msk             (0x3UL)                   /*!< INTC PCCR: INTCTL0 (Bitfield-Mask: 0x03)              */
/* =========================================================  PECR  ========================================================== */
#define INTC_PECR_INTCTL3_Pos             (6UL)                     /*!< INTC PECR: INTCTL3 (Bit 6)                            */
#define INTC_PECR_INTCTL3_Msk             (0xc0UL)                  /*!< INTC PECR: INTCTL3 (Bitfield-Mask: 0x03)              */
#define INTC_PECR_INTCTL2_Pos             (4UL)                     /*!< INTC PECR: INTCTL2 (Bit 4)                            */
#define INTC_PECR_INTCTL2_Msk             (0x30UL)                  /*!< INTC PECR: INTCTL2 (Bitfield-Mask: 0x03)              */
#define INTC_PECR_INTCTL1_Pos             (2UL)                     /*!< INTC PECR: INTCTL1 (Bit 2)                            */
#define INTC_PECR_INTCTL1_Msk             (0xcUL)                   /*!< INTC PECR: INTCTL1 (Bitfield-Mask: 0x03)              */
#define INTC_PECR_INTCTL0_Pos             (0UL)                     /*!< INTC PECR: INTCTL0 (Bit 0)                            */
#define INTC_PECR_INTCTL0_Msk             (0x3UL)                   /*!< INTC PECR: INTCTL0 (Bitfield-Mask: 0x03)              */
/* ========================================================  PBFLAG  ========================================================= */
#define INTC_PBFLAG_FLAG11_Pos            (11UL)                    /*!< INTC PBFLAG: FLAG11 (Bit 11)                          */
#define INTC_PBFLAG_FLAG11_Msk            (0x800UL)                 /*!< INTC PBFLAG: FLAG11 (Bitfield-Mask: 0x01)             */
#define INTC_PBFLAG_FLAG10_Pos            (10UL)                    /*!< INTC PBFLAG: FLAG10 (Bit 10)                          */
#define INTC_PBFLAG_FLAG10_Msk            (0x400UL)                 /*!< INTC PBFLAG: FLAG10 (Bitfield-Mask: 0x01)             */
#define INTC_PBFLAG_FLAG9_Pos             (9UL)                     /*!< INTC PBFLAG: FLAG9 (Bit 9)                            */
#define INTC_PBFLAG_FLAG9_Msk             (0x200UL)                 /*!< INTC PBFLAG: FLAG9 (Bitfield-Mask: 0x01)              */
#define INTC_PBFLAG_FLAG8_Pos             (8UL)                     /*!< INTC PBFLAG: FLAG8 (Bit 8)                            */
#define INTC_PBFLAG_FLAG8_Msk             (0x100UL)                 /*!< INTC PBFLAG: FLAG8 (Bitfield-Mask: 0x01)              */
#define INTC_PBFLAG_FLAG7_Pos             (7UL)                     /*!< INTC PBFLAG: FLAG7 (Bit 7)                            */
#define INTC_PBFLAG_FLAG7_Msk             (0x80UL)                  /*!< INTC PBFLAG: FLAG7 (Bitfield-Mask: 0x01)              */
#define INTC_PBFLAG_FLAG6_Pos             (6UL)                     /*!< INTC PBFLAG: FLAG6 (Bit 6)                            */
#define INTC_PBFLAG_FLAG6_Msk             (0x40UL)                  /*!< INTC PBFLAG: FLAG6 (Bitfield-Mask: 0x01)              */
#define INTC_PBFLAG_FLAG5_Pos             (5UL)                     /*!< INTC PBFLAG: FLAG5 (Bit 5)                            */
#define INTC_PBFLAG_FLAG5_Msk             (0x20UL)                  /*!< INTC PBFLAG: FLAG5 (Bitfield-Mask: 0x01)              */
#define INTC_PBFLAG_FLAG4_Pos             (4UL)                     /*!< INTC PBFLAG: FLAG4 (Bit 4)                            */
#define INTC_PBFLAG_FLAG4_Msk             (0x10UL)                  /*!< INTC PBFLAG: FLAG4 (Bitfield-Mask: 0x01)              */
#define INTC_PBFLAG_FLAG3_Pos             (3UL)                     /*!< INTC PBFLAG: FLAG3 (Bit 3)                            */
#define INTC_PBFLAG_FLAG3_Msk             (0x8UL)                   /*!< INTC PBFLAG: FLAG3 (Bitfield-Mask: 0x01)              */
#define INTC_PBFLAG_FLAG2_Pos             (2UL)                     /*!< INTC PBFLAG: FLAG2 (Bit 2)                            */
#define INTC_PBFLAG_FLAG2_Msk             (0x4UL)                   /*!< INTC PBFLAG: FLAG2 (Bitfield-Mask: 0x01)              */
#define INTC_PBFLAG_FLAG1_Pos             (1UL)                     /*!< INTC PBFLAG: FLAG1 (Bit 1)                            */
#define INTC_PBFLAG_FLAG1_Msk             (0x2UL)                   /*!< INTC PBFLAG: FLAG1 (Bitfield-Mask: 0x01)              */
#define INTC_PBFLAG_FLAG0_Pos             (0UL)                     /*!< INTC PBFLAG: FLAG0 (Bit 0)                            */
#define INTC_PBFLAG_FLAG0_Msk             (0x1UL)                   /*!< INTC PBFLAG: FLAG0 (Bitfield-Mask: 0x01)              */
/* ========================================================  PCFLAG  ========================================================= */
#define INTC_PCFLAG_FLAG3_Pos             (3UL)                     /*!< INTC PCFLAG: FLAG3 (Bit 3)                            */
#define INTC_PCFLAG_FLAG3_Msk             (0x8UL)                   /*!< INTC PCFLAG: FLAG3 (Bitfield-Mask: 0x01)              */
#define INTC_PCFLAG_FLAG2_Pos             (2UL)                     /*!< INTC PCFLAG: FLAG2 (Bit 2)                            */
#define INTC_PCFLAG_FLAG2_Msk             (0x4UL)                   /*!< INTC PCFLAG: FLAG2 (Bitfield-Mask: 0x01)              */
#define INTC_PCFLAG_FLAG1_Pos             (1UL)                     /*!< INTC PCFLAG: FLAG1 (Bit 1)                            */
#define INTC_PCFLAG_FLAG1_Msk             (0x2UL)                   /*!< INTC PCFLAG: FLAG1 (Bitfield-Mask: 0x01)              */
#define INTC_PCFLAG_FLAG0_Pos             (0UL)                     /*!< INTC PCFLAG: FLAG0 (Bit 0)                            */
#define INTC_PCFLAG_FLAG0_Msk             (0x1UL)                   /*!< INTC PCFLAG: FLAG0 (Bitfield-Mask: 0x01)              */
/* ========================================================  PEFLAG  ========================================================= */
#define INTC_PEFLAG_FLAG3_Pos             (3UL)                     /*!< INTC PEFLAG: FLAG3 (Bit 3)                            */
#define INTC_PEFLAG_FLAG3_Msk             (0x8UL)                   /*!< INTC PEFLAG: FLAG3 (Bitfield-Mask: 0x01)              */
#define INTC_PEFLAG_FLAG2_Pos             (2UL)                     /*!< INTC PEFLAG: FLAG2 (Bit 2)                            */
#define INTC_PEFLAG_FLAG2_Msk             (0x4UL)                   /*!< INTC PEFLAG: FLAG2 (Bitfield-Mask: 0x01)              */
#define INTC_PEFLAG_FLAG1_Pos             (1UL)                     /*!< INTC PEFLAG: FLAG1 (Bit 1)                            */
#define INTC_PEFLAG_FLAG1_Msk             (0x2UL)                   /*!< INTC PEFLAG: FLAG1 (Bitfield-Mask: 0x01)              */
#define INTC_PEFLAG_FLAG0_Pos             (0UL)                     /*!< INTC PEFLAG: FLAG0 (Bit 0)                            */
#define INTC_PEFLAG_FLAG0_Msk             (0x1UL)                   /*!< INTC PEFLAG: FLAG0 (Bitfield-Mask: 0x01)              */
/* ======================================================  EINT0CONF1  ======================================================= */
#define INTC_EINT0CONF1_CONF7_Pos         (28UL)                    /*!< INTC EINT0CONF1: CONF7 (Bit 28)                       */
#define INTC_EINT0CONF1_CONF7_Msk         (0xf0000000UL)            /*!< INTC EINT0CONF1: CONF7 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT0CONF1_CONF6_Pos         (24UL)                    /*!< INTC EINT0CONF1: CONF6 (Bit 24)                       */
#define INTC_EINT0CONF1_CONF6_Msk         (0xf000000UL)             /*!< INTC EINT0CONF1: CONF6 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT0CONF1_CONF5_Pos         (20UL)                    /*!< INTC EINT0CONF1: CONF5 (Bit 20)                       */
#define INTC_EINT0CONF1_CONF5_Msk         (0xf00000UL)              /*!< INTC EINT0CONF1: CONF5 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT0CONF1_CONF4_Pos         (16UL)                    /*!< INTC EINT0CONF1: CONF4 (Bit 16)                       */
#define INTC_EINT0CONF1_CONF4_Msk         (0xf0000UL)               /*!< INTC EINT0CONF1: CONF4 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT0CONF1_CONF3_Pos         (12UL)                    /*!< INTC EINT0CONF1: CONF3 (Bit 12)                       */
#define INTC_EINT0CONF1_CONF3_Msk         (0xf000UL)                /*!< INTC EINT0CONF1: CONF3 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT0CONF1_CONF2_Pos         (8UL)                     /*!< INTC EINT0CONF1: CONF2 (Bit 8)                        */
#define INTC_EINT0CONF1_CONF2_Msk         (0xf00UL)                 /*!< INTC EINT0CONF1: CONF2 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT0CONF1_CONF1_Pos         (4UL)                     /*!< INTC EINT0CONF1: CONF1 (Bit 4)                        */
#define INTC_EINT0CONF1_CONF1_Msk         (0xf0UL)                  /*!< INTC EINT0CONF1: CONF1 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT0CONF1_CONF0_Pos         (0UL)                     /*!< INTC EINT0CONF1: CONF0 (Bit 0)                        */
#define INTC_EINT0CONF1_CONF0_Msk         (0xfUL)                   /*!< INTC EINT0CONF1: CONF0 (Bitfield-Mask: 0x0f)          */
/* ======================================================  EINT1CONF1  ======================================================= */
#define INTC_EINT1CONF1_CONF7_Pos         (28UL)                    /*!< INTC EINT1CONF1: CONF7 (Bit 28)                       */
#define INTC_EINT1CONF1_CONF7_Msk         (0xf0000000UL)            /*!< INTC EINT1CONF1: CONF7 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT1CONF1_CONF6_Pos         (24UL)                    /*!< INTC EINT1CONF1: CONF6 (Bit 24)                       */
#define INTC_EINT1CONF1_CONF6_Msk         (0xf000000UL)             /*!< INTC EINT1CONF1: CONF6 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT1CONF1_CONF5_Pos         (20UL)                    /*!< INTC EINT1CONF1: CONF5 (Bit 20)                       */
#define INTC_EINT1CONF1_CONF5_Msk         (0xf00000UL)              /*!< INTC EINT1CONF1: CONF5 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT1CONF1_CONF4_Pos         (16UL)                    /*!< INTC EINT1CONF1: CONF4 (Bit 16)                       */
#define INTC_EINT1CONF1_CONF4_Msk         (0xf0000UL)               /*!< INTC EINT1CONF1: CONF4 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT1CONF1_CONF3_Pos         (12UL)                    /*!< INTC EINT1CONF1: CONF3 (Bit 12)                       */
#define INTC_EINT1CONF1_CONF3_Msk         (0xf000UL)                /*!< INTC EINT1CONF1: CONF3 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT1CONF1_CONF2_Pos         (8UL)                     /*!< INTC EINT1CONF1: CONF2 (Bit 8)                        */
#define INTC_EINT1CONF1_CONF2_Msk         (0xf00UL)                 /*!< INTC EINT1CONF1: CONF2 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT1CONF1_CONF1_Pos         (4UL)                     /*!< INTC EINT1CONF1: CONF1 (Bit 4)                        */
#define INTC_EINT1CONF1_CONF1_Msk         (0xf0UL)                  /*!< INTC EINT1CONF1: CONF1 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT1CONF1_CONF0_Pos         (0UL)                     /*!< INTC EINT1CONF1: CONF0 (Bit 0)                        */
#define INTC_EINT1CONF1_CONF0_Msk         (0xfUL)                   /*!< INTC EINT1CONF1: CONF0 (Bitfield-Mask: 0x0f)          */
/* ======================================================  EINT2CONF1  ======================================================= */
#define INTC_EINT2CONF1_CONF7_Pos         (28UL)                    /*!< INTC EINT2CONF1: CONF7 (Bit 28)                       */
#define INTC_EINT2CONF1_CONF7_Msk         (0xf0000000UL)            /*!< INTC EINT2CONF1: CONF7 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT2CONF1_CONF6_Pos         (24UL)                    /*!< INTC EINT2CONF1: CONF6 (Bit 24)                       */
#define INTC_EINT2CONF1_CONF6_Msk         (0xf000000UL)             /*!< INTC EINT2CONF1: CONF6 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT2CONF1_CONF5_Pos         (20UL)                    /*!< INTC EINT2CONF1: CONF5 (Bit 20)                       */
#define INTC_EINT2CONF1_CONF5_Msk         (0xf00000UL)              /*!< INTC EINT2CONF1: CONF5 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT2CONF1_CONF4_Pos         (16UL)                    /*!< INTC EINT2CONF1: CONF4 (Bit 16)                       */
#define INTC_EINT2CONF1_CONF4_Msk         (0xf0000UL)               /*!< INTC EINT2CONF1: CONF4 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT2CONF1_CONF3_Pos         (12UL)                    /*!< INTC EINT2CONF1: CONF3 (Bit 12)                       */
#define INTC_EINT2CONF1_CONF3_Msk         (0xf000UL)                /*!< INTC EINT2CONF1: CONF3 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT2CONF1_CONF2_Pos         (8UL)                     /*!< INTC EINT2CONF1: CONF2 (Bit 8)                        */
#define INTC_EINT2CONF1_CONF2_Msk         (0xf00UL)                 /*!< INTC EINT2CONF1: CONF2 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT2CONF1_CONF1_Pos         (4UL)                     /*!< INTC EINT2CONF1: CONF1 (Bit 4)                        */
#define INTC_EINT2CONF1_CONF1_Msk         (0xf0UL)                  /*!< INTC EINT2CONF1: CONF1 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT2CONF1_CONF0_Pos         (0UL)                     /*!< INTC EINT2CONF1: CONF0 (Bit 0)                        */
#define INTC_EINT2CONF1_CONF0_Msk         (0xfUL)                   /*!< INTC EINT2CONF1: CONF0 (Bitfield-Mask: 0x0f)          */
/* ======================================================  EINT3CONF1  ======================================================= */
#define INTC_EINT3CONF1_CONF7_Pos         (28UL)                    /*!< INTC EINT3CONF1: CONF7 (Bit 28)                       */
#define INTC_EINT3CONF1_CONF7_Msk         (0xf0000000UL)            /*!< INTC EINT3CONF1: CONF7 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT3CONF1_CONF6_Pos         (24UL)                    /*!< INTC EINT3CONF1: CONF6 (Bit 24)                       */
#define INTC_EINT3CONF1_CONF6_Msk         (0xf000000UL)             /*!< INTC EINT3CONF1: CONF6 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT3CONF1_CONF5_Pos         (20UL)                    /*!< INTC EINT3CONF1: CONF5 (Bit 20)                       */
#define INTC_EINT3CONF1_CONF5_Msk         (0xf00000UL)              /*!< INTC EINT3CONF1: CONF5 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT3CONF1_CONF4_Pos         (16UL)                    /*!< INTC EINT3CONF1: CONF4 (Bit 16)                       */
#define INTC_EINT3CONF1_CONF4_Msk         (0xf0000UL)               /*!< INTC EINT3CONF1: CONF4 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT3CONF1_CONF3_Pos         (12UL)                    /*!< INTC EINT3CONF1: CONF3 (Bit 12)                       */
#define INTC_EINT3CONF1_CONF3_Msk         (0xf000UL)                /*!< INTC EINT3CONF1: CONF3 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT3CONF1_CONF2_Pos         (8UL)                     /*!< INTC EINT3CONF1: CONF2 (Bit 8)                        */
#define INTC_EINT3CONF1_CONF2_Msk         (0xf00UL)                 /*!< INTC EINT3CONF1: CONF2 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT3CONF1_CONF1_Pos         (4UL)                     /*!< INTC EINT3CONF1: CONF1 (Bit 4)                        */
#define INTC_EINT3CONF1_CONF1_Msk         (0xf0UL)                  /*!< INTC EINT3CONF1: CONF1 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT3CONF1_CONF0_Pos         (0UL)                     /*!< INTC EINT3CONF1: CONF0 (Bit 0)                        */
#define INTC_EINT3CONF1_CONF0_Msk         (0xfUL)                   /*!< INTC EINT3CONF1: CONF0 (Bitfield-Mask: 0x0f)          */
/* ======================================================  EINT0CONF2  ======================================================= */
#define INTC_EINT0CONF2_CONF11_Pos        (12UL)                    /*!< INTC EINT0CONF2: CONF11 (Bit 12)                      */
#define INTC_EINT0CONF2_CONF11_Msk        (0xf000UL)                /*!< INTC EINT0CONF2: CONF11 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT0CONF2_CONF10_Pos        (8UL)                     /*!< INTC EINT0CONF2: CONF10 (Bit 8)                       */
#define INTC_EINT0CONF2_CONF10_Msk        (0xf00UL)                 /*!< INTC EINT0CONF2: CONF10 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT0CONF2_CONF9_Pos         (4UL)                     /*!< INTC EINT0CONF2: CONF9 (Bit 4)                        */
#define INTC_EINT0CONF2_CONF9_Msk         (0xf0UL)                  /*!< INTC EINT0CONF2: CONF9 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT0CONF2_CONF8_Pos         (0UL)                     /*!< INTC EINT0CONF2: CONF8 (Bit 0)                        */
#define INTC_EINT0CONF2_CONF8_Msk         (0xfUL)                   /*!< INTC EINT0CONF2: CONF8 (Bitfield-Mask: 0x0f)          */
/* ======================================================  EINT1CONF2  ======================================================= */
#define INTC_EINT1CONF2_CONF11_Pos        (12UL)                    /*!< INTC EINT1CONF2: CONF11 (Bit 12)                      */
#define INTC_EINT1CONF2_CONF11_Msk        (0xf000UL)                /*!< INTC EINT1CONF2: CONF11 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT1CONF2_CONF10_Pos        (8UL)                     /*!< INTC EINT1CONF2: CONF10 (Bit 8)                       */
#define INTC_EINT1CONF2_CONF10_Msk        (0xf00UL)                 /*!< INTC EINT1CONF2: CONF10 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT1CONF2_CONF9_Pos         (4UL)                     /*!< INTC EINT1CONF2: CONF9 (Bit 4)                        */
#define INTC_EINT1CONF2_CONF9_Msk         (0xf0UL)                  /*!< INTC EINT1CONF2: CONF9 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT1CONF2_CONF8_Pos         (0UL)                     /*!< INTC EINT1CONF2: CONF8 (Bit 0)                        */
#define INTC_EINT1CONF2_CONF8_Msk         (0xfUL)                   /*!< INTC EINT1CONF2: CONF8 (Bitfield-Mask: 0x0f)          */
/* ======================================================  EINT2CONF2  ======================================================= */
#define INTC_EINT2CONF2_CONF11_Pos        (12UL)                    /*!< INTC EINT2CONF2: CONF11 (Bit 12)                      */
#define INTC_EINT2CONF2_CONF11_Msk        (0xf000UL)                /*!< INTC EINT2CONF2: CONF11 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT2CONF2_CONF10_Pos        (8UL)                     /*!< INTC EINT2CONF2: CONF10 (Bit 8)                       */
#define INTC_EINT2CONF2_CONF10_Msk        (0xf00UL)                 /*!< INTC EINT2CONF2: CONF10 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT2CONF2_CONF9_Pos         (4UL)                     /*!< INTC EINT2CONF2: CONF9 (Bit 4)                        */
#define INTC_EINT2CONF2_CONF9_Msk         (0xf0UL)                  /*!< INTC EINT2CONF2: CONF9 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT2CONF2_CONF8_Pos         (0UL)                     /*!< INTC EINT2CONF2: CONF8 (Bit 0)                        */
#define INTC_EINT2CONF2_CONF8_Msk         (0xfUL)                   /*!< INTC EINT2CONF2: CONF8 (Bitfield-Mask: 0x0f)          */
/* ======================================================  EINT3CONF2  ======================================================= */
#define INTC_EINT3CONF2_CONF11_Pos        (12UL)                    /*!< INTC EINT3CONF2: CONF11 (Bit 12)                      */
#define INTC_EINT3CONF2_CONF11_Msk        (0xf000UL)                /*!< INTC EINT3CONF2: CONF11 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT3CONF2_CONF10_Pos        (8UL)                     /*!< INTC EINT3CONF2: CONF10 (Bit 8)                       */
#define INTC_EINT3CONF2_CONF10_Msk        (0xf00UL)                 /*!< INTC EINT3CONF2: CONF10 (Bitfield-Mask: 0x0f)         */
#define INTC_EINT3CONF2_CONF9_Pos         (4UL)                     /*!< INTC EINT3CONF2: CONF9 (Bit 4)                        */
#define INTC_EINT3CONF2_CONF9_Msk         (0xf0UL)                  /*!< INTC EINT3CONF2: CONF9 (Bitfield-Mask: 0x0f)          */
#define INTC_EINT3CONF2_CONF8_Pos         (0UL)                     /*!< INTC EINT3CONF2: CONF8 (Bit 0)                        */
#define INTC_EINT3CONF2_CONF8_Msk         (0xfUL)                   /*!< INTC EINT3CONF2: CONF8 (Bitfield-Mask: 0x0f)          */
/* ==========================================================  MSK  ========================================================== */
#define INTC_MSK_IMSK31_NULL_Pos          (31UL)                    /*!< INTC MSK: IMSK31_NULL (Bit 31)                        */
#define INTC_MSK_IMSK31_NULL_Msk          (0x80000000UL)            /*!< INTC MSK: IMSK31_NULL (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK30_NULL_Pos          (30UL)                    /*!< INTC MSK: IMSK30_NULL (Bit 30)                        */
#define INTC_MSK_IMSK30_NULL_Msk          (0x40000000UL)            /*!< INTC MSK: IMSK30_NULL (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK29_NULL_Pos          (29UL)                    /*!< INTC MSK: IMSK29_NULL (Bit 29)                        */
#define INTC_MSK_IMSK29_NULL_Msk          (0x20000000UL)            /*!< INTC MSK: IMSK29_NULL (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK28_NULL_Pos          (28UL)                    /*!< INTC MSK: IMSK28_NULL (Bit 28)                        */
#define INTC_MSK_IMSK28_NULL_Msk          (0x10000000UL)            /*!< INTC MSK: IMSK28_NULL (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK27_USART13_Pos       (27UL)                    /*!< INTC MSK: IMSK27_USART13 (Bit 27)                     */
#define INTC_MSK_IMSK27_USART13_Msk       (0x8000000UL)             /*!< INTC MSK: IMSK27_USART13 (Bitfield-Mask: 0x01)        */
#define INTC_MSK_IMSK26_USART12_Pos       (26UL)                    /*!< INTC MSK: IMSK26_USART12 (Bit 26)                     */
#define INTC_MSK_IMSK26_USART12_Msk       (0x4000000UL)             /*!< INTC MSK: IMSK26_USART12 (Bitfield-Mask: 0x01)        */
#define INTC_MSK_IMSK25_I2C2_Pos          (25UL)                    /*!< INTC MSK: IMSK25_I2C2 (Bit 25)                        */
#define INTC_MSK_IMSK25_I2C2_Msk          (0x2000000UL)             /*!< INTC MSK: IMSK25_I2C2 (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK24_TIMER16_Pos       (24UL)                    /*!< INTC MSK: IMSK24_TIMER16 (Bit 24)                     */
#define INTC_MSK_IMSK24_TIMER16_Msk       (0x1000000UL)             /*!< INTC MSK: IMSK24_TIMER16 (Bitfield-Mask: 0x01)        */
#define INTC_MSK_IMSK23_TIMER15_Pos       (23UL)                    /*!< INTC MSK: IMSK23_TIMER15 (Bit 23)                     */
#define INTC_MSK_IMSK23_TIMER15_Msk       (0x800000UL)              /*!< INTC MSK: IMSK23_TIMER15 (Bitfield-Mask: 0x01)        */
#define INTC_MSK_IMSK22_TIMER14_Pos       (22UL)                    /*!< INTC MSK: IMSK22_TIMER14 (Bit 22)                     */
#define INTC_MSK_IMSK22_TIMER14_Msk       (0x400000UL)              /*!< INTC MSK: IMSK22_TIMER14 (Bitfield-Mask: 0x01)        */
#define INTC_MSK_IMSK21_TIMER13_Pos       (21UL)                    /*!< INTC MSK: IMSK21_TIMER13 (Bit 21)                     */
#define INTC_MSK_IMSK21_TIMER13_Msk       (0x200000UL)              /*!< INTC MSK: IMSK21_TIMER13 (Bitfield-Mask: 0x01)        */
#define INTC_MSK_IMSK20_UART1_Pos         (20UL)                    /*!< INTC MSK: IMSK20_UART1 (Bit 20)                       */
#define INTC_MSK_IMSK20_UART1_Msk         (0x100000UL)              /*!< INTC MSK: IMSK20_UART1 (Bitfield-Mask: 0x01)          */
#define INTC_MSK_IMSK19_UART0_Pos         (19UL)                    /*!< INTC MSK: IMSK19_UART0 (Bit 19)                       */
#define INTC_MSK_IMSK19_UART0_Msk         (0x80000UL)               /*!< INTC MSK: IMSK19_UART0 (Bitfield-Mask: 0x01)          */
#define INTC_MSK_IMSK18_ADC_Pos           (18UL)                    /*!< INTC MSK: IMSK18_ADC (Bit 18)                         */
#define INTC_MSK_IMSK18_ADC_Msk           (0x40000UL)               /*!< INTC MSK: IMSK18_ADC (Bitfield-Mask: 0x01)            */
#define INTC_MSK_IMSK17_USART11_Pos       (17UL)                    /*!< INTC MSK: IMSK17_USART11 (Bit 17)                     */
#define INTC_MSK_IMSK17_USART11_Msk       (0x20000UL)               /*!< INTC MSK: IMSK17_USART11 (Bitfield-Mask: 0x01)        */
#define INTC_MSK_IMSK16_TIMER21_Pos       (16UL)                    /*!< INTC MSK: IMSK16_TIMER21 (Bit 16)                     */
#define INTC_MSK_IMSK16_TIMER21_Msk       (0x10000UL)               /*!< INTC MSK: IMSK16_TIMER21 (Bitfield-Mask: 0x01)        */
#define INTC_MSK_IMSK15_TIMER20_Pos       (15UL)                    /*!< INTC MSK: IMSK15_TIMER20 (Bit 15)                     */
#define INTC_MSK_IMSK15_TIMER20_Msk       (0x8000UL)                /*!< INTC MSK: IMSK15_TIMER20 (Bitfield-Mask: 0x01)        */
#define INTC_MSK_IMSK14_I2C1_Pos          (14UL)                    /*!< INTC MSK: IMSK14_I2C1 (Bit 14)                        */
#define INTC_MSK_IMSK14_I2C1_Msk          (0x4000UL)                /*!< INTC MSK: IMSK14_I2C1 (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK13_TIMER30_Pos       (13UL)                    /*!< INTC MSK: IMSK13_TIMER30 (Bit 13)                     */
#define INTC_MSK_IMSK13_TIMER30_Msk       (0x2000UL)                /*!< INTC MSK: IMSK13_TIMER30 (Bitfield-Mask: 0x01)        */
#define INTC_MSK_IMSK12_WT_Pos            (12UL)                    /*!< INTC MSK: IMSK12_WT (Bit 12)                          */
#define INTC_MSK_IMSK12_WT_Msk            (0x1000UL)                /*!< INTC MSK: IMSK12_WT (Bitfield-Mask: 0x01)             */
#define INTC_MSK_IMSK11_USART10_Pos       (11UL)                    /*!< INTC MSK: IMSK11_USART10 (Bit 11)                     */
#define INTC_MSK_IMSK11_USART10_Msk       (0x800UL)                 /*!< INTC MSK: IMSK11_USART10 (Bitfield-Mask: 0x01)        */
#define INTC_MSK_IMSK10_I2C0_Pos          (10UL)                    /*!< INTC MSK: IMSK10_I2C0 (Bit 10)                        */
#define INTC_MSK_IMSK10_I2C0_Msk          (0x400UL)                 /*!< INTC MSK: IMSK10_I2C0 (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK9_TIMER12_Pos        (9UL)                     /*!< INTC MSK: IMSK9_TIMER12 (Bit 9)                       */
#define INTC_MSK_IMSK9_TIMER12_Msk        (0x200UL)                 /*!< INTC MSK: IMSK9_TIMER12 (Bitfield-Mask: 0x01)         */
#define INTC_MSK_IMSK8_TIMER11_Pos        (8UL)                     /*!< INTC MSK: IMSK8_TIMER11 (Bit 8)                       */
#define INTC_MSK_IMSK8_TIMER11_Msk        (0x100UL)                 /*!< INTC MSK: IMSK8_TIMER11 (Bitfield-Mask: 0x01)         */
#define INTC_MSK_IMSK7_TIMER10_Pos        (7UL)                     /*!< INTC MSK: IMSK7_TIMER10 (Bit 7)                       */
#define INTC_MSK_IMSK7_TIMER10_Msk        (0x80UL)                  /*!< INTC MSK: IMSK7_TIMER10 (Bitfield-Mask: 0x01)         */
#define INTC_MSK_IMSK6_EINT3_Pos          (6UL)                     /*!< INTC MSK: IMSK6_EINT3 (Bit 6)                         */
#define INTC_MSK_IMSK6_EINT3_Msk          (0x40UL)                  /*!< INTC MSK: IMSK6_EINT3 (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK5_EINT2_Pos          (5UL)                     /*!< INTC MSK: IMSK5_EINT2 (Bit 5)                         */
#define INTC_MSK_IMSK5_EINT2_Msk          (0x20UL)                  /*!< INTC MSK: IMSK5_EINT2 (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK4_EINT1_Pos          (4UL)                     /*!< INTC MSK: IMSK4_EINT1 (Bit 4)                         */
#define INTC_MSK_IMSK4_EINT1_Msk          (0x10UL)                  /*!< INTC MSK: IMSK4_EINT1 (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK3_EINT0_Pos          (3UL)                     /*!< INTC MSK: IMSK3_EINT0 (Bit 3)                         */
#define INTC_MSK_IMSK3_EINT0_Msk          (0x8UL)                   /*!< INTC MSK: IMSK3_EINT0 (Bitfield-Mask: 0x01)           */
#define INTC_MSK_IMSK2_WDT_Pos            (2UL)                     /*!< INTC MSK: IMSK2_WDT (Bit 2)                           */
#define INTC_MSK_IMSK2_WDT_Msk            (0x4UL)                   /*!< INTC MSK: IMSK2_WDT (Bitfield-Mask: 0x01)             */
#define INTC_MSK_IMSK1_WUT_Pos            (1UL)                     /*!< INTC MSK: IMSK1_WUT (Bit 1)                           */
#define INTC_MSK_IMSK1_WUT_Msk            (0x2UL)                   /*!< INTC MSK: IMSK1_WUT (Bitfield-Mask: 0x01)             */
#define INTC_MSK_IMSK0_LVI_Pos            (0UL)                     /*!< INTC MSK: IMSK0_LVI (Bit 0)                           */
#define INTC_MSK_IMSK0_LVI_Msk            (0x1UL)                   /*!< INTC MSK: IMSK0_LVI (Bitfield-Mask: 0x01)             */


/* =========================================================================================================================== */
/* ================                                           SCUCC                                           ================ */
/* =========================================================================================================================== */

/* =======================================================  VENDORID  ======================================================== */
#define SCUCC_VENDORID_VENDID_Pos         (0UL)                     /*!< SCUCC VENDORID: VENDID (Bit 0)                        */
#define SCUCC_VENDORID_VENDID_Msk         (0xffffffffUL)            /*!< SCUCC VENDORID: VENDID (Bitfield-Mask: 0xffffffff)    */
/* ========================================================  CHIPID  ========================================================= */
#define SCUCC_CHIPID_CHIPID_Pos           (0UL)                     /*!< SCUCC CHIPID: CHIPID (Bit 0)                          */
#define SCUCC_CHIPID_CHIPID_Msk           (0xffffffffUL)            /*!< SCUCC CHIPID: CHIPID (Bitfield-Mask: 0xffffffff)      */
/* =========================================================  REVNR  ========================================================= */
#define SCUCC_REVNR_REVNO_Pos             (0UL)                     /*!< SCUCC REVNR: REVNO (Bit 0)                            */
#define SCUCC_REVNR_REVNO_Msk             (0xffUL)                  /*!< SCUCC REVNR: REVNO (Bitfield-Mask: 0xff)              */
/* ========================================================  PMREMAP  ======================================================== */
#define SCUCC_PMREMAP_WTIDKY_Pos          (16UL)                    /*!< SCUCC PMREMAP: WTIDKY (Bit 16)                        */
#define SCUCC_PMREMAP_WTIDKY_Msk          (0xffff0000UL)            /*!< SCUCC PMREMAP: WTIDKY (Bitfield-Mask: 0xffff)         */
#define SCUCC_PMREMAP_nPMREM_Pos          (8UL)                     /*!< SCUCC PMREMAP: nPMREM (Bit 8)                         */
#define SCUCC_PMREMAP_nPMREM_Msk          (0xff00UL)                /*!< SCUCC PMREMAP: nPMREM (Bitfield-Mask: 0xff)           */
#define SCUCC_PMREMAP_PMREM_Pos           (0UL)                     /*!< SCUCC PMREMAP: PMREM (Bit 0)                          */
#define SCUCC_PMREMAP_PMREM_Msk           (0xffUL)                  /*!< SCUCC PMREMAP: PMREM (Bitfield-Mask: 0xff)            */
/* ========================================================  BTPSCR  ========================================================= */
#define SCUCC_BTPSCR_BFIND_Pos            (5UL)                     /*!< SCUCC BTPSCR: BFIND (Bit 5)                           */
#define SCUCC_BTPSCR_BFIND_Msk            (0x60UL)                  /*!< SCUCC BTPSCR: BFIND (Bitfield-Mask: 0x03)             */
#define SCUCC_BTPSCR_BTPSTA_Pos           (0UL)                     /*!< SCUCC BTPSCR: BTPSTA (Bit 0)                          */
#define SCUCC_BTPSCR_BTPSTA_Msk           (0x1UL)                   /*!< SCUCC BTPSCR: BTPSTA (Bitfield-Mask: 0x01)            */
/* ========================================================  RSTSSR  ========================================================= */
#define SCUCC_RSTSSR_MONSTA_Pos           (5UL)                     /*!< SCUCC RSTSSR: MONSTA (Bit 5)                          */
#define SCUCC_RSTSSR_MONSTA_Msk           (0x20UL)                  /*!< SCUCC RSTSSR: MONSTA (Bitfield-Mask: 0x01)            */
#define SCUCC_RSTSSR_SWSTA_Pos            (4UL)                     /*!< SCUCC RSTSSR: SWSTA (Bit 4)                           */
#define SCUCC_RSTSSR_SWSTA_Msk            (0x10UL)                  /*!< SCUCC RSTSSR: SWSTA (Bitfield-Mask: 0x01)             */
#define SCUCC_RSTSSR_EXTSTA_Pos           (3UL)                     /*!< SCUCC RSTSSR: EXTSTA (Bit 3)                          */
#define SCUCC_RSTSSR_EXTSTA_Msk           (0x8UL)                   /*!< SCUCC RSTSSR: EXTSTA (Bitfield-Mask: 0x01)            */
#define SCUCC_RSTSSR_WDTSTA_Pos           (2UL)                     /*!< SCUCC RSTSSR: WDTSTA (Bit 2)                          */
#define SCUCC_RSTSSR_WDTSTA_Msk           (0x4UL)                   /*!< SCUCC RSTSSR: WDTSTA (Bitfield-Mask: 0x01)            */
#define SCUCC_RSTSSR_LVRSTA_Pos           (1UL)                     /*!< SCUCC RSTSSR: LVRSTA (Bit 1)                          */
#define SCUCC_RSTSSR_LVRSTA_Msk           (0x2UL)                   /*!< SCUCC RSTSSR: LVRSTA (Bitfield-Mask: 0x01)            */
#define SCUCC_RSTSSR_PORSTA_Pos           (0UL)                     /*!< SCUCC RSTSSR: PORSTA (Bit 0)                          */
#define SCUCC_RSTSSR_PORSTA_Msk           (0x1UL)                   /*!< SCUCC RSTSSR: PORSTA (Bitfield-Mask: 0x01)            */
/* ========================================================  NMISRCR  ======================================================== */
#define SCUCC_NMISRCR_NMICON_Pos          (7UL)                     /*!< SCUCC NMISRCR: NMICON (Bit 7)                         */
#define SCUCC_NMISRCR_NMICON_Msk          (0x80UL)                  /*!< SCUCC NMISRCR: NMICON (Bitfield-Mask: 0x01)           */
#define SCUCC_NMISRCR_MONINT_Pos          (6UL)                     /*!< SCUCC NMISRCR: MONINT (Bit 6)                         */
#define SCUCC_NMISRCR_MONINT_Msk          (0x40UL)                  /*!< SCUCC NMISRCR: MONINT (Bitfield-Mask: 0x01)           */
#define SCUCC_NMISRCR_NMISRC_Pos          (0UL)                     /*!< SCUCC NMISRCR: NMISRC (Bit 0)                         */
#define SCUCC_NMISRCR_NMISRC_Msk          (0x1fUL)                  /*!< SCUCC NMISRCR: NMISRC (Bitfield-Mask: 0x1f)           */
/* ========================================================  SWRSTR  ========================================================= */
#define SCUCC_SWRSTR_WTIDKY_Pos           (16UL)                    /*!< SCUCC SWRSTR: WTIDKY (Bit 16)                         */
#define SCUCC_SWRSTR_WTIDKY_Msk           (0xffff0000UL)            /*!< SCUCC SWRSTR: WTIDKY (Bitfield-Mask: 0xffff)          */
#define SCUCC_SWRSTR_SWRST_Pos            (0UL)                     /*!< SCUCC SWRSTR: SWRST (Bit 0)                           */
#define SCUCC_SWRSTR_SWRST_Msk            (0xffUL)                  /*!< SCUCC SWRSTR: SWRST (Bitfield-Mask: 0xff)             */
/* ========================================================  SRSTVR  ========================================================= */
#define SCUCC_SRSTVR_VALID_Pos            (0UL)                     /*!< SCUCC SRSTVR: VALID (Bit 0)                           */
#define SCUCC_SRSTVR_VALID_Msk            (0xffUL)                  /*!< SCUCC SRSTVR: VALID (Bitfield-Mask: 0xff)             */
/* =========================================================  WUTCR  ========================================================= */
#define SCUCC_WUTCR_WUTIEN_Pos            (7UL)                     /*!< SCUCC WUTCR: WUTIEN (Bit 7)                           */
#define SCUCC_WUTCR_WUTIEN_Msk            (0x80UL)                  /*!< SCUCC WUTCR: WUTIEN (Bitfield-Mask: 0x01)             */
#define SCUCC_WUTCR_CNTRLD_Pos            (1UL)                     /*!< SCUCC WUTCR: CNTRLD (Bit 1)                           */
#define SCUCC_WUTCR_CNTRLD_Msk            (0x2UL)                   /*!< SCUCC WUTCR: CNTRLD (Bitfield-Mask: 0x01)             */
#define SCUCC_WUTCR_WUTIFLAG_Pos          (0UL)                     /*!< SCUCC WUTCR: WUTIFLAG (Bit 0)                         */
#define SCUCC_WUTCR_WUTIFLAG_Msk          (0x1UL)                   /*!< SCUCC WUTCR: WUTIFLAG (Bitfield-Mask: 0x01)           */
/* =========================================================  WUTDR  ========================================================= */
#define SCUCC_WUTDR_WUTDATA_Pos           (0UL)                     /*!< SCUCC WUTDR: WUTDATA (Bit 0)                          */
#define SCUCC_WUTDR_WUTDATA_Msk           (0xffffUL)                /*!< SCUCC WUTDR: WUTDATA (Bitfield-Mask: 0xffff)          */
/* ========================================================  HIRCTRM  ======================================================== */
#define SCUCC_HIRCTRM_WTIDKY_Pos          (16UL)                    /*!< SCUCC HIRCTRM: WTIDKY (Bit 16)                        */
#define SCUCC_HIRCTRM_WTIDKY_Msk          (0xffff0000UL)            /*!< SCUCC HIRCTRM: WTIDKY (Bitfield-Mask: 0xffff)         */
#define SCUCC_HIRCTRM_nTRMH_Pos           (8UL)                     /*!< SCUCC HIRCTRM: nTRMH (Bit 8)                          */
#define SCUCC_HIRCTRM_nTRMH_Msk           (0xff00UL)                /*!< SCUCC HIRCTRM: nTRMH (Bitfield-Mask: 0xff)            */
#define SCUCC_HIRCTRM_CTRMH_Pos           (5UL)                     /*!< SCUCC HIRCTRM: CTRMH (Bit 5)                          */
#define SCUCC_HIRCTRM_CTRMH_Msk           (0xe0UL)                  /*!< SCUCC HIRCTRM: CTRMH (Bitfield-Mask: 0x07)            */
#define SCUCC_HIRCTRM_FTRMH_Pos           (0UL)                     /*!< SCUCC HIRCTRM: FTRMH (Bit 0)                          */
#define SCUCC_HIRCTRM_FTRMH_Msk           (0x1fUL)                  /*!< SCUCC HIRCTRM: FTRMH (Bitfield-Mask: 0x1f)            */
/* =======================================================  WDTRCTRM  ======================================================== */
#define SCUCC_WDTRCTRM_WTIDKY_Pos         (16UL)                    /*!< SCUCC WDTRCTRM: WTIDKY (Bit 16)                       */
#define SCUCC_WDTRCTRM_WTIDKY_Msk         (0xffff0000UL)            /*!< SCUCC WDTRCTRM: WTIDKY (Bitfield-Mask: 0xffff)        */
#define SCUCC_WDTRCTRM_nTRMW_Pos          (8UL)                     /*!< SCUCC WDTRCTRM: nTRMW (Bit 8)                         */
#define SCUCC_WDTRCTRM_nTRMW_Msk          (0xff00UL)                /*!< SCUCC WDTRCTRM: nTRMW (Bitfield-Mask: 0xff)           */
#define SCUCC_WDTRCTRM_CTRMW_Pos          (4UL)                     /*!< SCUCC WDTRCTRM: CTRMW (Bit 4)                         */
#define SCUCC_WDTRCTRM_CTRMW_Msk          (0xf0UL)                  /*!< SCUCC WDTRCTRM: CTRMW (Bitfield-Mask: 0x0f)           */
#define SCUCC_WDTRCTRM_FTRMW_Pos          (0UL)                     /*!< SCUCC WDTRCTRM: FTRMW (Bit 0)                         */
#define SCUCC_WDTRCTRM_FTRMW_Msk          (0x7UL)                   /*!< SCUCC WDTRCTRM: FTRMW (Bitfield-Mask: 0x07)           */


/* =========================================================================================================================== */
/* ================                                           SCUCG                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  SCCR  ========================================================== */
#define SCUCG_SCCR_WTIDKY_Pos             (16UL)                    /*!< SCUCG SCCR: WTIDKY (Bit 16)                           */
#define SCUCG_SCCR_WTIDKY_Msk             (0xffff0000UL)            /*!< SCUCG SCCR: WTIDKY (Bitfield-Mask: 0xffff)            */
#define SCUCG_SCCR_MCLKSEL_Pos            (0UL)                     /*!< SCUCG SCCR: MCLKSEL (Bit 0)                           */
#define SCUCG_SCCR_MCLKSEL_Msk            (0x3UL)                   /*!< SCUCG SCCR: MCLKSEL (Bitfield-Mask: 0x03)             */
/* ========================================================  CLKSRCR  ======================================================== */
#define SCUCG_CLKSRCR_WTIDKY_Pos          (16UL)                    /*!< SCUCG CLKSRCR: WTIDKY (Bit 16)                        */
#define SCUCG_CLKSRCR_WTIDKY_Msk          (0xffff0000UL)            /*!< SCUCG CLKSRCR: WTIDKY (Bitfield-Mask: 0xffff)         */
#define SCUCG_CLKSRCR_HIRCSEL_Pos         (12UL)                    /*!< SCUCG CLKSRCR: HIRCSEL (Bit 12)                       */
#define SCUCG_CLKSRCR_HIRCSEL_Msk         (0x3000UL)                /*!< SCUCG CLKSRCR: HIRCSEL (Bitfield-Mask: 0x03)          */
#define SCUCG_CLKSRCR_XMFRNG_Pos          (8UL)                     /*!< SCUCG CLKSRCR: XMFRNG (Bit 8)                         */
#define SCUCG_CLKSRCR_XMFRNG_Msk          (0x100UL)                 /*!< SCUCG CLKSRCR: XMFRNG (Bitfield-Mask: 0x01)           */
#define SCUCG_CLKSRCR_WDTRCEN_Pos         (3UL)                     /*!< SCUCG CLKSRCR: WDTRCEN (Bit 3)                        */
#define SCUCG_CLKSRCR_WDTRCEN_Msk         (0x8UL)                   /*!< SCUCG CLKSRCR: WDTRCEN (Bitfield-Mask: 0x01)          */
#define SCUCG_CLKSRCR_HIRCEN_Pos          (2UL)                     /*!< SCUCG CLKSRCR: HIRCEN (Bit 2)                         */
#define SCUCG_CLKSRCR_HIRCEN_Msk          (0x4UL)                   /*!< SCUCG CLKSRCR: HIRCEN (Bitfield-Mask: 0x01)           */
#define SCUCG_CLKSRCR_XMOSCEN_Pos         (1UL)                     /*!< SCUCG CLKSRCR: XMOSCEN (Bit 1)                        */
#define SCUCG_CLKSRCR_XMOSCEN_Msk         (0x2UL)                   /*!< SCUCG CLKSRCR: XMOSCEN (Bitfield-Mask: 0x01)          */
#define SCUCG_CLKSRCR_XSOSCEN_Pos         (0UL)                     /*!< SCUCG CLKSRCR: XSOSCEN (Bit 0)                        */
#define SCUCG_CLKSRCR_XSOSCEN_Msk         (0x1UL)                   /*!< SCUCG CLKSRCR: XSOSCEN (Bitfield-Mask: 0x01)          */
/* ========================================================  SCDIVR1  ======================================================== */
#define SCUCG_SCDIVR1_WLDIV_Pos           (4UL)                     /*!< SCUCG SCDIVR1: WLDIV (Bit 4)                          */
#define SCUCG_SCDIVR1_WLDIV_Msk           (0x70UL)                  /*!< SCUCG SCDIVR1: WLDIV (Bitfield-Mask: 0x07)            */
#define SCUCG_SCDIVR1_HDIV_Pos            (0UL)                     /*!< SCUCG SCDIVR1: HDIV (Bit 0)                           */
#define SCUCG_SCDIVR1_HDIV_Msk            (0x7UL)                   /*!< SCUCG SCDIVR1: HDIV (Bitfield-Mask: 0x07)             */
/* ========================================================  SCDIVR2  ======================================================== */
#define SCUCG_SCDIVR2_SYSTDIV_Pos         (4UL)                     /*!< SCUCG SCDIVR2: SYSTDIV (Bit 4)                        */
#define SCUCG_SCDIVR2_SYSTDIV_Msk         (0x30UL)                  /*!< SCUCG SCDIVR2: SYSTDIV (Bitfield-Mask: 0x03)          */
#define SCUCG_SCDIVR2_PDIV_Pos            (0UL)                     /*!< SCUCG SCDIVR2: PDIV (Bit 0)                           */
#define SCUCG_SCDIVR2_PDIV_Msk            (0x3UL)                   /*!< SCUCG SCDIVR2: PDIV (Bitfield-Mask: 0x03)             */
/* ========================================================  CLKOCR  ========================================================= */
#define SCUCG_CLKOCR_CLKOEN_Pos           (7UL)                     /*!< SCUCG CLKOCR: CLKOEN (Bit 7)                          */
#define SCUCG_CLKOCR_CLKOEN_Msk           (0x80UL)                  /*!< SCUCG CLKOCR: CLKOEN (Bitfield-Mask: 0x01)            */
#define SCUCG_CLKOCR_POLSEL_Pos           (6UL)                     /*!< SCUCG CLKOCR: POLSEL (Bit 6)                          */
#define SCUCG_CLKOCR_POLSEL_Msk           (0x40UL)                  /*!< SCUCG CLKOCR: POLSEL (Bitfield-Mask: 0x01)            */
#define SCUCG_CLKOCR_CLKODIV_Pos          (3UL)                     /*!< SCUCG CLKOCR: CLKODIV (Bit 3)                         */
#define SCUCG_CLKOCR_CLKODIV_Msk          (0x38UL)                  /*!< SCUCG CLKOCR: CLKODIV (Bitfield-Mask: 0x07)           */
#define SCUCG_CLKOCR_CLKOS_Pos            (0UL)                     /*!< SCUCG CLKOCR: CLKOS (Bit 0)                           */
#define SCUCG_CLKOCR_CLKOS_Msk            (0x7UL)                   /*!< SCUCG CLKOCR: CLKOS (Bitfield-Mask: 0x07)             */
/* ========================================================  CMONCR  ========================================================= */
#define SCUCG_CMONCR_MONEN_Pos            (7UL)                     /*!< SCUCG CMONCR: MONEN (Bit 7)                           */
#define SCUCG_CMONCR_MONEN_Msk            (0x80UL)                  /*!< SCUCG CMONCR: MONEN (Bitfield-Mask: 0x01)             */
#define SCUCG_CMONCR_MACTS_Pos            (5UL)                     /*!< SCUCG CMONCR: MACTS (Bit 5)                           */
#define SCUCG_CMONCR_MACTS_Msk            (0x60UL)                  /*!< SCUCG CMONCR: MACTS (Bitfield-Mask: 0x03)             */
#define SCUCG_CMONCR_MONFLAG_Pos          (3UL)                     /*!< SCUCG CMONCR: MONFLAG (Bit 3)                         */
#define SCUCG_CMONCR_MONFLAG_Msk          (0x8UL)                   /*!< SCUCG CMONCR: MONFLAG (Bitfield-Mask: 0x01)           */
#define SCUCG_CMONCR_NMINTFG_Pos          (2UL)                     /*!< SCUCG CMONCR: NMINTFG (Bit 2)                         */
#define SCUCG_CMONCR_NMINTFG_Msk          (0x4UL)                   /*!< SCUCG CMONCR: NMINTFG (Bitfield-Mask: 0x01)           */
#define SCUCG_CMONCR_MONCS_Pos            (0UL)                     /*!< SCUCG CMONCR: MONCS (Bit 0)                           */
#define SCUCG_CMONCR_MONCS_Msk            (0x3UL)                   /*!< SCUCG CMONCR: MONCS (Bitfield-Mask: 0x03)             */
/* =======================================================  PPCLKEN1  ======================================================== */
#define SCUCG_PPCLKEN1_T21CLKE_Pos        (21UL)                    /*!< SCUCG PPCLKEN1: T21CLKE (Bit 21)                      */
#define SCUCG_PPCLKEN1_T21CLKE_Msk        (0x200000UL)              /*!< SCUCG PPCLKEN1: T21CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN1_T20CLKE_Pos        (20UL)                    /*!< SCUCG PPCLKEN1: T20CLKE (Bit 20)                      */
#define SCUCG_PPCLKEN1_T20CLKE_Msk        (0x100000UL)              /*!< SCUCG PPCLKEN1: T20CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN1_T30CLKE_Pos        (19UL)                    /*!< SCUCG PPCLKEN1: T30CLKE (Bit 19)                      */
#define SCUCG_PPCLKEN1_T30CLKE_Msk        (0x80000UL)               /*!< SCUCG PPCLKEN1: T30CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN1_T12CLKE_Pos        (18UL)                    /*!< SCUCG PPCLKEN1: T12CLKE (Bit 18)                      */
#define SCUCG_PPCLKEN1_T12CLKE_Msk        (0x40000UL)               /*!< SCUCG PPCLKEN1: T12CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN1_T11CLKE_Pos        (17UL)                    /*!< SCUCG PPCLKEN1: T11CLKE (Bit 17)                      */
#define SCUCG_PPCLKEN1_T11CLKE_Msk        (0x20000UL)               /*!< SCUCG PPCLKEN1: T11CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN1_T10CLKE_Pos        (16UL)                    /*!< SCUCG PPCLKEN1: T10CLKE (Bit 16)                      */
#define SCUCG_PPCLKEN1_T10CLKE_Msk        (0x10000UL)               /*!< SCUCG PPCLKEN1: T10CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN1_T16CLKE_Pos        (11UL)                    /*!< SCUCG PPCLKEN1: T16CLKE (Bit 11)                      */
#define SCUCG_PPCLKEN1_T16CLKE_Msk        (0x800UL)                 /*!< SCUCG PPCLKEN1: T16CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN1_T15CLKE_Pos        (10UL)                    /*!< SCUCG PPCLKEN1: T15CLKE (Bit 10)                      */
#define SCUCG_PPCLKEN1_T15CLKE_Msk        (0x400UL)                 /*!< SCUCG PPCLKEN1: T15CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN1_T14CLKE_Pos        (9UL)                     /*!< SCUCG PPCLKEN1: T14CLKE (Bit 9)                       */
#define SCUCG_PPCLKEN1_T14CLKE_Msk        (0x200UL)                 /*!< SCUCG PPCLKEN1: T14CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN1_T13CLKE_Pos        (8UL)                     /*!< SCUCG PPCLKEN1: T13CLKE (Bit 8)                       */
#define SCUCG_PPCLKEN1_T13CLKE_Msk        (0x100UL)                 /*!< SCUCG PPCLKEN1: T13CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN1_PFCLKE_Pos         (5UL)                     /*!< SCUCG PPCLKEN1: PFCLKE (Bit 5)                        */
#define SCUCG_PPCLKEN1_PFCLKE_Msk         (0x20UL)                  /*!< SCUCG PPCLKEN1: PFCLKE (Bitfield-Mask: 0x01)          */
#define SCUCG_PPCLKEN1_PECLKE_Pos         (4UL)                     /*!< SCUCG PPCLKEN1: PECLKE (Bit 4)                        */
#define SCUCG_PPCLKEN1_PECLKE_Msk         (0x10UL)                  /*!< SCUCG PPCLKEN1: PECLKE (Bitfield-Mask: 0x01)          */
#define SCUCG_PPCLKEN1_PDCLKE_Pos         (3UL)                     /*!< SCUCG PPCLKEN1: PDCLKE (Bit 3)                        */
#define SCUCG_PPCLKEN1_PDCLKE_Msk         (0x8UL)                   /*!< SCUCG PPCLKEN1: PDCLKE (Bitfield-Mask: 0x01)          */
#define SCUCG_PPCLKEN1_PCCLKE_Pos         (2UL)                     /*!< SCUCG PPCLKEN1: PCCLKE (Bit 2)                        */
#define SCUCG_PPCLKEN1_PCCLKE_Msk         (0x4UL)                   /*!< SCUCG PPCLKEN1: PCCLKE (Bitfield-Mask: 0x01)          */
#define SCUCG_PPCLKEN1_PBCLKE_Pos         (1UL)                     /*!< SCUCG PPCLKEN1: PBCLKE (Bit 1)                        */
#define SCUCG_PPCLKEN1_PBCLKE_Msk         (0x2UL)                   /*!< SCUCG PPCLKEN1: PBCLKE (Bitfield-Mask: 0x01)          */
#define SCUCG_PPCLKEN1_PACLKE_Pos         (0UL)                     /*!< SCUCG PPCLKEN1: PACLKE (Bit 0)                        */
#define SCUCG_PPCLKEN1_PACLKE_Msk         (0x1UL)                   /*!< SCUCG PPCLKEN1: PACLKE (Bitfield-Mask: 0x01)          */
/* =======================================================  PPCLKEN2  ======================================================== */
#define SCUCG_PPCLKEN2_FMCLKE_Pos         (19UL)                    /*!< SCUCG PPCLKEN2: FMCLKE (Bit 19)                       */
#define SCUCG_PPCLKEN2_FMCLKE_Msk         (0x80000UL)               /*!< SCUCG PPCLKEN2: FMCLKE (Bitfield-Mask: 0x01)          */
#define SCUCG_PPCLKEN2_LVICLKE_Pos        (18UL)                    /*!< SCUCG PPCLKEN2: LVICLKE (Bit 18)                      */
#define SCUCG_PPCLKEN2_LVICLKE_Msk        (0x40000UL)               /*!< SCUCG PPCLKEN2: LVICLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN2_WDTCLKE_Pos        (17UL)                    /*!< SCUCG PPCLKEN2: WDTCLKE (Bit 17)                      */
#define SCUCG_PPCLKEN2_WDTCLKE_Msk        (0x20000UL)               /*!< SCUCG PPCLKEN2: WDTCLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN2_WTCLKE_Pos         (16UL)                    /*!< SCUCG PPCLKEN2: WTCLKE (Bit 16)                       */
#define SCUCG_PPCLKEN2_WTCLKE_Msk         (0x10000UL)               /*!< SCUCG PPCLKEN2: WTCLKE (Bitfield-Mask: 0x01)          */
#define SCUCG_PPCLKEN2_LCDCLKE_Pos        (13UL)                    /*!< SCUCG PPCLKEN2: LCDCLKE (Bit 13)                      */
#define SCUCG_PPCLKEN2_LCDCLKE_Msk        (0x2000UL)                /*!< SCUCG PPCLKEN2: LCDCLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN2_CRCLKE_Pos         (12UL)                    /*!< SCUCG PPCLKEN2: CRCLKE (Bit 12)                       */
#define SCUCG_PPCLKEN2_CRCLKE_Msk         (0x1000UL)                /*!< SCUCG PPCLKEN2: CRCLKE (Bitfield-Mask: 0x01)          */
#define SCUCG_PPCLKEN2_ADCLKE_Pos         (10UL)                    /*!< SCUCG PPCLKEN2: ADCLKE (Bit 10)                       */
#define SCUCG_PPCLKEN2_ADCLKE_Msk         (0x400UL)                 /*!< SCUCG PPCLKEN2: ADCLKE (Bitfield-Mask: 0x01)          */
#define SCUCG_PPCLKEN2_I2C2CLKE_Pos       (8UL)                     /*!< SCUCG PPCLKEN2: I2C2CLKE (Bit 8)                      */
#define SCUCG_PPCLKEN2_I2C2CLKE_Msk       (0x100UL)                 /*!< SCUCG PPCLKEN2: I2C2CLKE (Bitfield-Mask: 0x01)        */
#define SCUCG_PPCLKEN2_I2C1CLKE_Pos       (7UL)                     /*!< SCUCG PPCLKEN2: I2C1CLKE (Bit 7)                      */
#define SCUCG_PPCLKEN2_I2C1CLKE_Msk       (0x80UL)                  /*!< SCUCG PPCLKEN2: I2C1CLKE (Bitfield-Mask: 0x01)        */
#define SCUCG_PPCLKEN2_I2C0CLKE_Pos       (6UL)                     /*!< SCUCG PPCLKEN2: I2C0CLKE (Bit 6)                      */
#define SCUCG_PPCLKEN2_I2C0CLKE_Msk       (0x40UL)                  /*!< SCUCG PPCLKEN2: I2C0CLKE (Bitfield-Mask: 0x01)        */
#define SCUCG_PPCLKEN2_UST13CLKE_Pos      (5UL)                     /*!< SCUCG PPCLKEN2: UST13CLKE (Bit 5)                     */
#define SCUCG_PPCLKEN2_UST13CLKE_Msk      (0x20UL)                  /*!< SCUCG PPCLKEN2: UST13CLKE (Bitfield-Mask: 0x01)       */
#define SCUCG_PPCLKEN2_UST12CLKE_Pos      (4UL)                     /*!< SCUCG PPCLKEN2: UST12CLKE (Bit 4)                     */
#define SCUCG_PPCLKEN2_UST12CLKE_Msk      (0x10UL)                  /*!< SCUCG PPCLKEN2: UST12CLKE (Bitfield-Mask: 0x01)       */
#define SCUCG_PPCLKEN2_UT1CLKE_Pos        (3UL)                     /*!< SCUCG PPCLKEN2: UT1CLKE (Bit 3)                       */
#define SCUCG_PPCLKEN2_UT1CLKE_Msk        (0x8UL)                   /*!< SCUCG PPCLKEN2: UT1CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN2_UT0CLKE_Pos        (2UL)                     /*!< SCUCG PPCLKEN2: UT0CLKE (Bit 2)                       */
#define SCUCG_PPCLKEN2_UT0CLKE_Msk        (0x4UL)                   /*!< SCUCG PPCLKEN2: UT0CLKE (Bitfield-Mask: 0x01)         */
#define SCUCG_PPCLKEN2_UST11CLKE_Pos      (1UL)                     /*!< SCUCG PPCLKEN2: UST11CLKE (Bit 1)                     */
#define SCUCG_PPCLKEN2_UST11CLKE_Msk      (0x2UL)                   /*!< SCUCG PPCLKEN2: UST11CLKE (Bitfield-Mask: 0x01)       */
#define SCUCG_PPCLKEN2_UST10CLKE_Pos      (0UL)                     /*!< SCUCG PPCLKEN2: UST10CLKE (Bit 0)                     */
#define SCUCG_PPCLKEN2_UST10CLKE_Msk      (0x1UL)                   /*!< SCUCG PPCLKEN2: UST10CLKE (Bitfield-Mask: 0x01)       */
/* ========================================================  PPCLKSR  ======================================================== */
#define SCUCG_PPCLKSR_T20CLK_Pos          (20UL)                    /*!< SCUCG PPCLKSR: T20CLK (Bit 20)                        */
#define SCUCG_PPCLKSR_T20CLK_Msk          (0x100000UL)              /*!< SCUCG PPCLKSR: T20CLK (Bitfield-Mask: 0x01)           */
#define SCUCG_PPCLKSR_T30CLK_Pos          (17UL)                    /*!< SCUCG PPCLKSR: T30CLK (Bit 17)                        */
#define SCUCG_PPCLKSR_T30CLK_Msk          (0x20000UL)               /*!< SCUCG PPCLKSR: T30CLK (Bitfield-Mask: 0x01)           */
#define SCUCG_PPCLKSR_LCDCLK_Pos          (6UL)                     /*!< SCUCG PPCLKSR: LCDCLK (Bit 6)                         */
#define SCUCG_PPCLKSR_LCDCLK_Msk          (0xc0UL)                  /*!< SCUCG PPCLKSR: LCDCLK (Bitfield-Mask: 0x03)           */
#define SCUCG_PPCLKSR_WTCLK_Pos           (3UL)                     /*!< SCUCG PPCLKSR: WTCLK (Bit 3)                          */
#define SCUCG_PPCLKSR_WTCLK_Msk           (0x18UL)                  /*!< SCUCG PPCLKSR: WTCLK (Bitfield-Mask: 0x03)            */
#define SCUCG_PPCLKSR_WDTCLK_Pos          (0UL)                     /*!< SCUCG PPCLKSR: WDTCLK (Bit 0)                         */
#define SCUCG_PPCLKSR_WDTCLK_Msk          (0x1UL)                   /*!< SCUCG PPCLKSR: WDTCLK (Bitfield-Mask: 0x01)           */
/* ========================================================  PPRST1  ========================================================= */
#define SCUCG_PPRST1_T21RST_Pos           (21UL)                    /*!< SCUCG PPRST1: T21RST (Bit 21)                         */
#define SCUCG_PPRST1_T21RST_Msk           (0x200000UL)              /*!< SCUCG PPRST1: T21RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST1_T20RST_Pos           (20UL)                    /*!< SCUCG PPRST1: T20RST (Bit 20)                         */
#define SCUCG_PPRST1_T20RST_Msk           (0x100000UL)              /*!< SCUCG PPRST1: T20RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST1_T30RST_Pos           (19UL)                    /*!< SCUCG PPRST1: T30RST (Bit 19)                         */
#define SCUCG_PPRST1_T30RST_Msk           (0x80000UL)               /*!< SCUCG PPRST1: T30RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST1_T12RST_Pos           (18UL)                    /*!< SCUCG PPRST1: T12RST (Bit 18)                         */
#define SCUCG_PPRST1_T12RST_Msk           (0x40000UL)               /*!< SCUCG PPRST1: T12RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST1_T11RST_Pos           (17UL)                    /*!< SCUCG PPRST1: T11RST (Bit 17)                         */
#define SCUCG_PPRST1_T11RST_Msk           (0x20000UL)               /*!< SCUCG PPRST1: T11RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST1_T10RST_Pos           (16UL)                    /*!< SCUCG PPRST1: T10RST (Bit 16)                         */
#define SCUCG_PPRST1_T10RST_Msk           (0x10000UL)               /*!< SCUCG PPRST1: T10RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST1_T16RST_Pos           (11UL)                    /*!< SCUCG PPRST1: T16RST (Bit 11)                         */
#define SCUCG_PPRST1_T16RST_Msk           (0x800UL)                 /*!< SCUCG PPRST1: T16RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST1_T15RST_Pos           (10UL)                    /*!< SCUCG PPRST1: T15RST (Bit 10)                         */
#define SCUCG_PPRST1_T15RST_Msk           (0x400UL)                 /*!< SCUCG PPRST1: T15RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST1_T14RST_Pos           (9UL)                     /*!< SCUCG PPRST1: T14RST (Bit 9)                          */
#define SCUCG_PPRST1_T14RST_Msk           (0x200UL)                 /*!< SCUCG PPRST1: T14RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST1_T13RST_Pos           (8UL)                     /*!< SCUCG PPRST1: T13RST (Bit 8)                          */
#define SCUCG_PPRST1_T13RST_Msk           (0x100UL)                 /*!< SCUCG PPRST1: T13RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST1_PFRST_Pos            (5UL)                     /*!< SCUCG PPRST1: PFRST (Bit 5)                           */
#define SCUCG_PPRST1_PFRST_Msk            (0x20UL)                  /*!< SCUCG PPRST1: PFRST (Bitfield-Mask: 0x01)             */
#define SCUCG_PPRST1_PERST_Pos            (4UL)                     /*!< SCUCG PPRST1: PERST (Bit 4)                           */
#define SCUCG_PPRST1_PERST_Msk            (0x10UL)                  /*!< SCUCG PPRST1: PERST (Bitfield-Mask: 0x01)             */
#define SCUCG_PPRST1_PDRST_Pos            (3UL)                     /*!< SCUCG PPRST1: PDRST (Bit 3)                           */
#define SCUCG_PPRST1_PDRST_Msk            (0x8UL)                   /*!< SCUCG PPRST1: PDRST (Bitfield-Mask: 0x01)             */
#define SCUCG_PPRST1_PCRST_Pos            (2UL)                     /*!< SCUCG PPRST1: PCRST (Bit 2)                           */
#define SCUCG_PPRST1_PCRST_Msk            (0x4UL)                   /*!< SCUCG PPRST1: PCRST (Bitfield-Mask: 0x01)             */
#define SCUCG_PPRST1_PBRST_Pos            (1UL)                     /*!< SCUCG PPRST1: PBRST (Bit 1)                           */
#define SCUCG_PPRST1_PBRST_Msk            (0x2UL)                   /*!< SCUCG PPRST1: PBRST (Bitfield-Mask: 0x01)             */
#define SCUCG_PPRST1_PARST_Pos            (0UL)                     /*!< SCUCG PPRST1: PARST (Bit 0)                           */
#define SCUCG_PPRST1_PARST_Msk            (0x1UL)                   /*!< SCUCG PPRST1: PARST (Bitfield-Mask: 0x01)             */
/* ========================================================  PPRST2  ========================================================= */
#define SCUCG_PPRST2_FMCRST_Pos           (19UL)                    /*!< SCUCG PPRST2: FMCRST (Bit 19)                         */
#define SCUCG_PPRST2_FMCRST_Msk           (0x80000UL)               /*!< SCUCG PPRST2: FMCRST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST2_LVIRST_Pos           (18UL)                    /*!< SCUCG PPRST2: LVIRST (Bit 18)                         */
#define SCUCG_PPRST2_LVIRST_Msk           (0x40000UL)               /*!< SCUCG PPRST2: LVIRST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST2_WTRST_Pos            (16UL)                    /*!< SCUCG PPRST2: WTRST (Bit 16)                          */
#define SCUCG_PPRST2_WTRST_Msk            (0x10000UL)               /*!< SCUCG PPRST2: WTRST (Bitfield-Mask: 0x01)             */
#define SCUCG_PPRST2_LCDRST_Pos           (13UL)                    /*!< SCUCG PPRST2: LCDRST (Bit 13)                         */
#define SCUCG_PPRST2_LCDRST_Msk           (0x2000UL)                /*!< SCUCG PPRST2: LCDRST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST2_CRRST_Pos            (12UL)                    /*!< SCUCG PPRST2: CRRST (Bit 12)                          */
#define SCUCG_PPRST2_CRRST_Msk            (0x1000UL)                /*!< SCUCG PPRST2: CRRST (Bitfield-Mask: 0x01)             */
#define SCUCG_PPRST2_ADRST_Pos            (10UL)                    /*!< SCUCG PPRST2: ADRST (Bit 10)                          */
#define SCUCG_PPRST2_ADRST_Msk            (0x400UL)                 /*!< SCUCG PPRST2: ADRST (Bitfield-Mask: 0x01)             */
#define SCUCG_PPRST2_I2C2RST_Pos          (8UL)                     /*!< SCUCG PPRST2: I2C2RST (Bit 8)                         */
#define SCUCG_PPRST2_I2C2RST_Msk          (0x100UL)                 /*!< SCUCG PPRST2: I2C2RST (Bitfield-Mask: 0x01)           */
#define SCUCG_PPRST2_I2C1RST_Pos          (7UL)                     /*!< SCUCG PPRST2: I2C1RST (Bit 7)                         */
#define SCUCG_PPRST2_I2C1RST_Msk          (0x80UL)                  /*!< SCUCG PPRST2: I2C1RST (Bitfield-Mask: 0x01)           */
#define SCUCG_PPRST2_I2C0RST_Pos          (6UL)                     /*!< SCUCG PPRST2: I2C0RST (Bit 6)                         */
#define SCUCG_PPRST2_I2C0RST_Msk          (0x40UL)                  /*!< SCUCG PPRST2: I2C0RST (Bitfield-Mask: 0x01)           */
#define SCUCG_PPRST2_UST13RST_Pos         (5UL)                     /*!< SCUCG PPRST2: UST13RST (Bit 5)                        */
#define SCUCG_PPRST2_UST13RST_Msk         (0x20UL)                  /*!< SCUCG PPRST2: UST13RST (Bitfield-Mask: 0x01)          */
#define SCUCG_PPRST2_UST12RST_Pos         (4UL)                     /*!< SCUCG PPRST2: UST12RST (Bit 4)                        */
#define SCUCG_PPRST2_UST12RST_Msk         (0x10UL)                  /*!< SCUCG PPRST2: UST12RST (Bitfield-Mask: 0x01)          */
#define SCUCG_PPRST2_UT1RST_Pos           (3UL)                     /*!< SCUCG PPRST2: UT1RST (Bit 3)                          */
#define SCUCG_PPRST2_UT1RST_Msk           (0x8UL)                   /*!< SCUCG PPRST2: UT1RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST2_UT0RST_Pos           (2UL)                     /*!< SCUCG PPRST2: UT0RST (Bit 2)                          */
#define SCUCG_PPRST2_UT0RST_Msk           (0x4UL)                   /*!< SCUCG PPRST2: UT0RST (Bitfield-Mask: 0x01)            */
#define SCUCG_PPRST2_UST11RST_Pos         (1UL)                     /*!< SCUCG PPRST2: UST11RST (Bit 1)                        */
#define SCUCG_PPRST2_UST11RST_Msk         (0x2UL)                   /*!< SCUCG PPRST2: UST11RST (Bitfield-Mask: 0x01)          */
#define SCUCG_PPRST2_UST10RST_Pos         (0UL)                     /*!< SCUCG PPRST2: UST10RST (Bit 0)                        */
#define SCUCG_PPRST2_UST10RST_Msk         (0x1UL)                   /*!< SCUCG PPRST2: UST10RST (Bitfield-Mask: 0x01)          */
/* ========================================================  XTFLSR  ========================================================= */
#define SCUCG_XTFLSR_WTIDKY_Pos           (16UL)                    /*!< SCUCG XTFLSR: WTIDKY (Bit 16)                         */
#define SCUCG_XTFLSR_WTIDKY_Msk           (0xffff0000UL)            /*!< SCUCG XTFLSR: WTIDKY (Bitfield-Mask: 0xffff)          */
#define SCUCG_XTFLSR_XRNS_Pos             (0UL)                     /*!< SCUCG XTFLSR: XRNS (Bit 0)                            */
#define SCUCG_XTFLSR_XRNS_Msk             (0x7UL)                   /*!< SCUCG XTFLSR: XRNS (Bitfield-Mask: 0x07)              */


/* =========================================================================================================================== */
/* ================                                           SCULV                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  LVICR  ========================================================= */
#define SCULV_LVICR_LVIEN_Pos             (7UL)                     /*!< SCULV LVICR: LVIEN (Bit 7)                            */
#define SCULV_LVICR_LVIEN_Msk             (0x80UL)                  /*!< SCULV LVICR: LVIEN (Bitfield-Mask: 0x01)              */
#define SCULV_LVICR_LVINTEN_Pos           (5UL)                     /*!< SCULV LVICR: LVINTEN (Bit 5)                          */
#define SCULV_LVICR_LVINTEN_Msk           (0x20UL)                  /*!< SCULV LVICR: LVINTEN (Bitfield-Mask: 0x01)            */
#define SCULV_LVICR_LVIFLAG_Pos           (4UL)                     /*!< SCULV LVICR: LVIFLAG (Bit 4)                          */
#define SCULV_LVICR_LVIFLAG_Msk           (0x10UL)                  /*!< SCULV LVICR: LVIFLAG (Bitfield-Mask: 0x01)            */
#define SCULV_LVICR_LVIVS_Pos             (0UL)                     /*!< SCULV LVICR: LVIVS (Bit 0)                            */
#define SCULV_LVICR_LVIVS_Msk             (0xfUL)                   /*!< SCULV LVICR: LVIVS (Bitfield-Mask: 0x0f)              */
/* =========================================================  LVRCR  ========================================================= */
#define SCULV_LVRCR_LVREN_Pos             (0UL)                     /*!< SCULV LVRCR: LVREN (Bit 0)                            */
#define SCULV_LVRCR_LVREN_Msk             (0xffUL)                  /*!< SCULV LVRCR: LVREN (Bitfield-Mask: 0xff)              */


/* =========================================================================================================================== */
/* ================                                            Pn                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
#define Pn_MOD_MODE15_Pos                 (30UL)                    /*!< Pn MOD: MODE15 (Bit 30)                               */
#define Pn_MOD_MODE15_Msk                 (0xc0000000UL)            /*!< Pn MOD: MODE15 (Bitfield-Mask: 0x03)                  */
#define Pn_MOD_MODE14_Pos                 (28UL)                    /*!< Pn MOD: MODE14 (Bit 28)                               */
#define Pn_MOD_MODE14_Msk                 (0x30000000UL)            /*!< Pn MOD: MODE14 (Bitfield-Mask: 0x03)                  */
#define Pn_MOD_MODE13_Pos                 (26UL)                    /*!< Pn MOD: MODE13 (Bit 26)                               */
#define Pn_MOD_MODE13_Msk                 (0xc000000UL)             /*!< Pn MOD: MODE13 (Bitfield-Mask: 0x03)                  */
#define Pn_MOD_MODE12_Pos                 (24UL)                    /*!< Pn MOD: MODE12 (Bit 24)                               */
#define Pn_MOD_MODE12_Msk                 (0x3000000UL)             /*!< Pn MOD: MODE12 (Bitfield-Mask: 0x03)                  */
#define Pn_MOD_MODE11_Pos                 (22UL)                    /*!< Pn MOD: MODE11 (Bit 22)                               */
#define Pn_MOD_MODE11_Msk                 (0xc00000UL)              /*!< Pn MOD: MODE11 (Bitfield-Mask: 0x03)                  */
#define Pn_MOD_MODE10_Pos                 (20UL)                    /*!< Pn MOD: MODE10 (Bit 20)                               */
#define Pn_MOD_MODE10_Msk                 (0x300000UL)              /*!< Pn MOD: MODE10 (Bitfield-Mask: 0x03)                  */
#define Pn_MOD_MODE9_Pos                  (18UL)                    /*!< Pn MOD: MODE9 (Bit 18)                                */
#define Pn_MOD_MODE9_Msk                  (0xc0000UL)               /*!< Pn MOD: MODE9 (Bitfield-Mask: 0x03)                   */
#define Pn_MOD_MODE8_Pos                  (16UL)                    /*!< Pn MOD: MODE8 (Bit 16)                                */
#define Pn_MOD_MODE8_Msk                  (0x30000UL)               /*!< Pn MOD: MODE8 (Bitfield-Mask: 0x03)                   */
#define Pn_MOD_MODE7_Pos                  (14UL)                    /*!< Pn MOD: MODE7 (Bit 14)                                */
#define Pn_MOD_MODE7_Msk                  (0xc000UL)                /*!< Pn MOD: MODE7 (Bitfield-Mask: 0x03)                   */
#define Pn_MOD_MODE6_Pos                  (12UL)                    /*!< Pn MOD: MODE6 (Bit 12)                                */
#define Pn_MOD_MODE6_Msk                  (0x3000UL)                /*!< Pn MOD: MODE6 (Bitfield-Mask: 0x03)                   */
#define Pn_MOD_MODE5_Pos                  (10UL)                    /*!< Pn MOD: MODE5 (Bit 10)                                */
#define Pn_MOD_MODE5_Msk                  (0xc00UL)                 /*!< Pn MOD: MODE5 (Bitfield-Mask: 0x03)                   */
#define Pn_MOD_MODE4_Pos                  (8UL)                     /*!< Pn MOD: MODE4 (Bit 8)                                 */
#define Pn_MOD_MODE4_Msk                  (0x300UL)                 /*!< Pn MOD: MODE4 (Bitfield-Mask: 0x03)                   */
#define Pn_MOD_MODE3_Pos                  (6UL)                     /*!< Pn MOD: MODE3 (Bit 6)                                 */
#define Pn_MOD_MODE3_Msk                  (0xc0UL)                  /*!< Pn MOD: MODE3 (Bitfield-Mask: 0x03)                   */
#define Pn_MOD_MODE2_Pos                  (4UL)                     /*!< Pn MOD: MODE2 (Bit 4)                                 */
#define Pn_MOD_MODE2_Msk                  (0x30UL)                  /*!< Pn MOD: MODE2 (Bitfield-Mask: 0x03)                   */
#define Pn_MOD_MODE1_Pos                  (2UL)                     /*!< Pn MOD: MODE1 (Bit 2)                                 */
#define Pn_MOD_MODE1_Msk                  (0xcUL)                   /*!< Pn MOD: MODE1 (Bitfield-Mask: 0x03)                   */
#define Pn_MOD_MODE0_Pos                  (0UL)                     /*!< Pn MOD: MODE0 (Bit 0)                                 */
#define Pn_MOD_MODE0_Msk                  (0x3UL)                   /*!< Pn MOD: MODE0 (Bitfield-Mask: 0x03)                   */
/* ==========================================================  TYP  ========================================================== */
#define Pn_TYP_TYP15_Pos                  (15UL)                    /*!< Pn TYP: TYP15 (Bit 15)                                */
#define Pn_TYP_TYP15_Msk                  (0x8000UL)                /*!< Pn TYP: TYP15 (Bitfield-Mask: 0x01)                   */
#define Pn_TYP_TYP14_Pos                  (14UL)                    /*!< Pn TYP: TYP14 (Bit 14)                                */
#define Pn_TYP_TYP14_Msk                  (0x4000UL)                /*!< Pn TYP: TYP14 (Bitfield-Mask: 0x01)                   */
#define Pn_TYP_TYP13_Pos                  (13UL)                    /*!< Pn TYP: TYP13 (Bit 13)                                */
#define Pn_TYP_TYP13_Msk                  (0x2000UL)                /*!< Pn TYP: TYP13 (Bitfield-Mask: 0x01)                   */
#define Pn_TYP_TYP12_Pos                  (12UL)                    /*!< Pn TYP: TYP12 (Bit 12)                                */
#define Pn_TYP_TYP12_Msk                  (0x1000UL)                /*!< Pn TYP: TYP12 (Bitfield-Mask: 0x01)                   */
#define Pn_TYP_TYP11_Pos                  (11UL)                    /*!< Pn TYP: TYP11 (Bit 11)                                */
#define Pn_TYP_TYP11_Msk                  (0x800UL)                 /*!< Pn TYP: TYP11 (Bitfield-Mask: 0x01)                   */
#define Pn_TYP_TYP10_Pos                  (10UL)                    /*!< Pn TYP: TYP10 (Bit 10)                                */
#define Pn_TYP_TYP10_Msk                  (0x400UL)                 /*!< Pn TYP: TYP10 (Bitfield-Mask: 0x01)                   */
#define Pn_TYP_TYP9_Pos                   (9UL)                     /*!< Pn TYP: TYP9 (Bit 9)                                  */
#define Pn_TYP_TYP9_Msk                   (0x200UL)                 /*!< Pn TYP: TYP9 (Bitfield-Mask: 0x01)                    */
#define Pn_TYP_TYP8_Pos                   (8UL)                     /*!< Pn TYP: TYP8 (Bit 8)                                  */
#define Pn_TYP_TYP8_Msk                   (0x100UL)                 /*!< Pn TYP: TYP8 (Bitfield-Mask: 0x01)                    */
#define Pn_TYP_TYP7_Pos                   (7UL)                     /*!< Pn TYP: TYP7 (Bit 7)                                  */
#define Pn_TYP_TYP7_Msk                   (0x80UL)                  /*!< Pn TYP: TYP7 (Bitfield-Mask: 0x01)                    */
#define Pn_TYP_TYP6_Pos                   (6UL)                     /*!< Pn TYP: TYP6 (Bit 6)                                  */
#define Pn_TYP_TYP6_Msk                   (0x40UL)                  /*!< Pn TYP: TYP6 (Bitfield-Mask: 0x01)                    */
#define Pn_TYP_TYP5_Pos                   (5UL)                     /*!< Pn TYP: TYP5 (Bit 5)                                  */
#define Pn_TYP_TYP5_Msk                   (0x20UL)                  /*!< Pn TYP: TYP5 (Bitfield-Mask: 0x01)                    */
#define Pn_TYP_TYP4_Pos                   (4UL)                     /*!< Pn TYP: TYP4 (Bit 4)                                  */
#define Pn_TYP_TYP4_Msk                   (0x10UL)                  /*!< Pn TYP: TYP4 (Bitfield-Mask: 0x01)                    */
#define Pn_TYP_TYP3_Pos                   (3UL)                     /*!< Pn TYP: TYP3 (Bit 3)                                  */
#define Pn_TYP_TYP3_Msk                   (0x8UL)                   /*!< Pn TYP: TYP3 (Bitfield-Mask: 0x01)                    */
#define Pn_TYP_TYP2_Pos                   (2UL)                     /*!< Pn TYP: TYP2 (Bit 2)                                  */
#define Pn_TYP_TYP2_Msk                   (0x4UL)                   /*!< Pn TYP: TYP2 (Bitfield-Mask: 0x01)                    */
#define Pn_TYP_TYP1_Pos                   (1UL)                     /*!< Pn TYP: TYP1 (Bit 1)                                  */
#define Pn_TYP_TYP1_Msk                   (0x2UL)                   /*!< Pn TYP: TYP1 (Bitfield-Mask: 0x01)                    */
#define Pn_TYP_TYP0_Pos                   (0UL)                     /*!< Pn TYP: TYP0 (Bit 0)                                  */
#define Pn_TYP_TYP0_Msk                   (0x1UL)                   /*!< Pn TYP: TYP0 (Bitfield-Mask: 0x01)                    */
/* =========================================================  AFSR1  ========================================================= */
#define Pn_AFSR1_AFSR7_Pos                (28UL)                    /*!< Pn AFSR1: AFSR7 (Bit 28)                              */
#define Pn_AFSR1_AFSR7_Msk                (0xf0000000UL)            /*!< Pn AFSR1: AFSR7 (Bitfield-Mask: 0x0f)                 */
#define Pn_AFSR1_AFSR6_Pos                (24UL)                    /*!< Pn AFSR1: AFSR6 (Bit 24)                              */
#define Pn_AFSR1_AFSR6_Msk                (0xf000000UL)             /*!< Pn AFSR1: AFSR6 (Bitfield-Mask: 0x0f)                 */
#define Pn_AFSR1_AFSR5_Pos                (20UL)                    /*!< Pn AFSR1: AFSR5 (Bit 20)                              */
#define Pn_AFSR1_AFSR5_Msk                (0xf00000UL)              /*!< Pn AFSR1: AFSR5 (Bitfield-Mask: 0x0f)                 */
#define Pn_AFSR1_AFSR4_Pos                (16UL)                    /*!< Pn AFSR1: AFSR4 (Bit 16)                              */
#define Pn_AFSR1_AFSR4_Msk                (0xf0000UL)               /*!< Pn AFSR1: AFSR4 (Bitfield-Mask: 0x0f)                 */
#define Pn_AFSR1_AFSR3_Pos                (12UL)                    /*!< Pn AFSR1: AFSR3 (Bit 12)                              */
#define Pn_AFSR1_AFSR3_Msk                (0xf000UL)                /*!< Pn AFSR1: AFSR3 (Bitfield-Mask: 0x0f)                 */
#define Pn_AFSR1_AFSR2_Pos                (8UL)                     /*!< Pn AFSR1: AFSR2 (Bit 8)                               */
#define Pn_AFSR1_AFSR2_Msk                (0xf00UL)                 /*!< Pn AFSR1: AFSR2 (Bitfield-Mask: 0x0f)                 */
#define Pn_AFSR1_AFSR1_Pos                (4UL)                     /*!< Pn AFSR1: AFSR1 (Bit 4)                               */
#define Pn_AFSR1_AFSR1_Msk                (0xf0UL)                  /*!< Pn AFSR1: AFSR1 (Bitfield-Mask: 0x0f)                 */
#define Pn_AFSR1_AFSR0_Pos                (0UL)                     /*!< Pn AFSR1: AFSR0 (Bit 0)                               */
#define Pn_AFSR1_AFSR0_Msk                (0xfUL)                   /*!< Pn AFSR1: AFSR0 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  AFSR2  ========================================================= */
#define Pn_AFSR2_AFSR15_Pos               (28UL)                    /*!< Pn AFSR2: AFSR15 (Bit 28)                             */
#define Pn_AFSR2_AFSR15_Msk               (0xf0000000UL)            /*!< Pn AFSR2: AFSR15 (Bitfield-Mask: 0x0f)                */
#define Pn_AFSR2_AFSR14_Pos               (24UL)                    /*!< Pn AFSR2: AFSR14 (Bit 24)                             */
#define Pn_AFSR2_AFSR14_Msk               (0xf000000UL)             /*!< Pn AFSR2: AFSR14 (Bitfield-Mask: 0x0f)                */
#define Pn_AFSR2_AFSR13_Pos               (20UL)                    /*!< Pn AFSR2: AFSR13 (Bit 20)                             */
#define Pn_AFSR2_AFSR13_Msk               (0xf00000UL)              /*!< Pn AFSR2: AFSR13 (Bitfield-Mask: 0x0f)                */
#define Pn_AFSR2_AFSR12_Pos               (16UL)                    /*!< Pn AFSR2: AFSR12 (Bit 16)                             */
#define Pn_AFSR2_AFSR12_Msk               (0xf0000UL)               /*!< Pn AFSR2: AFSR12 (Bitfield-Mask: 0x0f)                */
#define Pn_AFSR2_AFSR11_Pos               (12UL)                    /*!< Pn AFSR2: AFSR11 (Bit 12)                             */
#define Pn_AFSR2_AFSR11_Msk               (0xf000UL)                /*!< Pn AFSR2: AFSR11 (Bitfield-Mask: 0x0f)                */
#define Pn_AFSR2_AFSR10_Pos               (8UL)                     /*!< Pn AFSR2: AFSR10 (Bit 8)                              */
#define Pn_AFSR2_AFSR10_Msk               (0xf00UL)                 /*!< Pn AFSR2: AFSR10 (Bitfield-Mask: 0x0f)                */
#define Pn_AFSR2_AFSR9_Pos                (4UL)                     /*!< Pn AFSR2: AFSR9 (Bit 4)                               */
#define Pn_AFSR2_AFSR9_Msk                (0xf0UL)                  /*!< Pn AFSR2: AFSR9 (Bitfield-Mask: 0x0f)                 */
#define Pn_AFSR2_AFSR8_Pos                (0UL)                     /*!< Pn AFSR2: AFSR8 (Bit 0)                               */
#define Pn_AFSR2_AFSR8_Msk                (0xfUL)                   /*!< Pn AFSR2: AFSR8 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  PUPD  ========================================================== */
#define Pn_PUPD_PUPD15_Pos                (30UL)                    /*!< Pn PUPD: PUPD15 (Bit 30)                              */
#define Pn_PUPD_PUPD15_Msk                (0xc0000000UL)            /*!< Pn PUPD: PUPD15 (Bitfield-Mask: 0x03)                 */
#define Pn_PUPD_PUPD14_Pos                (28UL)                    /*!< Pn PUPD: PUPD14 (Bit 28)                              */
#define Pn_PUPD_PUPD14_Msk                (0x30000000UL)            /*!< Pn PUPD: PUPD14 (Bitfield-Mask: 0x03)                 */
#define Pn_PUPD_PUPD13_Pos                (26UL)                    /*!< Pn PUPD: PUPD13 (Bit 26)                              */
#define Pn_PUPD_PUPD13_Msk                (0xc000000UL)             /*!< Pn PUPD: PUPD13 (Bitfield-Mask: 0x03)                 */
#define Pn_PUPD_PUPD12_Pos                (24UL)                    /*!< Pn PUPD: PUPD12 (Bit 24)                              */
#define Pn_PUPD_PUPD12_Msk                (0x3000000UL)             /*!< Pn PUPD: PUPD12 (Bitfield-Mask: 0x03)                 */
#define Pn_PUPD_PUPD11_Pos                (22UL)                    /*!< Pn PUPD: PUPD11 (Bit 22)                              */
#define Pn_PUPD_PUPD11_Msk                (0xc00000UL)              /*!< Pn PUPD: PUPD11 (Bitfield-Mask: 0x03)                 */
#define Pn_PUPD_PUPD10_Pos                (20UL)                    /*!< Pn PUPD: PUPD10 (Bit 20)                              */
#define Pn_PUPD_PUPD10_Msk                (0x300000UL)              /*!< Pn PUPD: PUPD10 (Bitfield-Mask: 0x03)                 */
#define Pn_PUPD_PUPD9_Pos                 (18UL)                    /*!< Pn PUPD: PUPD9 (Bit 18)                               */
#define Pn_PUPD_PUPD9_Msk                 (0xc0000UL)               /*!< Pn PUPD: PUPD9 (Bitfield-Mask: 0x03)                  */
#define Pn_PUPD_PUPD8_Pos                 (16UL)                    /*!< Pn PUPD: PUPD8 (Bit 16)                               */
#define Pn_PUPD_PUPD8_Msk                 (0x30000UL)               /*!< Pn PUPD: PUPD8 (Bitfield-Mask: 0x03)                  */
#define Pn_PUPD_PUPD7_Pos                 (14UL)                    /*!< Pn PUPD: PUPD7 (Bit 14)                               */
#define Pn_PUPD_PUPD7_Msk                 (0xc000UL)                /*!< Pn PUPD: PUPD7 (Bitfield-Mask: 0x03)                  */
#define Pn_PUPD_PUPD6_Pos                 (12UL)                    /*!< Pn PUPD: PUPD6 (Bit 12)                               */
#define Pn_PUPD_PUPD6_Msk                 (0x3000UL)                /*!< Pn PUPD: PUPD6 (Bitfield-Mask: 0x03)                  */
#define Pn_PUPD_PUPD5_Pos                 (10UL)                    /*!< Pn PUPD: PUPD5 (Bit 10)                               */
#define Pn_PUPD_PUPD5_Msk                 (0xc00UL)                 /*!< Pn PUPD: PUPD5 (Bitfield-Mask: 0x03)                  */
#define Pn_PUPD_PUPD4_Pos                 (8UL)                     /*!< Pn PUPD: PUPD4 (Bit 8)                                */
#define Pn_PUPD_PUPD4_Msk                 (0x300UL)                 /*!< Pn PUPD: PUPD4 (Bitfield-Mask: 0x03)                  */
#define Pn_PUPD_PUPD3_Pos                 (6UL)                     /*!< Pn PUPD: PUPD3 (Bit 6)                                */
#define Pn_PUPD_PUPD3_Msk                 (0xc0UL)                  /*!< Pn PUPD: PUPD3 (Bitfield-Mask: 0x03)                  */
#define Pn_PUPD_PUPD2_Pos                 (4UL)                     /*!< Pn PUPD: PUPD2 (Bit 4)                                */
#define Pn_PUPD_PUPD2_Msk                 (0x30UL)                  /*!< Pn PUPD: PUPD2 (Bitfield-Mask: 0x03)                  */
#define Pn_PUPD_PUPD1_Pos                 (2UL)                     /*!< Pn PUPD: PUPD1 (Bit 2)                                */
#define Pn_PUPD_PUPD1_Msk                 (0xcUL)                   /*!< Pn PUPD: PUPD1 (Bitfield-Mask: 0x03)                  */
#define Pn_PUPD_PUPD0_Pos                 (0UL)                     /*!< Pn PUPD: PUPD0 (Bit 0)                                */
#define Pn_PUPD_PUPD0_Msk                 (0x3UL)                   /*!< Pn PUPD: PUPD0 (Bitfield-Mask: 0x03)                  */
/* =========================================================  INDR  ========================================================== */
#define Pn_INDR_INDR15_Pos                (15UL)                    /*!< Pn INDR: INDR15 (Bit 15)                              */
#define Pn_INDR_INDR15_Msk                (0x8000UL)                /*!< Pn INDR: INDR15 (Bitfield-Mask: 0x01)                 */
#define Pn_INDR_INDR14_Pos                (14UL)                    /*!< Pn INDR: INDR14 (Bit 14)                              */
#define Pn_INDR_INDR14_Msk                (0x4000UL)                /*!< Pn INDR: INDR14 (Bitfield-Mask: 0x01)                 */
#define Pn_INDR_INDR13_Pos                (13UL)                    /*!< Pn INDR: INDR13 (Bit 13)                              */
#define Pn_INDR_INDR13_Msk                (0x2000UL)                /*!< Pn INDR: INDR13 (Bitfield-Mask: 0x01)                 */
#define Pn_INDR_INDR12_Pos                (12UL)                    /*!< Pn INDR: INDR12 (Bit 12)                              */
#define Pn_INDR_INDR12_Msk                (0x1000UL)                /*!< Pn INDR: INDR12 (Bitfield-Mask: 0x01)                 */
#define Pn_INDR_INDR11_Pos                (11UL)                    /*!< Pn INDR: INDR11 (Bit 11)                              */
#define Pn_INDR_INDR11_Msk                (0x800UL)                 /*!< Pn INDR: INDR11 (Bitfield-Mask: 0x01)                 */
#define Pn_INDR_INDR10_Pos                (10UL)                    /*!< Pn INDR: INDR10 (Bit 10)                              */
#define Pn_INDR_INDR10_Msk                (0x400UL)                 /*!< Pn INDR: INDR10 (Bitfield-Mask: 0x01)                 */
#define Pn_INDR_INDR9_Pos                 (9UL)                     /*!< Pn INDR: INDR9 (Bit 9)                                */
#define Pn_INDR_INDR9_Msk                 (0x200UL)                 /*!< Pn INDR: INDR9 (Bitfield-Mask: 0x01)                  */
#define Pn_INDR_INDR8_Pos                 (8UL)                     /*!< Pn INDR: INDR8 (Bit 8)                                */
#define Pn_INDR_INDR8_Msk                 (0x100UL)                 /*!< Pn INDR: INDR8 (Bitfield-Mask: 0x01)                  */
#define Pn_INDR_INDR7_Pos                 (7UL)                     /*!< Pn INDR: INDR7 (Bit 7)                                */
#define Pn_INDR_INDR7_Msk                 (0x80UL)                  /*!< Pn INDR: INDR7 (Bitfield-Mask: 0x01)                  */
#define Pn_INDR_INDR6_Pos                 (6UL)                     /*!< Pn INDR: INDR6 (Bit 6)                                */
#define Pn_INDR_INDR6_Msk                 (0x40UL)                  /*!< Pn INDR: INDR6 (Bitfield-Mask: 0x01)                  */
#define Pn_INDR_INDR5_Pos                 (5UL)                     /*!< Pn INDR: INDR5 (Bit 5)                                */
#define Pn_INDR_INDR5_Msk                 (0x20UL)                  /*!< Pn INDR: INDR5 (Bitfield-Mask: 0x01)                  */
#define Pn_INDR_INDR4_Pos                 (4UL)                     /*!< Pn INDR: INDR4 (Bit 4)                                */
#define Pn_INDR_INDR4_Msk                 (0x10UL)                  /*!< Pn INDR: INDR4 (Bitfield-Mask: 0x01)                  */
#define Pn_INDR_INDR3_Pos                 (3UL)                     /*!< Pn INDR: INDR3 (Bit 3)                                */
#define Pn_INDR_INDR3_Msk                 (0x8UL)                   /*!< Pn INDR: INDR3 (Bitfield-Mask: 0x01)                  */
#define Pn_INDR_INDR2_Pos                 (2UL)                     /*!< Pn INDR: INDR2 (Bit 2)                                */
#define Pn_INDR_INDR2_Msk                 (0x4UL)                   /*!< Pn INDR: INDR2 (Bitfield-Mask: 0x01)                  */
#define Pn_INDR_INDR1_Pos                 (1UL)                     /*!< Pn INDR: INDR1 (Bit 1)                                */
#define Pn_INDR_INDR1_Msk                 (0x2UL)                   /*!< Pn INDR: INDR1 (Bitfield-Mask: 0x01)                  */
#define Pn_INDR_INDR0_Pos                 (0UL)                     /*!< Pn INDR: INDR0 (Bit 0)                                */
#define Pn_INDR_INDR0_Msk                 (0x1UL)                   /*!< Pn INDR: INDR0 (Bitfield-Mask: 0x01)                  */
/* =========================================================  OUTDR  ========================================================= */
#define Pn_OUTDR_OUTDR15_Pos              (15UL)                    /*!< Pn OUTDR: OUTDR15 (Bit 15)                            */
#define Pn_OUTDR_OUTDR15_Msk              (0x8000UL)                /*!< Pn OUTDR: OUTDR15 (Bitfield-Mask: 0x01)               */
#define Pn_OUTDR_OUTDR14_Pos              (14UL)                    /*!< Pn OUTDR: OUTDR14 (Bit 14)                            */
#define Pn_OUTDR_OUTDR14_Msk              (0x4000UL)                /*!< Pn OUTDR: OUTDR14 (Bitfield-Mask: 0x01)               */
#define Pn_OUTDR_OUTDR13_Pos              (13UL)                    /*!< Pn OUTDR: OUTDR13 (Bit 13)                            */
#define Pn_OUTDR_OUTDR13_Msk              (0x2000UL)                /*!< Pn OUTDR: OUTDR13 (Bitfield-Mask: 0x01)               */
#define Pn_OUTDR_OUTDR12_Pos              (12UL)                    /*!< Pn OUTDR: OUTDR12 (Bit 12)                            */
#define Pn_OUTDR_OUTDR12_Msk              (0x1000UL)                /*!< Pn OUTDR: OUTDR12 (Bitfield-Mask: 0x01)               */
#define Pn_OUTDR_OUTDR11_Pos              (11UL)                    /*!< Pn OUTDR: OUTDR11 (Bit 11)                            */
#define Pn_OUTDR_OUTDR11_Msk              (0x800UL)                 /*!< Pn OUTDR: OUTDR11 (Bitfield-Mask: 0x01)               */
#define Pn_OUTDR_OUTDR10_Pos              (10UL)                    /*!< Pn OUTDR: OUTDR10 (Bit 10)                            */
#define Pn_OUTDR_OUTDR10_Msk              (0x400UL)                 /*!< Pn OUTDR: OUTDR10 (Bitfield-Mask: 0x01)               */
#define Pn_OUTDR_OUTDR9_Pos               (9UL)                     /*!< Pn OUTDR: OUTDR9 (Bit 9)                              */
#define Pn_OUTDR_OUTDR9_Msk               (0x200UL)                 /*!< Pn OUTDR: OUTDR9 (Bitfield-Mask: 0x01)                */
#define Pn_OUTDR_OUTDR8_Pos               (8UL)                     /*!< Pn OUTDR: OUTDR8 (Bit 8)                              */
#define Pn_OUTDR_OUTDR8_Msk               (0x100UL)                 /*!< Pn OUTDR: OUTDR8 (Bitfield-Mask: 0x01)                */
#define Pn_OUTDR_OUTDR7_Pos               (7UL)                     /*!< Pn OUTDR: OUTDR7 (Bit 7)                              */
#define Pn_OUTDR_OUTDR7_Msk               (0x80UL)                  /*!< Pn OUTDR: OUTDR7 (Bitfield-Mask: 0x01)                */
#define Pn_OUTDR_OUTDR6_Pos               (6UL)                     /*!< Pn OUTDR: OUTDR6 (Bit 6)                              */
#define Pn_OUTDR_OUTDR6_Msk               (0x40UL)                  /*!< Pn OUTDR: OUTDR6 (Bitfield-Mask: 0x01)                */
#define Pn_OUTDR_OUTDR5_Pos               (5UL)                     /*!< Pn OUTDR: OUTDR5 (Bit 5)                              */
#define Pn_OUTDR_OUTDR5_Msk               (0x20UL)                  /*!< Pn OUTDR: OUTDR5 (Bitfield-Mask: 0x01)                */
#define Pn_OUTDR_OUTDR4_Pos               (4UL)                     /*!< Pn OUTDR: OUTDR4 (Bit 4)                              */
#define Pn_OUTDR_OUTDR4_Msk               (0x10UL)                  /*!< Pn OUTDR: OUTDR4 (Bitfield-Mask: 0x01)                */
#define Pn_OUTDR_OUTDR3_Pos               (3UL)                     /*!< Pn OUTDR: OUTDR3 (Bit 3)                              */
#define Pn_OUTDR_OUTDR3_Msk               (0x8UL)                   /*!< Pn OUTDR: OUTDR3 (Bitfield-Mask: 0x01)                */
#define Pn_OUTDR_OUTDR2_Pos               (2UL)                     /*!< Pn OUTDR: OUTDR2 (Bit 2)                              */
#define Pn_OUTDR_OUTDR2_Msk               (0x4UL)                   /*!< Pn OUTDR: OUTDR2 (Bitfield-Mask: 0x01)                */
#define Pn_OUTDR_OUTDR1_Pos               (1UL)                     /*!< Pn OUTDR: OUTDR1 (Bit 1)                              */
#define Pn_OUTDR_OUTDR1_Msk               (0x2UL)                   /*!< Pn OUTDR: OUTDR1 (Bitfield-Mask: 0x01)                */
#define Pn_OUTDR_OUTDR0_Pos               (0UL)                     /*!< Pn OUTDR: OUTDR0 (Bit 0)                              */
#define Pn_OUTDR_OUTDR0_Msk               (0x1UL)                   /*!< Pn OUTDR: OUTDR0 (Bitfield-Mask: 0x01)                */
/* ==========================================================  BSR  ========================================================== */
#define Pn_BSR_BSR15_Pos                  (15UL)                    /*!< Pn BSR: BSR15 (Bit 15)                                */
#define Pn_BSR_BSR15_Msk                  (0x8000UL)                /*!< Pn BSR: BSR15 (Bitfield-Mask: 0x01)                   */
#define Pn_BSR_BSR14_Pos                  (14UL)                    /*!< Pn BSR: BSR14 (Bit 14)                                */
#define Pn_BSR_BSR14_Msk                  (0x4000UL)                /*!< Pn BSR: BSR14 (Bitfield-Mask: 0x01)                   */
#define Pn_BSR_BSR13_Pos                  (13UL)                    /*!< Pn BSR: BSR13 (Bit 13)                                */
#define Pn_BSR_BSR13_Msk                  (0x2000UL)                /*!< Pn BSR: BSR13 (Bitfield-Mask: 0x01)                   */
#define Pn_BSR_BSR12_Pos                  (12UL)                    /*!< Pn BSR: BSR12 (Bit 12)                                */
#define Pn_BSR_BSR12_Msk                  (0x1000UL)                /*!< Pn BSR: BSR12 (Bitfield-Mask: 0x01)                   */
#define Pn_BSR_BSR11_Pos                  (11UL)                    /*!< Pn BSR: BSR11 (Bit 11)                                */
#define Pn_BSR_BSR11_Msk                  (0x800UL)                 /*!< Pn BSR: BSR11 (Bitfield-Mask: 0x01)                   */
#define Pn_BSR_BSR10_Pos                  (10UL)                    /*!< Pn BSR: BSR10 (Bit 10)                                */
#define Pn_BSR_BSR10_Msk                  (0x400UL)                 /*!< Pn BSR: BSR10 (Bitfield-Mask: 0x01)                   */
#define Pn_BSR_BSR9_Pos                   (9UL)                     /*!< Pn BSR: BSR9 (Bit 9)                                  */
#define Pn_BSR_BSR9_Msk                   (0x200UL)                 /*!< Pn BSR: BSR9 (Bitfield-Mask: 0x01)                    */
#define Pn_BSR_BSR8_Pos                   (8UL)                     /*!< Pn BSR: BSR8 (Bit 8)                                  */
#define Pn_BSR_BSR8_Msk                   (0x100UL)                 /*!< Pn BSR: BSR8 (Bitfield-Mask: 0x01)                    */
#define Pn_BSR_BSR7_Pos                   (7UL)                     /*!< Pn BSR: BSR7 (Bit 7)                                  */
#define Pn_BSR_BSR7_Msk                   (0x80UL)                  /*!< Pn BSR: BSR7 (Bitfield-Mask: 0x01)                    */
#define Pn_BSR_BSR6_Pos                   (6UL)                     /*!< Pn BSR: BSR6 (Bit 6)                                  */
#define Pn_BSR_BSR6_Msk                   (0x40UL)                  /*!< Pn BSR: BSR6 (Bitfield-Mask: 0x01)                    */
#define Pn_BSR_BSR5_Pos                   (5UL)                     /*!< Pn BSR: BSR5 (Bit 5)                                  */
#define Pn_BSR_BSR5_Msk                   (0x20UL)                  /*!< Pn BSR: BSR5 (Bitfield-Mask: 0x01)                    */
#define Pn_BSR_BSR4_Pos                   (4UL)                     /*!< Pn BSR: BSR4 (Bit 4)                                  */
#define Pn_BSR_BSR4_Msk                   (0x10UL)                  /*!< Pn BSR: BSR4 (Bitfield-Mask: 0x01)                    */
#define Pn_BSR_BSR3_Pos                   (3UL)                     /*!< Pn BSR: BSR3 (Bit 3)                                  */
#define Pn_BSR_BSR3_Msk                   (0x8UL)                   /*!< Pn BSR: BSR3 (Bitfield-Mask: 0x01)                    */
#define Pn_BSR_BSR2_Pos                   (2UL)                     /*!< Pn BSR: BSR2 (Bit 2)                                  */
#define Pn_BSR_BSR2_Msk                   (0x4UL)                   /*!< Pn BSR: BSR2 (Bitfield-Mask: 0x01)                    */
#define Pn_BSR_BSR1_Pos                   (1UL)                     /*!< Pn BSR: BSR1 (Bit 1)                                  */
#define Pn_BSR_BSR1_Msk                   (0x2UL)                   /*!< Pn BSR: BSR1 (Bitfield-Mask: 0x01)                    */
#define Pn_BSR_BSR0_Pos                   (0UL)                     /*!< Pn BSR: BSR0 (Bit 0)                                  */
#define Pn_BSR_BSR0_Msk                   (0x1UL)                   /*!< Pn BSR: BSR0 (Bitfield-Mask: 0x01)                    */
/* ==========================================================  BCR  ========================================================== */
#define Pn_BCR_BCR15_Pos                  (15UL)                    /*!< Pn BCR: BCR15 (Bit 15)                                */
#define Pn_BCR_BCR15_Msk                  (0x8000UL)                /*!< Pn BCR: BCR15 (Bitfield-Mask: 0x01)                   */
#define Pn_BCR_BCR14_Pos                  (14UL)                    /*!< Pn BCR: BCR14 (Bit 14)                                */
#define Pn_BCR_BCR14_Msk                  (0x4000UL)                /*!< Pn BCR: BCR14 (Bitfield-Mask: 0x01)                   */
#define Pn_BCR_BCR13_Pos                  (13UL)                    /*!< Pn BCR: BCR13 (Bit 13)                                */
#define Pn_BCR_BCR13_Msk                  (0x2000UL)                /*!< Pn BCR: BCR13 (Bitfield-Mask: 0x01)                   */
#define Pn_BCR_BCR12_Pos                  (12UL)                    /*!< Pn BCR: BCR12 (Bit 12)                                */
#define Pn_BCR_BCR12_Msk                  (0x1000UL)                /*!< Pn BCR: BCR12 (Bitfield-Mask: 0x01)                   */
#define Pn_BCR_BCR11_Pos                  (11UL)                    /*!< Pn BCR: BCR11 (Bit 11)                                */
#define Pn_BCR_BCR11_Msk                  (0x800UL)                 /*!< Pn BCR: BCR11 (Bitfield-Mask: 0x01)                   */
#define Pn_BCR_BCR10_Pos                  (10UL)                    /*!< Pn BCR: BCR10 (Bit 10)                                */
#define Pn_BCR_BCR10_Msk                  (0x400UL)                 /*!< Pn BCR: BCR10 (Bitfield-Mask: 0x01)                   */
#define Pn_BCR_BCR9_Pos                   (9UL)                     /*!< Pn BCR: BCR9 (Bit 9)                                  */
#define Pn_BCR_BCR9_Msk                   (0x200UL)                 /*!< Pn BCR: BCR9 (Bitfield-Mask: 0x01)                    */
#define Pn_BCR_BCR8_Pos                   (8UL)                     /*!< Pn BCR: BCR8 (Bit 8)                                  */
#define Pn_BCR_BCR8_Msk                   (0x100UL)                 /*!< Pn BCR: BCR8 (Bitfield-Mask: 0x01)                    */
#define Pn_BCR_BCR7_Pos                   (7UL)                     /*!< Pn BCR: BCR7 (Bit 7)                                  */
#define Pn_BCR_BCR7_Msk                   (0x80UL)                  /*!< Pn BCR: BCR7 (Bitfield-Mask: 0x01)                    */
#define Pn_BCR_BCR6_Pos                   (6UL)                     /*!< Pn BCR: BCR6 (Bit 6)                                  */
#define Pn_BCR_BCR6_Msk                   (0x40UL)                  /*!< Pn BCR: BCR6 (Bitfield-Mask: 0x01)                    */
#define Pn_BCR_BCR5_Pos                   (5UL)                     /*!< Pn BCR: BCR5 (Bit 5)                                  */
#define Pn_BCR_BCR5_Msk                   (0x20UL)                  /*!< Pn BCR: BCR5 (Bitfield-Mask: 0x01)                    */
#define Pn_BCR_BCR4_Pos                   (4UL)                     /*!< Pn BCR: BCR4 (Bit 4)                                  */
#define Pn_BCR_BCR4_Msk                   (0x10UL)                  /*!< Pn BCR: BCR4 (Bitfield-Mask: 0x01)                    */
#define Pn_BCR_BCR3_Pos                   (3UL)                     /*!< Pn BCR: BCR3 (Bit 3)                                  */
#define Pn_BCR_BCR3_Msk                   (0x8UL)                   /*!< Pn BCR: BCR3 (Bitfield-Mask: 0x01)                    */
#define Pn_BCR_BCR2_Pos                   (2UL)                     /*!< Pn BCR: BCR2 (Bit 2)                                  */
#define Pn_BCR_BCR2_Msk                   (0x4UL)                   /*!< Pn BCR: BCR2 (Bitfield-Mask: 0x01)                    */
#define Pn_BCR_BCR1_Pos                   (1UL)                     /*!< Pn BCR: BCR1 (Bit 1)                                  */
#define Pn_BCR_BCR1_Msk                   (0x2UL)                   /*!< Pn BCR: BCR1 (Bitfield-Mask: 0x01)                    */
#define Pn_BCR_BCR0_Pos                   (0UL)                     /*!< Pn BCR: BCR0 (Bit 0)                                  */
#define Pn_BCR_BCR0_Msk                   (0x1UL)                   /*!< Pn BCR: BCR0 (Bitfield-Mask: 0x01)                    */
/* ========================================================  OUTDMSK  ======================================================== */
#define Pn_OUTDMSK_OUTDMSK15_Pos          (15UL)                    /*!< Pn OUTDMSK: OUTDMSK15 (Bit 15)                        */
#define Pn_OUTDMSK_OUTDMSK15_Msk          (0x8000UL)                /*!< Pn OUTDMSK: OUTDMSK15 (Bitfield-Mask: 0x01)           */
#define Pn_OUTDMSK_OUTDMSK14_Pos          (14UL)                    /*!< Pn OUTDMSK: OUTDMSK14 (Bit 14)                        */
#define Pn_OUTDMSK_OUTDMSK14_Msk          (0x4000UL)                /*!< Pn OUTDMSK: OUTDMSK14 (Bitfield-Mask: 0x01)           */
#define Pn_OUTDMSK_OUTDMSK13_Pos          (13UL)                    /*!< Pn OUTDMSK: OUTDMSK13 (Bit 13)                        */
#define Pn_OUTDMSK_OUTDMSK13_Msk          (0x2000UL)                /*!< Pn OUTDMSK: OUTDMSK13 (Bitfield-Mask: 0x01)           */
#define Pn_OUTDMSK_OUTDMSK12_Pos          (12UL)                    /*!< Pn OUTDMSK: OUTDMSK12 (Bit 12)                        */
#define Pn_OUTDMSK_OUTDMSK12_Msk          (0x1000UL)                /*!< Pn OUTDMSK: OUTDMSK12 (Bitfield-Mask: 0x01)           */
#define Pn_OUTDMSK_OUTDMSK11_Pos          (11UL)                    /*!< Pn OUTDMSK: OUTDMSK11 (Bit 11)                        */
#define Pn_OUTDMSK_OUTDMSK11_Msk          (0x800UL)                 /*!< Pn OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)           */
#define Pn_OUTDMSK_OUTDMSK10_Pos          (10UL)                    /*!< Pn OUTDMSK: OUTDMSK10 (Bit 10)                        */
#define Pn_OUTDMSK_OUTDMSK10_Msk          (0x400UL)                 /*!< Pn OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)           */
#define Pn_OUTDMSK_OUTDMSK9_Pos           (9UL)                     /*!< Pn OUTDMSK: OUTDMSK9 (Bit 9)                          */
#define Pn_OUTDMSK_OUTDMSK9_Msk           (0x200UL)                 /*!< Pn OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)            */
#define Pn_OUTDMSK_OUTDMSK8_Pos           (8UL)                     /*!< Pn OUTDMSK: OUTDMSK8 (Bit 8)                          */
#define Pn_OUTDMSK_OUTDMSK8_Msk           (0x100UL)                 /*!< Pn OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)            */
#define Pn_OUTDMSK_OUTDMSK7_Pos           (7UL)                     /*!< Pn OUTDMSK: OUTDMSK7 (Bit 7)                          */
#define Pn_OUTDMSK_OUTDMSK7_Msk           (0x80UL)                  /*!< Pn OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)            */
#define Pn_OUTDMSK_OUTDMSK6_Pos           (6UL)                     /*!< Pn OUTDMSK: OUTDMSK6 (Bit 6)                          */
#define Pn_OUTDMSK_OUTDMSK6_Msk           (0x40UL)                  /*!< Pn OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)            */
#define Pn_OUTDMSK_OUTDMSK5_Pos           (5UL)                     /*!< Pn OUTDMSK: OUTDMSK5 (Bit 5)                          */
#define Pn_OUTDMSK_OUTDMSK5_Msk           (0x20UL)                  /*!< Pn OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)            */
#define Pn_OUTDMSK_OUTDMSK4_Pos           (4UL)                     /*!< Pn OUTDMSK: OUTDMSK4 (Bit 4)                          */
#define Pn_OUTDMSK_OUTDMSK4_Msk           (0x10UL)                  /*!< Pn OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)            */
#define Pn_OUTDMSK_OUTDMSK3_Pos           (3UL)                     /*!< Pn OUTDMSK: OUTDMSK3 (Bit 3)                          */
#define Pn_OUTDMSK_OUTDMSK3_Msk           (0x8UL)                   /*!< Pn OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)            */
#define Pn_OUTDMSK_OUTDMSK2_Pos           (2UL)                     /*!< Pn OUTDMSK: OUTDMSK2 (Bit 2)                          */
#define Pn_OUTDMSK_OUTDMSK2_Msk           (0x4UL)                   /*!< Pn OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)            */
#define Pn_OUTDMSK_OUTDMSK1_Pos           (1UL)                     /*!< Pn OUTDMSK: OUTDMSK1 (Bit 1)                          */
#define Pn_OUTDMSK_OUTDMSK1_Msk           (0x2UL)                   /*!< Pn OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)            */
#define Pn_OUTDMSK_OUTDMSK0_Pos           (0UL)                     /*!< Pn OUTDMSK: OUTDMSK0 (Bit 0)                          */
#define Pn_OUTDMSK_OUTDMSK0_Msk           (0x1UL)                   /*!< Pn OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)            */
/* =========================================================  DBCR  ========================================================== */
#define Pn_DBCR_DBCLK_Pos                 (16UL)                    /*!< Pn DBCR: DBCLK (Bit 16)                               */
#define Pn_DBCR_DBCLK_Msk                 (0x70000UL)               /*!< Pn DBCR: DBCLK (Bitfield-Mask: 0x07)                  */
#define Pn_DBCR_DBEN11_Pos                (11UL)                    /*!< Pn DBCR: DBEN11 (Bit 11)                              */
#define Pn_DBCR_DBEN11_Msk                (0x800UL)                 /*!< Pn DBCR: DBEN11 (Bitfield-Mask: 0x01)                 */
#define Pn_DBCR_DBEN10_Pos                (10UL)                    /*!< Pn DBCR: DBEN10 (Bit 10)                              */
#define Pn_DBCR_DBEN10_Msk                (0x400UL)                 /*!< Pn DBCR: DBEN10 (Bitfield-Mask: 0x01)                 */
#define Pn_DBCR_DBEN9_Pos                 (9UL)                     /*!< Pn DBCR: DBEN9 (Bit 9)                                */
#define Pn_DBCR_DBEN9_Msk                 (0x200UL)                 /*!< Pn DBCR: DBEN9 (Bitfield-Mask: 0x01)                  */
#define Pn_DBCR_DBEN8_Pos                 (8UL)                     /*!< Pn DBCR: DBEN8 (Bit 8)                                */
#define Pn_DBCR_DBEN8_Msk                 (0x100UL)                 /*!< Pn DBCR: DBEN8 (Bitfield-Mask: 0x01)                  */
#define Pn_DBCR_DBEN7_Pos                 (7UL)                     /*!< Pn DBCR: DBEN7 (Bit 7)                                */
#define Pn_DBCR_DBEN7_Msk                 (0x80UL)                  /*!< Pn DBCR: DBEN7 (Bitfield-Mask: 0x01)                  */
#define Pn_DBCR_DBEN6_Pos                 (6UL)                     /*!< Pn DBCR: DBEN6 (Bit 6)                                */
#define Pn_DBCR_DBEN6_Msk                 (0x40UL)                  /*!< Pn DBCR: DBEN6 (Bitfield-Mask: 0x01)                  */
#define Pn_DBCR_DBEN5_Pos                 (5UL)                     /*!< Pn DBCR: DBEN5 (Bit 5)                                */
#define Pn_DBCR_DBEN5_Msk                 (0x20UL)                  /*!< Pn DBCR: DBEN5 (Bitfield-Mask: 0x01)                  */
#define Pn_DBCR_DBEN4_Pos                 (4UL)                     /*!< Pn DBCR: DBEN4 (Bit 4)                                */
#define Pn_DBCR_DBEN4_Msk                 (0x10UL)                  /*!< Pn DBCR: DBEN4 (Bitfield-Mask: 0x01)                  */
#define Pn_DBCR_DBEN3_Pos                 (3UL)                     /*!< Pn DBCR: DBEN3 (Bit 3)                                */
#define Pn_DBCR_DBEN3_Msk                 (0x8UL)                   /*!< Pn DBCR: DBEN3 (Bitfield-Mask: 0x01)                  */
#define Pn_DBCR_DBEN2_Pos                 (2UL)                     /*!< Pn DBCR: DBEN2 (Bit 2)                                */
#define Pn_DBCR_DBEN2_Msk                 (0x4UL)                   /*!< Pn DBCR: DBEN2 (Bitfield-Mask: 0x01)                  */
#define Pn_DBCR_DBEN1_Pos                 (1UL)                     /*!< Pn DBCR: DBEN1 (Bit 1)                                */
#define Pn_DBCR_DBEN1_Msk                 (0x2UL)                   /*!< Pn DBCR: DBEN1 (Bitfield-Mask: 0x01)                  */
#define Pn_DBCR_DBEN0_Pos                 (0UL)                     /*!< Pn DBCR: DBEN0 (Bit 0)                                */
#define Pn_DBCR_DBEN0_Msk                 (0x1UL)                   /*!< Pn DBCR: DBEN0 (Bitfield-Mask: 0x01)                  */


/* =========================================================================================================================== */
/* ================                                            PA                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
#define PA_MOD_MODE15_Pos                 (30UL)                    /*!< PA MOD: MODE15 (Bit 30)                               */
#define PA_MOD_MODE15_Msk                 (0xc0000000UL)            /*!< PA MOD: MODE15 (Bitfield-Mask: 0x03)                  */
#define PA_MOD_MODE14_Pos                 (28UL)                    /*!< PA MOD: MODE14 (Bit 28)                               */
#define PA_MOD_MODE14_Msk                 (0x30000000UL)            /*!< PA MOD: MODE14 (Bitfield-Mask: 0x03)                  */
#define PA_MOD_MODE13_Pos                 (26UL)                    /*!< PA MOD: MODE13 (Bit 26)                               */
#define PA_MOD_MODE13_Msk                 (0xc000000UL)             /*!< PA MOD: MODE13 (Bitfield-Mask: 0x03)                  */
#define PA_MOD_MODE12_Pos                 (24UL)                    /*!< PA MOD: MODE12 (Bit 24)                               */
#define PA_MOD_MODE12_Msk                 (0x3000000UL)             /*!< PA MOD: MODE12 (Bitfield-Mask: 0x03)                  */
#define PA_MOD_MODE11_Pos                 (22UL)                    /*!< PA MOD: MODE11 (Bit 22)                               */
#define PA_MOD_MODE11_Msk                 (0xc00000UL)              /*!< PA MOD: MODE11 (Bitfield-Mask: 0x03)                  */
#define PA_MOD_MODE10_Pos                 (20UL)                    /*!< PA MOD: MODE10 (Bit 20)                               */
#define PA_MOD_MODE10_Msk                 (0x300000UL)              /*!< PA MOD: MODE10 (Bitfield-Mask: 0x03)                  */
#define PA_MOD_MODE9_Pos                  (18UL)                    /*!< PA MOD: MODE9 (Bit 18)                                */
#define PA_MOD_MODE9_Msk                  (0xc0000UL)               /*!< PA MOD: MODE9 (Bitfield-Mask: 0x03)                   */
#define PA_MOD_MODE8_Pos                  (16UL)                    /*!< PA MOD: MODE8 (Bit 16)                                */
#define PA_MOD_MODE8_Msk                  (0x30000UL)               /*!< PA MOD: MODE8 (Bitfield-Mask: 0x03)                   */
#define PA_MOD_MODE7_Pos                  (14UL)                    /*!< PA MOD: MODE7 (Bit 14)                                */
#define PA_MOD_MODE7_Msk                  (0xc000UL)                /*!< PA MOD: MODE7 (Bitfield-Mask: 0x03)                   */
#define PA_MOD_MODE6_Pos                  (12UL)                    /*!< PA MOD: MODE6 (Bit 12)                                */
#define PA_MOD_MODE6_Msk                  (0x3000UL)                /*!< PA MOD: MODE6 (Bitfield-Mask: 0x03)                   */
#define PA_MOD_MODE5_Pos                  (10UL)                    /*!< PA MOD: MODE5 (Bit 10)                                */
#define PA_MOD_MODE5_Msk                  (0xc00UL)                 /*!< PA MOD: MODE5 (Bitfield-Mask: 0x03)                   */
#define PA_MOD_MODE4_Pos                  (8UL)                     /*!< PA MOD: MODE4 (Bit 8)                                 */
#define PA_MOD_MODE4_Msk                  (0x300UL)                 /*!< PA MOD: MODE4 (Bitfield-Mask: 0x03)                   */
#define PA_MOD_MODE3_Pos                  (6UL)                     /*!< PA MOD: MODE3 (Bit 6)                                 */
#define PA_MOD_MODE3_Msk                  (0xc0UL)                  /*!< PA MOD: MODE3 (Bitfield-Mask: 0x03)                   */
#define PA_MOD_MODE2_Pos                  (4UL)                     /*!< PA MOD: MODE2 (Bit 4)                                 */
#define PA_MOD_MODE2_Msk                  (0x30UL)                  /*!< PA MOD: MODE2 (Bitfield-Mask: 0x03)                   */
#define PA_MOD_MODE1_Pos                  (2UL)                     /*!< PA MOD: MODE1 (Bit 2)                                 */
#define PA_MOD_MODE1_Msk                  (0xcUL)                   /*!< PA MOD: MODE1 (Bitfield-Mask: 0x03)                   */
#define PA_MOD_MODE0_Pos                  (0UL)                     /*!< PA MOD: MODE0 (Bit 0)                                 */
#define PA_MOD_MODE0_Msk                  (0x3UL)                   /*!< PA MOD: MODE0 (Bitfield-Mask: 0x03)                   */
/* ==========================================================  TYP  ========================================================== */
#define PA_TYP_TYP15_Pos                  (15UL)                    /*!< PA TYP: TYP15 (Bit 15)                                */
#define PA_TYP_TYP15_Msk                  (0x8000UL)                /*!< PA TYP: TYP15 (Bitfield-Mask: 0x01)                   */
#define PA_TYP_TYP14_Pos                  (14UL)                    /*!< PA TYP: TYP14 (Bit 14)                                */
#define PA_TYP_TYP14_Msk                  (0x4000UL)                /*!< PA TYP: TYP14 (Bitfield-Mask: 0x01)                   */
#define PA_TYP_TYP13_Pos                  (13UL)                    /*!< PA TYP: TYP13 (Bit 13)                                */
#define PA_TYP_TYP13_Msk                  (0x2000UL)                /*!< PA TYP: TYP13 (Bitfield-Mask: 0x01)                   */
#define PA_TYP_TYP12_Pos                  (12UL)                    /*!< PA TYP: TYP12 (Bit 12)                                */
#define PA_TYP_TYP12_Msk                  (0x1000UL)                /*!< PA TYP: TYP12 (Bitfield-Mask: 0x01)                   */
#define PA_TYP_TYP11_Pos                  (11UL)                    /*!< PA TYP: TYP11 (Bit 11)                                */
#define PA_TYP_TYP11_Msk                  (0x800UL)                 /*!< PA TYP: TYP11 (Bitfield-Mask: 0x01)                   */
#define PA_TYP_TYP10_Pos                  (10UL)                    /*!< PA TYP: TYP10 (Bit 10)                                */
#define PA_TYP_TYP10_Msk                  (0x400UL)                 /*!< PA TYP: TYP10 (Bitfield-Mask: 0x01)                   */
#define PA_TYP_TYP9_Pos                   (9UL)                     /*!< PA TYP: TYP9 (Bit 9)                                  */
#define PA_TYP_TYP9_Msk                   (0x200UL)                 /*!< PA TYP: TYP9 (Bitfield-Mask: 0x01)                    */
#define PA_TYP_TYP8_Pos                   (8UL)                     /*!< PA TYP: TYP8 (Bit 8)                                  */
#define PA_TYP_TYP8_Msk                   (0x100UL)                 /*!< PA TYP: TYP8 (Bitfield-Mask: 0x01)                    */
#define PA_TYP_TYP7_Pos                   (7UL)                     /*!< PA TYP: TYP7 (Bit 7)                                  */
#define PA_TYP_TYP7_Msk                   (0x80UL)                  /*!< PA TYP: TYP7 (Bitfield-Mask: 0x01)                    */
#define PA_TYP_TYP6_Pos                   (6UL)                     /*!< PA TYP: TYP6 (Bit 6)                                  */
#define PA_TYP_TYP6_Msk                   (0x40UL)                  /*!< PA TYP: TYP6 (Bitfield-Mask: 0x01)                    */
#define PA_TYP_TYP5_Pos                   (5UL)                     /*!< PA TYP: TYP5 (Bit 5)                                  */
#define PA_TYP_TYP5_Msk                   (0x20UL)                  /*!< PA TYP: TYP5 (Bitfield-Mask: 0x01)                    */
#define PA_TYP_TYP4_Pos                   (4UL)                     /*!< PA TYP: TYP4 (Bit 4)                                  */
#define PA_TYP_TYP4_Msk                   (0x10UL)                  /*!< PA TYP: TYP4 (Bitfield-Mask: 0x01)                    */
#define PA_TYP_TYP3_Pos                   (3UL)                     /*!< PA TYP: TYP3 (Bit 3)                                  */
#define PA_TYP_TYP3_Msk                   (0x8UL)                   /*!< PA TYP: TYP3 (Bitfield-Mask: 0x01)                    */
#define PA_TYP_TYP2_Pos                   (2UL)                     /*!< PA TYP: TYP2 (Bit 2)                                  */
#define PA_TYP_TYP2_Msk                   (0x4UL)                   /*!< PA TYP: TYP2 (Bitfield-Mask: 0x01)                    */
#define PA_TYP_TYP1_Pos                   (1UL)                     /*!< PA TYP: TYP1 (Bit 1)                                  */
#define PA_TYP_TYP1_Msk                   (0x2UL)                   /*!< PA TYP: TYP1 (Bitfield-Mask: 0x01)                    */
#define PA_TYP_TYP0_Pos                   (0UL)                     /*!< PA TYP: TYP0 (Bit 0)                                  */
#define PA_TYP_TYP0_Msk                   (0x1UL)                   /*!< PA TYP: TYP0 (Bitfield-Mask: 0x01)                    */
/* =========================================================  AFSR1  ========================================================= */
#define PA_AFSR1_AFSR7_Pos                (28UL)                    /*!< PA AFSR1: AFSR7 (Bit 28)                              */
#define PA_AFSR1_AFSR7_Msk                (0xf0000000UL)            /*!< PA AFSR1: AFSR7 (Bitfield-Mask: 0x0f)                 */
#define PA_AFSR1_AFSR6_Pos                (24UL)                    /*!< PA AFSR1: AFSR6 (Bit 24)                              */
#define PA_AFSR1_AFSR6_Msk                (0xf000000UL)             /*!< PA AFSR1: AFSR6 (Bitfield-Mask: 0x0f)                 */
#define PA_AFSR1_AFSR5_Pos                (20UL)                    /*!< PA AFSR1: AFSR5 (Bit 20)                              */
#define PA_AFSR1_AFSR5_Msk                (0xf00000UL)              /*!< PA AFSR1: AFSR5 (Bitfield-Mask: 0x0f)                 */
#define PA_AFSR1_AFSR4_Pos                (16UL)                    /*!< PA AFSR1: AFSR4 (Bit 16)                              */
#define PA_AFSR1_AFSR4_Msk                (0xf0000UL)               /*!< PA AFSR1: AFSR4 (Bitfield-Mask: 0x0f)                 */
#define PA_AFSR1_AFSR3_Pos                (12UL)                    /*!< PA AFSR1: AFSR3 (Bit 12)                              */
#define PA_AFSR1_AFSR3_Msk                (0xf000UL)                /*!< PA AFSR1: AFSR3 (Bitfield-Mask: 0x0f)                 */
#define PA_AFSR1_AFSR2_Pos                (8UL)                     /*!< PA AFSR1: AFSR2 (Bit 8)                               */
#define PA_AFSR1_AFSR2_Msk                (0xf00UL)                 /*!< PA AFSR1: AFSR2 (Bitfield-Mask: 0x0f)                 */
#define PA_AFSR1_AFSR1_Pos                (4UL)                     /*!< PA AFSR1: AFSR1 (Bit 4)                               */
#define PA_AFSR1_AFSR1_Msk                (0xf0UL)                  /*!< PA AFSR1: AFSR1 (Bitfield-Mask: 0x0f)                 */
#define PA_AFSR1_AFSR0_Pos                (0UL)                     /*!< PA AFSR1: AFSR0 (Bit 0)                               */
#define PA_AFSR1_AFSR0_Msk                (0xfUL)                   /*!< PA AFSR1: AFSR0 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  AFSR2  ========================================================= */
#define PA_AFSR2_AFSR15_Pos               (28UL)                    /*!< PA AFSR2: AFSR15 (Bit 28)                             */
#define PA_AFSR2_AFSR15_Msk               (0xf0000000UL)            /*!< PA AFSR2: AFSR15 (Bitfield-Mask: 0x0f)                */
#define PA_AFSR2_AFSR14_Pos               (24UL)                    /*!< PA AFSR2: AFSR14 (Bit 24)                             */
#define PA_AFSR2_AFSR14_Msk               (0xf000000UL)             /*!< PA AFSR2: AFSR14 (Bitfield-Mask: 0x0f)                */
#define PA_AFSR2_AFSR13_Pos               (20UL)                    /*!< PA AFSR2: AFSR13 (Bit 20)                             */
#define PA_AFSR2_AFSR13_Msk               (0xf00000UL)              /*!< PA AFSR2: AFSR13 (Bitfield-Mask: 0x0f)                */
#define PA_AFSR2_AFSR12_Pos               (16UL)                    /*!< PA AFSR2: AFSR12 (Bit 16)                             */
#define PA_AFSR2_AFSR12_Msk               (0xf0000UL)               /*!< PA AFSR2: AFSR12 (Bitfield-Mask: 0x0f)                */
#define PA_AFSR2_AFSR11_Pos               (12UL)                    /*!< PA AFSR2: AFSR11 (Bit 12)                             */
#define PA_AFSR2_AFSR11_Msk               (0xf000UL)                /*!< PA AFSR2: AFSR11 (Bitfield-Mask: 0x0f)                */
#define PA_AFSR2_AFSR10_Pos               (8UL)                     /*!< PA AFSR2: AFSR10 (Bit 8)                              */
#define PA_AFSR2_AFSR10_Msk               (0xf00UL)                 /*!< PA AFSR2: AFSR10 (Bitfield-Mask: 0x0f)                */
#define PA_AFSR2_AFSR9_Pos                (4UL)                     /*!< PA AFSR2: AFSR9 (Bit 4)                               */
#define PA_AFSR2_AFSR9_Msk                (0xf0UL)                  /*!< PA AFSR2: AFSR9 (Bitfield-Mask: 0x0f)                 */
#define PA_AFSR2_AFSR8_Pos                (0UL)                     /*!< PA AFSR2: AFSR8 (Bit 0)                               */
#define PA_AFSR2_AFSR8_Msk                (0xfUL)                   /*!< PA AFSR2: AFSR8 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  PUPD  ========================================================== */
#define PA_PUPD_PUPD15_Pos                (30UL)                    /*!< PA PUPD: PUPD15 (Bit 30)                              */
#define PA_PUPD_PUPD15_Msk                (0xc0000000UL)            /*!< PA PUPD: PUPD15 (Bitfield-Mask: 0x03)                 */
#define PA_PUPD_PUPD14_Pos                (28UL)                    /*!< PA PUPD: PUPD14 (Bit 28)                              */
#define PA_PUPD_PUPD14_Msk                (0x30000000UL)            /*!< PA PUPD: PUPD14 (Bitfield-Mask: 0x03)                 */
#define PA_PUPD_PUPD13_Pos                (26UL)                    /*!< PA PUPD: PUPD13 (Bit 26)                              */
#define PA_PUPD_PUPD13_Msk                (0xc000000UL)             /*!< PA PUPD: PUPD13 (Bitfield-Mask: 0x03)                 */
#define PA_PUPD_PUPD12_Pos                (24UL)                    /*!< PA PUPD: PUPD12 (Bit 24)                              */
#define PA_PUPD_PUPD12_Msk                (0x3000000UL)             /*!< PA PUPD: PUPD12 (Bitfield-Mask: 0x03)                 */
#define PA_PUPD_PUPD11_Pos                (22UL)                    /*!< PA PUPD: PUPD11 (Bit 22)                              */
#define PA_PUPD_PUPD11_Msk                (0xc00000UL)              /*!< PA PUPD: PUPD11 (Bitfield-Mask: 0x03)                 */
#define PA_PUPD_PUPD10_Pos                (20UL)                    /*!< PA PUPD: PUPD10 (Bit 20)                              */
#define PA_PUPD_PUPD10_Msk                (0x300000UL)              /*!< PA PUPD: PUPD10 (Bitfield-Mask: 0x03)                 */
#define PA_PUPD_PUPD9_Pos                 (18UL)                    /*!< PA PUPD: PUPD9 (Bit 18)                               */
#define PA_PUPD_PUPD9_Msk                 (0xc0000UL)               /*!< PA PUPD: PUPD9 (Bitfield-Mask: 0x03)                  */
#define PA_PUPD_PUPD8_Pos                 (16UL)                    /*!< PA PUPD: PUPD8 (Bit 16)                               */
#define PA_PUPD_PUPD8_Msk                 (0x30000UL)               /*!< PA PUPD: PUPD8 (Bitfield-Mask: 0x03)                  */
#define PA_PUPD_PUPD7_Pos                 (14UL)                    /*!< PA PUPD: PUPD7 (Bit 14)                               */
#define PA_PUPD_PUPD7_Msk                 (0xc000UL)                /*!< PA PUPD: PUPD7 (Bitfield-Mask: 0x03)                  */
#define PA_PUPD_PUPD6_Pos                 (12UL)                    /*!< PA PUPD: PUPD6 (Bit 12)                               */
#define PA_PUPD_PUPD6_Msk                 (0x3000UL)                /*!< PA PUPD: PUPD6 (Bitfield-Mask: 0x03)                  */
#define PA_PUPD_PUPD5_Pos                 (10UL)                    /*!< PA PUPD: PUPD5 (Bit 10)                               */
#define PA_PUPD_PUPD5_Msk                 (0xc00UL)                 /*!< PA PUPD: PUPD5 (Bitfield-Mask: 0x03)                  */
#define PA_PUPD_PUPD4_Pos                 (8UL)                     /*!< PA PUPD: PUPD4 (Bit 8)                                */
#define PA_PUPD_PUPD4_Msk                 (0x300UL)                 /*!< PA PUPD: PUPD4 (Bitfield-Mask: 0x03)                  */
#define PA_PUPD_PUPD3_Pos                 (6UL)                     /*!< PA PUPD: PUPD3 (Bit 6)                                */
#define PA_PUPD_PUPD3_Msk                 (0xc0UL)                  /*!< PA PUPD: PUPD3 (Bitfield-Mask: 0x03)                  */
#define PA_PUPD_PUPD2_Pos                 (4UL)                     /*!< PA PUPD: PUPD2 (Bit 4)                                */
#define PA_PUPD_PUPD2_Msk                 (0x30UL)                  /*!< PA PUPD: PUPD2 (Bitfield-Mask: 0x03)                  */
#define PA_PUPD_PUPD1_Pos                 (2UL)                     /*!< PA PUPD: PUPD1 (Bit 2)                                */
#define PA_PUPD_PUPD1_Msk                 (0xcUL)                   /*!< PA PUPD: PUPD1 (Bitfield-Mask: 0x03)                  */
#define PA_PUPD_PUPD0_Pos                 (0UL)                     /*!< PA PUPD: PUPD0 (Bit 0)                                */
#define PA_PUPD_PUPD0_Msk                 (0x3UL)                   /*!< PA PUPD: PUPD0 (Bitfield-Mask: 0x03)                  */
/* =========================================================  INDR  ========================================================== */
#define PA_INDR_INDR15_Pos                (15UL)                    /*!< PA INDR: INDR15 (Bit 15)                              */
#define PA_INDR_INDR15_Msk                (0x8000UL)                /*!< PA INDR: INDR15 (Bitfield-Mask: 0x01)                 */
#define PA_INDR_INDR14_Pos                (14UL)                    /*!< PA INDR: INDR14 (Bit 14)                              */
#define PA_INDR_INDR14_Msk                (0x4000UL)                /*!< PA INDR: INDR14 (Bitfield-Mask: 0x01)                 */
#define PA_INDR_INDR13_Pos                (13UL)                    /*!< PA INDR: INDR13 (Bit 13)                              */
#define PA_INDR_INDR13_Msk                (0x2000UL)                /*!< PA INDR: INDR13 (Bitfield-Mask: 0x01)                 */
#define PA_INDR_INDR12_Pos                (12UL)                    /*!< PA INDR: INDR12 (Bit 12)                              */
#define PA_INDR_INDR12_Msk                (0x1000UL)                /*!< PA INDR: INDR12 (Bitfield-Mask: 0x01)                 */
#define PA_INDR_INDR11_Pos                (11UL)                    /*!< PA INDR: INDR11 (Bit 11)                              */
#define PA_INDR_INDR11_Msk                (0x800UL)                 /*!< PA INDR: INDR11 (Bitfield-Mask: 0x01)                 */
#define PA_INDR_INDR10_Pos                (10UL)                    /*!< PA INDR: INDR10 (Bit 10)                              */
#define PA_INDR_INDR10_Msk                (0x400UL)                 /*!< PA INDR: INDR10 (Bitfield-Mask: 0x01)                 */
#define PA_INDR_INDR9_Pos                 (9UL)                     /*!< PA INDR: INDR9 (Bit 9)                                */
#define PA_INDR_INDR9_Msk                 (0x200UL)                 /*!< PA INDR: INDR9 (Bitfield-Mask: 0x01)                  */
#define PA_INDR_INDR8_Pos                 (8UL)                     /*!< PA INDR: INDR8 (Bit 8)                                */
#define PA_INDR_INDR8_Msk                 (0x100UL)                 /*!< PA INDR: INDR8 (Bitfield-Mask: 0x01)                  */
#define PA_INDR_INDR7_Pos                 (7UL)                     /*!< PA INDR: INDR7 (Bit 7)                                */
#define PA_INDR_INDR7_Msk                 (0x80UL)                  /*!< PA INDR: INDR7 (Bitfield-Mask: 0x01)                  */
#define PA_INDR_INDR6_Pos                 (6UL)                     /*!< PA INDR: INDR6 (Bit 6)                                */
#define PA_INDR_INDR6_Msk                 (0x40UL)                  /*!< PA INDR: INDR6 (Bitfield-Mask: 0x01)                  */
#define PA_INDR_INDR5_Pos                 (5UL)                     /*!< PA INDR: INDR5 (Bit 5)                                */
#define PA_INDR_INDR5_Msk                 (0x20UL)                  /*!< PA INDR: INDR5 (Bitfield-Mask: 0x01)                  */
#define PA_INDR_INDR4_Pos                 (4UL)                     /*!< PA INDR: INDR4 (Bit 4)                                */
#define PA_INDR_INDR4_Msk                 (0x10UL)                  /*!< PA INDR: INDR4 (Bitfield-Mask: 0x01)                  */
#define PA_INDR_INDR3_Pos                 (3UL)                     /*!< PA INDR: INDR3 (Bit 3)                                */
#define PA_INDR_INDR3_Msk                 (0x8UL)                   /*!< PA INDR: INDR3 (Bitfield-Mask: 0x01)                  */
#define PA_INDR_INDR2_Pos                 (2UL)                     /*!< PA INDR: INDR2 (Bit 2)                                */
#define PA_INDR_INDR2_Msk                 (0x4UL)                   /*!< PA INDR: INDR2 (Bitfield-Mask: 0x01)                  */
#define PA_INDR_INDR1_Pos                 (1UL)                     /*!< PA INDR: INDR1 (Bit 1)                                */
#define PA_INDR_INDR1_Msk                 (0x2UL)                   /*!< PA INDR: INDR1 (Bitfield-Mask: 0x01)                  */
#define PA_INDR_INDR0_Pos                 (0UL)                     /*!< PA INDR: INDR0 (Bit 0)                                */
#define PA_INDR_INDR0_Msk                 (0x1UL)                   /*!< PA INDR: INDR0 (Bitfield-Mask: 0x01)                  */
/* =========================================================  OUTDR  ========================================================= */
#define PA_OUTDR_OUTDR15_Pos              (15UL)                    /*!< PA OUTDR: OUTDR15 (Bit 15)                            */
#define PA_OUTDR_OUTDR15_Msk              (0x8000UL)                /*!< PA OUTDR: OUTDR15 (Bitfield-Mask: 0x01)               */
#define PA_OUTDR_OUTDR14_Pos              (14UL)                    /*!< PA OUTDR: OUTDR14 (Bit 14)                            */
#define PA_OUTDR_OUTDR14_Msk              (0x4000UL)                /*!< PA OUTDR: OUTDR14 (Bitfield-Mask: 0x01)               */
#define PA_OUTDR_OUTDR13_Pos              (13UL)                    /*!< PA OUTDR: OUTDR13 (Bit 13)                            */
#define PA_OUTDR_OUTDR13_Msk              (0x2000UL)                /*!< PA OUTDR: OUTDR13 (Bitfield-Mask: 0x01)               */
#define PA_OUTDR_OUTDR12_Pos              (12UL)                    /*!< PA OUTDR: OUTDR12 (Bit 12)                            */
#define PA_OUTDR_OUTDR12_Msk              (0x1000UL)                /*!< PA OUTDR: OUTDR12 (Bitfield-Mask: 0x01)               */
#define PA_OUTDR_OUTDR11_Pos              (11UL)                    /*!< PA OUTDR: OUTDR11 (Bit 11)                            */
#define PA_OUTDR_OUTDR11_Msk              (0x800UL)                 /*!< PA OUTDR: OUTDR11 (Bitfield-Mask: 0x01)               */
#define PA_OUTDR_OUTDR10_Pos              (10UL)                    /*!< PA OUTDR: OUTDR10 (Bit 10)                            */
#define PA_OUTDR_OUTDR10_Msk              (0x400UL)                 /*!< PA OUTDR: OUTDR10 (Bitfield-Mask: 0x01)               */
#define PA_OUTDR_OUTDR9_Pos               (9UL)                     /*!< PA OUTDR: OUTDR9 (Bit 9)                              */
#define PA_OUTDR_OUTDR9_Msk               (0x200UL)                 /*!< PA OUTDR: OUTDR9 (Bitfield-Mask: 0x01)                */
#define PA_OUTDR_OUTDR8_Pos               (8UL)                     /*!< PA OUTDR: OUTDR8 (Bit 8)                              */
#define PA_OUTDR_OUTDR8_Msk               (0x100UL)                 /*!< PA OUTDR: OUTDR8 (Bitfield-Mask: 0x01)                */
#define PA_OUTDR_OUTDR7_Pos               (7UL)                     /*!< PA OUTDR: OUTDR7 (Bit 7)                              */
#define PA_OUTDR_OUTDR7_Msk               (0x80UL)                  /*!< PA OUTDR: OUTDR7 (Bitfield-Mask: 0x01)                */
#define PA_OUTDR_OUTDR6_Pos               (6UL)                     /*!< PA OUTDR: OUTDR6 (Bit 6)                              */
#define PA_OUTDR_OUTDR6_Msk               (0x40UL)                  /*!< PA OUTDR: OUTDR6 (Bitfield-Mask: 0x01)                */
#define PA_OUTDR_OUTDR5_Pos               (5UL)                     /*!< PA OUTDR: OUTDR5 (Bit 5)                              */
#define PA_OUTDR_OUTDR5_Msk               (0x20UL)                  /*!< PA OUTDR: OUTDR5 (Bitfield-Mask: 0x01)                */
#define PA_OUTDR_OUTDR4_Pos               (4UL)                     /*!< PA OUTDR: OUTDR4 (Bit 4)                              */
#define PA_OUTDR_OUTDR4_Msk               (0x10UL)                  /*!< PA OUTDR: OUTDR4 (Bitfield-Mask: 0x01)                */
#define PA_OUTDR_OUTDR3_Pos               (3UL)                     /*!< PA OUTDR: OUTDR3 (Bit 3)                              */
#define PA_OUTDR_OUTDR3_Msk               (0x8UL)                   /*!< PA OUTDR: OUTDR3 (Bitfield-Mask: 0x01)                */
#define PA_OUTDR_OUTDR2_Pos               (2UL)                     /*!< PA OUTDR: OUTDR2 (Bit 2)                              */
#define PA_OUTDR_OUTDR2_Msk               (0x4UL)                   /*!< PA OUTDR: OUTDR2 (Bitfield-Mask: 0x01)                */
#define PA_OUTDR_OUTDR1_Pos               (1UL)                     /*!< PA OUTDR: OUTDR1 (Bit 1)                              */
#define PA_OUTDR_OUTDR1_Msk               (0x2UL)                   /*!< PA OUTDR: OUTDR1 (Bitfield-Mask: 0x01)                */
#define PA_OUTDR_OUTDR0_Pos               (0UL)                     /*!< PA OUTDR: OUTDR0 (Bit 0)                              */
#define PA_OUTDR_OUTDR0_Msk               (0x1UL)                   /*!< PA OUTDR: OUTDR0 (Bitfield-Mask: 0x01)                */
/* ==========================================================  BSR  ========================================================== */
#define PA_BSR_BSR15_Pos                  (15UL)                    /*!< PA BSR: BSR15 (Bit 15)                                */
#define PA_BSR_BSR15_Msk                  (0x8000UL)                /*!< PA BSR: BSR15 (Bitfield-Mask: 0x01)                   */
#define PA_BSR_BSR14_Pos                  (14UL)                    /*!< PA BSR: BSR14 (Bit 14)                                */
#define PA_BSR_BSR14_Msk                  (0x4000UL)                /*!< PA BSR: BSR14 (Bitfield-Mask: 0x01)                   */
#define PA_BSR_BSR13_Pos                  (13UL)                    /*!< PA BSR: BSR13 (Bit 13)                                */
#define PA_BSR_BSR13_Msk                  (0x2000UL)                /*!< PA BSR: BSR13 (Bitfield-Mask: 0x01)                   */
#define PA_BSR_BSR12_Pos                  (12UL)                    /*!< PA BSR: BSR12 (Bit 12)                                */
#define PA_BSR_BSR12_Msk                  (0x1000UL)                /*!< PA BSR: BSR12 (Bitfield-Mask: 0x01)                   */
#define PA_BSR_BSR11_Pos                  (11UL)                    /*!< PA BSR: BSR11 (Bit 11)                                */
#define PA_BSR_BSR11_Msk                  (0x800UL)                 /*!< PA BSR: BSR11 (Bitfield-Mask: 0x01)                   */
#define PA_BSR_BSR10_Pos                  (10UL)                    /*!< PA BSR: BSR10 (Bit 10)                                */
#define PA_BSR_BSR10_Msk                  (0x400UL)                 /*!< PA BSR: BSR10 (Bitfield-Mask: 0x01)                   */
#define PA_BSR_BSR9_Pos                   (9UL)                     /*!< PA BSR: BSR9 (Bit 9)                                  */
#define PA_BSR_BSR9_Msk                   (0x200UL)                 /*!< PA BSR: BSR9 (Bitfield-Mask: 0x01)                    */
#define PA_BSR_BSR8_Pos                   (8UL)                     /*!< PA BSR: BSR8 (Bit 8)                                  */
#define PA_BSR_BSR8_Msk                   (0x100UL)                 /*!< PA BSR: BSR8 (Bitfield-Mask: 0x01)                    */
#define PA_BSR_BSR7_Pos                   (7UL)                     /*!< PA BSR: BSR7 (Bit 7)                                  */
#define PA_BSR_BSR7_Msk                   (0x80UL)                  /*!< PA BSR: BSR7 (Bitfield-Mask: 0x01)                    */
#define PA_BSR_BSR6_Pos                   (6UL)                     /*!< PA BSR: BSR6 (Bit 6)                                  */
#define PA_BSR_BSR6_Msk                   (0x40UL)                  /*!< PA BSR: BSR6 (Bitfield-Mask: 0x01)                    */
#define PA_BSR_BSR5_Pos                   (5UL)                     /*!< PA BSR: BSR5 (Bit 5)                                  */
#define PA_BSR_BSR5_Msk                   (0x20UL)                  /*!< PA BSR: BSR5 (Bitfield-Mask: 0x01)                    */
#define PA_BSR_BSR4_Pos                   (4UL)                     /*!< PA BSR: BSR4 (Bit 4)                                  */
#define PA_BSR_BSR4_Msk                   (0x10UL)                  /*!< PA BSR: BSR4 (Bitfield-Mask: 0x01)                    */
#define PA_BSR_BSR3_Pos                   (3UL)                     /*!< PA BSR: BSR3 (Bit 3)                                  */
#define PA_BSR_BSR3_Msk                   (0x8UL)                   /*!< PA BSR: BSR3 (Bitfield-Mask: 0x01)                    */
#define PA_BSR_BSR2_Pos                   (2UL)                     /*!< PA BSR: BSR2 (Bit 2)                                  */
#define PA_BSR_BSR2_Msk                   (0x4UL)                   /*!< PA BSR: BSR2 (Bitfield-Mask: 0x01)                    */
#define PA_BSR_BSR1_Pos                   (1UL)                     /*!< PA BSR: BSR1 (Bit 1)                                  */
#define PA_BSR_BSR1_Msk                   (0x2UL)                   /*!< PA BSR: BSR1 (Bitfield-Mask: 0x01)                    */
#define PA_BSR_BSR0_Pos                   (0UL)                     /*!< PA BSR: BSR0 (Bit 0)                                  */
#define PA_BSR_BSR0_Msk                   (0x1UL)                   /*!< PA BSR: BSR0 (Bitfield-Mask: 0x01)                    */
/* ==========================================================  BCR  ========================================================== */
#define PA_BCR_BCR15_Pos                  (15UL)                    /*!< PA BCR: BCR15 (Bit 15)                                */
#define PA_BCR_BCR15_Msk                  (0x8000UL)                /*!< PA BCR: BCR15 (Bitfield-Mask: 0x01)                   */
#define PA_BCR_BCR14_Pos                  (14UL)                    /*!< PA BCR: BCR14 (Bit 14)                                */
#define PA_BCR_BCR14_Msk                  (0x4000UL)                /*!< PA BCR: BCR14 (Bitfield-Mask: 0x01)                   */
#define PA_BCR_BCR13_Pos                  (13UL)                    /*!< PA BCR: BCR13 (Bit 13)                                */
#define PA_BCR_BCR13_Msk                  (0x2000UL)                /*!< PA BCR: BCR13 (Bitfield-Mask: 0x01)                   */
#define PA_BCR_BCR12_Pos                  (12UL)                    /*!< PA BCR: BCR12 (Bit 12)                                */
#define PA_BCR_BCR12_Msk                  (0x1000UL)                /*!< PA BCR: BCR12 (Bitfield-Mask: 0x01)                   */
#define PA_BCR_BCR11_Pos                  (11UL)                    /*!< PA BCR: BCR11 (Bit 11)                                */
#define PA_BCR_BCR11_Msk                  (0x800UL)                 /*!< PA BCR: BCR11 (Bitfield-Mask: 0x01)                   */
#define PA_BCR_BCR10_Pos                  (10UL)                    /*!< PA BCR: BCR10 (Bit 10)                                */
#define PA_BCR_BCR10_Msk                  (0x400UL)                 /*!< PA BCR: BCR10 (Bitfield-Mask: 0x01)                   */
#define PA_BCR_BCR9_Pos                   (9UL)                     /*!< PA BCR: BCR9 (Bit 9)                                  */
#define PA_BCR_BCR9_Msk                   (0x200UL)                 /*!< PA BCR: BCR9 (Bitfield-Mask: 0x01)                    */
#define PA_BCR_BCR8_Pos                   (8UL)                     /*!< PA BCR: BCR8 (Bit 8)                                  */
#define PA_BCR_BCR8_Msk                   (0x100UL)                 /*!< PA BCR: BCR8 (Bitfield-Mask: 0x01)                    */
#define PA_BCR_BCR7_Pos                   (7UL)                     /*!< PA BCR: BCR7 (Bit 7)                                  */
#define PA_BCR_BCR7_Msk                   (0x80UL)                  /*!< PA BCR: BCR7 (Bitfield-Mask: 0x01)                    */
#define PA_BCR_BCR6_Pos                   (6UL)                     /*!< PA BCR: BCR6 (Bit 6)                                  */
#define PA_BCR_BCR6_Msk                   (0x40UL)                  /*!< PA BCR: BCR6 (Bitfield-Mask: 0x01)                    */
#define PA_BCR_BCR5_Pos                   (5UL)                     /*!< PA BCR: BCR5 (Bit 5)                                  */
#define PA_BCR_BCR5_Msk                   (0x20UL)                  /*!< PA BCR: BCR5 (Bitfield-Mask: 0x01)                    */
#define PA_BCR_BCR4_Pos                   (4UL)                     /*!< PA BCR: BCR4 (Bit 4)                                  */
#define PA_BCR_BCR4_Msk                   (0x10UL)                  /*!< PA BCR: BCR4 (Bitfield-Mask: 0x01)                    */
#define PA_BCR_BCR3_Pos                   (3UL)                     /*!< PA BCR: BCR3 (Bit 3)                                  */
#define PA_BCR_BCR3_Msk                   (0x8UL)                   /*!< PA BCR: BCR3 (Bitfield-Mask: 0x01)                    */
#define PA_BCR_BCR2_Pos                   (2UL)                     /*!< PA BCR: BCR2 (Bit 2)                                  */
#define PA_BCR_BCR2_Msk                   (0x4UL)                   /*!< PA BCR: BCR2 (Bitfield-Mask: 0x01)                    */
#define PA_BCR_BCR1_Pos                   (1UL)                     /*!< PA BCR: BCR1 (Bit 1)                                  */
#define PA_BCR_BCR1_Msk                   (0x2UL)                   /*!< PA BCR: BCR1 (Bitfield-Mask: 0x01)                    */
#define PA_BCR_BCR0_Pos                   (0UL)                     /*!< PA BCR: BCR0 (Bit 0)                                  */
#define PA_BCR_BCR0_Msk                   (0x1UL)                   /*!< PA BCR: BCR0 (Bitfield-Mask: 0x01)                    */
/* ========================================================  OUTDMSK  ======================================================== */
#define PA_OUTDMSK_OUTDMSK15_Pos          (15UL)                    /*!< PA OUTDMSK: OUTDMSK15 (Bit 15)                        */
#define PA_OUTDMSK_OUTDMSK15_Msk          (0x8000UL)                /*!< PA OUTDMSK: OUTDMSK15 (Bitfield-Mask: 0x01)           */
#define PA_OUTDMSK_OUTDMSK14_Pos          (14UL)                    /*!< PA OUTDMSK: OUTDMSK14 (Bit 14)                        */
#define PA_OUTDMSK_OUTDMSK14_Msk          (0x4000UL)                /*!< PA OUTDMSK: OUTDMSK14 (Bitfield-Mask: 0x01)           */
#define PA_OUTDMSK_OUTDMSK13_Pos          (13UL)                    /*!< PA OUTDMSK: OUTDMSK13 (Bit 13)                        */
#define PA_OUTDMSK_OUTDMSK13_Msk          (0x2000UL)                /*!< PA OUTDMSK: OUTDMSK13 (Bitfield-Mask: 0x01)           */
#define PA_OUTDMSK_OUTDMSK12_Pos          (12UL)                    /*!< PA OUTDMSK: OUTDMSK12 (Bit 12)                        */
#define PA_OUTDMSK_OUTDMSK12_Msk          (0x1000UL)                /*!< PA OUTDMSK: OUTDMSK12 (Bitfield-Mask: 0x01)           */
#define PA_OUTDMSK_OUTDMSK11_Pos          (11UL)                    /*!< PA OUTDMSK: OUTDMSK11 (Bit 11)                        */
#define PA_OUTDMSK_OUTDMSK11_Msk          (0x800UL)                 /*!< PA OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)           */
#define PA_OUTDMSK_OUTDMSK10_Pos          (10UL)                    /*!< PA OUTDMSK: OUTDMSK10 (Bit 10)                        */
#define PA_OUTDMSK_OUTDMSK10_Msk          (0x400UL)                 /*!< PA OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)           */
#define PA_OUTDMSK_OUTDMSK9_Pos           (9UL)                     /*!< PA OUTDMSK: OUTDMSK9 (Bit 9)                          */
#define PA_OUTDMSK_OUTDMSK9_Msk           (0x200UL)                 /*!< PA OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)            */
#define PA_OUTDMSK_OUTDMSK8_Pos           (8UL)                     /*!< PA OUTDMSK: OUTDMSK8 (Bit 8)                          */
#define PA_OUTDMSK_OUTDMSK8_Msk           (0x100UL)                 /*!< PA OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)            */
#define PA_OUTDMSK_OUTDMSK7_Pos           (7UL)                     /*!< PA OUTDMSK: OUTDMSK7 (Bit 7)                          */
#define PA_OUTDMSK_OUTDMSK7_Msk           (0x80UL)                  /*!< PA OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)            */
#define PA_OUTDMSK_OUTDMSK6_Pos           (6UL)                     /*!< PA OUTDMSK: OUTDMSK6 (Bit 6)                          */
#define PA_OUTDMSK_OUTDMSK6_Msk           (0x40UL)                  /*!< PA OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)            */
#define PA_OUTDMSK_OUTDMSK5_Pos           (5UL)                     /*!< PA OUTDMSK: OUTDMSK5 (Bit 5)                          */
#define PA_OUTDMSK_OUTDMSK5_Msk           (0x20UL)                  /*!< PA OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)            */
#define PA_OUTDMSK_OUTDMSK4_Pos           (4UL)                     /*!< PA OUTDMSK: OUTDMSK4 (Bit 4)                          */
#define PA_OUTDMSK_OUTDMSK4_Msk           (0x10UL)                  /*!< PA OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)            */
#define PA_OUTDMSK_OUTDMSK3_Pos           (3UL)                     /*!< PA OUTDMSK: OUTDMSK3 (Bit 3)                          */
#define PA_OUTDMSK_OUTDMSK3_Msk           (0x8UL)                   /*!< PA OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)            */
#define PA_OUTDMSK_OUTDMSK2_Pos           (2UL)                     /*!< PA OUTDMSK: OUTDMSK2 (Bit 2)                          */
#define PA_OUTDMSK_OUTDMSK2_Msk           (0x4UL)                   /*!< PA OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)            */
#define PA_OUTDMSK_OUTDMSK1_Pos           (1UL)                     /*!< PA OUTDMSK: OUTDMSK1 (Bit 1)                          */
#define PA_OUTDMSK_OUTDMSK1_Msk           (0x2UL)                   /*!< PA OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)            */
#define PA_OUTDMSK_OUTDMSK0_Pos           (0UL)                     /*!< PA OUTDMSK: OUTDMSK0 (Bit 0)                          */
#define PA_OUTDMSK_OUTDMSK0_Msk           (0x1UL)                   /*!< PA OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)            */
/* =========================================================  DBCR  ========================================================== */
#define PA_DBCR_DBCLK_Pos                 (16UL)                    /*!< PA DBCR: DBCLK (Bit 16)                               */
#define PA_DBCR_DBCLK_Msk                 (0x70000UL)               /*!< PA DBCR: DBCLK (Bitfield-Mask: 0x07)                  */
#define PA_DBCR_DBEN11_Pos                (11UL)                    /*!< PA DBCR: DBEN11 (Bit 11)                              */
#define PA_DBCR_DBEN11_Msk                (0x800UL)                 /*!< PA DBCR: DBEN11 (Bitfield-Mask: 0x01)                 */
#define PA_DBCR_DBEN10_Pos                (10UL)                    /*!< PA DBCR: DBEN10 (Bit 10)                              */
#define PA_DBCR_DBEN10_Msk                (0x400UL)                 /*!< PA DBCR: DBEN10 (Bitfield-Mask: 0x01)                 */
#define PA_DBCR_DBEN9_Pos                 (9UL)                     /*!< PA DBCR: DBEN9 (Bit 9)                                */
#define PA_DBCR_DBEN9_Msk                 (0x200UL)                 /*!< PA DBCR: DBEN9 (Bitfield-Mask: 0x01)                  */
#define PA_DBCR_DBEN8_Pos                 (8UL)                     /*!< PA DBCR: DBEN8 (Bit 8)                                */
#define PA_DBCR_DBEN8_Msk                 (0x100UL)                 /*!< PA DBCR: DBEN8 (Bitfield-Mask: 0x01)                  */
#define PA_DBCR_DBEN7_Pos                 (7UL)                     /*!< PA DBCR: DBEN7 (Bit 7)                                */
#define PA_DBCR_DBEN7_Msk                 (0x80UL)                  /*!< PA DBCR: DBEN7 (Bitfield-Mask: 0x01)                  */
#define PA_DBCR_DBEN6_Pos                 (6UL)                     /*!< PA DBCR: DBEN6 (Bit 6)                                */
#define PA_DBCR_DBEN6_Msk                 (0x40UL)                  /*!< PA DBCR: DBEN6 (Bitfield-Mask: 0x01)                  */
#define PA_DBCR_DBEN5_Pos                 (5UL)                     /*!< PA DBCR: DBEN5 (Bit 5)                                */
#define PA_DBCR_DBEN5_Msk                 (0x20UL)                  /*!< PA DBCR: DBEN5 (Bitfield-Mask: 0x01)                  */
#define PA_DBCR_DBEN4_Pos                 (4UL)                     /*!< PA DBCR: DBEN4 (Bit 4)                                */
#define PA_DBCR_DBEN4_Msk                 (0x10UL)                  /*!< PA DBCR: DBEN4 (Bitfield-Mask: 0x01)                  */
#define PA_DBCR_DBEN3_Pos                 (3UL)                     /*!< PA DBCR: DBEN3 (Bit 3)                                */
#define PA_DBCR_DBEN3_Msk                 (0x8UL)                   /*!< PA DBCR: DBEN3 (Bitfield-Mask: 0x01)                  */
#define PA_DBCR_DBEN2_Pos                 (2UL)                     /*!< PA DBCR: DBEN2 (Bit 2)                                */
#define PA_DBCR_DBEN2_Msk                 (0x4UL)                   /*!< PA DBCR: DBEN2 (Bitfield-Mask: 0x01)                  */
#define PA_DBCR_DBEN1_Pos                 (1UL)                     /*!< PA DBCR: DBEN1 (Bit 1)                                */
#define PA_DBCR_DBEN1_Msk                 (0x2UL)                   /*!< PA DBCR: DBEN1 (Bitfield-Mask: 0x01)                  */
#define PA_DBCR_DBEN0_Pos                 (0UL)                     /*!< PA DBCR: DBEN0 (Bit 0)                                */
#define PA_DBCR_DBEN0_Msk                 (0x1UL)                   /*!< PA DBCR: DBEN0 (Bitfield-Mask: 0x01)                  */
/* ========================================================  PA_MOD  ========================================================= */
#define PA_PA_MOD_MODE11_Pos              (22UL)                    /*!< PA PA_MOD: MODE11 (Bit 22)                            */
#define PA_PA_MOD_MODE11_Msk              (0xc00000UL)              /*!< PA PA_MOD: MODE11 (Bitfield-Mask: 0x03)               */
#define PA_PA_MOD_MODE10_Pos              (20UL)                    /*!< PA PA_MOD: MODE10 (Bit 20)                            */
#define PA_PA_MOD_MODE10_Msk              (0x300000UL)              /*!< PA PA_MOD: MODE10 (Bitfield-Mask: 0x03)               */
#define PA_PA_MOD_MODE9_Pos               (18UL)                    /*!< PA PA_MOD: MODE9 (Bit 18)                             */
#define PA_PA_MOD_MODE9_Msk               (0xc0000UL)               /*!< PA PA_MOD: MODE9 (Bitfield-Mask: 0x03)                */
#define PA_PA_MOD_MODE8_Pos               (16UL)                    /*!< PA PA_MOD: MODE8 (Bit 16)                             */
#define PA_PA_MOD_MODE8_Msk               (0x30000UL)               /*!< PA PA_MOD: MODE8 (Bitfield-Mask: 0x03)                */
#define PA_PA_MOD_MODE7_Pos               (14UL)                    /*!< PA PA_MOD: MODE7 (Bit 14)                             */
#define PA_PA_MOD_MODE7_Msk               (0xc000UL)                /*!< PA PA_MOD: MODE7 (Bitfield-Mask: 0x03)                */
#define PA_PA_MOD_MODE6_Pos               (12UL)                    /*!< PA PA_MOD: MODE6 (Bit 12)                             */
#define PA_PA_MOD_MODE6_Msk               (0x3000UL)                /*!< PA PA_MOD: MODE6 (Bitfield-Mask: 0x03)                */
#define PA_PA_MOD_MODE5_Pos               (10UL)                    /*!< PA PA_MOD: MODE5 (Bit 10)                             */
#define PA_PA_MOD_MODE5_Msk               (0xc00UL)                 /*!< PA PA_MOD: MODE5 (Bitfield-Mask: 0x03)                */
#define PA_PA_MOD_MODE4_Pos               (8UL)                     /*!< PA PA_MOD: MODE4 (Bit 8)                              */
#define PA_PA_MOD_MODE4_Msk               (0x300UL)                 /*!< PA PA_MOD: MODE4 (Bitfield-Mask: 0x03)                */
#define PA_PA_MOD_MODE3_Pos               (6UL)                     /*!< PA PA_MOD: MODE3 (Bit 6)                              */
#define PA_PA_MOD_MODE3_Msk               (0xc0UL)                  /*!< PA PA_MOD: MODE3 (Bitfield-Mask: 0x03)                */
#define PA_PA_MOD_MODE2_Pos               (4UL)                     /*!< PA PA_MOD: MODE2 (Bit 4)                              */
#define PA_PA_MOD_MODE2_Msk               (0x30UL)                  /*!< PA PA_MOD: MODE2 (Bitfield-Mask: 0x03)                */
#define PA_PA_MOD_MODE1_Pos               (2UL)                     /*!< PA PA_MOD: MODE1 (Bit 2)                              */
#define PA_PA_MOD_MODE1_Msk               (0xcUL)                   /*!< PA PA_MOD: MODE1 (Bitfield-Mask: 0x03)                */
#define PA_PA_MOD_MODE0_Pos               (0UL)                     /*!< PA PA_MOD: MODE0 (Bit 0)                              */
#define PA_PA_MOD_MODE0_Msk               (0x3UL)                   /*!< PA PA_MOD: MODE0 (Bitfield-Mask: 0x03)                */
/* ========================================================  PA_TYP  ========================================================= */
#define PA_PA_TYP_TYP11_Pos               (11UL)                    /*!< PA PA_TYP: TYP11 (Bit 11)                             */
#define PA_PA_TYP_TYP11_Msk               (0x800UL)                 /*!< PA PA_TYP: TYP11 (Bitfield-Mask: 0x01)                */
#define PA_PA_TYP_TYP10_Pos               (10UL)                    /*!< PA PA_TYP: TYP10 (Bit 10)                             */
#define PA_PA_TYP_TYP10_Msk               (0x400UL)                 /*!< PA PA_TYP: TYP10 (Bitfield-Mask: 0x01)                */
#define PA_PA_TYP_TYP9_Pos                (9UL)                     /*!< PA PA_TYP: TYP9 (Bit 9)                               */
#define PA_PA_TYP_TYP9_Msk                (0x200UL)                 /*!< PA PA_TYP: TYP9 (Bitfield-Mask: 0x01)                 */
#define PA_PA_TYP_TYP8_Pos                (8UL)                     /*!< PA PA_TYP: TYP8 (Bit 8)                               */
#define PA_PA_TYP_TYP8_Msk                (0x100UL)                 /*!< PA PA_TYP: TYP8 (Bitfield-Mask: 0x01)                 */
#define PA_PA_TYP_TYP7_Pos                (7UL)                     /*!< PA PA_TYP: TYP7 (Bit 7)                               */
#define PA_PA_TYP_TYP7_Msk                (0x80UL)                  /*!< PA PA_TYP: TYP7 (Bitfield-Mask: 0x01)                 */
#define PA_PA_TYP_TYP6_Pos                (6UL)                     /*!< PA PA_TYP: TYP6 (Bit 6)                               */
#define PA_PA_TYP_TYP6_Msk                (0x40UL)                  /*!< PA PA_TYP: TYP6 (Bitfield-Mask: 0x01)                 */
#define PA_PA_TYP_TYP5_Pos                (5UL)                     /*!< PA PA_TYP: TYP5 (Bit 5)                               */
#define PA_PA_TYP_TYP5_Msk                (0x20UL)                  /*!< PA PA_TYP: TYP5 (Bitfield-Mask: 0x01)                 */
#define PA_PA_TYP_TYP4_Pos                (4UL)                     /*!< PA PA_TYP: TYP4 (Bit 4)                               */
#define PA_PA_TYP_TYP4_Msk                (0x10UL)                  /*!< PA PA_TYP: TYP4 (Bitfield-Mask: 0x01)                 */
#define PA_PA_TYP_TYP3_Pos                (3UL)                     /*!< PA PA_TYP: TYP3 (Bit 3)                               */
#define PA_PA_TYP_TYP3_Msk                (0x8UL)                   /*!< PA PA_TYP: TYP3 (Bitfield-Mask: 0x01)                 */
#define PA_PA_TYP_TYP2_Pos                (2UL)                     /*!< PA PA_TYP: TYP2 (Bit 2)                               */
#define PA_PA_TYP_TYP2_Msk                (0x4UL)                   /*!< PA PA_TYP: TYP2 (Bitfield-Mask: 0x01)                 */
#define PA_PA_TYP_TYP1_Pos                (1UL)                     /*!< PA PA_TYP: TYP1 (Bit 1)                               */
#define PA_PA_TYP_TYP1_Msk                (0x2UL)                   /*!< PA PA_TYP: TYP1 (Bitfield-Mask: 0x01)                 */
#define PA_PA_TYP_TYP0_Pos                (0UL)                     /*!< PA PA_TYP: TYP0 (Bit 0)                               */
#define PA_PA_TYP_TYP0_Msk                (0x1UL)                   /*!< PA PA_TYP: TYP0 (Bitfield-Mask: 0x01)                 */
/* =======================================================  PA_AFSR1  ======================================================== */
#define PA_PA_AFSR1_AFSR7_Pos             (28UL)                    /*!< PA PA_AFSR1: AFSR7 (Bit 28)                           */
#define PA_PA_AFSR1_AFSR7_Msk             (0xf0000000UL)            /*!< PA PA_AFSR1: AFSR7 (Bitfield-Mask: 0x0f)              */
#define PA_PA_AFSR1_AFSR6_Pos             (24UL)                    /*!< PA PA_AFSR1: AFSR6 (Bit 24)                           */
#define PA_PA_AFSR1_AFSR6_Msk             (0xf000000UL)             /*!< PA PA_AFSR1: AFSR6 (Bitfield-Mask: 0x0f)              */
#define PA_PA_AFSR1_AFSR5_Pos             (20UL)                    /*!< PA PA_AFSR1: AFSR5 (Bit 20)                           */
#define PA_PA_AFSR1_AFSR5_Msk             (0xf00000UL)              /*!< PA PA_AFSR1: AFSR5 (Bitfield-Mask: 0x0f)              */
#define PA_PA_AFSR1_AFSR4_Pos             (16UL)                    /*!< PA PA_AFSR1: AFSR4 (Bit 16)                           */
#define PA_PA_AFSR1_AFSR4_Msk             (0xf0000UL)               /*!< PA PA_AFSR1: AFSR4 (Bitfield-Mask: 0x0f)              */
#define PA_PA_AFSR1_AFSR3_Pos             (12UL)                    /*!< PA PA_AFSR1: AFSR3 (Bit 12)                           */
#define PA_PA_AFSR1_AFSR3_Msk             (0xf000UL)                /*!< PA PA_AFSR1: AFSR3 (Bitfield-Mask: 0x0f)              */
#define PA_PA_AFSR1_AFSR2_Pos             (8UL)                     /*!< PA PA_AFSR1: AFSR2 (Bit 8)                            */
#define PA_PA_AFSR1_AFSR2_Msk             (0xf00UL)                 /*!< PA PA_AFSR1: AFSR2 (Bitfield-Mask: 0x0f)              */
#define PA_PA_AFSR1_AFSR1_Pos             (4UL)                     /*!< PA PA_AFSR1: AFSR1 (Bit 4)                            */
#define PA_PA_AFSR1_AFSR1_Msk             (0xf0UL)                  /*!< PA PA_AFSR1: AFSR1 (Bitfield-Mask: 0x0f)              */
#define PA_PA_AFSR1_AFSR0_Pos             (0UL)                     /*!< PA PA_AFSR1: AFSR0 (Bit 0)                            */
#define PA_PA_AFSR1_AFSR0_Msk             (0xfUL)                   /*!< PA PA_AFSR1: AFSR0 (Bitfield-Mask: 0x0f)              */
/* =======================================================  PA_AFSR2  ======================================================== */
#define PA_PA_AFSR2_AFSR11_Pos            (12UL)                    /*!< PA PA_AFSR2: AFSR11 (Bit 12)                          */
#define PA_PA_AFSR2_AFSR11_Msk            (0xf000UL)                /*!< PA PA_AFSR2: AFSR11 (Bitfield-Mask: 0x0f)             */
#define PA_PA_AFSR2_AFSR10_Pos            (8UL)                     /*!< PA PA_AFSR2: AFSR10 (Bit 8)                           */
#define PA_PA_AFSR2_AFSR10_Msk            (0xf00UL)                 /*!< PA PA_AFSR2: AFSR10 (Bitfield-Mask: 0x0f)             */
#define PA_PA_AFSR2_AFSR9_Pos             (4UL)                     /*!< PA PA_AFSR2: AFSR9 (Bit 4)                            */
#define PA_PA_AFSR2_AFSR9_Msk             (0xf0UL)                  /*!< PA PA_AFSR2: AFSR9 (Bitfield-Mask: 0x0f)              */
#define PA_PA_AFSR2_AFSR8_Pos             (0UL)                     /*!< PA PA_AFSR2: AFSR8 (Bit 0)                            */
#define PA_PA_AFSR2_AFSR8_Msk             (0xfUL)                   /*!< PA PA_AFSR2: AFSR8 (Bitfield-Mask: 0x0f)              */
/* ========================================================  PA_PUPD  ======================================================== */
#define PA_PA_PUPD_PUPD11_Pos             (22UL)                    /*!< PA PA_PUPD: PUPD11 (Bit 22)                           */
#define PA_PA_PUPD_PUPD11_Msk             (0xc00000UL)              /*!< PA PA_PUPD: PUPD11 (Bitfield-Mask: 0x03)              */
#define PA_PA_PUPD_PUPD10_Pos             (20UL)                    /*!< PA PA_PUPD: PUPD10 (Bit 20)                           */
#define PA_PA_PUPD_PUPD10_Msk             (0x300000UL)              /*!< PA PA_PUPD: PUPD10 (Bitfield-Mask: 0x03)              */
#define PA_PA_PUPD_PUPD9_Pos              (18UL)                    /*!< PA PA_PUPD: PUPD9 (Bit 18)                            */
#define PA_PA_PUPD_PUPD9_Msk              (0xc0000UL)               /*!< PA PA_PUPD: PUPD9 (Bitfield-Mask: 0x03)               */
#define PA_PA_PUPD_PUPD8_Pos              (16UL)                    /*!< PA PA_PUPD: PUPD8 (Bit 16)                            */
#define PA_PA_PUPD_PUPD8_Msk              (0x30000UL)               /*!< PA PA_PUPD: PUPD8 (Bitfield-Mask: 0x03)               */
#define PA_PA_PUPD_PUPD7_Pos              (14UL)                    /*!< PA PA_PUPD: PUPD7 (Bit 14)                            */
#define PA_PA_PUPD_PUPD7_Msk              (0xc000UL)                /*!< PA PA_PUPD: PUPD7 (Bitfield-Mask: 0x03)               */
#define PA_PA_PUPD_PUPD6_Pos              (12UL)                    /*!< PA PA_PUPD: PUPD6 (Bit 12)                            */
#define PA_PA_PUPD_PUPD6_Msk              (0x3000UL)                /*!< PA PA_PUPD: PUPD6 (Bitfield-Mask: 0x03)               */
#define PA_PA_PUPD_PUPD5_Pos              (10UL)                    /*!< PA PA_PUPD: PUPD5 (Bit 10)                            */
#define PA_PA_PUPD_PUPD5_Msk              (0xc00UL)                 /*!< PA PA_PUPD: PUPD5 (Bitfield-Mask: 0x03)               */
#define PA_PA_PUPD_PUPD4_Pos              (8UL)                     /*!< PA PA_PUPD: PUPD4 (Bit 8)                             */
#define PA_PA_PUPD_PUPD4_Msk              (0x300UL)                 /*!< PA PA_PUPD: PUPD4 (Bitfield-Mask: 0x03)               */
#define PA_PA_PUPD_PUPD3_Pos              (6UL)                     /*!< PA PA_PUPD: PUPD3 (Bit 6)                             */
#define PA_PA_PUPD_PUPD3_Msk              (0xc0UL)                  /*!< PA PA_PUPD: PUPD3 (Bitfield-Mask: 0x03)               */
#define PA_PA_PUPD_PUPD2_Pos              (4UL)                     /*!< PA PA_PUPD: PUPD2 (Bit 4)                             */
#define PA_PA_PUPD_PUPD2_Msk              (0x30UL)                  /*!< PA PA_PUPD: PUPD2 (Bitfield-Mask: 0x03)               */
#define PA_PA_PUPD_PUPD1_Pos              (2UL)                     /*!< PA PA_PUPD: PUPD1 (Bit 2)                             */
#define PA_PA_PUPD_PUPD1_Msk              (0xcUL)                   /*!< PA PA_PUPD: PUPD1 (Bitfield-Mask: 0x03)               */
#define PA_PA_PUPD_PUPD0_Pos              (0UL)                     /*!< PA PA_PUPD: PUPD0 (Bit 0)                             */
#define PA_PA_PUPD_PUPD0_Msk              (0x3UL)                   /*!< PA PA_PUPD: PUPD0 (Bitfield-Mask: 0x03)               */
/* ========================================================  PA_INDR  ======================================================== */
#define PA_PA_INDR_INDR11_Pos             (11UL)                    /*!< PA PA_INDR: INDR11 (Bit 11)                           */
#define PA_PA_INDR_INDR11_Msk             (0x800UL)                 /*!< PA PA_INDR: INDR11 (Bitfield-Mask: 0x01)              */
#define PA_PA_INDR_INDR10_Pos             (10UL)                    /*!< PA PA_INDR: INDR10 (Bit 10)                           */
#define PA_PA_INDR_INDR10_Msk             (0x400UL)                 /*!< PA PA_INDR: INDR10 (Bitfield-Mask: 0x01)              */
#define PA_PA_INDR_INDR9_Pos              (9UL)                     /*!< PA PA_INDR: INDR9 (Bit 9)                             */
#define PA_PA_INDR_INDR9_Msk              (0x200UL)                 /*!< PA PA_INDR: INDR9 (Bitfield-Mask: 0x01)               */
#define PA_PA_INDR_INDR8_Pos              (8UL)                     /*!< PA PA_INDR: INDR8 (Bit 8)                             */
#define PA_PA_INDR_INDR8_Msk              (0x100UL)                 /*!< PA PA_INDR: INDR8 (Bitfield-Mask: 0x01)               */
#define PA_PA_INDR_INDR7_Pos              (7UL)                     /*!< PA PA_INDR: INDR7 (Bit 7)                             */
#define PA_PA_INDR_INDR7_Msk              (0x80UL)                  /*!< PA PA_INDR: INDR7 (Bitfield-Mask: 0x01)               */
#define PA_PA_INDR_INDR6_Pos              (6UL)                     /*!< PA PA_INDR: INDR6 (Bit 6)                             */
#define PA_PA_INDR_INDR6_Msk              (0x40UL)                  /*!< PA PA_INDR: INDR6 (Bitfield-Mask: 0x01)               */
#define PA_PA_INDR_INDR5_Pos              (5UL)                     /*!< PA PA_INDR: INDR5 (Bit 5)                             */
#define PA_PA_INDR_INDR5_Msk              (0x20UL)                  /*!< PA PA_INDR: INDR5 (Bitfield-Mask: 0x01)               */
#define PA_PA_INDR_INDR4_Pos              (4UL)                     /*!< PA PA_INDR: INDR4 (Bit 4)                             */
#define PA_PA_INDR_INDR4_Msk              (0x10UL)                  /*!< PA PA_INDR: INDR4 (Bitfield-Mask: 0x01)               */
#define PA_PA_INDR_INDR3_Pos              (3UL)                     /*!< PA PA_INDR: INDR3 (Bit 3)                             */
#define PA_PA_INDR_INDR3_Msk              (0x8UL)                   /*!< PA PA_INDR: INDR3 (Bitfield-Mask: 0x01)               */
#define PA_PA_INDR_INDR2_Pos              (2UL)                     /*!< PA PA_INDR: INDR2 (Bit 2)                             */
#define PA_PA_INDR_INDR2_Msk              (0x4UL)                   /*!< PA PA_INDR: INDR2 (Bitfield-Mask: 0x01)               */
#define PA_PA_INDR_INDR1_Pos              (1UL)                     /*!< PA PA_INDR: INDR1 (Bit 1)                             */
#define PA_PA_INDR_INDR1_Msk              (0x2UL)                   /*!< PA PA_INDR: INDR1 (Bitfield-Mask: 0x01)               */
#define PA_PA_INDR_INDR0_Pos              (0UL)                     /*!< PA PA_INDR: INDR0 (Bit 0)                             */
#define PA_PA_INDR_INDR0_Msk              (0x1UL)                   /*!< PA PA_INDR: INDR0 (Bitfield-Mask: 0x01)               */
/* =======================================================  PA_OUTDR  ======================================================== */
#define PA_PA_OUTDR_OUTDR11_Pos           (11UL)                    /*!< PA PA_OUTDR: OUTDR11 (Bit 11)                         */
#define PA_PA_OUTDR_OUTDR11_Msk           (0x800UL)                 /*!< PA PA_OUTDR: OUTDR11 (Bitfield-Mask: 0x01)            */
#define PA_PA_OUTDR_OUTDR10_Pos           (10UL)                    /*!< PA PA_OUTDR: OUTDR10 (Bit 10)                         */
#define PA_PA_OUTDR_OUTDR10_Msk           (0x400UL)                 /*!< PA PA_OUTDR: OUTDR10 (Bitfield-Mask: 0x01)            */
#define PA_PA_OUTDR_OUTDR9_Pos            (9UL)                     /*!< PA PA_OUTDR: OUTDR9 (Bit 9)                           */
#define PA_PA_OUTDR_OUTDR9_Msk            (0x200UL)                 /*!< PA PA_OUTDR: OUTDR9 (Bitfield-Mask: 0x01)             */
#define PA_PA_OUTDR_OUTDR8_Pos            (8UL)                     /*!< PA PA_OUTDR: OUTDR8 (Bit 8)                           */
#define PA_PA_OUTDR_OUTDR8_Msk            (0x100UL)                 /*!< PA PA_OUTDR: OUTDR8 (Bitfield-Mask: 0x01)             */
#define PA_PA_OUTDR_OUTDR7_Pos            (7UL)                     /*!< PA PA_OUTDR: OUTDR7 (Bit 7)                           */
#define PA_PA_OUTDR_OUTDR7_Msk            (0x80UL)                  /*!< PA PA_OUTDR: OUTDR7 (Bitfield-Mask: 0x01)             */
#define PA_PA_OUTDR_OUTDR6_Pos            (6UL)                     /*!< PA PA_OUTDR: OUTDR6 (Bit 6)                           */
#define PA_PA_OUTDR_OUTDR6_Msk            (0x40UL)                  /*!< PA PA_OUTDR: OUTDR6 (Bitfield-Mask: 0x01)             */
#define PA_PA_OUTDR_OUTDR5_Pos            (5UL)                     /*!< PA PA_OUTDR: OUTDR5 (Bit 5)                           */
#define PA_PA_OUTDR_OUTDR5_Msk            (0x20UL)                  /*!< PA PA_OUTDR: OUTDR5 (Bitfield-Mask: 0x01)             */
#define PA_PA_OUTDR_OUTDR4_Pos            (4UL)                     /*!< PA PA_OUTDR: OUTDR4 (Bit 4)                           */
#define PA_PA_OUTDR_OUTDR4_Msk            (0x10UL)                  /*!< PA PA_OUTDR: OUTDR4 (Bitfield-Mask: 0x01)             */
#define PA_PA_OUTDR_OUTDR3_Pos            (3UL)                     /*!< PA PA_OUTDR: OUTDR3 (Bit 3)                           */
#define PA_PA_OUTDR_OUTDR3_Msk            (0x8UL)                   /*!< PA PA_OUTDR: OUTDR3 (Bitfield-Mask: 0x01)             */
#define PA_PA_OUTDR_OUTDR2_Pos            (2UL)                     /*!< PA PA_OUTDR: OUTDR2 (Bit 2)                           */
#define PA_PA_OUTDR_OUTDR2_Msk            (0x4UL)                   /*!< PA PA_OUTDR: OUTDR2 (Bitfield-Mask: 0x01)             */
#define PA_PA_OUTDR_OUTDR1_Pos            (1UL)                     /*!< PA PA_OUTDR: OUTDR1 (Bit 1)                           */
#define PA_PA_OUTDR_OUTDR1_Msk            (0x2UL)                   /*!< PA PA_OUTDR: OUTDR1 (Bitfield-Mask: 0x01)             */
#define PA_PA_OUTDR_OUTDR0_Pos            (0UL)                     /*!< PA PA_OUTDR: OUTDR0 (Bit 0)                           */
#define PA_PA_OUTDR_OUTDR0_Msk            (0x1UL)                   /*!< PA PA_OUTDR: OUTDR0 (Bitfield-Mask: 0x01)             */
/* ========================================================  PA_BSR  ========================================================= */
#define PA_PA_BSR_BSR11_Pos               (11UL)                    /*!< PA PA_BSR: BSR11 (Bit 11)                             */
#define PA_PA_BSR_BSR11_Msk               (0x800UL)                 /*!< PA PA_BSR: BSR11 (Bitfield-Mask: 0x01)                */
#define PA_PA_BSR_BSR10_Pos               (10UL)                    /*!< PA PA_BSR: BSR10 (Bit 10)                             */
#define PA_PA_BSR_BSR10_Msk               (0x400UL)                 /*!< PA PA_BSR: BSR10 (Bitfield-Mask: 0x01)                */
#define PA_PA_BSR_BSR9_Pos                (9UL)                     /*!< PA PA_BSR: BSR9 (Bit 9)                               */
#define PA_PA_BSR_BSR9_Msk                (0x200UL)                 /*!< PA PA_BSR: BSR9 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BSR_BSR8_Pos                (8UL)                     /*!< PA PA_BSR: BSR8 (Bit 8)                               */
#define PA_PA_BSR_BSR8_Msk                (0x100UL)                 /*!< PA PA_BSR: BSR8 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BSR_BSR7_Pos                (7UL)                     /*!< PA PA_BSR: BSR7 (Bit 7)                               */
#define PA_PA_BSR_BSR7_Msk                (0x80UL)                  /*!< PA PA_BSR: BSR7 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BSR_BSR6_Pos                (6UL)                     /*!< PA PA_BSR: BSR6 (Bit 6)                               */
#define PA_PA_BSR_BSR6_Msk                (0x40UL)                  /*!< PA PA_BSR: BSR6 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BSR_BSR5_Pos                (5UL)                     /*!< PA PA_BSR: BSR5 (Bit 5)                               */
#define PA_PA_BSR_BSR5_Msk                (0x20UL)                  /*!< PA PA_BSR: BSR5 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BSR_BSR4_Pos                (4UL)                     /*!< PA PA_BSR: BSR4 (Bit 4)                               */
#define PA_PA_BSR_BSR4_Msk                (0x10UL)                  /*!< PA PA_BSR: BSR4 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BSR_BSR3_Pos                (3UL)                     /*!< PA PA_BSR: BSR3 (Bit 3)                               */
#define PA_PA_BSR_BSR3_Msk                (0x8UL)                   /*!< PA PA_BSR: BSR3 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BSR_BSR2_Pos                (2UL)                     /*!< PA PA_BSR: BSR2 (Bit 2)                               */
#define PA_PA_BSR_BSR2_Msk                (0x4UL)                   /*!< PA PA_BSR: BSR2 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BSR_BSR1_Pos                (1UL)                     /*!< PA PA_BSR: BSR1 (Bit 1)                               */
#define PA_PA_BSR_BSR1_Msk                (0x2UL)                   /*!< PA PA_BSR: BSR1 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BSR_BSR0_Pos                (0UL)                     /*!< PA PA_BSR: BSR0 (Bit 0)                               */
#define PA_PA_BSR_BSR0_Msk                (0x1UL)                   /*!< PA PA_BSR: BSR0 (Bitfield-Mask: 0x01)                 */
/* ========================================================  PA_BCR  ========================================================= */
#define PA_PA_BCR_BCR11_Pos               (11UL)                    /*!< PA PA_BCR: BCR11 (Bit 11)                             */
#define PA_PA_BCR_BCR11_Msk               (0x800UL)                 /*!< PA PA_BCR: BCR11 (Bitfield-Mask: 0x01)                */
#define PA_PA_BCR_BCR10_Pos               (10UL)                    /*!< PA PA_BCR: BCR10 (Bit 10)                             */
#define PA_PA_BCR_BCR10_Msk               (0x400UL)                 /*!< PA PA_BCR: BCR10 (Bitfield-Mask: 0x01)                */
#define PA_PA_BCR_BCR9_Pos                (9UL)                     /*!< PA PA_BCR: BCR9 (Bit 9)                               */
#define PA_PA_BCR_BCR9_Msk                (0x200UL)                 /*!< PA PA_BCR: BCR9 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BCR_BCR8_Pos                (8UL)                     /*!< PA PA_BCR: BCR8 (Bit 8)                               */
#define PA_PA_BCR_BCR8_Msk                (0x100UL)                 /*!< PA PA_BCR: BCR8 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BCR_BCR7_Pos                (7UL)                     /*!< PA PA_BCR: BCR7 (Bit 7)                               */
#define PA_PA_BCR_BCR7_Msk                (0x80UL)                  /*!< PA PA_BCR: BCR7 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BCR_BCR6_Pos                (6UL)                     /*!< PA PA_BCR: BCR6 (Bit 6)                               */
#define PA_PA_BCR_BCR6_Msk                (0x40UL)                  /*!< PA PA_BCR: BCR6 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BCR_BCR5_Pos                (5UL)                     /*!< PA PA_BCR: BCR5 (Bit 5)                               */
#define PA_PA_BCR_BCR5_Msk                (0x20UL)                  /*!< PA PA_BCR: BCR5 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BCR_BCR4_Pos                (4UL)                     /*!< PA PA_BCR: BCR4 (Bit 4)                               */
#define PA_PA_BCR_BCR4_Msk                (0x10UL)                  /*!< PA PA_BCR: BCR4 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BCR_BCR3_Pos                (3UL)                     /*!< PA PA_BCR: BCR3 (Bit 3)                               */
#define PA_PA_BCR_BCR3_Msk                (0x8UL)                   /*!< PA PA_BCR: BCR3 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BCR_BCR2_Pos                (2UL)                     /*!< PA PA_BCR: BCR2 (Bit 2)                               */
#define PA_PA_BCR_BCR2_Msk                (0x4UL)                   /*!< PA PA_BCR: BCR2 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BCR_BCR1_Pos                (1UL)                     /*!< PA PA_BCR: BCR1 (Bit 1)                               */
#define PA_PA_BCR_BCR1_Msk                (0x2UL)                   /*!< PA PA_BCR: BCR1 (Bitfield-Mask: 0x01)                 */
#define PA_PA_BCR_BCR0_Pos                (0UL)                     /*!< PA PA_BCR: BCR0 (Bit 0)                               */
#define PA_PA_BCR_BCR0_Msk                (0x1UL)                   /*!< PA PA_BCR: BCR0 (Bitfield-Mask: 0x01)                 */
/* ======================================================  PA_OUTDMSK  ======================================================= */
#define PA_PA_OUTDMSK_OUTDMSK11_Pos       (11UL)                    /*!< PA PA_OUTDMSK: OUTDMSK11 (Bit 11)                     */
#define PA_PA_OUTDMSK_OUTDMSK11_Msk       (0x800UL)                 /*!< PA PA_OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)        */
#define PA_PA_OUTDMSK_OUTDMSK10_Pos       (10UL)                    /*!< PA PA_OUTDMSK: OUTDMSK10 (Bit 10)                     */
#define PA_PA_OUTDMSK_OUTDMSK10_Msk       (0x400UL)                 /*!< PA PA_OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)        */
#define PA_PA_OUTDMSK_OUTDMSK9_Pos        (9UL)                     /*!< PA PA_OUTDMSK: OUTDMSK9 (Bit 9)                       */
#define PA_PA_OUTDMSK_OUTDMSK9_Msk        (0x200UL)                 /*!< PA PA_OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)         */
#define PA_PA_OUTDMSK_OUTDMSK8_Pos        (8UL)                     /*!< PA PA_OUTDMSK: OUTDMSK8 (Bit 8)                       */
#define PA_PA_OUTDMSK_OUTDMSK8_Msk        (0x100UL)                 /*!< PA PA_OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)         */
#define PA_PA_OUTDMSK_OUTDMSK7_Pos        (7UL)                     /*!< PA PA_OUTDMSK: OUTDMSK7 (Bit 7)                       */
#define PA_PA_OUTDMSK_OUTDMSK7_Msk        (0x80UL)                  /*!< PA PA_OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)         */
#define PA_PA_OUTDMSK_OUTDMSK6_Pos        (6UL)                     /*!< PA PA_OUTDMSK: OUTDMSK6 (Bit 6)                       */
#define PA_PA_OUTDMSK_OUTDMSK6_Msk        (0x40UL)                  /*!< PA PA_OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)         */
#define PA_PA_OUTDMSK_OUTDMSK5_Pos        (5UL)                     /*!< PA PA_OUTDMSK: OUTDMSK5 (Bit 5)                       */
#define PA_PA_OUTDMSK_OUTDMSK5_Msk        (0x20UL)                  /*!< PA PA_OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)         */
#define PA_PA_OUTDMSK_OUTDMSK4_Pos        (4UL)                     /*!< PA PA_OUTDMSK: OUTDMSK4 (Bit 4)                       */
#define PA_PA_OUTDMSK_OUTDMSK4_Msk        (0x10UL)                  /*!< PA PA_OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)         */
#define PA_PA_OUTDMSK_OUTDMSK3_Pos        (3UL)                     /*!< PA PA_OUTDMSK: OUTDMSK3 (Bit 3)                       */
#define PA_PA_OUTDMSK_OUTDMSK3_Msk        (0x8UL)                   /*!< PA PA_OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)         */
#define PA_PA_OUTDMSK_OUTDMSK2_Pos        (2UL)                     /*!< PA PA_OUTDMSK: OUTDMSK2 (Bit 2)                       */
#define PA_PA_OUTDMSK_OUTDMSK2_Msk        (0x4UL)                   /*!< PA PA_OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)         */
#define PA_PA_OUTDMSK_OUTDMSK1_Pos        (1UL)                     /*!< PA PA_OUTDMSK: OUTDMSK1 (Bit 1)                       */
#define PA_PA_OUTDMSK_OUTDMSK1_Msk        (0x2UL)                   /*!< PA PA_OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)         */
#define PA_PA_OUTDMSK_OUTDMSK0_Pos        (0UL)                     /*!< PA PA_OUTDMSK: OUTDMSK0 (Bit 0)                       */
#define PA_PA_OUTDMSK_OUTDMSK0_Msk        (0x1UL)                   /*!< PA PA_OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)         */


/* =========================================================================================================================== */
/* ================                                            PB                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
#define PB_MOD_MODE15_Pos                 (30UL)                    /*!< PB MOD: MODE15 (Bit 30)                               */
#define PB_MOD_MODE15_Msk                 (0xc0000000UL)            /*!< PB MOD: MODE15 (Bitfield-Mask: 0x03)                  */
#define PB_MOD_MODE14_Pos                 (28UL)                    /*!< PB MOD: MODE14 (Bit 28)                               */
#define PB_MOD_MODE14_Msk                 (0x30000000UL)            /*!< PB MOD: MODE14 (Bitfield-Mask: 0x03)                  */
#define PB_MOD_MODE13_Pos                 (26UL)                    /*!< PB MOD: MODE13 (Bit 26)                               */
#define PB_MOD_MODE13_Msk                 (0xc000000UL)             /*!< PB MOD: MODE13 (Bitfield-Mask: 0x03)                  */
#define PB_MOD_MODE12_Pos                 (24UL)                    /*!< PB MOD: MODE12 (Bit 24)                               */
#define PB_MOD_MODE12_Msk                 (0x3000000UL)             /*!< PB MOD: MODE12 (Bitfield-Mask: 0x03)                  */
#define PB_MOD_MODE11_Pos                 (22UL)                    /*!< PB MOD: MODE11 (Bit 22)                               */
#define PB_MOD_MODE11_Msk                 (0xc00000UL)              /*!< PB MOD: MODE11 (Bitfield-Mask: 0x03)                  */
#define PB_MOD_MODE10_Pos                 (20UL)                    /*!< PB MOD: MODE10 (Bit 20)                               */
#define PB_MOD_MODE10_Msk                 (0x300000UL)              /*!< PB MOD: MODE10 (Bitfield-Mask: 0x03)                  */
#define PB_MOD_MODE9_Pos                  (18UL)                    /*!< PB MOD: MODE9 (Bit 18)                                */
#define PB_MOD_MODE9_Msk                  (0xc0000UL)               /*!< PB MOD: MODE9 (Bitfield-Mask: 0x03)                   */
#define PB_MOD_MODE8_Pos                  (16UL)                    /*!< PB MOD: MODE8 (Bit 16)                                */
#define PB_MOD_MODE8_Msk                  (0x30000UL)               /*!< PB MOD: MODE8 (Bitfield-Mask: 0x03)                   */
#define PB_MOD_MODE7_Pos                  (14UL)                    /*!< PB MOD: MODE7 (Bit 14)                                */
#define PB_MOD_MODE7_Msk                  (0xc000UL)                /*!< PB MOD: MODE7 (Bitfield-Mask: 0x03)                   */
#define PB_MOD_MODE6_Pos                  (12UL)                    /*!< PB MOD: MODE6 (Bit 12)                                */
#define PB_MOD_MODE6_Msk                  (0x3000UL)                /*!< PB MOD: MODE6 (Bitfield-Mask: 0x03)                   */
#define PB_MOD_MODE5_Pos                  (10UL)                    /*!< PB MOD: MODE5 (Bit 10)                                */
#define PB_MOD_MODE5_Msk                  (0xc00UL)                 /*!< PB MOD: MODE5 (Bitfield-Mask: 0x03)                   */
#define PB_MOD_MODE4_Pos                  (8UL)                     /*!< PB MOD: MODE4 (Bit 8)                                 */
#define PB_MOD_MODE4_Msk                  (0x300UL)                 /*!< PB MOD: MODE4 (Bitfield-Mask: 0x03)                   */
#define PB_MOD_MODE3_Pos                  (6UL)                     /*!< PB MOD: MODE3 (Bit 6)                                 */
#define PB_MOD_MODE3_Msk                  (0xc0UL)                  /*!< PB MOD: MODE3 (Bitfield-Mask: 0x03)                   */
#define PB_MOD_MODE2_Pos                  (4UL)                     /*!< PB MOD: MODE2 (Bit 4)                                 */
#define PB_MOD_MODE2_Msk                  (0x30UL)                  /*!< PB MOD: MODE2 (Bitfield-Mask: 0x03)                   */
#define PB_MOD_MODE1_Pos                  (2UL)                     /*!< PB MOD: MODE1 (Bit 2)                                 */
#define PB_MOD_MODE1_Msk                  (0xcUL)                   /*!< PB MOD: MODE1 (Bitfield-Mask: 0x03)                   */
#define PB_MOD_MODE0_Pos                  (0UL)                     /*!< PB MOD: MODE0 (Bit 0)                                 */
#define PB_MOD_MODE0_Msk                  (0x3UL)                   /*!< PB MOD: MODE0 (Bitfield-Mask: 0x03)                   */
/* ==========================================================  TYP  ========================================================== */
#define PB_TYP_TYP15_Pos                  (15UL)                    /*!< PB TYP: TYP15 (Bit 15)                                */
#define PB_TYP_TYP15_Msk                  (0x8000UL)                /*!< PB TYP: TYP15 (Bitfield-Mask: 0x01)                   */
#define PB_TYP_TYP14_Pos                  (14UL)                    /*!< PB TYP: TYP14 (Bit 14)                                */
#define PB_TYP_TYP14_Msk                  (0x4000UL)                /*!< PB TYP: TYP14 (Bitfield-Mask: 0x01)                   */
#define PB_TYP_TYP13_Pos                  (13UL)                    /*!< PB TYP: TYP13 (Bit 13)                                */
#define PB_TYP_TYP13_Msk                  (0x2000UL)                /*!< PB TYP: TYP13 (Bitfield-Mask: 0x01)                   */
#define PB_TYP_TYP12_Pos                  (12UL)                    /*!< PB TYP: TYP12 (Bit 12)                                */
#define PB_TYP_TYP12_Msk                  (0x1000UL)                /*!< PB TYP: TYP12 (Bitfield-Mask: 0x01)                   */
#define PB_TYP_TYP11_Pos                  (11UL)                    /*!< PB TYP: TYP11 (Bit 11)                                */
#define PB_TYP_TYP11_Msk                  (0x800UL)                 /*!< PB TYP: TYP11 (Bitfield-Mask: 0x01)                   */
#define PB_TYP_TYP10_Pos                  (10UL)                    /*!< PB TYP: TYP10 (Bit 10)                                */
#define PB_TYP_TYP10_Msk                  (0x400UL)                 /*!< PB TYP: TYP10 (Bitfield-Mask: 0x01)                   */
#define PB_TYP_TYP9_Pos                   (9UL)                     /*!< PB TYP: TYP9 (Bit 9)                                  */
#define PB_TYP_TYP9_Msk                   (0x200UL)                 /*!< PB TYP: TYP9 (Bitfield-Mask: 0x01)                    */
#define PB_TYP_TYP8_Pos                   (8UL)                     /*!< PB TYP: TYP8 (Bit 8)                                  */
#define PB_TYP_TYP8_Msk                   (0x100UL)                 /*!< PB TYP: TYP8 (Bitfield-Mask: 0x01)                    */
#define PB_TYP_TYP7_Pos                   (7UL)                     /*!< PB TYP: TYP7 (Bit 7)                                  */
#define PB_TYP_TYP7_Msk                   (0x80UL)                  /*!< PB TYP: TYP7 (Bitfield-Mask: 0x01)                    */
#define PB_TYP_TYP6_Pos                   (6UL)                     /*!< PB TYP: TYP6 (Bit 6)                                  */
#define PB_TYP_TYP6_Msk                   (0x40UL)                  /*!< PB TYP: TYP6 (Bitfield-Mask: 0x01)                    */
#define PB_TYP_TYP5_Pos                   (5UL)                     /*!< PB TYP: TYP5 (Bit 5)                                  */
#define PB_TYP_TYP5_Msk                   (0x20UL)                  /*!< PB TYP: TYP5 (Bitfield-Mask: 0x01)                    */
#define PB_TYP_TYP4_Pos                   (4UL)                     /*!< PB TYP: TYP4 (Bit 4)                                  */
#define PB_TYP_TYP4_Msk                   (0x10UL)                  /*!< PB TYP: TYP4 (Bitfield-Mask: 0x01)                    */
#define PB_TYP_TYP3_Pos                   (3UL)                     /*!< PB TYP: TYP3 (Bit 3)                                  */
#define PB_TYP_TYP3_Msk                   (0x8UL)                   /*!< PB TYP: TYP3 (Bitfield-Mask: 0x01)                    */
#define PB_TYP_TYP2_Pos                   (2UL)                     /*!< PB TYP: TYP2 (Bit 2)                                  */
#define PB_TYP_TYP2_Msk                   (0x4UL)                   /*!< PB TYP: TYP2 (Bitfield-Mask: 0x01)                    */
#define PB_TYP_TYP1_Pos                   (1UL)                     /*!< PB TYP: TYP1 (Bit 1)                                  */
#define PB_TYP_TYP1_Msk                   (0x2UL)                   /*!< PB TYP: TYP1 (Bitfield-Mask: 0x01)                    */
#define PB_TYP_TYP0_Pos                   (0UL)                     /*!< PB TYP: TYP0 (Bit 0)                                  */
#define PB_TYP_TYP0_Msk                   (0x1UL)                   /*!< PB TYP: TYP0 (Bitfield-Mask: 0x01)                    */
/* =========================================================  AFSR1  ========================================================= */
#define PB_AFSR1_AFSR7_Pos                (28UL)                    /*!< PB AFSR1: AFSR7 (Bit 28)                              */
#define PB_AFSR1_AFSR7_Msk                (0xf0000000UL)            /*!< PB AFSR1: AFSR7 (Bitfield-Mask: 0x0f)                 */
#define PB_AFSR1_AFSR6_Pos                (24UL)                    /*!< PB AFSR1: AFSR6 (Bit 24)                              */
#define PB_AFSR1_AFSR6_Msk                (0xf000000UL)             /*!< PB AFSR1: AFSR6 (Bitfield-Mask: 0x0f)                 */
#define PB_AFSR1_AFSR5_Pos                (20UL)                    /*!< PB AFSR1: AFSR5 (Bit 20)                              */
#define PB_AFSR1_AFSR5_Msk                (0xf00000UL)              /*!< PB AFSR1: AFSR5 (Bitfield-Mask: 0x0f)                 */
#define PB_AFSR1_AFSR4_Pos                (16UL)                    /*!< PB AFSR1: AFSR4 (Bit 16)                              */
#define PB_AFSR1_AFSR4_Msk                (0xf0000UL)               /*!< PB AFSR1: AFSR4 (Bitfield-Mask: 0x0f)                 */
#define PB_AFSR1_AFSR3_Pos                (12UL)                    /*!< PB AFSR1: AFSR3 (Bit 12)                              */
#define PB_AFSR1_AFSR3_Msk                (0xf000UL)                /*!< PB AFSR1: AFSR3 (Bitfield-Mask: 0x0f)                 */
#define PB_AFSR1_AFSR2_Pos                (8UL)                     /*!< PB AFSR1: AFSR2 (Bit 8)                               */
#define PB_AFSR1_AFSR2_Msk                (0xf00UL)                 /*!< PB AFSR1: AFSR2 (Bitfield-Mask: 0x0f)                 */
#define PB_AFSR1_AFSR1_Pos                (4UL)                     /*!< PB AFSR1: AFSR1 (Bit 4)                               */
#define PB_AFSR1_AFSR1_Msk                (0xf0UL)                  /*!< PB AFSR1: AFSR1 (Bitfield-Mask: 0x0f)                 */
#define PB_AFSR1_AFSR0_Pos                (0UL)                     /*!< PB AFSR1: AFSR0 (Bit 0)                               */
#define PB_AFSR1_AFSR0_Msk                (0xfUL)                   /*!< PB AFSR1: AFSR0 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  AFSR2  ========================================================= */
#define PB_AFSR2_AFSR15_Pos               (28UL)                    /*!< PB AFSR2: AFSR15 (Bit 28)                             */
#define PB_AFSR2_AFSR15_Msk               (0xf0000000UL)            /*!< PB AFSR2: AFSR15 (Bitfield-Mask: 0x0f)                */
#define PB_AFSR2_AFSR14_Pos               (24UL)                    /*!< PB AFSR2: AFSR14 (Bit 24)                             */
#define PB_AFSR2_AFSR14_Msk               (0xf000000UL)             /*!< PB AFSR2: AFSR14 (Bitfield-Mask: 0x0f)                */
#define PB_AFSR2_AFSR13_Pos               (20UL)                    /*!< PB AFSR2: AFSR13 (Bit 20)                             */
#define PB_AFSR2_AFSR13_Msk               (0xf00000UL)              /*!< PB AFSR2: AFSR13 (Bitfield-Mask: 0x0f)                */
#define PB_AFSR2_AFSR12_Pos               (16UL)                    /*!< PB AFSR2: AFSR12 (Bit 16)                             */
#define PB_AFSR2_AFSR12_Msk               (0xf0000UL)               /*!< PB AFSR2: AFSR12 (Bitfield-Mask: 0x0f)                */
#define PB_AFSR2_AFSR11_Pos               (12UL)                    /*!< PB AFSR2: AFSR11 (Bit 12)                             */
#define PB_AFSR2_AFSR11_Msk               (0xf000UL)                /*!< PB AFSR2: AFSR11 (Bitfield-Mask: 0x0f)                */
#define PB_AFSR2_AFSR10_Pos               (8UL)                     /*!< PB AFSR2: AFSR10 (Bit 8)                              */
#define PB_AFSR2_AFSR10_Msk               (0xf00UL)                 /*!< PB AFSR2: AFSR10 (Bitfield-Mask: 0x0f)                */
#define PB_AFSR2_AFSR9_Pos                (4UL)                     /*!< PB AFSR2: AFSR9 (Bit 4)                               */
#define PB_AFSR2_AFSR9_Msk                (0xf0UL)                  /*!< PB AFSR2: AFSR9 (Bitfield-Mask: 0x0f)                 */
#define PB_AFSR2_AFSR8_Pos                (0UL)                     /*!< PB AFSR2: AFSR8 (Bit 0)                               */
#define PB_AFSR2_AFSR8_Msk                (0xfUL)                   /*!< PB AFSR2: AFSR8 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  PUPD  ========================================================== */
#define PB_PUPD_PUPD15_Pos                (30UL)                    /*!< PB PUPD: PUPD15 (Bit 30)                              */
#define PB_PUPD_PUPD15_Msk                (0xc0000000UL)            /*!< PB PUPD: PUPD15 (Bitfield-Mask: 0x03)                 */
#define PB_PUPD_PUPD14_Pos                (28UL)                    /*!< PB PUPD: PUPD14 (Bit 28)                              */
#define PB_PUPD_PUPD14_Msk                (0x30000000UL)            /*!< PB PUPD: PUPD14 (Bitfield-Mask: 0x03)                 */
#define PB_PUPD_PUPD13_Pos                (26UL)                    /*!< PB PUPD: PUPD13 (Bit 26)                              */
#define PB_PUPD_PUPD13_Msk                (0xc000000UL)             /*!< PB PUPD: PUPD13 (Bitfield-Mask: 0x03)                 */
#define PB_PUPD_PUPD12_Pos                (24UL)                    /*!< PB PUPD: PUPD12 (Bit 24)                              */
#define PB_PUPD_PUPD12_Msk                (0x3000000UL)             /*!< PB PUPD: PUPD12 (Bitfield-Mask: 0x03)                 */
#define PB_PUPD_PUPD11_Pos                (22UL)                    /*!< PB PUPD: PUPD11 (Bit 22)                              */
#define PB_PUPD_PUPD11_Msk                (0xc00000UL)              /*!< PB PUPD: PUPD11 (Bitfield-Mask: 0x03)                 */
#define PB_PUPD_PUPD10_Pos                (20UL)                    /*!< PB PUPD: PUPD10 (Bit 20)                              */
#define PB_PUPD_PUPD10_Msk                (0x300000UL)              /*!< PB PUPD: PUPD10 (Bitfield-Mask: 0x03)                 */
#define PB_PUPD_PUPD9_Pos                 (18UL)                    /*!< PB PUPD: PUPD9 (Bit 18)                               */
#define PB_PUPD_PUPD9_Msk                 (0xc0000UL)               /*!< PB PUPD: PUPD9 (Bitfield-Mask: 0x03)                  */
#define PB_PUPD_PUPD8_Pos                 (16UL)                    /*!< PB PUPD: PUPD8 (Bit 16)                               */
#define PB_PUPD_PUPD8_Msk                 (0x30000UL)               /*!< PB PUPD: PUPD8 (Bitfield-Mask: 0x03)                  */
#define PB_PUPD_PUPD7_Pos                 (14UL)                    /*!< PB PUPD: PUPD7 (Bit 14)                               */
#define PB_PUPD_PUPD7_Msk                 (0xc000UL)                /*!< PB PUPD: PUPD7 (Bitfield-Mask: 0x03)                  */
#define PB_PUPD_PUPD6_Pos                 (12UL)                    /*!< PB PUPD: PUPD6 (Bit 12)                               */
#define PB_PUPD_PUPD6_Msk                 (0x3000UL)                /*!< PB PUPD: PUPD6 (Bitfield-Mask: 0x03)                  */
#define PB_PUPD_PUPD5_Pos                 (10UL)                    /*!< PB PUPD: PUPD5 (Bit 10)                               */
#define PB_PUPD_PUPD5_Msk                 (0xc00UL)                 /*!< PB PUPD: PUPD5 (Bitfield-Mask: 0x03)                  */
#define PB_PUPD_PUPD4_Pos                 (8UL)                     /*!< PB PUPD: PUPD4 (Bit 8)                                */
#define PB_PUPD_PUPD4_Msk                 (0x300UL)                 /*!< PB PUPD: PUPD4 (Bitfield-Mask: 0x03)                  */
#define PB_PUPD_PUPD3_Pos                 (6UL)                     /*!< PB PUPD: PUPD3 (Bit 6)                                */
#define PB_PUPD_PUPD3_Msk                 (0xc0UL)                  /*!< PB PUPD: PUPD3 (Bitfield-Mask: 0x03)                  */
#define PB_PUPD_PUPD2_Pos                 (4UL)                     /*!< PB PUPD: PUPD2 (Bit 4)                                */
#define PB_PUPD_PUPD2_Msk                 (0x30UL)                  /*!< PB PUPD: PUPD2 (Bitfield-Mask: 0x03)                  */
#define PB_PUPD_PUPD1_Pos                 (2UL)                     /*!< PB PUPD: PUPD1 (Bit 2)                                */
#define PB_PUPD_PUPD1_Msk                 (0xcUL)                   /*!< PB PUPD: PUPD1 (Bitfield-Mask: 0x03)                  */
#define PB_PUPD_PUPD0_Pos                 (0UL)                     /*!< PB PUPD: PUPD0 (Bit 0)                                */
#define PB_PUPD_PUPD0_Msk                 (0x3UL)                   /*!< PB PUPD: PUPD0 (Bitfield-Mask: 0x03)                  */
/* =========================================================  INDR  ========================================================== */
#define PB_INDR_INDR15_Pos                (15UL)                    /*!< PB INDR: INDR15 (Bit 15)                              */
#define PB_INDR_INDR15_Msk                (0x8000UL)                /*!< PB INDR: INDR15 (Bitfield-Mask: 0x01)                 */
#define PB_INDR_INDR14_Pos                (14UL)                    /*!< PB INDR: INDR14 (Bit 14)                              */
#define PB_INDR_INDR14_Msk                (0x4000UL)                /*!< PB INDR: INDR14 (Bitfield-Mask: 0x01)                 */
#define PB_INDR_INDR13_Pos                (13UL)                    /*!< PB INDR: INDR13 (Bit 13)                              */
#define PB_INDR_INDR13_Msk                (0x2000UL)                /*!< PB INDR: INDR13 (Bitfield-Mask: 0x01)                 */
#define PB_INDR_INDR12_Pos                (12UL)                    /*!< PB INDR: INDR12 (Bit 12)                              */
#define PB_INDR_INDR12_Msk                (0x1000UL)                /*!< PB INDR: INDR12 (Bitfield-Mask: 0x01)                 */
#define PB_INDR_INDR11_Pos                (11UL)                    /*!< PB INDR: INDR11 (Bit 11)                              */
#define PB_INDR_INDR11_Msk                (0x800UL)                 /*!< PB INDR: INDR11 (Bitfield-Mask: 0x01)                 */
#define PB_INDR_INDR10_Pos                (10UL)                    /*!< PB INDR: INDR10 (Bit 10)                              */
#define PB_INDR_INDR10_Msk                (0x400UL)                 /*!< PB INDR: INDR10 (Bitfield-Mask: 0x01)                 */
#define PB_INDR_INDR9_Pos                 (9UL)                     /*!< PB INDR: INDR9 (Bit 9)                                */
#define PB_INDR_INDR9_Msk                 (0x200UL)                 /*!< PB INDR: INDR9 (Bitfield-Mask: 0x01)                  */
#define PB_INDR_INDR8_Pos                 (8UL)                     /*!< PB INDR: INDR8 (Bit 8)                                */
#define PB_INDR_INDR8_Msk                 (0x100UL)                 /*!< PB INDR: INDR8 (Bitfield-Mask: 0x01)                  */
#define PB_INDR_INDR7_Pos                 (7UL)                     /*!< PB INDR: INDR7 (Bit 7)                                */
#define PB_INDR_INDR7_Msk                 (0x80UL)                  /*!< PB INDR: INDR7 (Bitfield-Mask: 0x01)                  */
#define PB_INDR_INDR6_Pos                 (6UL)                     /*!< PB INDR: INDR6 (Bit 6)                                */
#define PB_INDR_INDR6_Msk                 (0x40UL)                  /*!< PB INDR: INDR6 (Bitfield-Mask: 0x01)                  */
#define PB_INDR_INDR5_Pos                 (5UL)                     /*!< PB INDR: INDR5 (Bit 5)                                */
#define PB_INDR_INDR5_Msk                 (0x20UL)                  /*!< PB INDR: INDR5 (Bitfield-Mask: 0x01)                  */
#define PB_INDR_INDR4_Pos                 (4UL)                     /*!< PB INDR: INDR4 (Bit 4)                                */
#define PB_INDR_INDR4_Msk                 (0x10UL)                  /*!< PB INDR: INDR4 (Bitfield-Mask: 0x01)                  */
#define PB_INDR_INDR3_Pos                 (3UL)                     /*!< PB INDR: INDR3 (Bit 3)                                */
#define PB_INDR_INDR3_Msk                 (0x8UL)                   /*!< PB INDR: INDR3 (Bitfield-Mask: 0x01)                  */
#define PB_INDR_INDR2_Pos                 (2UL)                     /*!< PB INDR: INDR2 (Bit 2)                                */
#define PB_INDR_INDR2_Msk                 (0x4UL)                   /*!< PB INDR: INDR2 (Bitfield-Mask: 0x01)                  */
#define PB_INDR_INDR1_Pos                 (1UL)                     /*!< PB INDR: INDR1 (Bit 1)                                */
#define PB_INDR_INDR1_Msk                 (0x2UL)                   /*!< PB INDR: INDR1 (Bitfield-Mask: 0x01)                  */
#define PB_INDR_INDR0_Pos                 (0UL)                     /*!< PB INDR: INDR0 (Bit 0)                                */
#define PB_INDR_INDR0_Msk                 (0x1UL)                   /*!< PB INDR: INDR0 (Bitfield-Mask: 0x01)                  */
/* =========================================================  OUTDR  ========================================================= */
#define PB_OUTDR_OUTDR15_Pos              (15UL)                    /*!< PB OUTDR: OUTDR15 (Bit 15)                            */
#define PB_OUTDR_OUTDR15_Msk              (0x8000UL)                /*!< PB OUTDR: OUTDR15 (Bitfield-Mask: 0x01)               */
#define PB_OUTDR_OUTDR14_Pos              (14UL)                    /*!< PB OUTDR: OUTDR14 (Bit 14)                            */
#define PB_OUTDR_OUTDR14_Msk              (0x4000UL)                /*!< PB OUTDR: OUTDR14 (Bitfield-Mask: 0x01)               */
#define PB_OUTDR_OUTDR13_Pos              (13UL)                    /*!< PB OUTDR: OUTDR13 (Bit 13)                            */
#define PB_OUTDR_OUTDR13_Msk              (0x2000UL)                /*!< PB OUTDR: OUTDR13 (Bitfield-Mask: 0x01)               */
#define PB_OUTDR_OUTDR12_Pos              (12UL)                    /*!< PB OUTDR: OUTDR12 (Bit 12)                            */
#define PB_OUTDR_OUTDR12_Msk              (0x1000UL)                /*!< PB OUTDR: OUTDR12 (Bitfield-Mask: 0x01)               */
#define PB_OUTDR_OUTDR11_Pos              (11UL)                    /*!< PB OUTDR: OUTDR11 (Bit 11)                            */
#define PB_OUTDR_OUTDR11_Msk              (0x800UL)                 /*!< PB OUTDR: OUTDR11 (Bitfield-Mask: 0x01)               */
#define PB_OUTDR_OUTDR10_Pos              (10UL)                    /*!< PB OUTDR: OUTDR10 (Bit 10)                            */
#define PB_OUTDR_OUTDR10_Msk              (0x400UL)                 /*!< PB OUTDR: OUTDR10 (Bitfield-Mask: 0x01)               */
#define PB_OUTDR_OUTDR9_Pos               (9UL)                     /*!< PB OUTDR: OUTDR9 (Bit 9)                              */
#define PB_OUTDR_OUTDR9_Msk               (0x200UL)                 /*!< PB OUTDR: OUTDR9 (Bitfield-Mask: 0x01)                */
#define PB_OUTDR_OUTDR8_Pos               (8UL)                     /*!< PB OUTDR: OUTDR8 (Bit 8)                              */
#define PB_OUTDR_OUTDR8_Msk               (0x100UL)                 /*!< PB OUTDR: OUTDR8 (Bitfield-Mask: 0x01)                */
#define PB_OUTDR_OUTDR7_Pos               (7UL)                     /*!< PB OUTDR: OUTDR7 (Bit 7)                              */
#define PB_OUTDR_OUTDR7_Msk               (0x80UL)                  /*!< PB OUTDR: OUTDR7 (Bitfield-Mask: 0x01)                */
#define PB_OUTDR_OUTDR6_Pos               (6UL)                     /*!< PB OUTDR: OUTDR6 (Bit 6)                              */
#define PB_OUTDR_OUTDR6_Msk               (0x40UL)                  /*!< PB OUTDR: OUTDR6 (Bitfield-Mask: 0x01)                */
#define PB_OUTDR_OUTDR5_Pos               (5UL)                     /*!< PB OUTDR: OUTDR5 (Bit 5)                              */
#define PB_OUTDR_OUTDR5_Msk               (0x20UL)                  /*!< PB OUTDR: OUTDR5 (Bitfield-Mask: 0x01)                */
#define PB_OUTDR_OUTDR4_Pos               (4UL)                     /*!< PB OUTDR: OUTDR4 (Bit 4)                              */
#define PB_OUTDR_OUTDR4_Msk               (0x10UL)                  /*!< PB OUTDR: OUTDR4 (Bitfield-Mask: 0x01)                */
#define PB_OUTDR_OUTDR3_Pos               (3UL)                     /*!< PB OUTDR: OUTDR3 (Bit 3)                              */
#define PB_OUTDR_OUTDR3_Msk               (0x8UL)                   /*!< PB OUTDR: OUTDR3 (Bitfield-Mask: 0x01)                */
#define PB_OUTDR_OUTDR2_Pos               (2UL)                     /*!< PB OUTDR: OUTDR2 (Bit 2)                              */
#define PB_OUTDR_OUTDR2_Msk               (0x4UL)                   /*!< PB OUTDR: OUTDR2 (Bitfield-Mask: 0x01)                */
#define PB_OUTDR_OUTDR1_Pos               (1UL)                     /*!< PB OUTDR: OUTDR1 (Bit 1)                              */
#define PB_OUTDR_OUTDR1_Msk               (0x2UL)                   /*!< PB OUTDR: OUTDR1 (Bitfield-Mask: 0x01)                */
#define PB_OUTDR_OUTDR0_Pos               (0UL)                     /*!< PB OUTDR: OUTDR0 (Bit 0)                              */
#define PB_OUTDR_OUTDR0_Msk               (0x1UL)                   /*!< PB OUTDR: OUTDR0 (Bitfield-Mask: 0x01)                */
/* ==========================================================  BSR  ========================================================== */
#define PB_BSR_BSR15_Pos                  (15UL)                    /*!< PB BSR: BSR15 (Bit 15)                                */
#define PB_BSR_BSR15_Msk                  (0x8000UL)                /*!< PB BSR: BSR15 (Bitfield-Mask: 0x01)                   */
#define PB_BSR_BSR14_Pos                  (14UL)                    /*!< PB BSR: BSR14 (Bit 14)                                */
#define PB_BSR_BSR14_Msk                  (0x4000UL)                /*!< PB BSR: BSR14 (Bitfield-Mask: 0x01)                   */
#define PB_BSR_BSR13_Pos                  (13UL)                    /*!< PB BSR: BSR13 (Bit 13)                                */
#define PB_BSR_BSR13_Msk                  (0x2000UL)                /*!< PB BSR: BSR13 (Bitfield-Mask: 0x01)                   */
#define PB_BSR_BSR12_Pos                  (12UL)                    /*!< PB BSR: BSR12 (Bit 12)                                */
#define PB_BSR_BSR12_Msk                  (0x1000UL)                /*!< PB BSR: BSR12 (Bitfield-Mask: 0x01)                   */
#define PB_BSR_BSR11_Pos                  (11UL)                    /*!< PB BSR: BSR11 (Bit 11)                                */
#define PB_BSR_BSR11_Msk                  (0x800UL)                 /*!< PB BSR: BSR11 (Bitfield-Mask: 0x01)                   */
#define PB_BSR_BSR10_Pos                  (10UL)                    /*!< PB BSR: BSR10 (Bit 10)                                */
#define PB_BSR_BSR10_Msk                  (0x400UL)                 /*!< PB BSR: BSR10 (Bitfield-Mask: 0x01)                   */
#define PB_BSR_BSR9_Pos                   (9UL)                     /*!< PB BSR: BSR9 (Bit 9)                                  */
#define PB_BSR_BSR9_Msk                   (0x200UL)                 /*!< PB BSR: BSR9 (Bitfield-Mask: 0x01)                    */
#define PB_BSR_BSR8_Pos                   (8UL)                     /*!< PB BSR: BSR8 (Bit 8)                                  */
#define PB_BSR_BSR8_Msk                   (0x100UL)                 /*!< PB BSR: BSR8 (Bitfield-Mask: 0x01)                    */
#define PB_BSR_BSR7_Pos                   (7UL)                     /*!< PB BSR: BSR7 (Bit 7)                                  */
#define PB_BSR_BSR7_Msk                   (0x80UL)                  /*!< PB BSR: BSR7 (Bitfield-Mask: 0x01)                    */
#define PB_BSR_BSR6_Pos                   (6UL)                     /*!< PB BSR: BSR6 (Bit 6)                                  */
#define PB_BSR_BSR6_Msk                   (0x40UL)                  /*!< PB BSR: BSR6 (Bitfield-Mask: 0x01)                    */
#define PB_BSR_BSR5_Pos                   (5UL)                     /*!< PB BSR: BSR5 (Bit 5)                                  */
#define PB_BSR_BSR5_Msk                   (0x20UL)                  /*!< PB BSR: BSR5 (Bitfield-Mask: 0x01)                    */
#define PB_BSR_BSR4_Pos                   (4UL)                     /*!< PB BSR: BSR4 (Bit 4)                                  */
#define PB_BSR_BSR4_Msk                   (0x10UL)                  /*!< PB BSR: BSR4 (Bitfield-Mask: 0x01)                    */
#define PB_BSR_BSR3_Pos                   (3UL)                     /*!< PB BSR: BSR3 (Bit 3)                                  */
#define PB_BSR_BSR3_Msk                   (0x8UL)                   /*!< PB BSR: BSR3 (Bitfield-Mask: 0x01)                    */
#define PB_BSR_BSR2_Pos                   (2UL)                     /*!< PB BSR: BSR2 (Bit 2)                                  */
#define PB_BSR_BSR2_Msk                   (0x4UL)                   /*!< PB BSR: BSR2 (Bitfield-Mask: 0x01)                    */
#define PB_BSR_BSR1_Pos                   (1UL)                     /*!< PB BSR: BSR1 (Bit 1)                                  */
#define PB_BSR_BSR1_Msk                   (0x2UL)                   /*!< PB BSR: BSR1 (Bitfield-Mask: 0x01)                    */
#define PB_BSR_BSR0_Pos                   (0UL)                     /*!< PB BSR: BSR0 (Bit 0)                                  */
#define PB_BSR_BSR0_Msk                   (0x1UL)                   /*!< PB BSR: BSR0 (Bitfield-Mask: 0x01)                    */
/* ==========================================================  BCR  ========================================================== */
#define PB_BCR_BCR15_Pos                  (15UL)                    /*!< PB BCR: BCR15 (Bit 15)                                */
#define PB_BCR_BCR15_Msk                  (0x8000UL)                /*!< PB BCR: BCR15 (Bitfield-Mask: 0x01)                   */
#define PB_BCR_BCR14_Pos                  (14UL)                    /*!< PB BCR: BCR14 (Bit 14)                                */
#define PB_BCR_BCR14_Msk                  (0x4000UL)                /*!< PB BCR: BCR14 (Bitfield-Mask: 0x01)                   */
#define PB_BCR_BCR13_Pos                  (13UL)                    /*!< PB BCR: BCR13 (Bit 13)                                */
#define PB_BCR_BCR13_Msk                  (0x2000UL)                /*!< PB BCR: BCR13 (Bitfield-Mask: 0x01)                   */
#define PB_BCR_BCR12_Pos                  (12UL)                    /*!< PB BCR: BCR12 (Bit 12)                                */
#define PB_BCR_BCR12_Msk                  (0x1000UL)                /*!< PB BCR: BCR12 (Bitfield-Mask: 0x01)                   */
#define PB_BCR_BCR11_Pos                  (11UL)                    /*!< PB BCR: BCR11 (Bit 11)                                */
#define PB_BCR_BCR11_Msk                  (0x800UL)                 /*!< PB BCR: BCR11 (Bitfield-Mask: 0x01)                   */
#define PB_BCR_BCR10_Pos                  (10UL)                    /*!< PB BCR: BCR10 (Bit 10)                                */
#define PB_BCR_BCR10_Msk                  (0x400UL)                 /*!< PB BCR: BCR10 (Bitfield-Mask: 0x01)                   */
#define PB_BCR_BCR9_Pos                   (9UL)                     /*!< PB BCR: BCR9 (Bit 9)                                  */
#define PB_BCR_BCR9_Msk                   (0x200UL)                 /*!< PB BCR: BCR9 (Bitfield-Mask: 0x01)                    */
#define PB_BCR_BCR8_Pos                   (8UL)                     /*!< PB BCR: BCR8 (Bit 8)                                  */
#define PB_BCR_BCR8_Msk                   (0x100UL)                 /*!< PB BCR: BCR8 (Bitfield-Mask: 0x01)                    */
#define PB_BCR_BCR7_Pos                   (7UL)                     /*!< PB BCR: BCR7 (Bit 7)                                  */
#define PB_BCR_BCR7_Msk                   (0x80UL)                  /*!< PB BCR: BCR7 (Bitfield-Mask: 0x01)                    */
#define PB_BCR_BCR6_Pos                   (6UL)                     /*!< PB BCR: BCR6 (Bit 6)                                  */
#define PB_BCR_BCR6_Msk                   (0x40UL)                  /*!< PB BCR: BCR6 (Bitfield-Mask: 0x01)                    */
#define PB_BCR_BCR5_Pos                   (5UL)                     /*!< PB BCR: BCR5 (Bit 5)                                  */
#define PB_BCR_BCR5_Msk                   (0x20UL)                  /*!< PB BCR: BCR5 (Bitfield-Mask: 0x01)                    */
#define PB_BCR_BCR4_Pos                   (4UL)                     /*!< PB BCR: BCR4 (Bit 4)                                  */
#define PB_BCR_BCR4_Msk                   (0x10UL)                  /*!< PB BCR: BCR4 (Bitfield-Mask: 0x01)                    */
#define PB_BCR_BCR3_Pos                   (3UL)                     /*!< PB BCR: BCR3 (Bit 3)                                  */
#define PB_BCR_BCR3_Msk                   (0x8UL)                   /*!< PB BCR: BCR3 (Bitfield-Mask: 0x01)                    */
#define PB_BCR_BCR2_Pos                   (2UL)                     /*!< PB BCR: BCR2 (Bit 2)                                  */
#define PB_BCR_BCR2_Msk                   (0x4UL)                   /*!< PB BCR: BCR2 (Bitfield-Mask: 0x01)                    */
#define PB_BCR_BCR1_Pos                   (1UL)                     /*!< PB BCR: BCR1 (Bit 1)                                  */
#define PB_BCR_BCR1_Msk                   (0x2UL)                   /*!< PB BCR: BCR1 (Bitfield-Mask: 0x01)                    */
#define PB_BCR_BCR0_Pos                   (0UL)                     /*!< PB BCR: BCR0 (Bit 0)                                  */
#define PB_BCR_BCR0_Msk                   (0x1UL)                   /*!< PB BCR: BCR0 (Bitfield-Mask: 0x01)                    */
/* ========================================================  OUTDMSK  ======================================================== */
#define PB_OUTDMSK_OUTDMSK15_Pos          (15UL)                    /*!< PB OUTDMSK: OUTDMSK15 (Bit 15)                        */
#define PB_OUTDMSK_OUTDMSK15_Msk          (0x8000UL)                /*!< PB OUTDMSK: OUTDMSK15 (Bitfield-Mask: 0x01)           */
#define PB_OUTDMSK_OUTDMSK14_Pos          (14UL)                    /*!< PB OUTDMSK: OUTDMSK14 (Bit 14)                        */
#define PB_OUTDMSK_OUTDMSK14_Msk          (0x4000UL)                /*!< PB OUTDMSK: OUTDMSK14 (Bitfield-Mask: 0x01)           */
#define PB_OUTDMSK_OUTDMSK13_Pos          (13UL)                    /*!< PB OUTDMSK: OUTDMSK13 (Bit 13)                        */
#define PB_OUTDMSK_OUTDMSK13_Msk          (0x2000UL)                /*!< PB OUTDMSK: OUTDMSK13 (Bitfield-Mask: 0x01)           */
#define PB_OUTDMSK_OUTDMSK12_Pos          (12UL)                    /*!< PB OUTDMSK: OUTDMSK12 (Bit 12)                        */
#define PB_OUTDMSK_OUTDMSK12_Msk          (0x1000UL)                /*!< PB OUTDMSK: OUTDMSK12 (Bitfield-Mask: 0x01)           */
#define PB_OUTDMSK_OUTDMSK11_Pos          (11UL)                    /*!< PB OUTDMSK: OUTDMSK11 (Bit 11)                        */
#define PB_OUTDMSK_OUTDMSK11_Msk          (0x800UL)                 /*!< PB OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)           */
#define PB_OUTDMSK_OUTDMSK10_Pos          (10UL)                    /*!< PB OUTDMSK: OUTDMSK10 (Bit 10)                        */
#define PB_OUTDMSK_OUTDMSK10_Msk          (0x400UL)                 /*!< PB OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)           */
#define PB_OUTDMSK_OUTDMSK9_Pos           (9UL)                     /*!< PB OUTDMSK: OUTDMSK9 (Bit 9)                          */
#define PB_OUTDMSK_OUTDMSK9_Msk           (0x200UL)                 /*!< PB OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)            */
#define PB_OUTDMSK_OUTDMSK8_Pos           (8UL)                     /*!< PB OUTDMSK: OUTDMSK8 (Bit 8)                          */
#define PB_OUTDMSK_OUTDMSK8_Msk           (0x100UL)                 /*!< PB OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)            */
#define PB_OUTDMSK_OUTDMSK7_Pos           (7UL)                     /*!< PB OUTDMSK: OUTDMSK7 (Bit 7)                          */
#define PB_OUTDMSK_OUTDMSK7_Msk           (0x80UL)                  /*!< PB OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)            */
#define PB_OUTDMSK_OUTDMSK6_Pos           (6UL)                     /*!< PB OUTDMSK: OUTDMSK6 (Bit 6)                          */
#define PB_OUTDMSK_OUTDMSK6_Msk           (0x40UL)                  /*!< PB OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)            */
#define PB_OUTDMSK_OUTDMSK5_Pos           (5UL)                     /*!< PB OUTDMSK: OUTDMSK5 (Bit 5)                          */
#define PB_OUTDMSK_OUTDMSK5_Msk           (0x20UL)                  /*!< PB OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)            */
#define PB_OUTDMSK_OUTDMSK4_Pos           (4UL)                     /*!< PB OUTDMSK: OUTDMSK4 (Bit 4)                          */
#define PB_OUTDMSK_OUTDMSK4_Msk           (0x10UL)                  /*!< PB OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)            */
#define PB_OUTDMSK_OUTDMSK3_Pos           (3UL)                     /*!< PB OUTDMSK: OUTDMSK3 (Bit 3)                          */
#define PB_OUTDMSK_OUTDMSK3_Msk           (0x8UL)                   /*!< PB OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)            */
#define PB_OUTDMSK_OUTDMSK2_Pos           (2UL)                     /*!< PB OUTDMSK: OUTDMSK2 (Bit 2)                          */
#define PB_OUTDMSK_OUTDMSK2_Msk           (0x4UL)                   /*!< PB OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)            */
#define PB_OUTDMSK_OUTDMSK1_Pos           (1UL)                     /*!< PB OUTDMSK: OUTDMSK1 (Bit 1)                          */
#define PB_OUTDMSK_OUTDMSK1_Msk           (0x2UL)                   /*!< PB OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)            */
#define PB_OUTDMSK_OUTDMSK0_Pos           (0UL)                     /*!< PB OUTDMSK: OUTDMSK0 (Bit 0)                          */
#define PB_OUTDMSK_OUTDMSK0_Msk           (0x1UL)                   /*!< PB OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)            */
/* =========================================================  DBCR  ========================================================== */
#define PB_DBCR_DBCLK_Pos                 (16UL)                    /*!< PB DBCR: DBCLK (Bit 16)                               */
#define PB_DBCR_DBCLK_Msk                 (0x70000UL)               /*!< PB DBCR: DBCLK (Bitfield-Mask: 0x07)                  */
#define PB_DBCR_DBEN11_Pos                (11UL)                    /*!< PB DBCR: DBEN11 (Bit 11)                              */
#define PB_DBCR_DBEN11_Msk                (0x800UL)                 /*!< PB DBCR: DBEN11 (Bitfield-Mask: 0x01)                 */
#define PB_DBCR_DBEN10_Pos                (10UL)                    /*!< PB DBCR: DBEN10 (Bit 10)                              */
#define PB_DBCR_DBEN10_Msk                (0x400UL)                 /*!< PB DBCR: DBEN10 (Bitfield-Mask: 0x01)                 */
#define PB_DBCR_DBEN9_Pos                 (9UL)                     /*!< PB DBCR: DBEN9 (Bit 9)                                */
#define PB_DBCR_DBEN9_Msk                 (0x200UL)                 /*!< PB DBCR: DBEN9 (Bitfield-Mask: 0x01)                  */
#define PB_DBCR_DBEN8_Pos                 (8UL)                     /*!< PB DBCR: DBEN8 (Bit 8)                                */
#define PB_DBCR_DBEN8_Msk                 (0x100UL)                 /*!< PB DBCR: DBEN8 (Bitfield-Mask: 0x01)                  */
#define PB_DBCR_DBEN7_Pos                 (7UL)                     /*!< PB DBCR: DBEN7 (Bit 7)                                */
#define PB_DBCR_DBEN7_Msk                 (0x80UL)                  /*!< PB DBCR: DBEN7 (Bitfield-Mask: 0x01)                  */
#define PB_DBCR_DBEN6_Pos                 (6UL)                     /*!< PB DBCR: DBEN6 (Bit 6)                                */
#define PB_DBCR_DBEN6_Msk                 (0x40UL)                  /*!< PB DBCR: DBEN6 (Bitfield-Mask: 0x01)                  */
#define PB_DBCR_DBEN5_Pos                 (5UL)                     /*!< PB DBCR: DBEN5 (Bit 5)                                */
#define PB_DBCR_DBEN5_Msk                 (0x20UL)                  /*!< PB DBCR: DBEN5 (Bitfield-Mask: 0x01)                  */
#define PB_DBCR_DBEN4_Pos                 (4UL)                     /*!< PB DBCR: DBEN4 (Bit 4)                                */
#define PB_DBCR_DBEN4_Msk                 (0x10UL)                  /*!< PB DBCR: DBEN4 (Bitfield-Mask: 0x01)                  */
#define PB_DBCR_DBEN3_Pos                 (3UL)                     /*!< PB DBCR: DBEN3 (Bit 3)                                */
#define PB_DBCR_DBEN3_Msk                 (0x8UL)                   /*!< PB DBCR: DBEN3 (Bitfield-Mask: 0x01)                  */
#define PB_DBCR_DBEN2_Pos                 (2UL)                     /*!< PB DBCR: DBEN2 (Bit 2)                                */
#define PB_DBCR_DBEN2_Msk                 (0x4UL)                   /*!< PB DBCR: DBEN2 (Bitfield-Mask: 0x01)                  */
#define PB_DBCR_DBEN1_Pos                 (1UL)                     /*!< PB DBCR: DBEN1 (Bit 1)                                */
#define PB_DBCR_DBEN1_Msk                 (0x2UL)                   /*!< PB DBCR: DBEN1 (Bitfield-Mask: 0x01)                  */
#define PB_DBCR_DBEN0_Pos                 (0UL)                     /*!< PB DBCR: DBEN0 (Bit 0)                                */
#define PB_DBCR_DBEN0_Msk                 (0x1UL)                   /*!< PB DBCR: DBEN0 (Bitfield-Mask: 0x01)                  */
/* ========================================================  PB_MOD  ========================================================= */
#define PB_PB_MOD_MODE15_Pos              (30UL)                    /*!< PB PB_MOD: MODE15 (Bit 30)                            */
#define PB_PB_MOD_MODE15_Msk              (0xc0000000UL)            /*!< PB PB_MOD: MODE15 (Bitfield-Mask: 0x03)               */
#define PB_PB_MOD_MODE14_Pos              (28UL)                    /*!< PB PB_MOD: MODE14 (Bit 28)                            */
#define PB_PB_MOD_MODE14_Msk              (0x30000000UL)            /*!< PB PB_MOD: MODE14 (Bitfield-Mask: 0x03)               */
#define PB_PB_MOD_MODE13_Pos              (26UL)                    /*!< PB PB_MOD: MODE13 (Bit 26)                            */
#define PB_PB_MOD_MODE13_Msk              (0xc000000UL)             /*!< PB PB_MOD: MODE13 (Bitfield-Mask: 0x03)               */
#define PB_PB_MOD_MODE12_Pos              (24UL)                    /*!< PB PB_MOD: MODE12 (Bit 24)                            */
#define PB_PB_MOD_MODE12_Msk              (0x3000000UL)             /*!< PB PB_MOD: MODE12 (Bitfield-Mask: 0x03)               */
#define PB_PB_MOD_MODE11_Pos              (22UL)                    /*!< PB PB_MOD: MODE11 (Bit 22)                            */
#define PB_PB_MOD_MODE11_Msk              (0xc00000UL)              /*!< PB PB_MOD: MODE11 (Bitfield-Mask: 0x03)               */
#define PB_PB_MOD_MODE10_Pos              (20UL)                    /*!< PB PB_MOD: MODE10 (Bit 20)                            */
#define PB_PB_MOD_MODE10_Msk              (0x300000UL)              /*!< PB PB_MOD: MODE10 (Bitfield-Mask: 0x03)               */
#define PB_PB_MOD_MODE9_Pos               (18UL)                    /*!< PB PB_MOD: MODE9 (Bit 18)                             */
#define PB_PB_MOD_MODE9_Msk               (0xc0000UL)               /*!< PB PB_MOD: MODE9 (Bitfield-Mask: 0x03)                */
#define PB_PB_MOD_MODE8_Pos               (16UL)                    /*!< PB PB_MOD: MODE8 (Bit 16)                             */
#define PB_PB_MOD_MODE8_Msk               (0x30000UL)               /*!< PB PB_MOD: MODE8 (Bitfield-Mask: 0x03)                */
#define PB_PB_MOD_MODE7_Pos               (14UL)                    /*!< PB PB_MOD: MODE7 (Bit 14)                             */
#define PB_PB_MOD_MODE7_Msk               (0xc000UL)                /*!< PB PB_MOD: MODE7 (Bitfield-Mask: 0x03)                */
#define PB_PB_MOD_MODE6_Pos               (12UL)                    /*!< PB PB_MOD: MODE6 (Bit 12)                             */
#define PB_PB_MOD_MODE6_Msk               (0x3000UL)                /*!< PB PB_MOD: MODE6 (Bitfield-Mask: 0x03)                */
#define PB_PB_MOD_MODE5_Pos               (10UL)                    /*!< PB PB_MOD: MODE5 (Bit 10)                             */
#define PB_PB_MOD_MODE5_Msk               (0xc00UL)                 /*!< PB PB_MOD: MODE5 (Bitfield-Mask: 0x03)                */
#define PB_PB_MOD_MODE4_Pos               (8UL)                     /*!< PB PB_MOD: MODE4 (Bit 8)                              */
#define PB_PB_MOD_MODE4_Msk               (0x300UL)                 /*!< PB PB_MOD: MODE4 (Bitfield-Mask: 0x03)                */
#define PB_PB_MOD_MODE3_Pos               (6UL)                     /*!< PB PB_MOD: MODE3 (Bit 6)                              */
#define PB_PB_MOD_MODE3_Msk               (0xc0UL)                  /*!< PB PB_MOD: MODE3 (Bitfield-Mask: 0x03)                */
#define PB_PB_MOD_MODE2_Pos               (4UL)                     /*!< PB PB_MOD: MODE2 (Bit 4)                              */
#define PB_PB_MOD_MODE2_Msk               (0x30UL)                  /*!< PB PB_MOD: MODE2 (Bitfield-Mask: 0x03)                */
#define PB_PB_MOD_MODE1_Pos               (2UL)                     /*!< PB PB_MOD: MODE1 (Bit 2)                              */
#define PB_PB_MOD_MODE1_Msk               (0xcUL)                   /*!< PB PB_MOD: MODE1 (Bitfield-Mask: 0x03)                */
#define PB_PB_MOD_MODE0_Pos               (0UL)                     /*!< PB PB_MOD: MODE0 (Bit 0)                              */
#define PB_PB_MOD_MODE0_Msk               (0x3UL)                   /*!< PB PB_MOD: MODE0 (Bitfield-Mask: 0x03)                */
/* ========================================================  PB_TYP  ========================================================= */
#define PB_PB_TYP_TYP15_Pos               (15UL)                    /*!< PB PB_TYP: TYP15 (Bit 15)                             */
#define PB_PB_TYP_TYP15_Msk               (0x8000UL)                /*!< PB PB_TYP: TYP15 (Bitfield-Mask: 0x01)                */
#define PB_PB_TYP_TYP14_Pos               (14UL)                    /*!< PB PB_TYP: TYP14 (Bit 14)                             */
#define PB_PB_TYP_TYP14_Msk               (0x4000UL)                /*!< PB PB_TYP: TYP14 (Bitfield-Mask: 0x01)                */
#define PB_PB_TYP_TYP13_Pos               (13UL)                    /*!< PB PB_TYP: TYP13 (Bit 13)                             */
#define PB_PB_TYP_TYP13_Msk               (0x2000UL)                /*!< PB PB_TYP: TYP13 (Bitfield-Mask: 0x01)                */
#define PB_PB_TYP_TYP12_Pos               (12UL)                    /*!< PB PB_TYP: TYP12 (Bit 12)                             */
#define PB_PB_TYP_TYP12_Msk               (0x1000UL)                /*!< PB PB_TYP: TYP12 (Bitfield-Mask: 0x01)                */
#define PB_PB_TYP_TYP11_Pos               (11UL)                    /*!< PB PB_TYP: TYP11 (Bit 11)                             */
#define PB_PB_TYP_TYP11_Msk               (0x800UL)                 /*!< PB PB_TYP: TYP11 (Bitfield-Mask: 0x01)                */
#define PB_PB_TYP_TYP10_Pos               (10UL)                    /*!< PB PB_TYP: TYP10 (Bit 10)                             */
#define PB_PB_TYP_TYP10_Msk               (0x400UL)                 /*!< PB PB_TYP: TYP10 (Bitfield-Mask: 0x01)                */
#define PB_PB_TYP_TYP9_Pos                (9UL)                     /*!< PB PB_TYP: TYP9 (Bit 9)                               */
#define PB_PB_TYP_TYP9_Msk                (0x200UL)                 /*!< PB PB_TYP: TYP9 (Bitfield-Mask: 0x01)                 */
#define PB_PB_TYP_TYP8_Pos                (8UL)                     /*!< PB PB_TYP: TYP8 (Bit 8)                               */
#define PB_PB_TYP_TYP8_Msk                (0x100UL)                 /*!< PB PB_TYP: TYP8 (Bitfield-Mask: 0x01)                 */
#define PB_PB_TYP_TYP7_Pos                (7UL)                     /*!< PB PB_TYP: TYP7 (Bit 7)                               */
#define PB_PB_TYP_TYP7_Msk                (0x80UL)                  /*!< PB PB_TYP: TYP7 (Bitfield-Mask: 0x01)                 */
#define PB_PB_TYP_TYP6_Pos                (6UL)                     /*!< PB PB_TYP: TYP6 (Bit 6)                               */
#define PB_PB_TYP_TYP6_Msk                (0x40UL)                  /*!< PB PB_TYP: TYP6 (Bitfield-Mask: 0x01)                 */
#define PB_PB_TYP_TYP5_Pos                (5UL)                     /*!< PB PB_TYP: TYP5 (Bit 5)                               */
#define PB_PB_TYP_TYP5_Msk                (0x20UL)                  /*!< PB PB_TYP: TYP5 (Bitfield-Mask: 0x01)                 */
#define PB_PB_TYP_TYP4_Pos                (4UL)                     /*!< PB PB_TYP: TYP4 (Bit 4)                               */
#define PB_PB_TYP_TYP4_Msk                (0x10UL)                  /*!< PB PB_TYP: TYP4 (Bitfield-Mask: 0x01)                 */
#define PB_PB_TYP_TYP3_Pos                (3UL)                     /*!< PB PB_TYP: TYP3 (Bit 3)                               */
#define PB_PB_TYP_TYP3_Msk                (0x8UL)                   /*!< PB PB_TYP: TYP3 (Bitfield-Mask: 0x01)                 */
#define PB_PB_TYP_TYP2_Pos                (2UL)                     /*!< PB PB_TYP: TYP2 (Bit 2)                               */
#define PB_PB_TYP_TYP2_Msk                (0x4UL)                   /*!< PB PB_TYP: TYP2 (Bitfield-Mask: 0x01)                 */
#define PB_PB_TYP_TYP1_Pos                (1UL)                     /*!< PB PB_TYP: TYP1 (Bit 1)                               */
#define PB_PB_TYP_TYP1_Msk                (0x2UL)                   /*!< PB PB_TYP: TYP1 (Bitfield-Mask: 0x01)                 */
#define PB_PB_TYP_TYP0_Pos                (0UL)                     /*!< PB PB_TYP: TYP0 (Bit 0)                               */
#define PB_PB_TYP_TYP0_Msk                (0x1UL)                   /*!< PB PB_TYP: TYP0 (Bitfield-Mask: 0x01)                 */
/* =======================================================  PB_AFSR1  ======================================================== */
#define PB_PB_AFSR1_AFSR7_Pos             (28UL)                    /*!< PB PB_AFSR1: AFSR7 (Bit 28)                           */
#define PB_PB_AFSR1_AFSR7_Msk             (0xf0000000UL)            /*!< PB PB_AFSR1: AFSR7 (Bitfield-Mask: 0x0f)              */
#define PB_PB_AFSR1_AFSR6_Pos             (24UL)                    /*!< PB PB_AFSR1: AFSR6 (Bit 24)                           */
#define PB_PB_AFSR1_AFSR6_Msk             (0xf000000UL)             /*!< PB PB_AFSR1: AFSR6 (Bitfield-Mask: 0x0f)              */
#define PB_PB_AFSR1_AFSR5_Pos             (20UL)                    /*!< PB PB_AFSR1: AFSR5 (Bit 20)                           */
#define PB_PB_AFSR1_AFSR5_Msk             (0xf00000UL)              /*!< PB PB_AFSR1: AFSR5 (Bitfield-Mask: 0x0f)              */
#define PB_PB_AFSR1_AFSR4_Pos             (16UL)                    /*!< PB PB_AFSR1: AFSR4 (Bit 16)                           */
#define PB_PB_AFSR1_AFSR4_Msk             (0xf0000UL)               /*!< PB PB_AFSR1: AFSR4 (Bitfield-Mask: 0x0f)              */
#define PB_PB_AFSR1_AFSR3_Pos             (12UL)                    /*!< PB PB_AFSR1: AFSR3 (Bit 12)                           */
#define PB_PB_AFSR1_AFSR3_Msk             (0xf000UL)                /*!< PB PB_AFSR1: AFSR3 (Bitfield-Mask: 0x0f)              */
#define PB_PB_AFSR1_AFSR2_Pos             (8UL)                     /*!< PB PB_AFSR1: AFSR2 (Bit 8)                            */
#define PB_PB_AFSR1_AFSR2_Msk             (0xf00UL)                 /*!< PB PB_AFSR1: AFSR2 (Bitfield-Mask: 0x0f)              */
#define PB_PB_AFSR1_AFSR1_Pos             (4UL)                     /*!< PB PB_AFSR1: AFSR1 (Bit 4)                            */
#define PB_PB_AFSR1_AFSR1_Msk             (0xf0UL)                  /*!< PB PB_AFSR1: AFSR1 (Bitfield-Mask: 0x0f)              */
#define PB_PB_AFSR1_AFSR0_Pos             (0UL)                     /*!< PB PB_AFSR1: AFSR0 (Bit 0)                            */
#define PB_PB_AFSR1_AFSR0_Msk             (0xfUL)                   /*!< PB PB_AFSR1: AFSR0 (Bitfield-Mask: 0x0f)              */
/* =======================================================  PB_AFSR2  ======================================================== */
#define PB_PB_AFSR2_AFSR15_Pos            (28UL)                    /*!< PB PB_AFSR2: AFSR15 (Bit 28)                          */
#define PB_PB_AFSR2_AFSR15_Msk            (0xf0000000UL)            /*!< PB PB_AFSR2: AFSR15 (Bitfield-Mask: 0x0f)             */
#define PB_PB_AFSR2_AFSR14_Pos            (24UL)                    /*!< PB PB_AFSR2: AFSR14 (Bit 24)                          */
#define PB_PB_AFSR2_AFSR14_Msk            (0xf000000UL)             /*!< PB PB_AFSR2: AFSR14 (Bitfield-Mask: 0x0f)             */
#define PB_PB_AFSR2_AFSR13_Pos            (20UL)                    /*!< PB PB_AFSR2: AFSR13 (Bit 20)                          */
#define PB_PB_AFSR2_AFSR13_Msk            (0xf00000UL)              /*!< PB PB_AFSR2: AFSR13 (Bitfield-Mask: 0x0f)             */
#define PB_PB_AFSR2_AFSR12_Pos            (16UL)                    /*!< PB PB_AFSR2: AFSR12 (Bit 16)                          */
#define PB_PB_AFSR2_AFSR12_Msk            (0xf0000UL)               /*!< PB PB_AFSR2: AFSR12 (Bitfield-Mask: 0x0f)             */
#define PB_PB_AFSR2_AFSR11_Pos            (12UL)                    /*!< PB PB_AFSR2: AFSR11 (Bit 12)                          */
#define PB_PB_AFSR2_AFSR11_Msk            (0xf000UL)                /*!< PB PB_AFSR2: AFSR11 (Bitfield-Mask: 0x0f)             */
#define PB_PB_AFSR2_AFSR10_Pos            (8UL)                     /*!< PB PB_AFSR2: AFSR10 (Bit 8)                           */
#define PB_PB_AFSR2_AFSR10_Msk            (0xf00UL)                 /*!< PB PB_AFSR2: AFSR10 (Bitfield-Mask: 0x0f)             */
#define PB_PB_AFSR2_AFSR9_Pos             (4UL)                     /*!< PB PB_AFSR2: AFSR9 (Bit 4)                            */
#define PB_PB_AFSR2_AFSR9_Msk             (0xf0UL)                  /*!< PB PB_AFSR2: AFSR9 (Bitfield-Mask: 0x0f)              */
#define PB_PB_AFSR2_AFSR8_Pos             (0UL)                     /*!< PB PB_AFSR2: AFSR8 (Bit 0)                            */
#define PB_PB_AFSR2_AFSR8_Msk             (0xfUL)                   /*!< PB PB_AFSR2: AFSR8 (Bitfield-Mask: 0x0f)              */
/* ========================================================  PB_PUPD  ======================================================== */
#define PB_PB_PUPD_PUPD15_Pos             (30UL)                    /*!< PB PB_PUPD: PUPD15 (Bit 30)                           */
#define PB_PB_PUPD_PUPD15_Msk             (0xc0000000UL)            /*!< PB PB_PUPD: PUPD15 (Bitfield-Mask: 0x03)              */
#define PB_PB_PUPD_PUPD14_Pos             (28UL)                    /*!< PB PB_PUPD: PUPD14 (Bit 28)                           */
#define PB_PB_PUPD_PUPD14_Msk             (0x30000000UL)            /*!< PB PB_PUPD: PUPD14 (Bitfield-Mask: 0x03)              */
#define PB_PB_PUPD_PUPD13_Pos             (26UL)                    /*!< PB PB_PUPD: PUPD13 (Bit 26)                           */
#define PB_PB_PUPD_PUPD13_Msk             (0xc000000UL)             /*!< PB PB_PUPD: PUPD13 (Bitfield-Mask: 0x03)              */
#define PB_PB_PUPD_PUPD12_Pos             (24UL)                    /*!< PB PB_PUPD: PUPD12 (Bit 24)                           */
#define PB_PB_PUPD_PUPD12_Msk             (0x3000000UL)             /*!< PB PB_PUPD: PUPD12 (Bitfield-Mask: 0x03)              */
#define PB_PB_PUPD_PUPD11_Pos             (22UL)                    /*!< PB PB_PUPD: PUPD11 (Bit 22)                           */
#define PB_PB_PUPD_PUPD11_Msk             (0xc00000UL)              /*!< PB PB_PUPD: PUPD11 (Bitfield-Mask: 0x03)              */
#define PB_PB_PUPD_PUPD10_Pos             (20UL)                    /*!< PB PB_PUPD: PUPD10 (Bit 20)                           */
#define PB_PB_PUPD_PUPD10_Msk             (0x300000UL)              /*!< PB PB_PUPD: PUPD10 (Bitfield-Mask: 0x03)              */
#define PB_PB_PUPD_PUPD9_Pos              (18UL)                    /*!< PB PB_PUPD: PUPD9 (Bit 18)                            */
#define PB_PB_PUPD_PUPD9_Msk              (0xc0000UL)               /*!< PB PB_PUPD: PUPD9 (Bitfield-Mask: 0x03)               */
#define PB_PB_PUPD_PUPD8_Pos              (16UL)                    /*!< PB PB_PUPD: PUPD8 (Bit 16)                            */
#define PB_PB_PUPD_PUPD8_Msk              (0x30000UL)               /*!< PB PB_PUPD: PUPD8 (Bitfield-Mask: 0x03)               */
#define PB_PB_PUPD_PUPD7_Pos              (14UL)                    /*!< PB PB_PUPD: PUPD7 (Bit 14)                            */
#define PB_PB_PUPD_PUPD7_Msk              (0xc000UL)                /*!< PB PB_PUPD: PUPD7 (Bitfield-Mask: 0x03)               */
#define PB_PB_PUPD_PUPD6_Pos              (12UL)                    /*!< PB PB_PUPD: PUPD6 (Bit 12)                            */
#define PB_PB_PUPD_PUPD6_Msk              (0x3000UL)                /*!< PB PB_PUPD: PUPD6 (Bitfield-Mask: 0x03)               */
#define PB_PB_PUPD_PUPD5_Pos              (10UL)                    /*!< PB PB_PUPD: PUPD5 (Bit 10)                            */
#define PB_PB_PUPD_PUPD5_Msk              (0xc00UL)                 /*!< PB PB_PUPD: PUPD5 (Bitfield-Mask: 0x03)               */
#define PB_PB_PUPD_PUPD4_Pos              (8UL)                     /*!< PB PB_PUPD: PUPD4 (Bit 8)                             */
#define PB_PB_PUPD_PUPD4_Msk              (0x300UL)                 /*!< PB PB_PUPD: PUPD4 (Bitfield-Mask: 0x03)               */
#define PB_PB_PUPD_PUPD3_Pos              (6UL)                     /*!< PB PB_PUPD: PUPD3 (Bit 6)                             */
#define PB_PB_PUPD_PUPD3_Msk              (0xc0UL)                  /*!< PB PB_PUPD: PUPD3 (Bitfield-Mask: 0x03)               */
#define PB_PB_PUPD_PUPD2_Pos              (4UL)                     /*!< PB PB_PUPD: PUPD2 (Bit 4)                             */
#define PB_PB_PUPD_PUPD2_Msk              (0x30UL)                  /*!< PB PB_PUPD: PUPD2 (Bitfield-Mask: 0x03)               */
#define PB_PB_PUPD_PUPD1_Pos              (2UL)                     /*!< PB PB_PUPD: PUPD1 (Bit 2)                             */
#define PB_PB_PUPD_PUPD1_Msk              (0xcUL)                   /*!< PB PB_PUPD: PUPD1 (Bitfield-Mask: 0x03)               */
#define PB_PB_PUPD_PUPD0_Pos              (0UL)                     /*!< PB PB_PUPD: PUPD0 (Bit 0)                             */
#define PB_PB_PUPD_PUPD0_Msk              (0x3UL)                   /*!< PB PB_PUPD: PUPD0 (Bitfield-Mask: 0x03)               */
/* ========================================================  PB_INDR  ======================================================== */
#define PB_PB_INDR_INDR15_Pos             (15UL)                    /*!< PB PB_INDR: INDR15 (Bit 15)                           */
#define PB_PB_INDR_INDR15_Msk             (0x8000UL)                /*!< PB PB_INDR: INDR15 (Bitfield-Mask: 0x01)              */
#define PB_PB_INDR_INDR14_Pos             (14UL)                    /*!< PB PB_INDR: INDR14 (Bit 14)                           */
#define PB_PB_INDR_INDR14_Msk             (0x4000UL)                /*!< PB PB_INDR: INDR14 (Bitfield-Mask: 0x01)              */
#define PB_PB_INDR_INDR13_Pos             (13UL)                    /*!< PB PB_INDR: INDR13 (Bit 13)                           */
#define PB_PB_INDR_INDR13_Msk             (0x2000UL)                /*!< PB PB_INDR: INDR13 (Bitfield-Mask: 0x01)              */
#define PB_PB_INDR_INDR12_Pos             (12UL)                    /*!< PB PB_INDR: INDR12 (Bit 12)                           */
#define PB_PB_INDR_INDR12_Msk             (0x1000UL)                /*!< PB PB_INDR: INDR12 (Bitfield-Mask: 0x01)              */
#define PB_PB_INDR_INDR11_Pos             (11UL)                    /*!< PB PB_INDR: INDR11 (Bit 11)                           */
#define PB_PB_INDR_INDR11_Msk             (0x800UL)                 /*!< PB PB_INDR: INDR11 (Bitfield-Mask: 0x01)              */
#define PB_PB_INDR_INDR10_Pos             (10UL)                    /*!< PB PB_INDR: INDR10 (Bit 10)                           */
#define PB_PB_INDR_INDR10_Msk             (0x400UL)                 /*!< PB PB_INDR: INDR10 (Bitfield-Mask: 0x01)              */
#define PB_PB_INDR_INDR9_Pos              (9UL)                     /*!< PB PB_INDR: INDR9 (Bit 9)                             */
#define PB_PB_INDR_INDR9_Msk              (0x200UL)                 /*!< PB PB_INDR: INDR9 (Bitfield-Mask: 0x01)               */
#define PB_PB_INDR_INDR8_Pos              (8UL)                     /*!< PB PB_INDR: INDR8 (Bit 8)                             */
#define PB_PB_INDR_INDR8_Msk              (0x100UL)                 /*!< PB PB_INDR: INDR8 (Bitfield-Mask: 0x01)               */
#define PB_PB_INDR_INDR7_Pos              (7UL)                     /*!< PB PB_INDR: INDR7 (Bit 7)                             */
#define PB_PB_INDR_INDR7_Msk              (0x80UL)                  /*!< PB PB_INDR: INDR7 (Bitfield-Mask: 0x01)               */
#define PB_PB_INDR_INDR6_Pos              (6UL)                     /*!< PB PB_INDR: INDR6 (Bit 6)                             */
#define PB_PB_INDR_INDR6_Msk              (0x40UL)                  /*!< PB PB_INDR: INDR6 (Bitfield-Mask: 0x01)               */
#define PB_PB_INDR_INDR5_Pos              (5UL)                     /*!< PB PB_INDR: INDR5 (Bit 5)                             */
#define PB_PB_INDR_INDR5_Msk              (0x20UL)                  /*!< PB PB_INDR: INDR5 (Bitfield-Mask: 0x01)               */
#define PB_PB_INDR_INDR4_Pos              (4UL)                     /*!< PB PB_INDR: INDR4 (Bit 4)                             */
#define PB_PB_INDR_INDR4_Msk              (0x10UL)                  /*!< PB PB_INDR: INDR4 (Bitfield-Mask: 0x01)               */
#define PB_PB_INDR_INDR3_Pos              (3UL)                     /*!< PB PB_INDR: INDR3 (Bit 3)                             */
#define PB_PB_INDR_INDR3_Msk              (0x8UL)                   /*!< PB PB_INDR: INDR3 (Bitfield-Mask: 0x01)               */
#define PB_PB_INDR_INDR2_Pos              (2UL)                     /*!< PB PB_INDR: INDR2 (Bit 2)                             */
#define PB_PB_INDR_INDR2_Msk              (0x4UL)                   /*!< PB PB_INDR: INDR2 (Bitfield-Mask: 0x01)               */
#define PB_PB_INDR_INDR1_Pos              (1UL)                     /*!< PB PB_INDR: INDR1 (Bit 1)                             */
#define PB_PB_INDR_INDR1_Msk              (0x2UL)                   /*!< PB PB_INDR: INDR1 (Bitfield-Mask: 0x01)               */
#define PB_PB_INDR_INDR0_Pos              (0UL)                     /*!< PB PB_INDR: INDR0 (Bit 0)                             */
#define PB_PB_INDR_INDR0_Msk              (0x1UL)                   /*!< PB PB_INDR: INDR0 (Bitfield-Mask: 0x01)               */
/* =======================================================  PB_OUTDR  ======================================================== */
#define PB_PB_OUTDR_OUTDR15_Pos           (15UL)                    /*!< PB PB_OUTDR: OUTDR15 (Bit 15)                         */
#define PB_PB_OUTDR_OUTDR15_Msk           (0x8000UL)                /*!< PB PB_OUTDR: OUTDR15 (Bitfield-Mask: 0x01)            */
#define PB_PB_OUTDR_OUTDR14_Pos           (14UL)                    /*!< PB PB_OUTDR: OUTDR14 (Bit 14)                         */
#define PB_PB_OUTDR_OUTDR14_Msk           (0x4000UL)                /*!< PB PB_OUTDR: OUTDR14 (Bitfield-Mask: 0x01)            */
#define PB_PB_OUTDR_OUTDR13_Pos           (13UL)                    /*!< PB PB_OUTDR: OUTDR13 (Bit 13)                         */
#define PB_PB_OUTDR_OUTDR13_Msk           (0x2000UL)                /*!< PB PB_OUTDR: OUTDR13 (Bitfield-Mask: 0x01)            */
#define PB_PB_OUTDR_OUTDR12_Pos           (12UL)                    /*!< PB PB_OUTDR: OUTDR12 (Bit 12)                         */
#define PB_PB_OUTDR_OUTDR12_Msk           (0x1000UL)                /*!< PB PB_OUTDR: OUTDR12 (Bitfield-Mask: 0x01)            */
#define PB_PB_OUTDR_OUTDR11_Pos           (11UL)                    /*!< PB PB_OUTDR: OUTDR11 (Bit 11)                         */
#define PB_PB_OUTDR_OUTDR11_Msk           (0x800UL)                 /*!< PB PB_OUTDR: OUTDR11 (Bitfield-Mask: 0x01)            */
#define PB_PB_OUTDR_OUTDR10_Pos           (10UL)                    /*!< PB PB_OUTDR: OUTDR10 (Bit 10)                         */
#define PB_PB_OUTDR_OUTDR10_Msk           (0x400UL)                 /*!< PB PB_OUTDR: OUTDR10 (Bitfield-Mask: 0x01)            */
#define PB_PB_OUTDR_OUTDR9_Pos            (9UL)                     /*!< PB PB_OUTDR: OUTDR9 (Bit 9)                           */
#define PB_PB_OUTDR_OUTDR9_Msk            (0x200UL)                 /*!< PB PB_OUTDR: OUTDR9 (Bitfield-Mask: 0x01)             */
#define PB_PB_OUTDR_OUTDR8_Pos            (8UL)                     /*!< PB PB_OUTDR: OUTDR8 (Bit 8)                           */
#define PB_PB_OUTDR_OUTDR8_Msk            (0x100UL)                 /*!< PB PB_OUTDR: OUTDR8 (Bitfield-Mask: 0x01)             */
#define PB_PB_OUTDR_OUTDR7_Pos            (7UL)                     /*!< PB PB_OUTDR: OUTDR7 (Bit 7)                           */
#define PB_PB_OUTDR_OUTDR7_Msk            (0x80UL)                  /*!< PB PB_OUTDR: OUTDR7 (Bitfield-Mask: 0x01)             */
#define PB_PB_OUTDR_OUTDR6_Pos            (6UL)                     /*!< PB PB_OUTDR: OUTDR6 (Bit 6)                           */
#define PB_PB_OUTDR_OUTDR6_Msk            (0x40UL)                  /*!< PB PB_OUTDR: OUTDR6 (Bitfield-Mask: 0x01)             */
#define PB_PB_OUTDR_OUTDR5_Pos            (5UL)                     /*!< PB PB_OUTDR: OUTDR5 (Bit 5)                           */
#define PB_PB_OUTDR_OUTDR5_Msk            (0x20UL)                  /*!< PB PB_OUTDR: OUTDR5 (Bitfield-Mask: 0x01)             */
#define PB_PB_OUTDR_OUTDR4_Pos            (4UL)                     /*!< PB PB_OUTDR: OUTDR4 (Bit 4)                           */
#define PB_PB_OUTDR_OUTDR4_Msk            (0x10UL)                  /*!< PB PB_OUTDR: OUTDR4 (Bitfield-Mask: 0x01)             */
#define PB_PB_OUTDR_OUTDR3_Pos            (3UL)                     /*!< PB PB_OUTDR: OUTDR3 (Bit 3)                           */
#define PB_PB_OUTDR_OUTDR3_Msk            (0x8UL)                   /*!< PB PB_OUTDR: OUTDR3 (Bitfield-Mask: 0x01)             */
#define PB_PB_OUTDR_OUTDR2_Pos            (2UL)                     /*!< PB PB_OUTDR: OUTDR2 (Bit 2)                           */
#define PB_PB_OUTDR_OUTDR2_Msk            (0x4UL)                   /*!< PB PB_OUTDR: OUTDR2 (Bitfield-Mask: 0x01)             */
#define PB_PB_OUTDR_OUTDR1_Pos            (1UL)                     /*!< PB PB_OUTDR: OUTDR1 (Bit 1)                           */
#define PB_PB_OUTDR_OUTDR1_Msk            (0x2UL)                   /*!< PB PB_OUTDR: OUTDR1 (Bitfield-Mask: 0x01)             */
#define PB_PB_OUTDR_OUTDR0_Pos            (0UL)                     /*!< PB PB_OUTDR: OUTDR0 (Bit 0)                           */
#define PB_PB_OUTDR_OUTDR0_Msk            (0x1UL)                   /*!< PB PB_OUTDR: OUTDR0 (Bitfield-Mask: 0x01)             */
/* ========================================================  PB_BSR  ========================================================= */
#define PB_PB_BSR_BSR15_Pos               (15UL)                    /*!< PB PB_BSR: BSR15 (Bit 15)                             */
#define PB_PB_BSR_BSR15_Msk               (0x8000UL)                /*!< PB PB_BSR: BSR15 (Bitfield-Mask: 0x01)                */
#define PB_PB_BSR_BSR14_Pos               (14UL)                    /*!< PB PB_BSR: BSR14 (Bit 14)                             */
#define PB_PB_BSR_BSR14_Msk               (0x4000UL)                /*!< PB PB_BSR: BSR14 (Bitfield-Mask: 0x01)                */
#define PB_PB_BSR_BSR13_Pos               (13UL)                    /*!< PB PB_BSR: BSR13 (Bit 13)                             */
#define PB_PB_BSR_BSR13_Msk               (0x2000UL)                /*!< PB PB_BSR: BSR13 (Bitfield-Mask: 0x01)                */
#define PB_PB_BSR_BSR12_Pos               (12UL)                    /*!< PB PB_BSR: BSR12 (Bit 12)                             */
#define PB_PB_BSR_BSR12_Msk               (0x1000UL)                /*!< PB PB_BSR: BSR12 (Bitfield-Mask: 0x01)                */
#define PB_PB_BSR_BSR11_Pos               (11UL)                    /*!< PB PB_BSR: BSR11 (Bit 11)                             */
#define PB_PB_BSR_BSR11_Msk               (0x800UL)                 /*!< PB PB_BSR: BSR11 (Bitfield-Mask: 0x01)                */
#define PB_PB_BSR_BSR10_Pos               (10UL)                    /*!< PB PB_BSR: BSR10 (Bit 10)                             */
#define PB_PB_BSR_BSR10_Msk               (0x400UL)                 /*!< PB PB_BSR: BSR10 (Bitfield-Mask: 0x01)                */
#define PB_PB_BSR_BSR9_Pos                (9UL)                     /*!< PB PB_BSR: BSR9 (Bit 9)                               */
#define PB_PB_BSR_BSR9_Msk                (0x200UL)                 /*!< PB PB_BSR: BSR9 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BSR_BSR8_Pos                (8UL)                     /*!< PB PB_BSR: BSR8 (Bit 8)                               */
#define PB_PB_BSR_BSR8_Msk                (0x100UL)                 /*!< PB PB_BSR: BSR8 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BSR_BSR7_Pos                (7UL)                     /*!< PB PB_BSR: BSR7 (Bit 7)                               */
#define PB_PB_BSR_BSR7_Msk                (0x80UL)                  /*!< PB PB_BSR: BSR7 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BSR_BSR6_Pos                (6UL)                     /*!< PB PB_BSR: BSR6 (Bit 6)                               */
#define PB_PB_BSR_BSR6_Msk                (0x40UL)                  /*!< PB PB_BSR: BSR6 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BSR_BSR5_Pos                (5UL)                     /*!< PB PB_BSR: BSR5 (Bit 5)                               */
#define PB_PB_BSR_BSR5_Msk                (0x20UL)                  /*!< PB PB_BSR: BSR5 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BSR_BSR4_Pos                (4UL)                     /*!< PB PB_BSR: BSR4 (Bit 4)                               */
#define PB_PB_BSR_BSR4_Msk                (0x10UL)                  /*!< PB PB_BSR: BSR4 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BSR_BSR3_Pos                (3UL)                     /*!< PB PB_BSR: BSR3 (Bit 3)                               */
#define PB_PB_BSR_BSR3_Msk                (0x8UL)                   /*!< PB PB_BSR: BSR3 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BSR_BSR2_Pos                (2UL)                     /*!< PB PB_BSR: BSR2 (Bit 2)                               */
#define PB_PB_BSR_BSR2_Msk                (0x4UL)                   /*!< PB PB_BSR: BSR2 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BSR_BSR1_Pos                (1UL)                     /*!< PB PB_BSR: BSR1 (Bit 1)                               */
#define PB_PB_BSR_BSR1_Msk                (0x2UL)                   /*!< PB PB_BSR: BSR1 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BSR_BSR0_Pos                (0UL)                     /*!< PB PB_BSR: BSR0 (Bit 0)                               */
#define PB_PB_BSR_BSR0_Msk                (0x1UL)                   /*!< PB PB_BSR: BSR0 (Bitfield-Mask: 0x01)                 */
/* ========================================================  PB_BCR  ========================================================= */
#define PB_PB_BCR_BCR15_Pos               (15UL)                    /*!< PB PB_BCR: BCR15 (Bit 15)                             */
#define PB_PB_BCR_BCR15_Msk               (0x8000UL)                /*!< PB PB_BCR: BCR15 (Bitfield-Mask: 0x01)                */
#define PB_PB_BCR_BCR14_Pos               (14UL)                    /*!< PB PB_BCR: BCR14 (Bit 14)                             */
#define PB_PB_BCR_BCR14_Msk               (0x4000UL)                /*!< PB PB_BCR: BCR14 (Bitfield-Mask: 0x01)                */
#define PB_PB_BCR_BCR13_Pos               (13UL)                    /*!< PB PB_BCR: BCR13 (Bit 13)                             */
#define PB_PB_BCR_BCR13_Msk               (0x2000UL)                /*!< PB PB_BCR: BCR13 (Bitfield-Mask: 0x01)                */
#define PB_PB_BCR_BCR12_Pos               (12UL)                    /*!< PB PB_BCR: BCR12 (Bit 12)                             */
#define PB_PB_BCR_BCR12_Msk               (0x1000UL)                /*!< PB PB_BCR: BCR12 (Bitfield-Mask: 0x01)                */
#define PB_PB_BCR_BCR11_Pos               (11UL)                    /*!< PB PB_BCR: BCR11 (Bit 11)                             */
#define PB_PB_BCR_BCR11_Msk               (0x800UL)                 /*!< PB PB_BCR: BCR11 (Bitfield-Mask: 0x01)                */
#define PB_PB_BCR_BCR10_Pos               (10UL)                    /*!< PB PB_BCR: BCR10 (Bit 10)                             */
#define PB_PB_BCR_BCR10_Msk               (0x400UL)                 /*!< PB PB_BCR: BCR10 (Bitfield-Mask: 0x01)                */
#define PB_PB_BCR_BCR9_Pos                (9UL)                     /*!< PB PB_BCR: BCR9 (Bit 9)                               */
#define PB_PB_BCR_BCR9_Msk                (0x200UL)                 /*!< PB PB_BCR: BCR9 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BCR_BCR8_Pos                (8UL)                     /*!< PB PB_BCR: BCR8 (Bit 8)                               */
#define PB_PB_BCR_BCR8_Msk                (0x100UL)                 /*!< PB PB_BCR: BCR8 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BCR_BCR7_Pos                (7UL)                     /*!< PB PB_BCR: BCR7 (Bit 7)                               */
#define PB_PB_BCR_BCR7_Msk                (0x80UL)                  /*!< PB PB_BCR: BCR7 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BCR_BCR6_Pos                (6UL)                     /*!< PB PB_BCR: BCR6 (Bit 6)                               */
#define PB_PB_BCR_BCR6_Msk                (0x40UL)                  /*!< PB PB_BCR: BCR6 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BCR_BCR5_Pos                (5UL)                     /*!< PB PB_BCR: BCR5 (Bit 5)                               */
#define PB_PB_BCR_BCR5_Msk                (0x20UL)                  /*!< PB PB_BCR: BCR5 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BCR_BCR4_Pos                (4UL)                     /*!< PB PB_BCR: BCR4 (Bit 4)                               */
#define PB_PB_BCR_BCR4_Msk                (0x10UL)                  /*!< PB PB_BCR: BCR4 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BCR_BCR3_Pos                (3UL)                     /*!< PB PB_BCR: BCR3 (Bit 3)                               */
#define PB_PB_BCR_BCR3_Msk                (0x8UL)                   /*!< PB PB_BCR: BCR3 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BCR_BCR2_Pos                (2UL)                     /*!< PB PB_BCR: BCR2 (Bit 2)                               */
#define PB_PB_BCR_BCR2_Msk                (0x4UL)                   /*!< PB PB_BCR: BCR2 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BCR_BCR1_Pos                (1UL)                     /*!< PB PB_BCR: BCR1 (Bit 1)                               */
#define PB_PB_BCR_BCR1_Msk                (0x2UL)                   /*!< PB PB_BCR: BCR1 (Bitfield-Mask: 0x01)                 */
#define PB_PB_BCR_BCR0_Pos                (0UL)                     /*!< PB PB_BCR: BCR0 (Bit 0)                               */
#define PB_PB_BCR_BCR0_Msk                (0x1UL)                   /*!< PB PB_BCR: BCR0 (Bitfield-Mask: 0x01)                 */
/* ======================================================  PB_OUTDMSK  ======================================================= */
#define PB_PB_OUTDMSK_OUTDMSK15_Pos       (15UL)                    /*!< PB PB_OUTDMSK: OUTDMSK15 (Bit 15)                     */
#define PB_PB_OUTDMSK_OUTDMSK15_Msk       (0x8000UL)                /*!< PB PB_OUTDMSK: OUTDMSK15 (Bitfield-Mask: 0x01)        */
#define PB_PB_OUTDMSK_OUTDMSK14_Pos       (14UL)                    /*!< PB PB_OUTDMSK: OUTDMSK14 (Bit 14)                     */
#define PB_PB_OUTDMSK_OUTDMSK14_Msk       (0x4000UL)                /*!< PB PB_OUTDMSK: OUTDMSK14 (Bitfield-Mask: 0x01)        */
#define PB_PB_OUTDMSK_OUTDMSK13_Pos       (13UL)                    /*!< PB PB_OUTDMSK: OUTDMSK13 (Bit 13)                     */
#define PB_PB_OUTDMSK_OUTDMSK13_Msk       (0x2000UL)                /*!< PB PB_OUTDMSK: OUTDMSK13 (Bitfield-Mask: 0x01)        */
#define PB_PB_OUTDMSK_OUTDMSK12_Pos       (12UL)                    /*!< PB PB_OUTDMSK: OUTDMSK12 (Bit 12)                     */
#define PB_PB_OUTDMSK_OUTDMSK12_Msk       (0x1000UL)                /*!< PB PB_OUTDMSK: OUTDMSK12 (Bitfield-Mask: 0x01)        */
#define PB_PB_OUTDMSK_OUTDMSK11_Pos       (11UL)                    /*!< PB PB_OUTDMSK: OUTDMSK11 (Bit 11)                     */
#define PB_PB_OUTDMSK_OUTDMSK11_Msk       (0x800UL)                 /*!< PB PB_OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)        */
#define PB_PB_OUTDMSK_OUTDMSK10_Pos       (10UL)                    /*!< PB PB_OUTDMSK: OUTDMSK10 (Bit 10)                     */
#define PB_PB_OUTDMSK_OUTDMSK10_Msk       (0x400UL)                 /*!< PB PB_OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)        */
#define PB_PB_OUTDMSK_OUTDMSK9_Pos        (9UL)                     /*!< PB PB_OUTDMSK: OUTDMSK9 (Bit 9)                       */
#define PB_PB_OUTDMSK_OUTDMSK9_Msk        (0x200UL)                 /*!< PB PB_OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)         */
#define PB_PB_OUTDMSK_OUTDMSK8_Pos        (8UL)                     /*!< PB PB_OUTDMSK: OUTDMSK8 (Bit 8)                       */
#define PB_PB_OUTDMSK_OUTDMSK8_Msk        (0x100UL)                 /*!< PB PB_OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)         */
#define PB_PB_OUTDMSK_OUTDMSK7_Pos        (7UL)                     /*!< PB PB_OUTDMSK: OUTDMSK7 (Bit 7)                       */
#define PB_PB_OUTDMSK_OUTDMSK7_Msk        (0x80UL)                  /*!< PB PB_OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)         */
#define PB_PB_OUTDMSK_OUTDMSK6_Pos        (6UL)                     /*!< PB PB_OUTDMSK: OUTDMSK6 (Bit 6)                       */
#define PB_PB_OUTDMSK_OUTDMSK6_Msk        (0x40UL)                  /*!< PB PB_OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)         */
#define PB_PB_OUTDMSK_OUTDMSK5_Pos        (5UL)                     /*!< PB PB_OUTDMSK: OUTDMSK5 (Bit 5)                       */
#define PB_PB_OUTDMSK_OUTDMSK5_Msk        (0x20UL)                  /*!< PB PB_OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)         */
#define PB_PB_OUTDMSK_OUTDMSK4_Pos        (4UL)                     /*!< PB PB_OUTDMSK: OUTDMSK4 (Bit 4)                       */
#define PB_PB_OUTDMSK_OUTDMSK4_Msk        (0x10UL)                  /*!< PB PB_OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)         */
#define PB_PB_OUTDMSK_OUTDMSK3_Pos        (3UL)                     /*!< PB PB_OUTDMSK: OUTDMSK3 (Bit 3)                       */
#define PB_PB_OUTDMSK_OUTDMSK3_Msk        (0x8UL)                   /*!< PB PB_OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)         */
#define PB_PB_OUTDMSK_OUTDMSK2_Pos        (2UL)                     /*!< PB PB_OUTDMSK: OUTDMSK2 (Bit 2)                       */
#define PB_PB_OUTDMSK_OUTDMSK2_Msk        (0x4UL)                   /*!< PB PB_OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)         */
#define PB_PB_OUTDMSK_OUTDMSK1_Pos        (1UL)                     /*!< PB PB_OUTDMSK: OUTDMSK1 (Bit 1)                       */
#define PB_PB_OUTDMSK_OUTDMSK1_Msk        (0x2UL)                   /*!< PB PB_OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)         */
#define PB_PB_OUTDMSK_OUTDMSK0_Pos        (0UL)                     /*!< PB PB_OUTDMSK: OUTDMSK0 (Bit 0)                       */
#define PB_PB_OUTDMSK_OUTDMSK0_Msk        (0x1UL)                   /*!< PB PB_OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)         */
/* ========================================================  PB_DBCR  ======================================================== */
#define PB_PB_DBCR_DBCLK_Pos              (16UL)                    /*!< PB PB_DBCR: DBCLK (Bit 16)                            */
#define PB_PB_DBCR_DBCLK_Msk              (0x70000UL)               /*!< PB PB_DBCR: DBCLK (Bitfield-Mask: 0x07)               */
#define PB_PB_DBCR_DBEN11_Pos             (11UL)                    /*!< PB PB_DBCR: DBEN11 (Bit 11)                           */
#define PB_PB_DBCR_DBEN11_Msk             (0x800UL)                 /*!< PB PB_DBCR: DBEN11 (Bitfield-Mask: 0x01)              */
#define PB_PB_DBCR_DBEN10_Pos             (10UL)                    /*!< PB PB_DBCR: DBEN10 (Bit 10)                           */
#define PB_PB_DBCR_DBEN10_Msk             (0x400UL)                 /*!< PB PB_DBCR: DBEN10 (Bitfield-Mask: 0x01)              */
#define PB_PB_DBCR_DBEN9_Pos              (9UL)                     /*!< PB PB_DBCR: DBEN9 (Bit 9)                             */
#define PB_PB_DBCR_DBEN9_Msk              (0x200UL)                 /*!< PB PB_DBCR: DBEN9 (Bitfield-Mask: 0x01)               */
#define PB_PB_DBCR_DBEN8_Pos              (8UL)                     /*!< PB PB_DBCR: DBEN8 (Bit 8)                             */
#define PB_PB_DBCR_DBEN8_Msk              (0x100UL)                 /*!< PB PB_DBCR: DBEN8 (Bitfield-Mask: 0x01)               */
#define PB_PB_DBCR_DBEN7_Pos              (7UL)                     /*!< PB PB_DBCR: DBEN7 (Bit 7)                             */
#define PB_PB_DBCR_DBEN7_Msk              (0x80UL)                  /*!< PB PB_DBCR: DBEN7 (Bitfield-Mask: 0x01)               */
#define PB_PB_DBCR_DBEN6_Pos              (6UL)                     /*!< PB PB_DBCR: DBEN6 (Bit 6)                             */
#define PB_PB_DBCR_DBEN6_Msk              (0x40UL)                  /*!< PB PB_DBCR: DBEN6 (Bitfield-Mask: 0x01)               */
#define PB_PB_DBCR_DBEN5_Pos              (5UL)                     /*!< PB PB_DBCR: DBEN5 (Bit 5)                             */
#define PB_PB_DBCR_DBEN5_Msk              (0x20UL)                  /*!< PB PB_DBCR: DBEN5 (Bitfield-Mask: 0x01)               */
#define PB_PB_DBCR_DBEN4_Pos              (4UL)                     /*!< PB PB_DBCR: DBEN4 (Bit 4)                             */
#define PB_PB_DBCR_DBEN4_Msk              (0x10UL)                  /*!< PB PB_DBCR: DBEN4 (Bitfield-Mask: 0x01)               */
#define PB_PB_DBCR_DBEN3_Pos              (3UL)                     /*!< PB PB_DBCR: DBEN3 (Bit 3)                             */
#define PB_PB_DBCR_DBEN3_Msk              (0x8UL)                   /*!< PB PB_DBCR: DBEN3 (Bitfield-Mask: 0x01)               */
#define PB_PB_DBCR_DBEN2_Pos              (2UL)                     /*!< PB PB_DBCR: DBEN2 (Bit 2)                             */
#define PB_PB_DBCR_DBEN2_Msk              (0x4UL)                   /*!< PB PB_DBCR: DBEN2 (Bitfield-Mask: 0x01)               */
#define PB_PB_DBCR_DBEN1_Pos              (1UL)                     /*!< PB PB_DBCR: DBEN1 (Bit 1)                             */
#define PB_PB_DBCR_DBEN1_Msk              (0x2UL)                   /*!< PB PB_DBCR: DBEN1 (Bitfield-Mask: 0x01)               */
#define PB_PB_DBCR_DBEN0_Pos              (0UL)                     /*!< PB PB_DBCR: DBEN0 (Bit 0)                             */
#define PB_PB_DBCR_DBEN0_Msk              (0x1UL)                   /*!< PB PB_DBCR: DBEN0 (Bitfield-Mask: 0x01)               */


/* =========================================================================================================================== */
/* ================                                            PC                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
#define PC_MOD_MODE15_Pos                 (30UL)                    /*!< PC MOD: MODE15 (Bit 30)                               */
#define PC_MOD_MODE15_Msk                 (0xc0000000UL)            /*!< PC MOD: MODE15 (Bitfield-Mask: 0x03)                  */
#define PC_MOD_MODE14_Pos                 (28UL)                    /*!< PC MOD: MODE14 (Bit 28)                               */
#define PC_MOD_MODE14_Msk                 (0x30000000UL)            /*!< PC MOD: MODE14 (Bitfield-Mask: 0x03)                  */
#define PC_MOD_MODE13_Pos                 (26UL)                    /*!< PC MOD: MODE13 (Bit 26)                               */
#define PC_MOD_MODE13_Msk                 (0xc000000UL)             /*!< PC MOD: MODE13 (Bitfield-Mask: 0x03)                  */
#define PC_MOD_MODE12_Pos                 (24UL)                    /*!< PC MOD: MODE12 (Bit 24)                               */
#define PC_MOD_MODE12_Msk                 (0x3000000UL)             /*!< PC MOD: MODE12 (Bitfield-Mask: 0x03)                  */
#define PC_MOD_MODE11_Pos                 (22UL)                    /*!< PC MOD: MODE11 (Bit 22)                               */
#define PC_MOD_MODE11_Msk                 (0xc00000UL)              /*!< PC MOD: MODE11 (Bitfield-Mask: 0x03)                  */
#define PC_MOD_MODE10_Pos                 (20UL)                    /*!< PC MOD: MODE10 (Bit 20)                               */
#define PC_MOD_MODE10_Msk                 (0x300000UL)              /*!< PC MOD: MODE10 (Bitfield-Mask: 0x03)                  */
#define PC_MOD_MODE9_Pos                  (18UL)                    /*!< PC MOD: MODE9 (Bit 18)                                */
#define PC_MOD_MODE9_Msk                  (0xc0000UL)               /*!< PC MOD: MODE9 (Bitfield-Mask: 0x03)                   */
#define PC_MOD_MODE8_Pos                  (16UL)                    /*!< PC MOD: MODE8 (Bit 16)                                */
#define PC_MOD_MODE8_Msk                  (0x30000UL)               /*!< PC MOD: MODE8 (Bitfield-Mask: 0x03)                   */
#define PC_MOD_MODE7_Pos                  (14UL)                    /*!< PC MOD: MODE7 (Bit 14)                                */
#define PC_MOD_MODE7_Msk                  (0xc000UL)                /*!< PC MOD: MODE7 (Bitfield-Mask: 0x03)                   */
#define PC_MOD_MODE6_Pos                  (12UL)                    /*!< PC MOD: MODE6 (Bit 12)                                */
#define PC_MOD_MODE6_Msk                  (0x3000UL)                /*!< PC MOD: MODE6 (Bitfield-Mask: 0x03)                   */
#define PC_MOD_MODE5_Pos                  (10UL)                    /*!< PC MOD: MODE5 (Bit 10)                                */
#define PC_MOD_MODE5_Msk                  (0xc00UL)                 /*!< PC MOD: MODE5 (Bitfield-Mask: 0x03)                   */
#define PC_MOD_MODE4_Pos                  (8UL)                     /*!< PC MOD: MODE4 (Bit 8)                                 */
#define PC_MOD_MODE4_Msk                  (0x300UL)                 /*!< PC MOD: MODE4 (Bitfield-Mask: 0x03)                   */
#define PC_MOD_MODE3_Pos                  (6UL)                     /*!< PC MOD: MODE3 (Bit 6)                                 */
#define PC_MOD_MODE3_Msk                  (0xc0UL)                  /*!< PC MOD: MODE3 (Bitfield-Mask: 0x03)                   */
#define PC_MOD_MODE2_Pos                  (4UL)                     /*!< PC MOD: MODE2 (Bit 4)                                 */
#define PC_MOD_MODE2_Msk                  (0x30UL)                  /*!< PC MOD: MODE2 (Bitfield-Mask: 0x03)                   */
#define PC_MOD_MODE1_Pos                  (2UL)                     /*!< PC MOD: MODE1 (Bit 2)                                 */
#define PC_MOD_MODE1_Msk                  (0xcUL)                   /*!< PC MOD: MODE1 (Bitfield-Mask: 0x03)                   */
#define PC_MOD_MODE0_Pos                  (0UL)                     /*!< PC MOD: MODE0 (Bit 0)                                 */
#define PC_MOD_MODE0_Msk                  (0x3UL)                   /*!< PC MOD: MODE0 (Bitfield-Mask: 0x03)                   */
/* ==========================================================  TYP  ========================================================== */
#define PC_TYP_TYP15_Pos                  (15UL)                    /*!< PC TYP: TYP15 (Bit 15)                                */
#define PC_TYP_TYP15_Msk                  (0x8000UL)                /*!< PC TYP: TYP15 (Bitfield-Mask: 0x01)                   */
#define PC_TYP_TYP14_Pos                  (14UL)                    /*!< PC TYP: TYP14 (Bit 14)                                */
#define PC_TYP_TYP14_Msk                  (0x4000UL)                /*!< PC TYP: TYP14 (Bitfield-Mask: 0x01)                   */
#define PC_TYP_TYP13_Pos                  (13UL)                    /*!< PC TYP: TYP13 (Bit 13)                                */
#define PC_TYP_TYP13_Msk                  (0x2000UL)                /*!< PC TYP: TYP13 (Bitfield-Mask: 0x01)                   */
#define PC_TYP_TYP12_Pos                  (12UL)                    /*!< PC TYP: TYP12 (Bit 12)                                */
#define PC_TYP_TYP12_Msk                  (0x1000UL)                /*!< PC TYP: TYP12 (Bitfield-Mask: 0x01)                   */
#define PC_TYP_TYP11_Pos                  (11UL)                    /*!< PC TYP: TYP11 (Bit 11)                                */
#define PC_TYP_TYP11_Msk                  (0x800UL)                 /*!< PC TYP: TYP11 (Bitfield-Mask: 0x01)                   */
#define PC_TYP_TYP10_Pos                  (10UL)                    /*!< PC TYP: TYP10 (Bit 10)                                */
#define PC_TYP_TYP10_Msk                  (0x400UL)                 /*!< PC TYP: TYP10 (Bitfield-Mask: 0x01)                   */
#define PC_TYP_TYP9_Pos                   (9UL)                     /*!< PC TYP: TYP9 (Bit 9)                                  */
#define PC_TYP_TYP9_Msk                   (0x200UL)                 /*!< PC TYP: TYP9 (Bitfield-Mask: 0x01)                    */
#define PC_TYP_TYP8_Pos                   (8UL)                     /*!< PC TYP: TYP8 (Bit 8)                                  */
#define PC_TYP_TYP8_Msk                   (0x100UL)                 /*!< PC TYP: TYP8 (Bitfield-Mask: 0x01)                    */
#define PC_TYP_TYP7_Pos                   (7UL)                     /*!< PC TYP: TYP7 (Bit 7)                                  */
#define PC_TYP_TYP7_Msk                   (0x80UL)                  /*!< PC TYP: TYP7 (Bitfield-Mask: 0x01)                    */
#define PC_TYP_TYP6_Pos                   (6UL)                     /*!< PC TYP: TYP6 (Bit 6)                                  */
#define PC_TYP_TYP6_Msk                   (0x40UL)                  /*!< PC TYP: TYP6 (Bitfield-Mask: 0x01)                    */
#define PC_TYP_TYP5_Pos                   (5UL)                     /*!< PC TYP: TYP5 (Bit 5)                                  */
#define PC_TYP_TYP5_Msk                   (0x20UL)                  /*!< PC TYP: TYP5 (Bitfield-Mask: 0x01)                    */
#define PC_TYP_TYP4_Pos                   (4UL)                     /*!< PC TYP: TYP4 (Bit 4)                                  */
#define PC_TYP_TYP4_Msk                   (0x10UL)                  /*!< PC TYP: TYP4 (Bitfield-Mask: 0x01)                    */
#define PC_TYP_TYP3_Pos                   (3UL)                     /*!< PC TYP: TYP3 (Bit 3)                                  */
#define PC_TYP_TYP3_Msk                   (0x8UL)                   /*!< PC TYP: TYP3 (Bitfield-Mask: 0x01)                    */
#define PC_TYP_TYP2_Pos                   (2UL)                     /*!< PC TYP: TYP2 (Bit 2)                                  */
#define PC_TYP_TYP2_Msk                   (0x4UL)                   /*!< PC TYP: TYP2 (Bitfield-Mask: 0x01)                    */
#define PC_TYP_TYP1_Pos                   (1UL)                     /*!< PC TYP: TYP1 (Bit 1)                                  */
#define PC_TYP_TYP1_Msk                   (0x2UL)                   /*!< PC TYP: TYP1 (Bitfield-Mask: 0x01)                    */
#define PC_TYP_TYP0_Pos                   (0UL)                     /*!< PC TYP: TYP0 (Bit 0)                                  */
#define PC_TYP_TYP0_Msk                   (0x1UL)                   /*!< PC TYP: TYP0 (Bitfield-Mask: 0x01)                    */
/* =========================================================  AFSR1  ========================================================= */
#define PC_AFSR1_AFSR7_Pos                (28UL)                    /*!< PC AFSR1: AFSR7 (Bit 28)                              */
#define PC_AFSR1_AFSR7_Msk                (0xf0000000UL)            /*!< PC AFSR1: AFSR7 (Bitfield-Mask: 0x0f)                 */
#define PC_AFSR1_AFSR6_Pos                (24UL)                    /*!< PC AFSR1: AFSR6 (Bit 24)                              */
#define PC_AFSR1_AFSR6_Msk                (0xf000000UL)             /*!< PC AFSR1: AFSR6 (Bitfield-Mask: 0x0f)                 */
#define PC_AFSR1_AFSR5_Pos                (20UL)                    /*!< PC AFSR1: AFSR5 (Bit 20)                              */
#define PC_AFSR1_AFSR5_Msk                (0xf00000UL)              /*!< PC AFSR1: AFSR5 (Bitfield-Mask: 0x0f)                 */
#define PC_AFSR1_AFSR4_Pos                (16UL)                    /*!< PC AFSR1: AFSR4 (Bit 16)                              */
#define PC_AFSR1_AFSR4_Msk                (0xf0000UL)               /*!< PC AFSR1: AFSR4 (Bitfield-Mask: 0x0f)                 */
#define PC_AFSR1_AFSR3_Pos                (12UL)                    /*!< PC AFSR1: AFSR3 (Bit 12)                              */
#define PC_AFSR1_AFSR3_Msk                (0xf000UL)                /*!< PC AFSR1: AFSR3 (Bitfield-Mask: 0x0f)                 */
#define PC_AFSR1_AFSR2_Pos                (8UL)                     /*!< PC AFSR1: AFSR2 (Bit 8)                               */
#define PC_AFSR1_AFSR2_Msk                (0xf00UL)                 /*!< PC AFSR1: AFSR2 (Bitfield-Mask: 0x0f)                 */
#define PC_AFSR1_AFSR1_Pos                (4UL)                     /*!< PC AFSR1: AFSR1 (Bit 4)                               */
#define PC_AFSR1_AFSR1_Msk                (0xf0UL)                  /*!< PC AFSR1: AFSR1 (Bitfield-Mask: 0x0f)                 */
#define PC_AFSR1_AFSR0_Pos                (0UL)                     /*!< PC AFSR1: AFSR0 (Bit 0)                               */
#define PC_AFSR1_AFSR0_Msk                (0xfUL)                   /*!< PC AFSR1: AFSR0 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  AFSR2  ========================================================= */
#define PC_AFSR2_AFSR15_Pos               (28UL)                    /*!< PC AFSR2: AFSR15 (Bit 28)                             */
#define PC_AFSR2_AFSR15_Msk               (0xf0000000UL)            /*!< PC AFSR2: AFSR15 (Bitfield-Mask: 0x0f)                */
#define PC_AFSR2_AFSR14_Pos               (24UL)                    /*!< PC AFSR2: AFSR14 (Bit 24)                             */
#define PC_AFSR2_AFSR14_Msk               (0xf000000UL)             /*!< PC AFSR2: AFSR14 (Bitfield-Mask: 0x0f)                */
#define PC_AFSR2_AFSR13_Pos               (20UL)                    /*!< PC AFSR2: AFSR13 (Bit 20)                             */
#define PC_AFSR2_AFSR13_Msk               (0xf00000UL)              /*!< PC AFSR2: AFSR13 (Bitfield-Mask: 0x0f)                */
#define PC_AFSR2_AFSR12_Pos               (16UL)                    /*!< PC AFSR2: AFSR12 (Bit 16)                             */
#define PC_AFSR2_AFSR12_Msk               (0xf0000UL)               /*!< PC AFSR2: AFSR12 (Bitfield-Mask: 0x0f)                */
#define PC_AFSR2_AFSR11_Pos               (12UL)                    /*!< PC AFSR2: AFSR11 (Bit 12)                             */
#define PC_AFSR2_AFSR11_Msk               (0xf000UL)                /*!< PC AFSR2: AFSR11 (Bitfield-Mask: 0x0f)                */
#define PC_AFSR2_AFSR10_Pos               (8UL)                     /*!< PC AFSR2: AFSR10 (Bit 8)                              */
#define PC_AFSR2_AFSR10_Msk               (0xf00UL)                 /*!< PC AFSR2: AFSR10 (Bitfield-Mask: 0x0f)                */
#define PC_AFSR2_AFSR9_Pos                (4UL)                     /*!< PC AFSR2: AFSR9 (Bit 4)                               */
#define PC_AFSR2_AFSR9_Msk                (0xf0UL)                  /*!< PC AFSR2: AFSR9 (Bitfield-Mask: 0x0f)                 */
#define PC_AFSR2_AFSR8_Pos                (0UL)                     /*!< PC AFSR2: AFSR8 (Bit 0)                               */
#define PC_AFSR2_AFSR8_Msk                (0xfUL)                   /*!< PC AFSR2: AFSR8 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  PUPD  ========================================================== */
#define PC_PUPD_PUPD15_Pos                (30UL)                    /*!< PC PUPD: PUPD15 (Bit 30)                              */
#define PC_PUPD_PUPD15_Msk                (0xc0000000UL)            /*!< PC PUPD: PUPD15 (Bitfield-Mask: 0x03)                 */
#define PC_PUPD_PUPD14_Pos                (28UL)                    /*!< PC PUPD: PUPD14 (Bit 28)                              */
#define PC_PUPD_PUPD14_Msk                (0x30000000UL)            /*!< PC PUPD: PUPD14 (Bitfield-Mask: 0x03)                 */
#define PC_PUPD_PUPD13_Pos                (26UL)                    /*!< PC PUPD: PUPD13 (Bit 26)                              */
#define PC_PUPD_PUPD13_Msk                (0xc000000UL)             /*!< PC PUPD: PUPD13 (Bitfield-Mask: 0x03)                 */
#define PC_PUPD_PUPD12_Pos                (24UL)                    /*!< PC PUPD: PUPD12 (Bit 24)                              */
#define PC_PUPD_PUPD12_Msk                (0x3000000UL)             /*!< PC PUPD: PUPD12 (Bitfield-Mask: 0x03)                 */
#define PC_PUPD_PUPD11_Pos                (22UL)                    /*!< PC PUPD: PUPD11 (Bit 22)                              */
#define PC_PUPD_PUPD11_Msk                (0xc00000UL)              /*!< PC PUPD: PUPD11 (Bitfield-Mask: 0x03)                 */
#define PC_PUPD_PUPD10_Pos                (20UL)                    /*!< PC PUPD: PUPD10 (Bit 20)                              */
#define PC_PUPD_PUPD10_Msk                (0x300000UL)              /*!< PC PUPD: PUPD10 (Bitfield-Mask: 0x03)                 */
#define PC_PUPD_PUPD9_Pos                 (18UL)                    /*!< PC PUPD: PUPD9 (Bit 18)                               */
#define PC_PUPD_PUPD9_Msk                 (0xc0000UL)               /*!< PC PUPD: PUPD9 (Bitfield-Mask: 0x03)                  */
#define PC_PUPD_PUPD8_Pos                 (16UL)                    /*!< PC PUPD: PUPD8 (Bit 16)                               */
#define PC_PUPD_PUPD8_Msk                 (0x30000UL)               /*!< PC PUPD: PUPD8 (Bitfield-Mask: 0x03)                  */
#define PC_PUPD_PUPD7_Pos                 (14UL)                    /*!< PC PUPD: PUPD7 (Bit 14)                               */
#define PC_PUPD_PUPD7_Msk                 (0xc000UL)                /*!< PC PUPD: PUPD7 (Bitfield-Mask: 0x03)                  */
#define PC_PUPD_PUPD6_Pos                 (12UL)                    /*!< PC PUPD: PUPD6 (Bit 12)                               */
#define PC_PUPD_PUPD6_Msk                 (0x3000UL)                /*!< PC PUPD: PUPD6 (Bitfield-Mask: 0x03)                  */
#define PC_PUPD_PUPD5_Pos                 (10UL)                    /*!< PC PUPD: PUPD5 (Bit 10)                               */
#define PC_PUPD_PUPD5_Msk                 (0xc00UL)                 /*!< PC PUPD: PUPD5 (Bitfield-Mask: 0x03)                  */
#define PC_PUPD_PUPD4_Pos                 (8UL)                     /*!< PC PUPD: PUPD4 (Bit 8)                                */
#define PC_PUPD_PUPD4_Msk                 (0x300UL)                 /*!< PC PUPD: PUPD4 (Bitfield-Mask: 0x03)                  */
#define PC_PUPD_PUPD3_Pos                 (6UL)                     /*!< PC PUPD: PUPD3 (Bit 6)                                */
#define PC_PUPD_PUPD3_Msk                 (0xc0UL)                  /*!< PC PUPD: PUPD3 (Bitfield-Mask: 0x03)                  */
#define PC_PUPD_PUPD2_Pos                 (4UL)                     /*!< PC PUPD: PUPD2 (Bit 4)                                */
#define PC_PUPD_PUPD2_Msk                 (0x30UL)                  /*!< PC PUPD: PUPD2 (Bitfield-Mask: 0x03)                  */
#define PC_PUPD_PUPD1_Pos                 (2UL)                     /*!< PC PUPD: PUPD1 (Bit 2)                                */
#define PC_PUPD_PUPD1_Msk                 (0xcUL)                   /*!< PC PUPD: PUPD1 (Bitfield-Mask: 0x03)                  */
#define PC_PUPD_PUPD0_Pos                 (0UL)                     /*!< PC PUPD: PUPD0 (Bit 0)                                */
#define PC_PUPD_PUPD0_Msk                 (0x3UL)                   /*!< PC PUPD: PUPD0 (Bitfield-Mask: 0x03)                  */
/* =========================================================  INDR  ========================================================== */
#define PC_INDR_INDR15_Pos                (15UL)                    /*!< PC INDR: INDR15 (Bit 15)                              */
#define PC_INDR_INDR15_Msk                (0x8000UL)                /*!< PC INDR: INDR15 (Bitfield-Mask: 0x01)                 */
#define PC_INDR_INDR14_Pos                (14UL)                    /*!< PC INDR: INDR14 (Bit 14)                              */
#define PC_INDR_INDR14_Msk                (0x4000UL)                /*!< PC INDR: INDR14 (Bitfield-Mask: 0x01)                 */
#define PC_INDR_INDR13_Pos                (13UL)                    /*!< PC INDR: INDR13 (Bit 13)                              */
#define PC_INDR_INDR13_Msk                (0x2000UL)                /*!< PC INDR: INDR13 (Bitfield-Mask: 0x01)                 */
#define PC_INDR_INDR12_Pos                (12UL)                    /*!< PC INDR: INDR12 (Bit 12)                              */
#define PC_INDR_INDR12_Msk                (0x1000UL)                /*!< PC INDR: INDR12 (Bitfield-Mask: 0x01)                 */
#define PC_INDR_INDR11_Pos                (11UL)                    /*!< PC INDR: INDR11 (Bit 11)                              */
#define PC_INDR_INDR11_Msk                (0x800UL)                 /*!< PC INDR: INDR11 (Bitfield-Mask: 0x01)                 */
#define PC_INDR_INDR10_Pos                (10UL)                    /*!< PC INDR: INDR10 (Bit 10)                              */
#define PC_INDR_INDR10_Msk                (0x400UL)                 /*!< PC INDR: INDR10 (Bitfield-Mask: 0x01)                 */
#define PC_INDR_INDR9_Pos                 (9UL)                     /*!< PC INDR: INDR9 (Bit 9)                                */
#define PC_INDR_INDR9_Msk                 (0x200UL)                 /*!< PC INDR: INDR9 (Bitfield-Mask: 0x01)                  */
#define PC_INDR_INDR8_Pos                 (8UL)                     /*!< PC INDR: INDR8 (Bit 8)                                */
#define PC_INDR_INDR8_Msk                 (0x100UL)                 /*!< PC INDR: INDR8 (Bitfield-Mask: 0x01)                  */
#define PC_INDR_INDR7_Pos                 (7UL)                     /*!< PC INDR: INDR7 (Bit 7)                                */
#define PC_INDR_INDR7_Msk                 (0x80UL)                  /*!< PC INDR: INDR7 (Bitfield-Mask: 0x01)                  */
#define PC_INDR_INDR6_Pos                 (6UL)                     /*!< PC INDR: INDR6 (Bit 6)                                */
#define PC_INDR_INDR6_Msk                 (0x40UL)                  /*!< PC INDR: INDR6 (Bitfield-Mask: 0x01)                  */
#define PC_INDR_INDR5_Pos                 (5UL)                     /*!< PC INDR: INDR5 (Bit 5)                                */
#define PC_INDR_INDR5_Msk                 (0x20UL)                  /*!< PC INDR: INDR5 (Bitfield-Mask: 0x01)                  */
#define PC_INDR_INDR4_Pos                 (4UL)                     /*!< PC INDR: INDR4 (Bit 4)                                */
#define PC_INDR_INDR4_Msk                 (0x10UL)                  /*!< PC INDR: INDR4 (Bitfield-Mask: 0x01)                  */
#define PC_INDR_INDR3_Pos                 (3UL)                     /*!< PC INDR: INDR3 (Bit 3)                                */
#define PC_INDR_INDR3_Msk                 (0x8UL)                   /*!< PC INDR: INDR3 (Bitfield-Mask: 0x01)                  */
#define PC_INDR_INDR2_Pos                 (2UL)                     /*!< PC INDR: INDR2 (Bit 2)                                */
#define PC_INDR_INDR2_Msk                 (0x4UL)                   /*!< PC INDR: INDR2 (Bitfield-Mask: 0x01)                  */
#define PC_INDR_INDR1_Pos                 (1UL)                     /*!< PC INDR: INDR1 (Bit 1)                                */
#define PC_INDR_INDR1_Msk                 (0x2UL)                   /*!< PC INDR: INDR1 (Bitfield-Mask: 0x01)                  */
#define PC_INDR_INDR0_Pos                 (0UL)                     /*!< PC INDR: INDR0 (Bit 0)                                */
#define PC_INDR_INDR0_Msk                 (0x1UL)                   /*!< PC INDR: INDR0 (Bitfield-Mask: 0x01)                  */
/* =========================================================  OUTDR  ========================================================= */
#define PC_OUTDR_OUTDR15_Pos              (15UL)                    /*!< PC OUTDR: OUTDR15 (Bit 15)                            */
#define PC_OUTDR_OUTDR15_Msk              (0x8000UL)                /*!< PC OUTDR: OUTDR15 (Bitfield-Mask: 0x01)               */
#define PC_OUTDR_OUTDR14_Pos              (14UL)                    /*!< PC OUTDR: OUTDR14 (Bit 14)                            */
#define PC_OUTDR_OUTDR14_Msk              (0x4000UL)                /*!< PC OUTDR: OUTDR14 (Bitfield-Mask: 0x01)               */
#define PC_OUTDR_OUTDR13_Pos              (13UL)                    /*!< PC OUTDR: OUTDR13 (Bit 13)                            */
#define PC_OUTDR_OUTDR13_Msk              (0x2000UL)                /*!< PC OUTDR: OUTDR13 (Bitfield-Mask: 0x01)               */
#define PC_OUTDR_OUTDR12_Pos              (12UL)                    /*!< PC OUTDR: OUTDR12 (Bit 12)                            */
#define PC_OUTDR_OUTDR12_Msk              (0x1000UL)                /*!< PC OUTDR: OUTDR12 (Bitfield-Mask: 0x01)               */
#define PC_OUTDR_OUTDR11_Pos              (11UL)                    /*!< PC OUTDR: OUTDR11 (Bit 11)                            */
#define PC_OUTDR_OUTDR11_Msk              (0x800UL)                 /*!< PC OUTDR: OUTDR11 (Bitfield-Mask: 0x01)               */
#define PC_OUTDR_OUTDR10_Pos              (10UL)                    /*!< PC OUTDR: OUTDR10 (Bit 10)                            */
#define PC_OUTDR_OUTDR10_Msk              (0x400UL)                 /*!< PC OUTDR: OUTDR10 (Bitfield-Mask: 0x01)               */
#define PC_OUTDR_OUTDR9_Pos               (9UL)                     /*!< PC OUTDR: OUTDR9 (Bit 9)                              */
#define PC_OUTDR_OUTDR9_Msk               (0x200UL)                 /*!< PC OUTDR: OUTDR9 (Bitfield-Mask: 0x01)                */
#define PC_OUTDR_OUTDR8_Pos               (8UL)                     /*!< PC OUTDR: OUTDR8 (Bit 8)                              */
#define PC_OUTDR_OUTDR8_Msk               (0x100UL)                 /*!< PC OUTDR: OUTDR8 (Bitfield-Mask: 0x01)                */
#define PC_OUTDR_OUTDR7_Pos               (7UL)                     /*!< PC OUTDR: OUTDR7 (Bit 7)                              */
#define PC_OUTDR_OUTDR7_Msk               (0x80UL)                  /*!< PC OUTDR: OUTDR7 (Bitfield-Mask: 0x01)                */
#define PC_OUTDR_OUTDR6_Pos               (6UL)                     /*!< PC OUTDR: OUTDR6 (Bit 6)                              */
#define PC_OUTDR_OUTDR6_Msk               (0x40UL)                  /*!< PC OUTDR: OUTDR6 (Bitfield-Mask: 0x01)                */
#define PC_OUTDR_OUTDR5_Pos               (5UL)                     /*!< PC OUTDR: OUTDR5 (Bit 5)                              */
#define PC_OUTDR_OUTDR5_Msk               (0x20UL)                  /*!< PC OUTDR: OUTDR5 (Bitfield-Mask: 0x01)                */
#define PC_OUTDR_OUTDR4_Pos               (4UL)                     /*!< PC OUTDR: OUTDR4 (Bit 4)                              */
#define PC_OUTDR_OUTDR4_Msk               (0x10UL)                  /*!< PC OUTDR: OUTDR4 (Bitfield-Mask: 0x01)                */
#define PC_OUTDR_OUTDR3_Pos               (3UL)                     /*!< PC OUTDR: OUTDR3 (Bit 3)                              */
#define PC_OUTDR_OUTDR3_Msk               (0x8UL)                   /*!< PC OUTDR: OUTDR3 (Bitfield-Mask: 0x01)                */
#define PC_OUTDR_OUTDR2_Pos               (2UL)                     /*!< PC OUTDR: OUTDR2 (Bit 2)                              */
#define PC_OUTDR_OUTDR2_Msk               (0x4UL)                   /*!< PC OUTDR: OUTDR2 (Bitfield-Mask: 0x01)                */
#define PC_OUTDR_OUTDR1_Pos               (1UL)                     /*!< PC OUTDR: OUTDR1 (Bit 1)                              */
#define PC_OUTDR_OUTDR1_Msk               (0x2UL)                   /*!< PC OUTDR: OUTDR1 (Bitfield-Mask: 0x01)                */
#define PC_OUTDR_OUTDR0_Pos               (0UL)                     /*!< PC OUTDR: OUTDR0 (Bit 0)                              */
#define PC_OUTDR_OUTDR0_Msk               (0x1UL)                   /*!< PC OUTDR: OUTDR0 (Bitfield-Mask: 0x01)                */
/* ==========================================================  BSR  ========================================================== */
#define PC_BSR_BSR15_Pos                  (15UL)                    /*!< PC BSR: BSR15 (Bit 15)                                */
#define PC_BSR_BSR15_Msk                  (0x8000UL)                /*!< PC BSR: BSR15 (Bitfield-Mask: 0x01)                   */
#define PC_BSR_BSR14_Pos                  (14UL)                    /*!< PC BSR: BSR14 (Bit 14)                                */
#define PC_BSR_BSR14_Msk                  (0x4000UL)                /*!< PC BSR: BSR14 (Bitfield-Mask: 0x01)                   */
#define PC_BSR_BSR13_Pos                  (13UL)                    /*!< PC BSR: BSR13 (Bit 13)                                */
#define PC_BSR_BSR13_Msk                  (0x2000UL)                /*!< PC BSR: BSR13 (Bitfield-Mask: 0x01)                   */
#define PC_BSR_BSR12_Pos                  (12UL)                    /*!< PC BSR: BSR12 (Bit 12)                                */
#define PC_BSR_BSR12_Msk                  (0x1000UL)                /*!< PC BSR: BSR12 (Bitfield-Mask: 0x01)                   */
#define PC_BSR_BSR11_Pos                  (11UL)                    /*!< PC BSR: BSR11 (Bit 11)                                */
#define PC_BSR_BSR11_Msk                  (0x800UL)                 /*!< PC BSR: BSR11 (Bitfield-Mask: 0x01)                   */
#define PC_BSR_BSR10_Pos                  (10UL)                    /*!< PC BSR: BSR10 (Bit 10)                                */
#define PC_BSR_BSR10_Msk                  (0x400UL)                 /*!< PC BSR: BSR10 (Bitfield-Mask: 0x01)                   */
#define PC_BSR_BSR9_Pos                   (9UL)                     /*!< PC BSR: BSR9 (Bit 9)                                  */
#define PC_BSR_BSR9_Msk                   (0x200UL)                 /*!< PC BSR: BSR9 (Bitfield-Mask: 0x01)                    */
#define PC_BSR_BSR8_Pos                   (8UL)                     /*!< PC BSR: BSR8 (Bit 8)                                  */
#define PC_BSR_BSR8_Msk                   (0x100UL)                 /*!< PC BSR: BSR8 (Bitfield-Mask: 0x01)                    */
#define PC_BSR_BSR7_Pos                   (7UL)                     /*!< PC BSR: BSR7 (Bit 7)                                  */
#define PC_BSR_BSR7_Msk                   (0x80UL)                  /*!< PC BSR: BSR7 (Bitfield-Mask: 0x01)                    */
#define PC_BSR_BSR6_Pos                   (6UL)                     /*!< PC BSR: BSR6 (Bit 6)                                  */
#define PC_BSR_BSR6_Msk                   (0x40UL)                  /*!< PC BSR: BSR6 (Bitfield-Mask: 0x01)                    */
#define PC_BSR_BSR5_Pos                   (5UL)                     /*!< PC BSR: BSR5 (Bit 5)                                  */
#define PC_BSR_BSR5_Msk                   (0x20UL)                  /*!< PC BSR: BSR5 (Bitfield-Mask: 0x01)                    */
#define PC_BSR_BSR4_Pos                   (4UL)                     /*!< PC BSR: BSR4 (Bit 4)                                  */
#define PC_BSR_BSR4_Msk                   (0x10UL)                  /*!< PC BSR: BSR4 (Bitfield-Mask: 0x01)                    */
#define PC_BSR_BSR3_Pos                   (3UL)                     /*!< PC BSR: BSR3 (Bit 3)                                  */
#define PC_BSR_BSR3_Msk                   (0x8UL)                   /*!< PC BSR: BSR3 (Bitfield-Mask: 0x01)                    */
#define PC_BSR_BSR2_Pos                   (2UL)                     /*!< PC BSR: BSR2 (Bit 2)                                  */
#define PC_BSR_BSR2_Msk                   (0x4UL)                   /*!< PC BSR: BSR2 (Bitfield-Mask: 0x01)                    */
#define PC_BSR_BSR1_Pos                   (1UL)                     /*!< PC BSR: BSR1 (Bit 1)                                  */
#define PC_BSR_BSR1_Msk                   (0x2UL)                   /*!< PC BSR: BSR1 (Bitfield-Mask: 0x01)                    */
#define PC_BSR_BSR0_Pos                   (0UL)                     /*!< PC BSR: BSR0 (Bit 0)                                  */
#define PC_BSR_BSR0_Msk                   (0x1UL)                   /*!< PC BSR: BSR0 (Bitfield-Mask: 0x01)                    */
/* ==========================================================  BCR  ========================================================== */
#define PC_BCR_BCR15_Pos                  (15UL)                    /*!< PC BCR: BCR15 (Bit 15)                                */
#define PC_BCR_BCR15_Msk                  (0x8000UL)                /*!< PC BCR: BCR15 (Bitfield-Mask: 0x01)                   */
#define PC_BCR_BCR14_Pos                  (14UL)                    /*!< PC BCR: BCR14 (Bit 14)                                */
#define PC_BCR_BCR14_Msk                  (0x4000UL)                /*!< PC BCR: BCR14 (Bitfield-Mask: 0x01)                   */
#define PC_BCR_BCR13_Pos                  (13UL)                    /*!< PC BCR: BCR13 (Bit 13)                                */
#define PC_BCR_BCR13_Msk                  (0x2000UL)                /*!< PC BCR: BCR13 (Bitfield-Mask: 0x01)                   */
#define PC_BCR_BCR12_Pos                  (12UL)                    /*!< PC BCR: BCR12 (Bit 12)                                */
#define PC_BCR_BCR12_Msk                  (0x1000UL)                /*!< PC BCR: BCR12 (Bitfield-Mask: 0x01)                   */
#define PC_BCR_BCR11_Pos                  (11UL)                    /*!< PC BCR: BCR11 (Bit 11)                                */
#define PC_BCR_BCR11_Msk                  (0x800UL)                 /*!< PC BCR: BCR11 (Bitfield-Mask: 0x01)                   */
#define PC_BCR_BCR10_Pos                  (10UL)                    /*!< PC BCR: BCR10 (Bit 10)                                */
#define PC_BCR_BCR10_Msk                  (0x400UL)                 /*!< PC BCR: BCR10 (Bitfield-Mask: 0x01)                   */
#define PC_BCR_BCR9_Pos                   (9UL)                     /*!< PC BCR: BCR9 (Bit 9)                                  */
#define PC_BCR_BCR9_Msk                   (0x200UL)                 /*!< PC BCR: BCR9 (Bitfield-Mask: 0x01)                    */
#define PC_BCR_BCR8_Pos                   (8UL)                     /*!< PC BCR: BCR8 (Bit 8)                                  */
#define PC_BCR_BCR8_Msk                   (0x100UL)                 /*!< PC BCR: BCR8 (Bitfield-Mask: 0x01)                    */
#define PC_BCR_BCR7_Pos                   (7UL)                     /*!< PC BCR: BCR7 (Bit 7)                                  */
#define PC_BCR_BCR7_Msk                   (0x80UL)                  /*!< PC BCR: BCR7 (Bitfield-Mask: 0x01)                    */
#define PC_BCR_BCR6_Pos                   (6UL)                     /*!< PC BCR: BCR6 (Bit 6)                                  */
#define PC_BCR_BCR6_Msk                   (0x40UL)                  /*!< PC BCR: BCR6 (Bitfield-Mask: 0x01)                    */
#define PC_BCR_BCR5_Pos                   (5UL)                     /*!< PC BCR: BCR5 (Bit 5)                                  */
#define PC_BCR_BCR5_Msk                   (0x20UL)                  /*!< PC BCR: BCR5 (Bitfield-Mask: 0x01)                    */
#define PC_BCR_BCR4_Pos                   (4UL)                     /*!< PC BCR: BCR4 (Bit 4)                                  */
#define PC_BCR_BCR4_Msk                   (0x10UL)                  /*!< PC BCR: BCR4 (Bitfield-Mask: 0x01)                    */
#define PC_BCR_BCR3_Pos                   (3UL)                     /*!< PC BCR: BCR3 (Bit 3)                                  */
#define PC_BCR_BCR3_Msk                   (0x8UL)                   /*!< PC BCR: BCR3 (Bitfield-Mask: 0x01)                    */
#define PC_BCR_BCR2_Pos                   (2UL)                     /*!< PC BCR: BCR2 (Bit 2)                                  */
#define PC_BCR_BCR2_Msk                   (0x4UL)                   /*!< PC BCR: BCR2 (Bitfield-Mask: 0x01)                    */
#define PC_BCR_BCR1_Pos                   (1UL)                     /*!< PC BCR: BCR1 (Bit 1)                                  */
#define PC_BCR_BCR1_Msk                   (0x2UL)                   /*!< PC BCR: BCR1 (Bitfield-Mask: 0x01)                    */
#define PC_BCR_BCR0_Pos                   (0UL)                     /*!< PC BCR: BCR0 (Bit 0)                                  */
#define PC_BCR_BCR0_Msk                   (0x1UL)                   /*!< PC BCR: BCR0 (Bitfield-Mask: 0x01)                    */
/* ========================================================  OUTDMSK  ======================================================== */
#define PC_OUTDMSK_OUTDMSK15_Pos          (15UL)                    /*!< PC OUTDMSK: OUTDMSK15 (Bit 15)                        */
#define PC_OUTDMSK_OUTDMSK15_Msk          (0x8000UL)                /*!< PC OUTDMSK: OUTDMSK15 (Bitfield-Mask: 0x01)           */
#define PC_OUTDMSK_OUTDMSK14_Pos          (14UL)                    /*!< PC OUTDMSK: OUTDMSK14 (Bit 14)                        */
#define PC_OUTDMSK_OUTDMSK14_Msk          (0x4000UL)                /*!< PC OUTDMSK: OUTDMSK14 (Bitfield-Mask: 0x01)           */
#define PC_OUTDMSK_OUTDMSK13_Pos          (13UL)                    /*!< PC OUTDMSK: OUTDMSK13 (Bit 13)                        */
#define PC_OUTDMSK_OUTDMSK13_Msk          (0x2000UL)                /*!< PC OUTDMSK: OUTDMSK13 (Bitfield-Mask: 0x01)           */
#define PC_OUTDMSK_OUTDMSK12_Pos          (12UL)                    /*!< PC OUTDMSK: OUTDMSK12 (Bit 12)                        */
#define PC_OUTDMSK_OUTDMSK12_Msk          (0x1000UL)                /*!< PC OUTDMSK: OUTDMSK12 (Bitfield-Mask: 0x01)           */
#define PC_OUTDMSK_OUTDMSK11_Pos          (11UL)                    /*!< PC OUTDMSK: OUTDMSK11 (Bit 11)                        */
#define PC_OUTDMSK_OUTDMSK11_Msk          (0x800UL)                 /*!< PC OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)           */
#define PC_OUTDMSK_OUTDMSK10_Pos          (10UL)                    /*!< PC OUTDMSK: OUTDMSK10 (Bit 10)                        */
#define PC_OUTDMSK_OUTDMSK10_Msk          (0x400UL)                 /*!< PC OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)           */
#define PC_OUTDMSK_OUTDMSK9_Pos           (9UL)                     /*!< PC OUTDMSK: OUTDMSK9 (Bit 9)                          */
#define PC_OUTDMSK_OUTDMSK9_Msk           (0x200UL)                 /*!< PC OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)            */
#define PC_OUTDMSK_OUTDMSK8_Pos           (8UL)                     /*!< PC OUTDMSK: OUTDMSK8 (Bit 8)                          */
#define PC_OUTDMSK_OUTDMSK8_Msk           (0x100UL)                 /*!< PC OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)            */
#define PC_OUTDMSK_OUTDMSK7_Pos           (7UL)                     /*!< PC OUTDMSK: OUTDMSK7 (Bit 7)                          */
#define PC_OUTDMSK_OUTDMSK7_Msk           (0x80UL)                  /*!< PC OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)            */
#define PC_OUTDMSK_OUTDMSK6_Pos           (6UL)                     /*!< PC OUTDMSK: OUTDMSK6 (Bit 6)                          */
#define PC_OUTDMSK_OUTDMSK6_Msk           (0x40UL)                  /*!< PC OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)            */
#define PC_OUTDMSK_OUTDMSK5_Pos           (5UL)                     /*!< PC OUTDMSK: OUTDMSK5 (Bit 5)                          */
#define PC_OUTDMSK_OUTDMSK5_Msk           (0x20UL)                  /*!< PC OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)            */
#define PC_OUTDMSK_OUTDMSK4_Pos           (4UL)                     /*!< PC OUTDMSK: OUTDMSK4 (Bit 4)                          */
#define PC_OUTDMSK_OUTDMSK4_Msk           (0x10UL)                  /*!< PC OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)            */
#define PC_OUTDMSK_OUTDMSK3_Pos           (3UL)                     /*!< PC OUTDMSK: OUTDMSK3 (Bit 3)                          */
#define PC_OUTDMSK_OUTDMSK3_Msk           (0x8UL)                   /*!< PC OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)            */
#define PC_OUTDMSK_OUTDMSK2_Pos           (2UL)                     /*!< PC OUTDMSK: OUTDMSK2 (Bit 2)                          */
#define PC_OUTDMSK_OUTDMSK2_Msk           (0x4UL)                   /*!< PC OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)            */
#define PC_OUTDMSK_OUTDMSK1_Pos           (1UL)                     /*!< PC OUTDMSK: OUTDMSK1 (Bit 1)                          */
#define PC_OUTDMSK_OUTDMSK1_Msk           (0x2UL)                   /*!< PC OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)            */
#define PC_OUTDMSK_OUTDMSK0_Pos           (0UL)                     /*!< PC OUTDMSK: OUTDMSK0 (Bit 0)                          */
#define PC_OUTDMSK_OUTDMSK0_Msk           (0x1UL)                   /*!< PC OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)            */
/* =========================================================  DBCR  ========================================================== */
#define PC_DBCR_DBCLK_Pos                 (16UL)                    /*!< PC DBCR: DBCLK (Bit 16)                               */
#define PC_DBCR_DBCLK_Msk                 (0x70000UL)               /*!< PC DBCR: DBCLK (Bitfield-Mask: 0x07)                  */
#define PC_DBCR_DBEN11_Pos                (11UL)                    /*!< PC DBCR: DBEN11 (Bit 11)                              */
#define PC_DBCR_DBEN11_Msk                (0x800UL)                 /*!< PC DBCR: DBEN11 (Bitfield-Mask: 0x01)                 */
#define PC_DBCR_DBEN10_Pos                (10UL)                    /*!< PC DBCR: DBEN10 (Bit 10)                              */
#define PC_DBCR_DBEN10_Msk                (0x400UL)                 /*!< PC DBCR: DBEN10 (Bitfield-Mask: 0x01)                 */
#define PC_DBCR_DBEN9_Pos                 (9UL)                     /*!< PC DBCR: DBEN9 (Bit 9)                                */
#define PC_DBCR_DBEN9_Msk                 (0x200UL)                 /*!< PC DBCR: DBEN9 (Bitfield-Mask: 0x01)                  */
#define PC_DBCR_DBEN8_Pos                 (8UL)                     /*!< PC DBCR: DBEN8 (Bit 8)                                */
#define PC_DBCR_DBEN8_Msk                 (0x100UL)                 /*!< PC DBCR: DBEN8 (Bitfield-Mask: 0x01)                  */
#define PC_DBCR_DBEN7_Pos                 (7UL)                     /*!< PC DBCR: DBEN7 (Bit 7)                                */
#define PC_DBCR_DBEN7_Msk                 (0x80UL)                  /*!< PC DBCR: DBEN7 (Bitfield-Mask: 0x01)                  */
#define PC_DBCR_DBEN6_Pos                 (6UL)                     /*!< PC DBCR: DBEN6 (Bit 6)                                */
#define PC_DBCR_DBEN6_Msk                 (0x40UL)                  /*!< PC DBCR: DBEN6 (Bitfield-Mask: 0x01)                  */
#define PC_DBCR_DBEN5_Pos                 (5UL)                     /*!< PC DBCR: DBEN5 (Bit 5)                                */
#define PC_DBCR_DBEN5_Msk                 (0x20UL)                  /*!< PC DBCR: DBEN5 (Bitfield-Mask: 0x01)                  */
#define PC_DBCR_DBEN4_Pos                 (4UL)                     /*!< PC DBCR: DBEN4 (Bit 4)                                */
#define PC_DBCR_DBEN4_Msk                 (0x10UL)                  /*!< PC DBCR: DBEN4 (Bitfield-Mask: 0x01)                  */
#define PC_DBCR_DBEN3_Pos                 (3UL)                     /*!< PC DBCR: DBEN3 (Bit 3)                                */
#define PC_DBCR_DBEN3_Msk                 (0x8UL)                   /*!< PC DBCR: DBEN3 (Bitfield-Mask: 0x01)                  */
#define PC_DBCR_DBEN2_Pos                 (2UL)                     /*!< PC DBCR: DBEN2 (Bit 2)                                */
#define PC_DBCR_DBEN2_Msk                 (0x4UL)                   /*!< PC DBCR: DBEN2 (Bitfield-Mask: 0x01)                  */
#define PC_DBCR_DBEN1_Pos                 (1UL)                     /*!< PC DBCR: DBEN1 (Bit 1)                                */
#define PC_DBCR_DBEN1_Msk                 (0x2UL)                   /*!< PC DBCR: DBEN1 (Bitfield-Mask: 0x01)                  */
#define PC_DBCR_DBEN0_Pos                 (0UL)                     /*!< PC DBCR: DBEN0 (Bit 0)                                */
#define PC_DBCR_DBEN0_Msk                 (0x1UL)                   /*!< PC DBCR: DBEN0 (Bitfield-Mask: 0x01)                  */
/* ========================================================  PC_MOD  ========================================================= */
#define PC_PC_MOD_MODE12_Pos              (24UL)                    /*!< PC PC_MOD: MODE12 (Bit 24)                            */
#define PC_PC_MOD_MODE12_Msk              (0x3000000UL)             /*!< PC PC_MOD: MODE12 (Bitfield-Mask: 0x03)               */
#define PC_PC_MOD_MODE11_Pos              (22UL)                    /*!< PC PC_MOD: MODE11 (Bit 22)                            */
#define PC_PC_MOD_MODE11_Msk              (0xc00000UL)              /*!< PC PC_MOD: MODE11 (Bitfield-Mask: 0x03)               */
#define PC_PC_MOD_MODE10_Pos              (20UL)                    /*!< PC PC_MOD: MODE10 (Bit 20)                            */
#define PC_PC_MOD_MODE10_Msk              (0x300000UL)              /*!< PC PC_MOD: MODE10 (Bitfield-Mask: 0x03)               */
#define PC_PC_MOD_MODE9_Pos               (18UL)                    /*!< PC PC_MOD: MODE9 (Bit 18)                             */
#define PC_PC_MOD_MODE9_Msk               (0xc0000UL)               /*!< PC PC_MOD: MODE9 (Bitfield-Mask: 0x03)                */
#define PC_PC_MOD_MODE8_Pos               (16UL)                    /*!< PC PC_MOD: MODE8 (Bit 16)                             */
#define PC_PC_MOD_MODE8_Msk               (0x30000UL)               /*!< PC PC_MOD: MODE8 (Bitfield-Mask: 0x03)                */
#define PC_PC_MOD_MODE7_Pos               (14UL)                    /*!< PC PC_MOD: MODE7 (Bit 14)                             */
#define PC_PC_MOD_MODE7_Msk               (0xc000UL)                /*!< PC PC_MOD: MODE7 (Bitfield-Mask: 0x03)                */
#define PC_PC_MOD_MODE6_Pos               (12UL)                    /*!< PC PC_MOD: MODE6 (Bit 12)                             */
#define PC_PC_MOD_MODE6_Msk               (0x3000UL)                /*!< PC PC_MOD: MODE6 (Bitfield-Mask: 0x03)                */
#define PC_PC_MOD_MODE5_Pos               (10UL)                    /*!< PC PC_MOD: MODE5 (Bit 10)                             */
#define PC_PC_MOD_MODE5_Msk               (0xc00UL)                 /*!< PC PC_MOD: MODE5 (Bitfield-Mask: 0x03)                */
#define PC_PC_MOD_MODE4_Pos               (8UL)                     /*!< PC PC_MOD: MODE4 (Bit 8)                              */
#define PC_PC_MOD_MODE4_Msk               (0x300UL)                 /*!< PC PC_MOD: MODE4 (Bitfield-Mask: 0x03)                */
#define PC_PC_MOD_MODE3_Pos               (6UL)                     /*!< PC PC_MOD: MODE3 (Bit 6)                              */
#define PC_PC_MOD_MODE3_Msk               (0xc0UL)                  /*!< PC PC_MOD: MODE3 (Bitfield-Mask: 0x03)                */
#define PC_PC_MOD_MODE2_Pos               (4UL)                     /*!< PC PC_MOD: MODE2 (Bit 4)                              */
#define PC_PC_MOD_MODE2_Msk               (0x30UL)                  /*!< PC PC_MOD: MODE2 (Bitfield-Mask: 0x03)                */
#define PC_PC_MOD_MODE1_Pos               (2UL)                     /*!< PC PC_MOD: MODE1 (Bit 2)                              */
#define PC_PC_MOD_MODE1_Msk               (0xcUL)                   /*!< PC PC_MOD: MODE1 (Bitfield-Mask: 0x03)                */
#define PC_PC_MOD_MODE0_Pos               (0UL)                     /*!< PC PC_MOD: MODE0 (Bit 0)                              */
#define PC_PC_MOD_MODE0_Msk               (0x3UL)                   /*!< PC PC_MOD: MODE0 (Bitfield-Mask: 0x03)                */
/* ========================================================  PC_TYP  ========================================================= */
#define PC_PC_TYP_TYP12_Pos               (12UL)                    /*!< PC PC_TYP: TYP12 (Bit 12)                             */
#define PC_PC_TYP_TYP12_Msk               (0x1000UL)                /*!< PC PC_TYP: TYP12 (Bitfield-Mask: 0x01)                */
#define PC_PC_TYP_TYP11_Pos               (11UL)                    /*!< PC PC_TYP: TYP11 (Bit 11)                             */
#define PC_PC_TYP_TYP11_Msk               (0x800UL)                 /*!< PC PC_TYP: TYP11 (Bitfield-Mask: 0x01)                */
#define PC_PC_TYP_TYP10_Pos               (10UL)                    /*!< PC PC_TYP: TYP10 (Bit 10)                             */
#define PC_PC_TYP_TYP10_Msk               (0x400UL)                 /*!< PC PC_TYP: TYP10 (Bitfield-Mask: 0x01)                */
#define PC_PC_TYP_TYP9_Pos                (9UL)                     /*!< PC PC_TYP: TYP9 (Bit 9)                               */
#define PC_PC_TYP_TYP9_Msk                (0x200UL)                 /*!< PC PC_TYP: TYP9 (Bitfield-Mask: 0x01)                 */
#define PC_PC_TYP_TYP8_Pos                (8UL)                     /*!< PC PC_TYP: TYP8 (Bit 8)                               */
#define PC_PC_TYP_TYP8_Msk                (0x100UL)                 /*!< PC PC_TYP: TYP8 (Bitfield-Mask: 0x01)                 */
#define PC_PC_TYP_TYP7_Pos                (7UL)                     /*!< PC PC_TYP: TYP7 (Bit 7)                               */
#define PC_PC_TYP_TYP7_Msk                (0x80UL)                  /*!< PC PC_TYP: TYP7 (Bitfield-Mask: 0x01)                 */
#define PC_PC_TYP_TYP6_Pos                (6UL)                     /*!< PC PC_TYP: TYP6 (Bit 6)                               */
#define PC_PC_TYP_TYP6_Msk                (0x40UL)                  /*!< PC PC_TYP: TYP6 (Bitfield-Mask: 0x01)                 */
#define PC_PC_TYP_TYP5_Pos                (5UL)                     /*!< PC PC_TYP: TYP5 (Bit 5)                               */
#define PC_PC_TYP_TYP5_Msk                (0x20UL)                  /*!< PC PC_TYP: TYP5 (Bitfield-Mask: 0x01)                 */
#define PC_PC_TYP_TYP4_Pos                (4UL)                     /*!< PC PC_TYP: TYP4 (Bit 4)                               */
#define PC_PC_TYP_TYP4_Msk                (0x10UL)                  /*!< PC PC_TYP: TYP4 (Bitfield-Mask: 0x01)                 */
#define PC_PC_TYP_TYP3_Pos                (3UL)                     /*!< PC PC_TYP: TYP3 (Bit 3)                               */
#define PC_PC_TYP_TYP3_Msk                (0x8UL)                   /*!< PC PC_TYP: TYP3 (Bitfield-Mask: 0x01)                 */
#define PC_PC_TYP_TYP2_Pos                (2UL)                     /*!< PC PC_TYP: TYP2 (Bit 2)                               */
#define PC_PC_TYP_TYP2_Msk                (0x4UL)                   /*!< PC PC_TYP: TYP2 (Bitfield-Mask: 0x01)                 */
#define PC_PC_TYP_TYP1_Pos                (1UL)                     /*!< PC PC_TYP: TYP1 (Bit 1)                               */
#define PC_PC_TYP_TYP1_Msk                (0x2UL)                   /*!< PC PC_TYP: TYP1 (Bitfield-Mask: 0x01)                 */
#define PC_PC_TYP_TYP0_Pos                (0UL)                     /*!< PC PC_TYP: TYP0 (Bit 0)                               */
#define PC_PC_TYP_TYP0_Msk                (0x1UL)                   /*!< PC PC_TYP: TYP0 (Bitfield-Mask: 0x01)                 */
/* =======================================================  PC_AFSR1  ======================================================== */
#define PC_PC_AFSR1_AFSR7_Pos             (28UL)                    /*!< PC PC_AFSR1: AFSR7 (Bit 28)                           */
#define PC_PC_AFSR1_AFSR7_Msk             (0xf0000000UL)            /*!< PC PC_AFSR1: AFSR7 (Bitfield-Mask: 0x0f)              */
#define PC_PC_AFSR1_AFSR6_Pos             (24UL)                    /*!< PC PC_AFSR1: AFSR6 (Bit 24)                           */
#define PC_PC_AFSR1_AFSR6_Msk             (0xf000000UL)             /*!< PC PC_AFSR1: AFSR6 (Bitfield-Mask: 0x0f)              */
#define PC_PC_AFSR1_AFSR5_Pos             (20UL)                    /*!< PC PC_AFSR1: AFSR5 (Bit 20)                           */
#define PC_PC_AFSR1_AFSR5_Msk             (0xf00000UL)              /*!< PC PC_AFSR1: AFSR5 (Bitfield-Mask: 0x0f)              */
#define PC_PC_AFSR1_AFSR4_Pos             (16UL)                    /*!< PC PC_AFSR1: AFSR4 (Bit 16)                           */
#define PC_PC_AFSR1_AFSR4_Msk             (0xf0000UL)               /*!< PC PC_AFSR1: AFSR4 (Bitfield-Mask: 0x0f)              */
#define PC_PC_AFSR1_AFSR3_Pos             (12UL)                    /*!< PC PC_AFSR1: AFSR3 (Bit 12)                           */
#define PC_PC_AFSR1_AFSR3_Msk             (0xf000UL)                /*!< PC PC_AFSR1: AFSR3 (Bitfield-Mask: 0x0f)              */
#define PC_PC_AFSR1_AFSR2_Pos             (8UL)                     /*!< PC PC_AFSR1: AFSR2 (Bit 8)                            */
#define PC_PC_AFSR1_AFSR2_Msk             (0xf00UL)                 /*!< PC PC_AFSR1: AFSR2 (Bitfield-Mask: 0x0f)              */
#define PC_PC_AFSR1_AFSR1_Pos             (4UL)                     /*!< PC PC_AFSR1: AFSR1 (Bit 4)                            */
#define PC_PC_AFSR1_AFSR1_Msk             (0xf0UL)                  /*!< PC PC_AFSR1: AFSR1 (Bitfield-Mask: 0x0f)              */
#define PC_PC_AFSR1_AFSR0_Pos             (0UL)                     /*!< PC PC_AFSR1: AFSR0 (Bit 0)                            */
#define PC_PC_AFSR1_AFSR0_Msk             (0xfUL)                   /*!< PC PC_AFSR1: AFSR0 (Bitfield-Mask: 0x0f)              */
/* =======================================================  PC_AFSR2  ======================================================== */
#define PC_PC_AFSR2_AFSR12_Pos            (16UL)                    /*!< PC PC_AFSR2: AFSR12 (Bit 16)                          */
#define PC_PC_AFSR2_AFSR12_Msk            (0xf0000UL)               /*!< PC PC_AFSR2: AFSR12 (Bitfield-Mask: 0x0f)             */
#define PC_PC_AFSR2_AFSR11_Pos            (12UL)                    /*!< PC PC_AFSR2: AFSR11 (Bit 12)                          */
#define PC_PC_AFSR2_AFSR11_Msk            (0xf000UL)                /*!< PC PC_AFSR2: AFSR11 (Bitfield-Mask: 0x0f)             */
#define PC_PC_AFSR2_AFSR10_Pos            (8UL)                     /*!< PC PC_AFSR2: AFSR10 (Bit 8)                           */
#define PC_PC_AFSR2_AFSR10_Msk            (0xf00UL)                 /*!< PC PC_AFSR2: AFSR10 (Bitfield-Mask: 0x0f)             */
#define PC_PC_AFSR2_AFSR9_Pos             (4UL)                     /*!< PC PC_AFSR2: AFSR9 (Bit 4)                            */
#define PC_PC_AFSR2_AFSR9_Msk             (0xf0UL)                  /*!< PC PC_AFSR2: AFSR9 (Bitfield-Mask: 0x0f)              */
#define PC_PC_AFSR2_AFSR8_Pos             (0UL)                     /*!< PC PC_AFSR2: AFSR8 (Bit 0)                            */
#define PC_PC_AFSR2_AFSR8_Msk             (0xfUL)                   /*!< PC PC_AFSR2: AFSR8 (Bitfield-Mask: 0x0f)              */
/* ========================================================  PC_PUPD  ======================================================== */
#define PC_PC_PUPD_PUPD12_Pos             (24UL)                    /*!< PC PC_PUPD: PUPD12 (Bit 24)                           */
#define PC_PC_PUPD_PUPD12_Msk             (0x3000000UL)             /*!< PC PC_PUPD: PUPD12 (Bitfield-Mask: 0x03)              */
#define PC_PC_PUPD_PUPD11_Pos             (22UL)                    /*!< PC PC_PUPD: PUPD11 (Bit 22)                           */
#define PC_PC_PUPD_PUPD11_Msk             (0xc00000UL)              /*!< PC PC_PUPD: PUPD11 (Bitfield-Mask: 0x03)              */
#define PC_PC_PUPD_PUPD10_Pos             (20UL)                    /*!< PC PC_PUPD: PUPD10 (Bit 20)                           */
#define PC_PC_PUPD_PUPD10_Msk             (0x300000UL)              /*!< PC PC_PUPD: PUPD10 (Bitfield-Mask: 0x03)              */
#define PC_PC_PUPD_PUPD9_Pos              (18UL)                    /*!< PC PC_PUPD: PUPD9 (Bit 18)                            */
#define PC_PC_PUPD_PUPD9_Msk              (0xc0000UL)               /*!< PC PC_PUPD: PUPD9 (Bitfield-Mask: 0x03)               */
#define PC_PC_PUPD_PUPD8_Pos              (16UL)                    /*!< PC PC_PUPD: PUPD8 (Bit 16)                            */
#define PC_PC_PUPD_PUPD8_Msk              (0x30000UL)               /*!< PC PC_PUPD: PUPD8 (Bitfield-Mask: 0x03)               */
#define PC_PC_PUPD_PUPD7_Pos              (14UL)                    /*!< PC PC_PUPD: PUPD7 (Bit 14)                            */
#define PC_PC_PUPD_PUPD7_Msk              (0xc000UL)                /*!< PC PC_PUPD: PUPD7 (Bitfield-Mask: 0x03)               */
#define PC_PC_PUPD_PUPD6_Pos              (12UL)                    /*!< PC PC_PUPD: PUPD6 (Bit 12)                            */
#define PC_PC_PUPD_PUPD6_Msk              (0x3000UL)                /*!< PC PC_PUPD: PUPD6 (Bitfield-Mask: 0x03)               */
#define PC_PC_PUPD_PUPD5_Pos              (10UL)                    /*!< PC PC_PUPD: PUPD5 (Bit 10)                            */
#define PC_PC_PUPD_PUPD5_Msk              (0xc00UL)                 /*!< PC PC_PUPD: PUPD5 (Bitfield-Mask: 0x03)               */
#define PC_PC_PUPD_PUPD4_Pos              (8UL)                     /*!< PC PC_PUPD: PUPD4 (Bit 8)                             */
#define PC_PC_PUPD_PUPD4_Msk              (0x300UL)                 /*!< PC PC_PUPD: PUPD4 (Bitfield-Mask: 0x03)               */
#define PC_PC_PUPD_PUPD3_Pos              (6UL)                     /*!< PC PC_PUPD: PUPD3 (Bit 6)                             */
#define PC_PC_PUPD_PUPD3_Msk              (0xc0UL)                  /*!< PC PC_PUPD: PUPD3 (Bitfield-Mask: 0x03)               */
#define PC_PC_PUPD_PUPD2_Pos              (4UL)                     /*!< PC PC_PUPD: PUPD2 (Bit 4)                             */
#define PC_PC_PUPD_PUPD2_Msk              (0x30UL)                  /*!< PC PC_PUPD: PUPD2 (Bitfield-Mask: 0x03)               */
#define PC_PC_PUPD_PUPD1_Pos              (2UL)                     /*!< PC PC_PUPD: PUPD1 (Bit 2)                             */
#define PC_PC_PUPD_PUPD1_Msk              (0xcUL)                   /*!< PC PC_PUPD: PUPD1 (Bitfield-Mask: 0x03)               */
#define PC_PC_PUPD_PUPD0_Pos              (0UL)                     /*!< PC PC_PUPD: PUPD0 (Bit 0)                             */
#define PC_PC_PUPD_PUPD0_Msk              (0x3UL)                   /*!< PC PC_PUPD: PUPD0 (Bitfield-Mask: 0x03)               */
/* ========================================================  PC_INDR  ======================================================== */
#define PC_PC_INDR_INDR12_Pos             (12UL)                    /*!< PC PC_INDR: INDR12 (Bit 12)                           */
#define PC_PC_INDR_INDR12_Msk             (0x1000UL)                /*!< PC PC_INDR: INDR12 (Bitfield-Mask: 0x01)              */
#define PC_PC_INDR_INDR11_Pos             (11UL)                    /*!< PC PC_INDR: INDR11 (Bit 11)                           */
#define PC_PC_INDR_INDR11_Msk             (0x800UL)                 /*!< PC PC_INDR: INDR11 (Bitfield-Mask: 0x01)              */
#define PC_PC_INDR_INDR10_Pos             (10UL)                    /*!< PC PC_INDR: INDR10 (Bit 10)                           */
#define PC_PC_INDR_INDR10_Msk             (0x400UL)                 /*!< PC PC_INDR: INDR10 (Bitfield-Mask: 0x01)              */
#define PC_PC_INDR_INDR9_Pos              (9UL)                     /*!< PC PC_INDR: INDR9 (Bit 9)                             */
#define PC_PC_INDR_INDR9_Msk              (0x200UL)                 /*!< PC PC_INDR: INDR9 (Bitfield-Mask: 0x01)               */
#define PC_PC_INDR_INDR8_Pos              (8UL)                     /*!< PC PC_INDR: INDR8 (Bit 8)                             */
#define PC_PC_INDR_INDR8_Msk              (0x100UL)                 /*!< PC PC_INDR: INDR8 (Bitfield-Mask: 0x01)               */
#define PC_PC_INDR_INDR7_Pos              (7UL)                     /*!< PC PC_INDR: INDR7 (Bit 7)                             */
#define PC_PC_INDR_INDR7_Msk              (0x80UL)                  /*!< PC PC_INDR: INDR7 (Bitfield-Mask: 0x01)               */
#define PC_PC_INDR_INDR6_Pos              (6UL)                     /*!< PC PC_INDR: INDR6 (Bit 6)                             */
#define PC_PC_INDR_INDR6_Msk              (0x40UL)                  /*!< PC PC_INDR: INDR6 (Bitfield-Mask: 0x01)               */
#define PC_PC_INDR_INDR5_Pos              (5UL)                     /*!< PC PC_INDR: INDR5 (Bit 5)                             */
#define PC_PC_INDR_INDR5_Msk              (0x20UL)                  /*!< PC PC_INDR: INDR5 (Bitfield-Mask: 0x01)               */
#define PC_PC_INDR_INDR4_Pos              (4UL)                     /*!< PC PC_INDR: INDR4 (Bit 4)                             */
#define PC_PC_INDR_INDR4_Msk              (0x10UL)                  /*!< PC PC_INDR: INDR4 (Bitfield-Mask: 0x01)               */
#define PC_PC_INDR_INDR3_Pos              (3UL)                     /*!< PC PC_INDR: INDR3 (Bit 3)                             */
#define PC_PC_INDR_INDR3_Msk              (0x8UL)                   /*!< PC PC_INDR: INDR3 (Bitfield-Mask: 0x01)               */
#define PC_PC_INDR_INDR2_Pos              (2UL)                     /*!< PC PC_INDR: INDR2 (Bit 2)                             */
#define PC_PC_INDR_INDR2_Msk              (0x4UL)                   /*!< PC PC_INDR: INDR2 (Bitfield-Mask: 0x01)               */
#define PC_PC_INDR_INDR1_Pos              (1UL)                     /*!< PC PC_INDR: INDR1 (Bit 1)                             */
#define PC_PC_INDR_INDR1_Msk              (0x2UL)                   /*!< PC PC_INDR: INDR1 (Bitfield-Mask: 0x01)               */
#define PC_PC_INDR_INDR0_Pos              (0UL)                     /*!< PC PC_INDR: INDR0 (Bit 0)                             */
#define PC_PC_INDR_INDR0_Msk              (0x1UL)                   /*!< PC PC_INDR: INDR0 (Bitfield-Mask: 0x01)               */
/* =======================================================  PC_OUTDR  ======================================================== */
#define PC_PC_OUTDR_OUTDR12_Pos           (12UL)                    /*!< PC PC_OUTDR: OUTDR12 (Bit 12)                         */
#define PC_PC_OUTDR_OUTDR12_Msk           (0x1000UL)                /*!< PC PC_OUTDR: OUTDR12 (Bitfield-Mask: 0x01)            */
#define PC_PC_OUTDR_OUTDR11_Pos           (11UL)                    /*!< PC PC_OUTDR: OUTDR11 (Bit 11)                         */
#define PC_PC_OUTDR_OUTDR11_Msk           (0x800UL)                 /*!< PC PC_OUTDR: OUTDR11 (Bitfield-Mask: 0x01)            */
#define PC_PC_OUTDR_OUTDR10_Pos           (10UL)                    /*!< PC PC_OUTDR: OUTDR10 (Bit 10)                         */
#define PC_PC_OUTDR_OUTDR10_Msk           (0x400UL)                 /*!< PC PC_OUTDR: OUTDR10 (Bitfield-Mask: 0x01)            */
#define PC_PC_OUTDR_OUTDR9_Pos            (9UL)                     /*!< PC PC_OUTDR: OUTDR9 (Bit 9)                           */
#define PC_PC_OUTDR_OUTDR9_Msk            (0x200UL)                 /*!< PC PC_OUTDR: OUTDR9 (Bitfield-Mask: 0x01)             */
#define PC_PC_OUTDR_OUTDR8_Pos            (8UL)                     /*!< PC PC_OUTDR: OUTDR8 (Bit 8)                           */
#define PC_PC_OUTDR_OUTDR8_Msk            (0x100UL)                 /*!< PC PC_OUTDR: OUTDR8 (Bitfield-Mask: 0x01)             */
#define PC_PC_OUTDR_OUTDR7_Pos            (7UL)                     /*!< PC PC_OUTDR: OUTDR7 (Bit 7)                           */
#define PC_PC_OUTDR_OUTDR7_Msk            (0x80UL)                  /*!< PC PC_OUTDR: OUTDR7 (Bitfield-Mask: 0x01)             */
#define PC_PC_OUTDR_OUTDR6_Pos            (6UL)                     /*!< PC PC_OUTDR: OUTDR6 (Bit 6)                           */
#define PC_PC_OUTDR_OUTDR6_Msk            (0x40UL)                  /*!< PC PC_OUTDR: OUTDR6 (Bitfield-Mask: 0x01)             */
#define PC_PC_OUTDR_OUTDR5_Pos            (5UL)                     /*!< PC PC_OUTDR: OUTDR5 (Bit 5)                           */
#define PC_PC_OUTDR_OUTDR5_Msk            (0x20UL)                  /*!< PC PC_OUTDR: OUTDR5 (Bitfield-Mask: 0x01)             */
#define PC_PC_OUTDR_OUTDR4_Pos            (4UL)                     /*!< PC PC_OUTDR: OUTDR4 (Bit 4)                           */
#define PC_PC_OUTDR_OUTDR4_Msk            (0x10UL)                  /*!< PC PC_OUTDR: OUTDR4 (Bitfield-Mask: 0x01)             */
#define PC_PC_OUTDR_OUTDR3_Pos            (3UL)                     /*!< PC PC_OUTDR: OUTDR3 (Bit 3)                           */
#define PC_PC_OUTDR_OUTDR3_Msk            (0x8UL)                   /*!< PC PC_OUTDR: OUTDR3 (Bitfield-Mask: 0x01)             */
#define PC_PC_OUTDR_OUTDR2_Pos            (2UL)                     /*!< PC PC_OUTDR: OUTDR2 (Bit 2)                           */
#define PC_PC_OUTDR_OUTDR2_Msk            (0x4UL)                   /*!< PC PC_OUTDR: OUTDR2 (Bitfield-Mask: 0x01)             */
#define PC_PC_OUTDR_OUTDR1_Pos            (1UL)                     /*!< PC PC_OUTDR: OUTDR1 (Bit 1)                           */
#define PC_PC_OUTDR_OUTDR1_Msk            (0x2UL)                   /*!< PC PC_OUTDR: OUTDR1 (Bitfield-Mask: 0x01)             */
#define PC_PC_OUTDR_OUTDR0_Pos            (0UL)                     /*!< PC PC_OUTDR: OUTDR0 (Bit 0)                           */
#define PC_PC_OUTDR_OUTDR0_Msk            (0x1UL)                   /*!< PC PC_OUTDR: OUTDR0 (Bitfield-Mask: 0x01)             */
/* ========================================================  PC_BSR  ========================================================= */
#define PC_PC_BSR_BSR12_Pos               (12UL)                    /*!< PC PC_BSR: BSR12 (Bit 12)                             */
#define PC_PC_BSR_BSR12_Msk               (0x1000UL)                /*!< PC PC_BSR: BSR12 (Bitfield-Mask: 0x01)                */
#define PC_PC_BSR_BSR11_Pos               (11UL)                    /*!< PC PC_BSR: BSR11 (Bit 11)                             */
#define PC_PC_BSR_BSR11_Msk               (0x800UL)                 /*!< PC PC_BSR: BSR11 (Bitfield-Mask: 0x01)                */
#define PC_PC_BSR_BSR10_Pos               (10UL)                    /*!< PC PC_BSR: BSR10 (Bit 10)                             */
#define PC_PC_BSR_BSR10_Msk               (0x400UL)                 /*!< PC PC_BSR: BSR10 (Bitfield-Mask: 0x01)                */
#define PC_PC_BSR_BSR9_Pos                (9UL)                     /*!< PC PC_BSR: BSR9 (Bit 9)                               */
#define PC_PC_BSR_BSR9_Msk                (0x200UL)                 /*!< PC PC_BSR: BSR9 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BSR_BSR8_Pos                (8UL)                     /*!< PC PC_BSR: BSR8 (Bit 8)                               */
#define PC_PC_BSR_BSR8_Msk                (0x100UL)                 /*!< PC PC_BSR: BSR8 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BSR_BSR7_Pos                (7UL)                     /*!< PC PC_BSR: BSR7 (Bit 7)                               */
#define PC_PC_BSR_BSR7_Msk                (0x80UL)                  /*!< PC PC_BSR: BSR7 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BSR_BSR6_Pos                (6UL)                     /*!< PC PC_BSR: BSR6 (Bit 6)                               */
#define PC_PC_BSR_BSR6_Msk                (0x40UL)                  /*!< PC PC_BSR: BSR6 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BSR_BSR5_Pos                (5UL)                     /*!< PC PC_BSR: BSR5 (Bit 5)                               */
#define PC_PC_BSR_BSR5_Msk                (0x20UL)                  /*!< PC PC_BSR: BSR5 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BSR_BSR4_Pos                (4UL)                     /*!< PC PC_BSR: BSR4 (Bit 4)                               */
#define PC_PC_BSR_BSR4_Msk                (0x10UL)                  /*!< PC PC_BSR: BSR4 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BSR_BSR3_Pos                (3UL)                     /*!< PC PC_BSR: BSR3 (Bit 3)                               */
#define PC_PC_BSR_BSR3_Msk                (0x8UL)                   /*!< PC PC_BSR: BSR3 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BSR_BSR2_Pos                (2UL)                     /*!< PC PC_BSR: BSR2 (Bit 2)                               */
#define PC_PC_BSR_BSR2_Msk                (0x4UL)                   /*!< PC PC_BSR: BSR2 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BSR_BSR1_Pos                (1UL)                     /*!< PC PC_BSR: BSR1 (Bit 1)                               */
#define PC_PC_BSR_BSR1_Msk                (0x2UL)                   /*!< PC PC_BSR: BSR1 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BSR_BSR0_Pos                (0UL)                     /*!< PC PC_BSR: BSR0 (Bit 0)                               */
#define PC_PC_BSR_BSR0_Msk                (0x1UL)                   /*!< PC PC_BSR: BSR0 (Bitfield-Mask: 0x01)                 */
/* ========================================================  PC_BCR  ========================================================= */
#define PC_PC_BCR_BCR12_Pos               (12UL)                    /*!< PC PC_BCR: BCR12 (Bit 12)                             */
#define PC_PC_BCR_BCR12_Msk               (0x1000UL)                /*!< PC PC_BCR: BCR12 (Bitfield-Mask: 0x01)                */
#define PC_PC_BCR_BCR11_Pos               (11UL)                    /*!< PC PC_BCR: BCR11 (Bit 11)                             */
#define PC_PC_BCR_BCR11_Msk               (0x800UL)                 /*!< PC PC_BCR: BCR11 (Bitfield-Mask: 0x01)                */
#define PC_PC_BCR_BCR10_Pos               (10UL)                    /*!< PC PC_BCR: BCR10 (Bit 10)                             */
#define PC_PC_BCR_BCR10_Msk               (0x400UL)                 /*!< PC PC_BCR: BCR10 (Bitfield-Mask: 0x01)                */
#define PC_PC_BCR_BCR9_Pos                (9UL)                     /*!< PC PC_BCR: BCR9 (Bit 9)                               */
#define PC_PC_BCR_BCR9_Msk                (0x200UL)                 /*!< PC PC_BCR: BCR9 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BCR_BCR8_Pos                (8UL)                     /*!< PC PC_BCR: BCR8 (Bit 8)                               */
#define PC_PC_BCR_BCR8_Msk                (0x100UL)                 /*!< PC PC_BCR: BCR8 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BCR_BCR7_Pos                (7UL)                     /*!< PC PC_BCR: BCR7 (Bit 7)                               */
#define PC_PC_BCR_BCR7_Msk                (0x80UL)                  /*!< PC PC_BCR: BCR7 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BCR_BCR6_Pos                (6UL)                     /*!< PC PC_BCR: BCR6 (Bit 6)                               */
#define PC_PC_BCR_BCR6_Msk                (0x40UL)                  /*!< PC PC_BCR: BCR6 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BCR_BCR5_Pos                (5UL)                     /*!< PC PC_BCR: BCR5 (Bit 5)                               */
#define PC_PC_BCR_BCR5_Msk                (0x20UL)                  /*!< PC PC_BCR: BCR5 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BCR_BCR4_Pos                (4UL)                     /*!< PC PC_BCR: BCR4 (Bit 4)                               */
#define PC_PC_BCR_BCR4_Msk                (0x10UL)                  /*!< PC PC_BCR: BCR4 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BCR_BCR3_Pos                (3UL)                     /*!< PC PC_BCR: BCR3 (Bit 3)                               */
#define PC_PC_BCR_BCR3_Msk                (0x8UL)                   /*!< PC PC_BCR: BCR3 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BCR_BCR2_Pos                (2UL)                     /*!< PC PC_BCR: BCR2 (Bit 2)                               */
#define PC_PC_BCR_BCR2_Msk                (0x4UL)                   /*!< PC PC_BCR: BCR2 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BCR_BCR1_Pos                (1UL)                     /*!< PC PC_BCR: BCR1 (Bit 1)                               */
#define PC_PC_BCR_BCR1_Msk                (0x2UL)                   /*!< PC PC_BCR: BCR1 (Bitfield-Mask: 0x01)                 */
#define PC_PC_BCR_BCR0_Pos                (0UL)                     /*!< PC PC_BCR: BCR0 (Bit 0)                               */
#define PC_PC_BCR_BCR0_Msk                (0x1UL)                   /*!< PC PC_BCR: BCR0 (Bitfield-Mask: 0x01)                 */
/* ======================================================  PC_OUTDMSK  ======================================================= */
#define PC_PC_OUTDMSK_OUTDMSK12_Pos       (12UL)                    /*!< PC PC_OUTDMSK: OUTDMSK12 (Bit 12)                     */
#define PC_PC_OUTDMSK_OUTDMSK12_Msk       (0x1000UL)                /*!< PC PC_OUTDMSK: OUTDMSK12 (Bitfield-Mask: 0x01)        */
#define PC_PC_OUTDMSK_OUTDMSK11_Pos       (11UL)                    /*!< PC PC_OUTDMSK: OUTDMSK11 (Bit 11)                     */
#define PC_PC_OUTDMSK_OUTDMSK11_Msk       (0x800UL)                 /*!< PC PC_OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)        */
#define PC_PC_OUTDMSK_OUTDMSK10_Pos       (10UL)                    /*!< PC PC_OUTDMSK: OUTDMSK10 (Bit 10)                     */
#define PC_PC_OUTDMSK_OUTDMSK10_Msk       (0x400UL)                 /*!< PC PC_OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)        */
#define PC_PC_OUTDMSK_OUTDMSK9_Pos        (9UL)                     /*!< PC PC_OUTDMSK: OUTDMSK9 (Bit 9)                       */
#define PC_PC_OUTDMSK_OUTDMSK9_Msk        (0x200UL)                 /*!< PC PC_OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)         */
#define PC_PC_OUTDMSK_OUTDMSK8_Pos        (8UL)                     /*!< PC PC_OUTDMSK: OUTDMSK8 (Bit 8)                       */
#define PC_PC_OUTDMSK_OUTDMSK8_Msk        (0x100UL)                 /*!< PC PC_OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)         */
#define PC_PC_OUTDMSK_OUTDMSK7_Pos        (7UL)                     /*!< PC PC_OUTDMSK: OUTDMSK7 (Bit 7)                       */
#define PC_PC_OUTDMSK_OUTDMSK7_Msk        (0x80UL)                  /*!< PC PC_OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)         */
#define PC_PC_OUTDMSK_OUTDMSK6_Pos        (6UL)                     /*!< PC PC_OUTDMSK: OUTDMSK6 (Bit 6)                       */
#define PC_PC_OUTDMSK_OUTDMSK6_Msk        (0x40UL)                  /*!< PC PC_OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)         */
#define PC_PC_OUTDMSK_OUTDMSK5_Pos        (5UL)                     /*!< PC PC_OUTDMSK: OUTDMSK5 (Bit 5)                       */
#define PC_PC_OUTDMSK_OUTDMSK5_Msk        (0x20UL)                  /*!< PC PC_OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)         */
#define PC_PC_OUTDMSK_OUTDMSK4_Pos        (4UL)                     /*!< PC PC_OUTDMSK: OUTDMSK4 (Bit 4)                       */
#define PC_PC_OUTDMSK_OUTDMSK4_Msk        (0x10UL)                  /*!< PC PC_OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)         */
#define PC_PC_OUTDMSK_OUTDMSK3_Pos        (3UL)                     /*!< PC PC_OUTDMSK: OUTDMSK3 (Bit 3)                       */
#define PC_PC_OUTDMSK_OUTDMSK3_Msk        (0x8UL)                   /*!< PC PC_OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)         */
#define PC_PC_OUTDMSK_OUTDMSK2_Pos        (2UL)                     /*!< PC PC_OUTDMSK: OUTDMSK2 (Bit 2)                       */
#define PC_PC_OUTDMSK_OUTDMSK2_Msk        (0x4UL)                   /*!< PC PC_OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)         */
#define PC_PC_OUTDMSK_OUTDMSK1_Pos        (1UL)                     /*!< PC PC_OUTDMSK: OUTDMSK1 (Bit 1)                       */
#define PC_PC_OUTDMSK_OUTDMSK1_Msk        (0x2UL)                   /*!< PC PC_OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)         */
#define PC_PC_OUTDMSK_OUTDMSK0_Pos        (0UL)                     /*!< PC PC_OUTDMSK: OUTDMSK0 (Bit 0)                       */
#define PC_PC_OUTDMSK_OUTDMSK0_Msk        (0x1UL)                   /*!< PC PC_OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)         */
/* ========================================================  PC_DBCR  ======================================================== */
#define PC_PC_DBCR_DBCLK_Pos              (16UL)                    /*!< PC PC_DBCR: DBCLK (Bit 16)                            */
#define PC_PC_DBCR_DBCLK_Msk              (0x70000UL)               /*!< PC PC_DBCR: DBCLK (Bitfield-Mask: 0x07)               */
#define PC_PC_DBCR_DBEN3_Pos              (3UL)                     /*!< PC PC_DBCR: DBEN3 (Bit 3)                             */
#define PC_PC_DBCR_DBEN3_Msk              (0x8UL)                   /*!< PC PC_DBCR: DBEN3 (Bitfield-Mask: 0x01)               */
#define PC_PC_DBCR_DBEN2_Pos              (2UL)                     /*!< PC PC_DBCR: DBEN2 (Bit 2)                             */
#define PC_PC_DBCR_DBEN2_Msk              (0x4UL)                   /*!< PC PC_DBCR: DBEN2 (Bitfield-Mask: 0x01)               */
#define PC_PC_DBCR_DBEN1_Pos              (1UL)                     /*!< PC PC_DBCR: DBEN1 (Bit 1)                             */
#define PC_PC_DBCR_DBEN1_Msk              (0x2UL)                   /*!< PC PC_DBCR: DBEN1 (Bitfield-Mask: 0x01)               */
#define PC_PC_DBCR_DBEN0_Pos              (0UL)                     /*!< PC PC_DBCR: DBEN0 (Bit 0)                             */
#define PC_PC_DBCR_DBEN0_Msk              (0x1UL)                   /*!< PC PC_DBCR: DBEN0 (Bitfield-Mask: 0x01)               */


/* =========================================================================================================================== */
/* ================                                            PD                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
#define PD_MOD_MODE15_Pos                 (30UL)                    /*!< PD MOD: MODE15 (Bit 30)                               */
#define PD_MOD_MODE15_Msk                 (0xc0000000UL)            /*!< PD MOD: MODE15 (Bitfield-Mask: 0x03)                  */
#define PD_MOD_MODE14_Pos                 (28UL)                    /*!< PD MOD: MODE14 (Bit 28)                               */
#define PD_MOD_MODE14_Msk                 (0x30000000UL)            /*!< PD MOD: MODE14 (Bitfield-Mask: 0x03)                  */
#define PD_MOD_MODE13_Pos                 (26UL)                    /*!< PD MOD: MODE13 (Bit 26)                               */
#define PD_MOD_MODE13_Msk                 (0xc000000UL)             /*!< PD MOD: MODE13 (Bitfield-Mask: 0x03)                  */
#define PD_MOD_MODE12_Pos                 (24UL)                    /*!< PD MOD: MODE12 (Bit 24)                               */
#define PD_MOD_MODE12_Msk                 (0x3000000UL)             /*!< PD MOD: MODE12 (Bitfield-Mask: 0x03)                  */
#define PD_MOD_MODE11_Pos                 (22UL)                    /*!< PD MOD: MODE11 (Bit 22)                               */
#define PD_MOD_MODE11_Msk                 (0xc00000UL)              /*!< PD MOD: MODE11 (Bitfield-Mask: 0x03)                  */
#define PD_MOD_MODE10_Pos                 (20UL)                    /*!< PD MOD: MODE10 (Bit 20)                               */
#define PD_MOD_MODE10_Msk                 (0x300000UL)              /*!< PD MOD: MODE10 (Bitfield-Mask: 0x03)                  */
#define PD_MOD_MODE9_Pos                  (18UL)                    /*!< PD MOD: MODE9 (Bit 18)                                */
#define PD_MOD_MODE9_Msk                  (0xc0000UL)               /*!< PD MOD: MODE9 (Bitfield-Mask: 0x03)                   */
#define PD_MOD_MODE8_Pos                  (16UL)                    /*!< PD MOD: MODE8 (Bit 16)                                */
#define PD_MOD_MODE8_Msk                  (0x30000UL)               /*!< PD MOD: MODE8 (Bitfield-Mask: 0x03)                   */
#define PD_MOD_MODE7_Pos                  (14UL)                    /*!< PD MOD: MODE7 (Bit 14)                                */
#define PD_MOD_MODE7_Msk                  (0xc000UL)                /*!< PD MOD: MODE7 (Bitfield-Mask: 0x03)                   */
#define PD_MOD_MODE6_Pos                  (12UL)                    /*!< PD MOD: MODE6 (Bit 12)                                */
#define PD_MOD_MODE6_Msk                  (0x3000UL)                /*!< PD MOD: MODE6 (Bitfield-Mask: 0x03)                   */
#define PD_MOD_MODE5_Pos                  (10UL)                    /*!< PD MOD: MODE5 (Bit 10)                                */
#define PD_MOD_MODE5_Msk                  (0xc00UL)                 /*!< PD MOD: MODE5 (Bitfield-Mask: 0x03)                   */
#define PD_MOD_MODE4_Pos                  (8UL)                     /*!< PD MOD: MODE4 (Bit 8)                                 */
#define PD_MOD_MODE4_Msk                  (0x300UL)                 /*!< PD MOD: MODE4 (Bitfield-Mask: 0x03)                   */
#define PD_MOD_MODE3_Pos                  (6UL)                     /*!< PD MOD: MODE3 (Bit 6)                                 */
#define PD_MOD_MODE3_Msk                  (0xc0UL)                  /*!< PD MOD: MODE3 (Bitfield-Mask: 0x03)                   */
#define PD_MOD_MODE2_Pos                  (4UL)                     /*!< PD MOD: MODE2 (Bit 4)                                 */
#define PD_MOD_MODE2_Msk                  (0x30UL)                  /*!< PD MOD: MODE2 (Bitfield-Mask: 0x03)                   */
#define PD_MOD_MODE1_Pos                  (2UL)                     /*!< PD MOD: MODE1 (Bit 2)                                 */
#define PD_MOD_MODE1_Msk                  (0xcUL)                   /*!< PD MOD: MODE1 (Bitfield-Mask: 0x03)                   */
#define PD_MOD_MODE0_Pos                  (0UL)                     /*!< PD MOD: MODE0 (Bit 0)                                 */
#define PD_MOD_MODE0_Msk                  (0x3UL)                   /*!< PD MOD: MODE0 (Bitfield-Mask: 0x03)                   */
/* ==========================================================  TYP  ========================================================== */
#define PD_TYP_TYP15_Pos                  (15UL)                    /*!< PD TYP: TYP15 (Bit 15)                                */
#define PD_TYP_TYP15_Msk                  (0x8000UL)                /*!< PD TYP: TYP15 (Bitfield-Mask: 0x01)                   */
#define PD_TYP_TYP14_Pos                  (14UL)                    /*!< PD TYP: TYP14 (Bit 14)                                */
#define PD_TYP_TYP14_Msk                  (0x4000UL)                /*!< PD TYP: TYP14 (Bitfield-Mask: 0x01)                   */
#define PD_TYP_TYP13_Pos                  (13UL)                    /*!< PD TYP: TYP13 (Bit 13)                                */
#define PD_TYP_TYP13_Msk                  (0x2000UL)                /*!< PD TYP: TYP13 (Bitfield-Mask: 0x01)                   */
#define PD_TYP_TYP12_Pos                  (12UL)                    /*!< PD TYP: TYP12 (Bit 12)                                */
#define PD_TYP_TYP12_Msk                  (0x1000UL)                /*!< PD TYP: TYP12 (Bitfield-Mask: 0x01)                   */
#define PD_TYP_TYP11_Pos                  (11UL)                    /*!< PD TYP: TYP11 (Bit 11)                                */
#define PD_TYP_TYP11_Msk                  (0x800UL)                 /*!< PD TYP: TYP11 (Bitfield-Mask: 0x01)                   */
#define PD_TYP_TYP10_Pos                  (10UL)                    /*!< PD TYP: TYP10 (Bit 10)                                */
#define PD_TYP_TYP10_Msk                  (0x400UL)                 /*!< PD TYP: TYP10 (Bitfield-Mask: 0x01)                   */
#define PD_TYP_TYP9_Pos                   (9UL)                     /*!< PD TYP: TYP9 (Bit 9)                                  */
#define PD_TYP_TYP9_Msk                   (0x200UL)                 /*!< PD TYP: TYP9 (Bitfield-Mask: 0x01)                    */
#define PD_TYP_TYP8_Pos                   (8UL)                     /*!< PD TYP: TYP8 (Bit 8)                                  */
#define PD_TYP_TYP8_Msk                   (0x100UL)                 /*!< PD TYP: TYP8 (Bitfield-Mask: 0x01)                    */
#define PD_TYP_TYP7_Pos                   (7UL)                     /*!< PD TYP: TYP7 (Bit 7)                                  */
#define PD_TYP_TYP7_Msk                   (0x80UL)                  /*!< PD TYP: TYP7 (Bitfield-Mask: 0x01)                    */
#define PD_TYP_TYP6_Pos                   (6UL)                     /*!< PD TYP: TYP6 (Bit 6)                                  */
#define PD_TYP_TYP6_Msk                   (0x40UL)                  /*!< PD TYP: TYP6 (Bitfield-Mask: 0x01)                    */
#define PD_TYP_TYP5_Pos                   (5UL)                     /*!< PD TYP: TYP5 (Bit 5)                                  */
#define PD_TYP_TYP5_Msk                   (0x20UL)                  /*!< PD TYP: TYP5 (Bitfield-Mask: 0x01)                    */
#define PD_TYP_TYP4_Pos                   (4UL)                     /*!< PD TYP: TYP4 (Bit 4)                                  */
#define PD_TYP_TYP4_Msk                   (0x10UL)                  /*!< PD TYP: TYP4 (Bitfield-Mask: 0x01)                    */
#define PD_TYP_TYP3_Pos                   (3UL)                     /*!< PD TYP: TYP3 (Bit 3)                                  */
#define PD_TYP_TYP3_Msk                   (0x8UL)                   /*!< PD TYP: TYP3 (Bitfield-Mask: 0x01)                    */
#define PD_TYP_TYP2_Pos                   (2UL)                     /*!< PD TYP: TYP2 (Bit 2)                                  */
#define PD_TYP_TYP2_Msk                   (0x4UL)                   /*!< PD TYP: TYP2 (Bitfield-Mask: 0x01)                    */
#define PD_TYP_TYP1_Pos                   (1UL)                     /*!< PD TYP: TYP1 (Bit 1)                                  */
#define PD_TYP_TYP1_Msk                   (0x2UL)                   /*!< PD TYP: TYP1 (Bitfield-Mask: 0x01)                    */
#define PD_TYP_TYP0_Pos                   (0UL)                     /*!< PD TYP: TYP0 (Bit 0)                                  */
#define PD_TYP_TYP0_Msk                   (0x1UL)                   /*!< PD TYP: TYP0 (Bitfield-Mask: 0x01)                    */
/* =========================================================  AFSR1  ========================================================= */
#define PD_AFSR1_AFSR7_Pos                (28UL)                    /*!< PD AFSR1: AFSR7 (Bit 28)                              */
#define PD_AFSR1_AFSR7_Msk                (0xf0000000UL)            /*!< PD AFSR1: AFSR7 (Bitfield-Mask: 0x0f)                 */
#define PD_AFSR1_AFSR6_Pos                (24UL)                    /*!< PD AFSR1: AFSR6 (Bit 24)                              */
#define PD_AFSR1_AFSR6_Msk                (0xf000000UL)             /*!< PD AFSR1: AFSR6 (Bitfield-Mask: 0x0f)                 */
#define PD_AFSR1_AFSR5_Pos                (20UL)                    /*!< PD AFSR1: AFSR5 (Bit 20)                              */
#define PD_AFSR1_AFSR5_Msk                (0xf00000UL)              /*!< PD AFSR1: AFSR5 (Bitfield-Mask: 0x0f)                 */
#define PD_AFSR1_AFSR4_Pos                (16UL)                    /*!< PD AFSR1: AFSR4 (Bit 16)                              */
#define PD_AFSR1_AFSR4_Msk                (0xf0000UL)               /*!< PD AFSR1: AFSR4 (Bitfield-Mask: 0x0f)                 */
#define PD_AFSR1_AFSR3_Pos                (12UL)                    /*!< PD AFSR1: AFSR3 (Bit 12)                              */
#define PD_AFSR1_AFSR3_Msk                (0xf000UL)                /*!< PD AFSR1: AFSR3 (Bitfield-Mask: 0x0f)                 */
#define PD_AFSR1_AFSR2_Pos                (8UL)                     /*!< PD AFSR1: AFSR2 (Bit 8)                               */
#define PD_AFSR1_AFSR2_Msk                (0xf00UL)                 /*!< PD AFSR1: AFSR2 (Bitfield-Mask: 0x0f)                 */
#define PD_AFSR1_AFSR1_Pos                (4UL)                     /*!< PD AFSR1: AFSR1 (Bit 4)                               */
#define PD_AFSR1_AFSR1_Msk                (0xf0UL)                  /*!< PD AFSR1: AFSR1 (Bitfield-Mask: 0x0f)                 */
#define PD_AFSR1_AFSR0_Pos                (0UL)                     /*!< PD AFSR1: AFSR0 (Bit 0)                               */
#define PD_AFSR1_AFSR0_Msk                (0xfUL)                   /*!< PD AFSR1: AFSR0 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  AFSR2  ========================================================= */
#define PD_AFSR2_AFSR15_Pos               (28UL)                    /*!< PD AFSR2: AFSR15 (Bit 28)                             */
#define PD_AFSR2_AFSR15_Msk               (0xf0000000UL)            /*!< PD AFSR2: AFSR15 (Bitfield-Mask: 0x0f)                */
#define PD_AFSR2_AFSR14_Pos               (24UL)                    /*!< PD AFSR2: AFSR14 (Bit 24)                             */
#define PD_AFSR2_AFSR14_Msk               (0xf000000UL)             /*!< PD AFSR2: AFSR14 (Bitfield-Mask: 0x0f)                */
#define PD_AFSR2_AFSR13_Pos               (20UL)                    /*!< PD AFSR2: AFSR13 (Bit 20)                             */
#define PD_AFSR2_AFSR13_Msk               (0xf00000UL)              /*!< PD AFSR2: AFSR13 (Bitfield-Mask: 0x0f)                */
#define PD_AFSR2_AFSR12_Pos               (16UL)                    /*!< PD AFSR2: AFSR12 (Bit 16)                             */
#define PD_AFSR2_AFSR12_Msk               (0xf0000UL)               /*!< PD AFSR2: AFSR12 (Bitfield-Mask: 0x0f)                */
#define PD_AFSR2_AFSR11_Pos               (12UL)                    /*!< PD AFSR2: AFSR11 (Bit 12)                             */
#define PD_AFSR2_AFSR11_Msk               (0xf000UL)                /*!< PD AFSR2: AFSR11 (Bitfield-Mask: 0x0f)                */
#define PD_AFSR2_AFSR10_Pos               (8UL)                     /*!< PD AFSR2: AFSR10 (Bit 8)                              */
#define PD_AFSR2_AFSR10_Msk               (0xf00UL)                 /*!< PD AFSR2: AFSR10 (Bitfield-Mask: 0x0f)                */
#define PD_AFSR2_AFSR9_Pos                (4UL)                     /*!< PD AFSR2: AFSR9 (Bit 4)                               */
#define PD_AFSR2_AFSR9_Msk                (0xf0UL)                  /*!< PD AFSR2: AFSR9 (Bitfield-Mask: 0x0f)                 */
#define PD_AFSR2_AFSR8_Pos                (0UL)                     /*!< PD AFSR2: AFSR8 (Bit 0)                               */
#define PD_AFSR2_AFSR8_Msk                (0xfUL)                   /*!< PD AFSR2: AFSR8 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  PUPD  ========================================================== */
#define PD_PUPD_PUPD15_Pos                (30UL)                    /*!< PD PUPD: PUPD15 (Bit 30)                              */
#define PD_PUPD_PUPD15_Msk                (0xc0000000UL)            /*!< PD PUPD: PUPD15 (Bitfield-Mask: 0x03)                 */
#define PD_PUPD_PUPD14_Pos                (28UL)                    /*!< PD PUPD: PUPD14 (Bit 28)                              */
#define PD_PUPD_PUPD14_Msk                (0x30000000UL)            /*!< PD PUPD: PUPD14 (Bitfield-Mask: 0x03)                 */
#define PD_PUPD_PUPD13_Pos                (26UL)                    /*!< PD PUPD: PUPD13 (Bit 26)                              */
#define PD_PUPD_PUPD13_Msk                (0xc000000UL)             /*!< PD PUPD: PUPD13 (Bitfield-Mask: 0x03)                 */
#define PD_PUPD_PUPD12_Pos                (24UL)                    /*!< PD PUPD: PUPD12 (Bit 24)                              */
#define PD_PUPD_PUPD12_Msk                (0x3000000UL)             /*!< PD PUPD: PUPD12 (Bitfield-Mask: 0x03)                 */
#define PD_PUPD_PUPD11_Pos                (22UL)                    /*!< PD PUPD: PUPD11 (Bit 22)                              */
#define PD_PUPD_PUPD11_Msk                (0xc00000UL)              /*!< PD PUPD: PUPD11 (Bitfield-Mask: 0x03)                 */
#define PD_PUPD_PUPD10_Pos                (20UL)                    /*!< PD PUPD: PUPD10 (Bit 20)                              */
#define PD_PUPD_PUPD10_Msk                (0x300000UL)              /*!< PD PUPD: PUPD10 (Bitfield-Mask: 0x03)                 */
#define PD_PUPD_PUPD9_Pos                 (18UL)                    /*!< PD PUPD: PUPD9 (Bit 18)                               */
#define PD_PUPD_PUPD9_Msk                 (0xc0000UL)               /*!< PD PUPD: PUPD9 (Bitfield-Mask: 0x03)                  */
#define PD_PUPD_PUPD8_Pos                 (16UL)                    /*!< PD PUPD: PUPD8 (Bit 16)                               */
#define PD_PUPD_PUPD8_Msk                 (0x30000UL)               /*!< PD PUPD: PUPD8 (Bitfield-Mask: 0x03)                  */
#define PD_PUPD_PUPD7_Pos                 (14UL)                    /*!< PD PUPD: PUPD7 (Bit 14)                               */
#define PD_PUPD_PUPD7_Msk                 (0xc000UL)                /*!< PD PUPD: PUPD7 (Bitfield-Mask: 0x03)                  */
#define PD_PUPD_PUPD6_Pos                 (12UL)                    /*!< PD PUPD: PUPD6 (Bit 12)                               */
#define PD_PUPD_PUPD6_Msk                 (0x3000UL)                /*!< PD PUPD: PUPD6 (Bitfield-Mask: 0x03)                  */
#define PD_PUPD_PUPD5_Pos                 (10UL)                    /*!< PD PUPD: PUPD5 (Bit 10)                               */
#define PD_PUPD_PUPD5_Msk                 (0xc00UL)                 /*!< PD PUPD: PUPD5 (Bitfield-Mask: 0x03)                  */
#define PD_PUPD_PUPD4_Pos                 (8UL)                     /*!< PD PUPD: PUPD4 (Bit 8)                                */
#define PD_PUPD_PUPD4_Msk                 (0x300UL)                 /*!< PD PUPD: PUPD4 (Bitfield-Mask: 0x03)                  */
#define PD_PUPD_PUPD3_Pos                 (6UL)                     /*!< PD PUPD: PUPD3 (Bit 6)                                */
#define PD_PUPD_PUPD3_Msk                 (0xc0UL)                  /*!< PD PUPD: PUPD3 (Bitfield-Mask: 0x03)                  */
#define PD_PUPD_PUPD2_Pos                 (4UL)                     /*!< PD PUPD: PUPD2 (Bit 4)                                */
#define PD_PUPD_PUPD2_Msk                 (0x30UL)                  /*!< PD PUPD: PUPD2 (Bitfield-Mask: 0x03)                  */
#define PD_PUPD_PUPD1_Pos                 (2UL)                     /*!< PD PUPD: PUPD1 (Bit 2)                                */
#define PD_PUPD_PUPD1_Msk                 (0xcUL)                   /*!< PD PUPD: PUPD1 (Bitfield-Mask: 0x03)                  */
#define PD_PUPD_PUPD0_Pos                 (0UL)                     /*!< PD PUPD: PUPD0 (Bit 0)                                */
#define PD_PUPD_PUPD0_Msk                 (0x3UL)                   /*!< PD PUPD: PUPD0 (Bitfield-Mask: 0x03)                  */
/* =========================================================  INDR  ========================================================== */
#define PD_INDR_INDR15_Pos                (15UL)                    /*!< PD INDR: INDR15 (Bit 15)                              */
#define PD_INDR_INDR15_Msk                (0x8000UL)                /*!< PD INDR: INDR15 (Bitfield-Mask: 0x01)                 */
#define PD_INDR_INDR14_Pos                (14UL)                    /*!< PD INDR: INDR14 (Bit 14)                              */
#define PD_INDR_INDR14_Msk                (0x4000UL)                /*!< PD INDR: INDR14 (Bitfield-Mask: 0x01)                 */
#define PD_INDR_INDR13_Pos                (13UL)                    /*!< PD INDR: INDR13 (Bit 13)                              */
#define PD_INDR_INDR13_Msk                (0x2000UL)                /*!< PD INDR: INDR13 (Bitfield-Mask: 0x01)                 */
#define PD_INDR_INDR12_Pos                (12UL)                    /*!< PD INDR: INDR12 (Bit 12)                              */
#define PD_INDR_INDR12_Msk                (0x1000UL)                /*!< PD INDR: INDR12 (Bitfield-Mask: 0x01)                 */
#define PD_INDR_INDR11_Pos                (11UL)                    /*!< PD INDR: INDR11 (Bit 11)                              */
#define PD_INDR_INDR11_Msk                (0x800UL)                 /*!< PD INDR: INDR11 (Bitfield-Mask: 0x01)                 */
#define PD_INDR_INDR10_Pos                (10UL)                    /*!< PD INDR: INDR10 (Bit 10)                              */
#define PD_INDR_INDR10_Msk                (0x400UL)                 /*!< PD INDR: INDR10 (Bitfield-Mask: 0x01)                 */
#define PD_INDR_INDR9_Pos                 (9UL)                     /*!< PD INDR: INDR9 (Bit 9)                                */
#define PD_INDR_INDR9_Msk                 (0x200UL)                 /*!< PD INDR: INDR9 (Bitfield-Mask: 0x01)                  */
#define PD_INDR_INDR8_Pos                 (8UL)                     /*!< PD INDR: INDR8 (Bit 8)                                */
#define PD_INDR_INDR8_Msk                 (0x100UL)                 /*!< PD INDR: INDR8 (Bitfield-Mask: 0x01)                  */
#define PD_INDR_INDR7_Pos                 (7UL)                     /*!< PD INDR: INDR7 (Bit 7)                                */
#define PD_INDR_INDR7_Msk                 (0x80UL)                  /*!< PD INDR: INDR7 (Bitfield-Mask: 0x01)                  */
#define PD_INDR_INDR6_Pos                 (6UL)                     /*!< PD INDR: INDR6 (Bit 6)                                */
#define PD_INDR_INDR6_Msk                 (0x40UL)                  /*!< PD INDR: INDR6 (Bitfield-Mask: 0x01)                  */
#define PD_INDR_INDR5_Pos                 (5UL)                     /*!< PD INDR: INDR5 (Bit 5)                                */
#define PD_INDR_INDR5_Msk                 (0x20UL)                  /*!< PD INDR: INDR5 (Bitfield-Mask: 0x01)                  */
#define PD_INDR_INDR4_Pos                 (4UL)                     /*!< PD INDR: INDR4 (Bit 4)                                */
#define PD_INDR_INDR4_Msk                 (0x10UL)                  /*!< PD INDR: INDR4 (Bitfield-Mask: 0x01)                  */
#define PD_INDR_INDR3_Pos                 (3UL)                     /*!< PD INDR: INDR3 (Bit 3)                                */
#define PD_INDR_INDR3_Msk                 (0x8UL)                   /*!< PD INDR: INDR3 (Bitfield-Mask: 0x01)                  */
#define PD_INDR_INDR2_Pos                 (2UL)                     /*!< PD INDR: INDR2 (Bit 2)                                */
#define PD_INDR_INDR2_Msk                 (0x4UL)                   /*!< PD INDR: INDR2 (Bitfield-Mask: 0x01)                  */
#define PD_INDR_INDR1_Pos                 (1UL)                     /*!< PD INDR: INDR1 (Bit 1)                                */
#define PD_INDR_INDR1_Msk                 (0x2UL)                   /*!< PD INDR: INDR1 (Bitfield-Mask: 0x01)                  */
#define PD_INDR_INDR0_Pos                 (0UL)                     /*!< PD INDR: INDR0 (Bit 0)                                */
#define PD_INDR_INDR0_Msk                 (0x1UL)                   /*!< PD INDR: INDR0 (Bitfield-Mask: 0x01)                  */
/* =========================================================  OUTDR  ========================================================= */
#define PD_OUTDR_OUTDR15_Pos              (15UL)                    /*!< PD OUTDR: OUTDR15 (Bit 15)                            */
#define PD_OUTDR_OUTDR15_Msk              (0x8000UL)                /*!< PD OUTDR: OUTDR15 (Bitfield-Mask: 0x01)               */
#define PD_OUTDR_OUTDR14_Pos              (14UL)                    /*!< PD OUTDR: OUTDR14 (Bit 14)                            */
#define PD_OUTDR_OUTDR14_Msk              (0x4000UL)                /*!< PD OUTDR: OUTDR14 (Bitfield-Mask: 0x01)               */
#define PD_OUTDR_OUTDR13_Pos              (13UL)                    /*!< PD OUTDR: OUTDR13 (Bit 13)                            */
#define PD_OUTDR_OUTDR13_Msk              (0x2000UL)                /*!< PD OUTDR: OUTDR13 (Bitfield-Mask: 0x01)               */
#define PD_OUTDR_OUTDR12_Pos              (12UL)                    /*!< PD OUTDR: OUTDR12 (Bit 12)                            */
#define PD_OUTDR_OUTDR12_Msk              (0x1000UL)                /*!< PD OUTDR: OUTDR12 (Bitfield-Mask: 0x01)               */
#define PD_OUTDR_OUTDR11_Pos              (11UL)                    /*!< PD OUTDR: OUTDR11 (Bit 11)                            */
#define PD_OUTDR_OUTDR11_Msk              (0x800UL)                 /*!< PD OUTDR: OUTDR11 (Bitfield-Mask: 0x01)               */
#define PD_OUTDR_OUTDR10_Pos              (10UL)                    /*!< PD OUTDR: OUTDR10 (Bit 10)                            */
#define PD_OUTDR_OUTDR10_Msk              (0x400UL)                 /*!< PD OUTDR: OUTDR10 (Bitfield-Mask: 0x01)               */
#define PD_OUTDR_OUTDR9_Pos               (9UL)                     /*!< PD OUTDR: OUTDR9 (Bit 9)                              */
#define PD_OUTDR_OUTDR9_Msk               (0x200UL)                 /*!< PD OUTDR: OUTDR9 (Bitfield-Mask: 0x01)                */
#define PD_OUTDR_OUTDR8_Pos               (8UL)                     /*!< PD OUTDR: OUTDR8 (Bit 8)                              */
#define PD_OUTDR_OUTDR8_Msk               (0x100UL)                 /*!< PD OUTDR: OUTDR8 (Bitfield-Mask: 0x01)                */
#define PD_OUTDR_OUTDR7_Pos               (7UL)                     /*!< PD OUTDR: OUTDR7 (Bit 7)                              */
#define PD_OUTDR_OUTDR7_Msk               (0x80UL)                  /*!< PD OUTDR: OUTDR7 (Bitfield-Mask: 0x01)                */
#define PD_OUTDR_OUTDR6_Pos               (6UL)                     /*!< PD OUTDR: OUTDR6 (Bit 6)                              */
#define PD_OUTDR_OUTDR6_Msk               (0x40UL)                  /*!< PD OUTDR: OUTDR6 (Bitfield-Mask: 0x01)                */
#define PD_OUTDR_OUTDR5_Pos               (5UL)                     /*!< PD OUTDR: OUTDR5 (Bit 5)                              */
#define PD_OUTDR_OUTDR5_Msk               (0x20UL)                  /*!< PD OUTDR: OUTDR5 (Bitfield-Mask: 0x01)                */
#define PD_OUTDR_OUTDR4_Pos               (4UL)                     /*!< PD OUTDR: OUTDR4 (Bit 4)                              */
#define PD_OUTDR_OUTDR4_Msk               (0x10UL)                  /*!< PD OUTDR: OUTDR4 (Bitfield-Mask: 0x01)                */
#define PD_OUTDR_OUTDR3_Pos               (3UL)                     /*!< PD OUTDR: OUTDR3 (Bit 3)                              */
#define PD_OUTDR_OUTDR3_Msk               (0x8UL)                   /*!< PD OUTDR: OUTDR3 (Bitfield-Mask: 0x01)                */
#define PD_OUTDR_OUTDR2_Pos               (2UL)                     /*!< PD OUTDR: OUTDR2 (Bit 2)                              */
#define PD_OUTDR_OUTDR2_Msk               (0x4UL)                   /*!< PD OUTDR: OUTDR2 (Bitfield-Mask: 0x01)                */
#define PD_OUTDR_OUTDR1_Pos               (1UL)                     /*!< PD OUTDR: OUTDR1 (Bit 1)                              */
#define PD_OUTDR_OUTDR1_Msk               (0x2UL)                   /*!< PD OUTDR: OUTDR1 (Bitfield-Mask: 0x01)                */
#define PD_OUTDR_OUTDR0_Pos               (0UL)                     /*!< PD OUTDR: OUTDR0 (Bit 0)                              */
#define PD_OUTDR_OUTDR0_Msk               (0x1UL)                   /*!< PD OUTDR: OUTDR0 (Bitfield-Mask: 0x01)                */
/* ==========================================================  BSR  ========================================================== */
#define PD_BSR_BSR15_Pos                  (15UL)                    /*!< PD BSR: BSR15 (Bit 15)                                */
#define PD_BSR_BSR15_Msk                  (0x8000UL)                /*!< PD BSR: BSR15 (Bitfield-Mask: 0x01)                   */
#define PD_BSR_BSR14_Pos                  (14UL)                    /*!< PD BSR: BSR14 (Bit 14)                                */
#define PD_BSR_BSR14_Msk                  (0x4000UL)                /*!< PD BSR: BSR14 (Bitfield-Mask: 0x01)                   */
#define PD_BSR_BSR13_Pos                  (13UL)                    /*!< PD BSR: BSR13 (Bit 13)                                */
#define PD_BSR_BSR13_Msk                  (0x2000UL)                /*!< PD BSR: BSR13 (Bitfield-Mask: 0x01)                   */
#define PD_BSR_BSR12_Pos                  (12UL)                    /*!< PD BSR: BSR12 (Bit 12)                                */
#define PD_BSR_BSR12_Msk                  (0x1000UL)                /*!< PD BSR: BSR12 (Bitfield-Mask: 0x01)                   */
#define PD_BSR_BSR11_Pos                  (11UL)                    /*!< PD BSR: BSR11 (Bit 11)                                */
#define PD_BSR_BSR11_Msk                  (0x800UL)                 /*!< PD BSR: BSR11 (Bitfield-Mask: 0x01)                   */
#define PD_BSR_BSR10_Pos                  (10UL)                    /*!< PD BSR: BSR10 (Bit 10)                                */
#define PD_BSR_BSR10_Msk                  (0x400UL)                 /*!< PD BSR: BSR10 (Bitfield-Mask: 0x01)                   */
#define PD_BSR_BSR9_Pos                   (9UL)                     /*!< PD BSR: BSR9 (Bit 9)                                  */
#define PD_BSR_BSR9_Msk                   (0x200UL)                 /*!< PD BSR: BSR9 (Bitfield-Mask: 0x01)                    */
#define PD_BSR_BSR8_Pos                   (8UL)                     /*!< PD BSR: BSR8 (Bit 8)                                  */
#define PD_BSR_BSR8_Msk                   (0x100UL)                 /*!< PD BSR: BSR8 (Bitfield-Mask: 0x01)                    */
#define PD_BSR_BSR7_Pos                   (7UL)                     /*!< PD BSR: BSR7 (Bit 7)                                  */
#define PD_BSR_BSR7_Msk                   (0x80UL)                  /*!< PD BSR: BSR7 (Bitfield-Mask: 0x01)                    */
#define PD_BSR_BSR6_Pos                   (6UL)                     /*!< PD BSR: BSR6 (Bit 6)                                  */
#define PD_BSR_BSR6_Msk                   (0x40UL)                  /*!< PD BSR: BSR6 (Bitfield-Mask: 0x01)                    */
#define PD_BSR_BSR5_Pos                   (5UL)                     /*!< PD BSR: BSR5 (Bit 5)                                  */
#define PD_BSR_BSR5_Msk                   (0x20UL)                  /*!< PD BSR: BSR5 (Bitfield-Mask: 0x01)                    */
#define PD_BSR_BSR4_Pos                   (4UL)                     /*!< PD BSR: BSR4 (Bit 4)                                  */
#define PD_BSR_BSR4_Msk                   (0x10UL)                  /*!< PD BSR: BSR4 (Bitfield-Mask: 0x01)                    */
#define PD_BSR_BSR3_Pos                   (3UL)                     /*!< PD BSR: BSR3 (Bit 3)                                  */
#define PD_BSR_BSR3_Msk                   (0x8UL)                   /*!< PD BSR: BSR3 (Bitfield-Mask: 0x01)                    */
#define PD_BSR_BSR2_Pos                   (2UL)                     /*!< PD BSR: BSR2 (Bit 2)                                  */
#define PD_BSR_BSR2_Msk                   (0x4UL)                   /*!< PD BSR: BSR2 (Bitfield-Mask: 0x01)                    */
#define PD_BSR_BSR1_Pos                   (1UL)                     /*!< PD BSR: BSR1 (Bit 1)                                  */
#define PD_BSR_BSR1_Msk                   (0x2UL)                   /*!< PD BSR: BSR1 (Bitfield-Mask: 0x01)                    */
#define PD_BSR_BSR0_Pos                   (0UL)                     /*!< PD BSR: BSR0 (Bit 0)                                  */
#define PD_BSR_BSR0_Msk                   (0x1UL)                   /*!< PD BSR: BSR0 (Bitfield-Mask: 0x01)                    */
/* ==========================================================  BCR  ========================================================== */
#define PD_BCR_BCR15_Pos                  (15UL)                    /*!< PD BCR: BCR15 (Bit 15)                                */
#define PD_BCR_BCR15_Msk                  (0x8000UL)                /*!< PD BCR: BCR15 (Bitfield-Mask: 0x01)                   */
#define PD_BCR_BCR14_Pos                  (14UL)                    /*!< PD BCR: BCR14 (Bit 14)                                */
#define PD_BCR_BCR14_Msk                  (0x4000UL)                /*!< PD BCR: BCR14 (Bitfield-Mask: 0x01)                   */
#define PD_BCR_BCR13_Pos                  (13UL)                    /*!< PD BCR: BCR13 (Bit 13)                                */
#define PD_BCR_BCR13_Msk                  (0x2000UL)                /*!< PD BCR: BCR13 (Bitfield-Mask: 0x01)                   */
#define PD_BCR_BCR12_Pos                  (12UL)                    /*!< PD BCR: BCR12 (Bit 12)                                */
#define PD_BCR_BCR12_Msk                  (0x1000UL)                /*!< PD BCR: BCR12 (Bitfield-Mask: 0x01)                   */
#define PD_BCR_BCR11_Pos                  (11UL)                    /*!< PD BCR: BCR11 (Bit 11)                                */
#define PD_BCR_BCR11_Msk                  (0x800UL)                 /*!< PD BCR: BCR11 (Bitfield-Mask: 0x01)                   */
#define PD_BCR_BCR10_Pos                  (10UL)                    /*!< PD BCR: BCR10 (Bit 10)                                */
#define PD_BCR_BCR10_Msk                  (0x400UL)                 /*!< PD BCR: BCR10 (Bitfield-Mask: 0x01)                   */
#define PD_BCR_BCR9_Pos                   (9UL)                     /*!< PD BCR: BCR9 (Bit 9)                                  */
#define PD_BCR_BCR9_Msk                   (0x200UL)                 /*!< PD BCR: BCR9 (Bitfield-Mask: 0x01)                    */
#define PD_BCR_BCR8_Pos                   (8UL)                     /*!< PD BCR: BCR8 (Bit 8)                                  */
#define PD_BCR_BCR8_Msk                   (0x100UL)                 /*!< PD BCR: BCR8 (Bitfield-Mask: 0x01)                    */
#define PD_BCR_BCR7_Pos                   (7UL)                     /*!< PD BCR: BCR7 (Bit 7)                                  */
#define PD_BCR_BCR7_Msk                   (0x80UL)                  /*!< PD BCR: BCR7 (Bitfield-Mask: 0x01)                    */
#define PD_BCR_BCR6_Pos                   (6UL)                     /*!< PD BCR: BCR6 (Bit 6)                                  */
#define PD_BCR_BCR6_Msk                   (0x40UL)                  /*!< PD BCR: BCR6 (Bitfield-Mask: 0x01)                    */
#define PD_BCR_BCR5_Pos                   (5UL)                     /*!< PD BCR: BCR5 (Bit 5)                                  */
#define PD_BCR_BCR5_Msk                   (0x20UL)                  /*!< PD BCR: BCR5 (Bitfield-Mask: 0x01)                    */
#define PD_BCR_BCR4_Pos                   (4UL)                     /*!< PD BCR: BCR4 (Bit 4)                                  */
#define PD_BCR_BCR4_Msk                   (0x10UL)                  /*!< PD BCR: BCR4 (Bitfield-Mask: 0x01)                    */
#define PD_BCR_BCR3_Pos                   (3UL)                     /*!< PD BCR: BCR3 (Bit 3)                                  */
#define PD_BCR_BCR3_Msk                   (0x8UL)                   /*!< PD BCR: BCR3 (Bitfield-Mask: 0x01)                    */
#define PD_BCR_BCR2_Pos                   (2UL)                     /*!< PD BCR: BCR2 (Bit 2)                                  */
#define PD_BCR_BCR2_Msk                   (0x4UL)                   /*!< PD BCR: BCR2 (Bitfield-Mask: 0x01)                    */
#define PD_BCR_BCR1_Pos                   (1UL)                     /*!< PD BCR: BCR1 (Bit 1)                                  */
#define PD_BCR_BCR1_Msk                   (0x2UL)                   /*!< PD BCR: BCR1 (Bitfield-Mask: 0x01)                    */
#define PD_BCR_BCR0_Pos                   (0UL)                     /*!< PD BCR: BCR0 (Bit 0)                                  */
#define PD_BCR_BCR0_Msk                   (0x1UL)                   /*!< PD BCR: BCR0 (Bitfield-Mask: 0x01)                    */
/* ========================================================  OUTDMSK  ======================================================== */
#define PD_OUTDMSK_OUTDMSK15_Pos          (15UL)                    /*!< PD OUTDMSK: OUTDMSK15 (Bit 15)                        */
#define PD_OUTDMSK_OUTDMSK15_Msk          (0x8000UL)                /*!< PD OUTDMSK: OUTDMSK15 (Bitfield-Mask: 0x01)           */
#define PD_OUTDMSK_OUTDMSK14_Pos          (14UL)                    /*!< PD OUTDMSK: OUTDMSK14 (Bit 14)                        */
#define PD_OUTDMSK_OUTDMSK14_Msk          (0x4000UL)                /*!< PD OUTDMSK: OUTDMSK14 (Bitfield-Mask: 0x01)           */
#define PD_OUTDMSK_OUTDMSK13_Pos          (13UL)                    /*!< PD OUTDMSK: OUTDMSK13 (Bit 13)                        */
#define PD_OUTDMSK_OUTDMSK13_Msk          (0x2000UL)                /*!< PD OUTDMSK: OUTDMSK13 (Bitfield-Mask: 0x01)           */
#define PD_OUTDMSK_OUTDMSK12_Pos          (12UL)                    /*!< PD OUTDMSK: OUTDMSK12 (Bit 12)                        */
#define PD_OUTDMSK_OUTDMSK12_Msk          (0x1000UL)                /*!< PD OUTDMSK: OUTDMSK12 (Bitfield-Mask: 0x01)           */
#define PD_OUTDMSK_OUTDMSK11_Pos          (11UL)                    /*!< PD OUTDMSK: OUTDMSK11 (Bit 11)                        */
#define PD_OUTDMSK_OUTDMSK11_Msk          (0x800UL)                 /*!< PD OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)           */
#define PD_OUTDMSK_OUTDMSK10_Pos          (10UL)                    /*!< PD OUTDMSK: OUTDMSK10 (Bit 10)                        */
#define PD_OUTDMSK_OUTDMSK10_Msk          (0x400UL)                 /*!< PD OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)           */
#define PD_OUTDMSK_OUTDMSK9_Pos           (9UL)                     /*!< PD OUTDMSK: OUTDMSK9 (Bit 9)                          */
#define PD_OUTDMSK_OUTDMSK9_Msk           (0x200UL)                 /*!< PD OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)            */
#define PD_OUTDMSK_OUTDMSK8_Pos           (8UL)                     /*!< PD OUTDMSK: OUTDMSK8 (Bit 8)                          */
#define PD_OUTDMSK_OUTDMSK8_Msk           (0x100UL)                 /*!< PD OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)            */
#define PD_OUTDMSK_OUTDMSK7_Pos           (7UL)                     /*!< PD OUTDMSK: OUTDMSK7 (Bit 7)                          */
#define PD_OUTDMSK_OUTDMSK7_Msk           (0x80UL)                  /*!< PD OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)            */
#define PD_OUTDMSK_OUTDMSK6_Pos           (6UL)                     /*!< PD OUTDMSK: OUTDMSK6 (Bit 6)                          */
#define PD_OUTDMSK_OUTDMSK6_Msk           (0x40UL)                  /*!< PD OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)            */
#define PD_OUTDMSK_OUTDMSK5_Pos           (5UL)                     /*!< PD OUTDMSK: OUTDMSK5 (Bit 5)                          */
#define PD_OUTDMSK_OUTDMSK5_Msk           (0x20UL)                  /*!< PD OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)            */
#define PD_OUTDMSK_OUTDMSK4_Pos           (4UL)                     /*!< PD OUTDMSK: OUTDMSK4 (Bit 4)                          */
#define PD_OUTDMSK_OUTDMSK4_Msk           (0x10UL)                  /*!< PD OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)            */
#define PD_OUTDMSK_OUTDMSK3_Pos           (3UL)                     /*!< PD OUTDMSK: OUTDMSK3 (Bit 3)                          */
#define PD_OUTDMSK_OUTDMSK3_Msk           (0x8UL)                   /*!< PD OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)            */
#define PD_OUTDMSK_OUTDMSK2_Pos           (2UL)                     /*!< PD OUTDMSK: OUTDMSK2 (Bit 2)                          */
#define PD_OUTDMSK_OUTDMSK2_Msk           (0x4UL)                   /*!< PD OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)            */
#define PD_OUTDMSK_OUTDMSK1_Pos           (1UL)                     /*!< PD OUTDMSK: OUTDMSK1 (Bit 1)                          */
#define PD_OUTDMSK_OUTDMSK1_Msk           (0x2UL)                   /*!< PD OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)            */
#define PD_OUTDMSK_OUTDMSK0_Pos           (0UL)                     /*!< PD OUTDMSK: OUTDMSK0 (Bit 0)                          */
#define PD_OUTDMSK_OUTDMSK0_Msk           (0x1UL)                   /*!< PD OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)            */
/* =========================================================  DBCR  ========================================================== */
#define PD_DBCR_DBCLK_Pos                 (16UL)                    /*!< PD DBCR: DBCLK (Bit 16)                               */
#define PD_DBCR_DBCLK_Msk                 (0x70000UL)               /*!< PD DBCR: DBCLK (Bitfield-Mask: 0x07)                  */
#define PD_DBCR_DBEN11_Pos                (11UL)                    /*!< PD DBCR: DBEN11 (Bit 11)                              */
#define PD_DBCR_DBEN11_Msk                (0x800UL)                 /*!< PD DBCR: DBEN11 (Bitfield-Mask: 0x01)                 */
#define PD_DBCR_DBEN10_Pos                (10UL)                    /*!< PD DBCR: DBEN10 (Bit 10)                              */
#define PD_DBCR_DBEN10_Msk                (0x400UL)                 /*!< PD DBCR: DBEN10 (Bitfield-Mask: 0x01)                 */
#define PD_DBCR_DBEN9_Pos                 (9UL)                     /*!< PD DBCR: DBEN9 (Bit 9)                                */
#define PD_DBCR_DBEN9_Msk                 (0x200UL)                 /*!< PD DBCR: DBEN9 (Bitfield-Mask: 0x01)                  */
#define PD_DBCR_DBEN8_Pos                 (8UL)                     /*!< PD DBCR: DBEN8 (Bit 8)                                */
#define PD_DBCR_DBEN8_Msk                 (0x100UL)                 /*!< PD DBCR: DBEN8 (Bitfield-Mask: 0x01)                  */
#define PD_DBCR_DBEN7_Pos                 (7UL)                     /*!< PD DBCR: DBEN7 (Bit 7)                                */
#define PD_DBCR_DBEN7_Msk                 (0x80UL)                  /*!< PD DBCR: DBEN7 (Bitfield-Mask: 0x01)                  */
#define PD_DBCR_DBEN6_Pos                 (6UL)                     /*!< PD DBCR: DBEN6 (Bit 6)                                */
#define PD_DBCR_DBEN6_Msk                 (0x40UL)                  /*!< PD DBCR: DBEN6 (Bitfield-Mask: 0x01)                  */
#define PD_DBCR_DBEN5_Pos                 (5UL)                     /*!< PD DBCR: DBEN5 (Bit 5)                                */
#define PD_DBCR_DBEN5_Msk                 (0x20UL)                  /*!< PD DBCR: DBEN5 (Bitfield-Mask: 0x01)                  */
#define PD_DBCR_DBEN4_Pos                 (4UL)                     /*!< PD DBCR: DBEN4 (Bit 4)                                */
#define PD_DBCR_DBEN4_Msk                 (0x10UL)                  /*!< PD DBCR: DBEN4 (Bitfield-Mask: 0x01)                  */
#define PD_DBCR_DBEN3_Pos                 (3UL)                     /*!< PD DBCR: DBEN3 (Bit 3)                                */
#define PD_DBCR_DBEN3_Msk                 (0x8UL)                   /*!< PD DBCR: DBEN3 (Bitfield-Mask: 0x01)                  */
#define PD_DBCR_DBEN2_Pos                 (2UL)                     /*!< PD DBCR: DBEN2 (Bit 2)                                */
#define PD_DBCR_DBEN2_Msk                 (0x4UL)                   /*!< PD DBCR: DBEN2 (Bitfield-Mask: 0x01)                  */
#define PD_DBCR_DBEN1_Pos                 (1UL)                     /*!< PD DBCR: DBEN1 (Bit 1)                                */
#define PD_DBCR_DBEN1_Msk                 (0x2UL)                   /*!< PD DBCR: DBEN1 (Bitfield-Mask: 0x01)                  */
#define PD_DBCR_DBEN0_Pos                 (0UL)                     /*!< PD DBCR: DBEN0 (Bit 0)                                */
#define PD_DBCR_DBEN0_Msk                 (0x1UL)                   /*!< PD DBCR: DBEN0 (Bitfield-Mask: 0x01)                  */
/* ========================================================  PD_MOD  ========================================================= */
#define PD_PD_MOD_MODE7_Pos               (14UL)                    /*!< PD PD_MOD: MODE7 (Bit 14)                             */
#define PD_PD_MOD_MODE7_Msk               (0xc000UL)                /*!< PD PD_MOD: MODE7 (Bitfield-Mask: 0x03)                */
#define PD_PD_MOD_MODE6_Pos               (12UL)                    /*!< PD PD_MOD: MODE6 (Bit 12)                             */
#define PD_PD_MOD_MODE6_Msk               (0x3000UL)                /*!< PD PD_MOD: MODE6 (Bitfield-Mask: 0x03)                */
#define PD_PD_MOD_MODE5_Pos               (10UL)                    /*!< PD PD_MOD: MODE5 (Bit 10)                             */
#define PD_PD_MOD_MODE5_Msk               (0xc00UL)                 /*!< PD PD_MOD: MODE5 (Bitfield-Mask: 0x03)                */
#define PD_PD_MOD_MODE4_Pos               (8UL)                     /*!< PD PD_MOD: MODE4 (Bit 8)                              */
#define PD_PD_MOD_MODE4_Msk               (0x300UL)                 /*!< PD PD_MOD: MODE4 (Bitfield-Mask: 0x03)                */
#define PD_PD_MOD_MODE3_Pos               (6UL)                     /*!< PD PD_MOD: MODE3 (Bit 6)                              */
#define PD_PD_MOD_MODE3_Msk               (0xc0UL)                  /*!< PD PD_MOD: MODE3 (Bitfield-Mask: 0x03)                */
#define PD_PD_MOD_MODE2_Pos               (4UL)                     /*!< PD PD_MOD: MODE2 (Bit 4)                              */
#define PD_PD_MOD_MODE2_Msk               (0x30UL)                  /*!< PD PD_MOD: MODE2 (Bitfield-Mask: 0x03)                */
#define PD_PD_MOD_MODE1_Pos               (2UL)                     /*!< PD PD_MOD: MODE1 (Bit 2)                              */
#define PD_PD_MOD_MODE1_Msk               (0xcUL)                   /*!< PD PD_MOD: MODE1 (Bitfield-Mask: 0x03)                */
#define PD_PD_MOD_MODE0_Pos               (0UL)                     /*!< PD PD_MOD: MODE0 (Bit 0)                              */
#define PD_PD_MOD_MODE0_Msk               (0x3UL)                   /*!< PD PD_MOD: MODE0 (Bitfield-Mask: 0x03)                */
/* ========================================================  PD_TYP  ========================================================= */
#define PD_PD_TYP_TYP7_Pos                (7UL)                     /*!< PD PD_TYP: TYP7 (Bit 7)                               */
#define PD_PD_TYP_TYP7_Msk                (0x80UL)                  /*!< PD PD_TYP: TYP7 (Bitfield-Mask: 0x01)                 */
#define PD_PD_TYP_TYP6_Pos                (6UL)                     /*!< PD PD_TYP: TYP6 (Bit 6)                               */
#define PD_PD_TYP_TYP6_Msk                (0x40UL)                  /*!< PD PD_TYP: TYP6 (Bitfield-Mask: 0x01)                 */
#define PD_PD_TYP_TYP5_Pos                (5UL)                     /*!< PD PD_TYP: TYP5 (Bit 5)                               */
#define PD_PD_TYP_TYP5_Msk                (0x20UL)                  /*!< PD PD_TYP: TYP5 (Bitfield-Mask: 0x01)                 */
#define PD_PD_TYP_TYP4_Pos                (4UL)                     /*!< PD PD_TYP: TYP4 (Bit 4)                               */
#define PD_PD_TYP_TYP4_Msk                (0x10UL)                  /*!< PD PD_TYP: TYP4 (Bitfield-Mask: 0x01)                 */
#define PD_PD_TYP_TYP3_Pos                (3UL)                     /*!< PD PD_TYP: TYP3 (Bit 3)                               */
#define PD_PD_TYP_TYP3_Msk                (0x8UL)                   /*!< PD PD_TYP: TYP3 (Bitfield-Mask: 0x01)                 */
#define PD_PD_TYP_TYP2_Pos                (2UL)                     /*!< PD PD_TYP: TYP2 (Bit 2)                               */
#define PD_PD_TYP_TYP2_Msk                (0x4UL)                   /*!< PD PD_TYP: TYP2 (Bitfield-Mask: 0x01)                 */
#define PD_PD_TYP_TYP1_Pos                (1UL)                     /*!< PD PD_TYP: TYP1 (Bit 1)                               */
#define PD_PD_TYP_TYP1_Msk                (0x2UL)                   /*!< PD PD_TYP: TYP1 (Bitfield-Mask: 0x01)                 */
#define PD_PD_TYP_TYP0_Pos                (0UL)                     /*!< PD PD_TYP: TYP0 (Bit 0)                               */
#define PD_PD_TYP_TYP0_Msk                (0x1UL)                   /*!< PD PD_TYP: TYP0 (Bitfield-Mask: 0x01)                 */
/* =======================================================  PD_AFSR1  ======================================================== */
#define PD_PD_AFSR1_AFSR7_Pos             (28UL)                    /*!< PD PD_AFSR1: AFSR7 (Bit 28)                           */
#define PD_PD_AFSR1_AFSR7_Msk             (0xf0000000UL)            /*!< PD PD_AFSR1: AFSR7 (Bitfield-Mask: 0x0f)              */
#define PD_PD_AFSR1_AFSR6_Pos             (24UL)                    /*!< PD PD_AFSR1: AFSR6 (Bit 24)                           */
#define PD_PD_AFSR1_AFSR6_Msk             (0xf000000UL)             /*!< PD PD_AFSR1: AFSR6 (Bitfield-Mask: 0x0f)              */
#define PD_PD_AFSR1_AFSR5_Pos             (20UL)                    /*!< PD PD_AFSR1: AFSR5 (Bit 20)                           */
#define PD_PD_AFSR1_AFSR5_Msk             (0xf00000UL)              /*!< PD PD_AFSR1: AFSR5 (Bitfield-Mask: 0x0f)              */
#define PD_PD_AFSR1_AFSR4_Pos             (16UL)                    /*!< PD PD_AFSR1: AFSR4 (Bit 16)                           */
#define PD_PD_AFSR1_AFSR4_Msk             (0xf0000UL)               /*!< PD PD_AFSR1: AFSR4 (Bitfield-Mask: 0x0f)              */
#define PD_PD_AFSR1_AFSR3_Pos             (12UL)                    /*!< PD PD_AFSR1: AFSR3 (Bit 12)                           */
#define PD_PD_AFSR1_AFSR3_Msk             (0xf000UL)                /*!< PD PD_AFSR1: AFSR3 (Bitfield-Mask: 0x0f)              */
#define PD_PD_AFSR1_AFSR2_Pos             (8UL)                     /*!< PD PD_AFSR1: AFSR2 (Bit 8)                            */
#define PD_PD_AFSR1_AFSR2_Msk             (0xf00UL)                 /*!< PD PD_AFSR1: AFSR2 (Bitfield-Mask: 0x0f)              */
#define PD_PD_AFSR1_AFSR1_Pos             (4UL)                     /*!< PD PD_AFSR1: AFSR1 (Bit 4)                            */
#define PD_PD_AFSR1_AFSR1_Msk             (0xf0UL)                  /*!< PD PD_AFSR1: AFSR1 (Bitfield-Mask: 0x0f)              */
#define PD_PD_AFSR1_AFSR0_Pos             (0UL)                     /*!< PD PD_AFSR1: AFSR0 (Bit 0)                            */
#define PD_PD_AFSR1_AFSR0_Msk             (0xfUL)                   /*!< PD PD_AFSR1: AFSR0 (Bitfield-Mask: 0x0f)              */
/* =======================================================  PD_AFSR2  ======================================================== */
/* ========================================================  PD_PUPD  ======================================================== */
#define PD_PD_PUPD_PUPD7_Pos              (14UL)                    /*!< PD PD_PUPD: PUPD7 (Bit 14)                            */
#define PD_PD_PUPD_PUPD7_Msk              (0xc000UL)                /*!< PD PD_PUPD: PUPD7 (Bitfield-Mask: 0x03)               */
#define PD_PD_PUPD_PUPD6_Pos              (12UL)                    /*!< PD PD_PUPD: PUPD6 (Bit 12)                            */
#define PD_PD_PUPD_PUPD6_Msk              (0x3000UL)                /*!< PD PD_PUPD: PUPD6 (Bitfield-Mask: 0x03)               */
#define PD_PD_PUPD_PUPD5_Pos              (10UL)                    /*!< PD PD_PUPD: PUPD5 (Bit 10)                            */
#define PD_PD_PUPD_PUPD5_Msk              (0xc00UL)                 /*!< PD PD_PUPD: PUPD5 (Bitfield-Mask: 0x03)               */
#define PD_PD_PUPD_PUPD4_Pos              (8UL)                     /*!< PD PD_PUPD: PUPD4 (Bit 8)                             */
#define PD_PD_PUPD_PUPD4_Msk              (0x300UL)                 /*!< PD PD_PUPD: PUPD4 (Bitfield-Mask: 0x03)               */
#define PD_PD_PUPD_PUPD3_Pos              (6UL)                     /*!< PD PD_PUPD: PUPD3 (Bit 6)                             */
#define PD_PD_PUPD_PUPD3_Msk              (0xc0UL)                  /*!< PD PD_PUPD: PUPD3 (Bitfield-Mask: 0x03)               */
#define PD_PD_PUPD_PUPD2_Pos              (4UL)                     /*!< PD PD_PUPD: PUPD2 (Bit 4)                             */
#define PD_PD_PUPD_PUPD2_Msk              (0x30UL)                  /*!< PD PD_PUPD: PUPD2 (Bitfield-Mask: 0x03)               */
#define PD_PD_PUPD_PUPD1_Pos              (2UL)                     /*!< PD PD_PUPD: PUPD1 (Bit 2)                             */
#define PD_PD_PUPD_PUPD1_Msk              (0xcUL)                   /*!< PD PD_PUPD: PUPD1 (Bitfield-Mask: 0x03)               */
#define PD_PD_PUPD_PUPD0_Pos              (0UL)                     /*!< PD PD_PUPD: PUPD0 (Bit 0)                             */
#define PD_PD_PUPD_PUPD0_Msk              (0x3UL)                   /*!< PD PD_PUPD: PUPD0 (Bitfield-Mask: 0x03)               */
/* ========================================================  PD_INDR  ======================================================== */
#define PD_PD_INDR_INDR7_Pos              (7UL)                     /*!< PD PD_INDR: INDR7 (Bit 7)                             */
#define PD_PD_INDR_INDR7_Msk              (0x80UL)                  /*!< PD PD_INDR: INDR7 (Bitfield-Mask: 0x01)               */
#define PD_PD_INDR_INDR6_Pos              (6UL)                     /*!< PD PD_INDR: INDR6 (Bit 6)                             */
#define PD_PD_INDR_INDR6_Msk              (0x40UL)                  /*!< PD PD_INDR: INDR6 (Bitfield-Mask: 0x01)               */
#define PD_PD_INDR_INDR5_Pos              (5UL)                     /*!< PD PD_INDR: INDR5 (Bit 5)                             */
#define PD_PD_INDR_INDR5_Msk              (0x20UL)                  /*!< PD PD_INDR: INDR5 (Bitfield-Mask: 0x01)               */
#define PD_PD_INDR_INDR4_Pos              (4UL)                     /*!< PD PD_INDR: INDR4 (Bit 4)                             */
#define PD_PD_INDR_INDR4_Msk              (0x10UL)                  /*!< PD PD_INDR: INDR4 (Bitfield-Mask: 0x01)               */
#define PD_PD_INDR_INDR3_Pos              (3UL)                     /*!< PD PD_INDR: INDR3 (Bit 3)                             */
#define PD_PD_INDR_INDR3_Msk              (0x8UL)                   /*!< PD PD_INDR: INDR3 (Bitfield-Mask: 0x01)               */
#define PD_PD_INDR_INDR2_Pos              (2UL)                     /*!< PD PD_INDR: INDR2 (Bit 2)                             */
#define PD_PD_INDR_INDR2_Msk              (0x4UL)                   /*!< PD PD_INDR: INDR2 (Bitfield-Mask: 0x01)               */
#define PD_PD_INDR_INDR1_Pos              (1UL)                     /*!< PD PD_INDR: INDR1 (Bit 1)                             */
#define PD_PD_INDR_INDR1_Msk              (0x2UL)                   /*!< PD PD_INDR: INDR1 (Bitfield-Mask: 0x01)               */
#define PD_PD_INDR_INDR0_Pos              (0UL)                     /*!< PD PD_INDR: INDR0 (Bit 0)                             */
#define PD_PD_INDR_INDR0_Msk              (0x1UL)                   /*!< PD PD_INDR: INDR0 (Bitfield-Mask: 0x01)               */
/* =======================================================  PD_OUTDR  ======================================================== */
#define PD_PD_OUTDR_OUTDR7_Pos            (7UL)                     /*!< PD PD_OUTDR: OUTDR7 (Bit 7)                           */
#define PD_PD_OUTDR_OUTDR7_Msk            (0x80UL)                  /*!< PD PD_OUTDR: OUTDR7 (Bitfield-Mask: 0x01)             */
#define PD_PD_OUTDR_OUTDR6_Pos            (6UL)                     /*!< PD PD_OUTDR: OUTDR6 (Bit 6)                           */
#define PD_PD_OUTDR_OUTDR6_Msk            (0x40UL)                  /*!< PD PD_OUTDR: OUTDR6 (Bitfield-Mask: 0x01)             */
#define PD_PD_OUTDR_OUTDR5_Pos            (5UL)                     /*!< PD PD_OUTDR: OUTDR5 (Bit 5)                           */
#define PD_PD_OUTDR_OUTDR5_Msk            (0x20UL)                  /*!< PD PD_OUTDR: OUTDR5 (Bitfield-Mask: 0x01)             */
#define PD_PD_OUTDR_OUTDR4_Pos            (4UL)                     /*!< PD PD_OUTDR: OUTDR4 (Bit 4)                           */
#define PD_PD_OUTDR_OUTDR4_Msk            (0x10UL)                  /*!< PD PD_OUTDR: OUTDR4 (Bitfield-Mask: 0x01)             */
#define PD_PD_OUTDR_OUTDR3_Pos            (3UL)                     /*!< PD PD_OUTDR: OUTDR3 (Bit 3)                           */
#define PD_PD_OUTDR_OUTDR3_Msk            (0x8UL)                   /*!< PD PD_OUTDR: OUTDR3 (Bitfield-Mask: 0x01)             */
#define PD_PD_OUTDR_OUTDR2_Pos            (2UL)                     /*!< PD PD_OUTDR: OUTDR2 (Bit 2)                           */
#define PD_PD_OUTDR_OUTDR2_Msk            (0x4UL)                   /*!< PD PD_OUTDR: OUTDR2 (Bitfield-Mask: 0x01)             */
#define PD_PD_OUTDR_OUTDR1_Pos            (1UL)                     /*!< PD PD_OUTDR: OUTDR1 (Bit 1)                           */
#define PD_PD_OUTDR_OUTDR1_Msk            (0x2UL)                   /*!< PD PD_OUTDR: OUTDR1 (Bitfield-Mask: 0x01)             */
#define PD_PD_OUTDR_OUTDR0_Pos            (0UL)                     /*!< PD PD_OUTDR: OUTDR0 (Bit 0)                           */
#define PD_PD_OUTDR_OUTDR0_Msk            (0x1UL)                   /*!< PD PD_OUTDR: OUTDR0 (Bitfield-Mask: 0x01)             */
/* ========================================================  PD_BSR  ========================================================= */
#define PD_PD_BSR_BSR7_Pos                (7UL)                     /*!< PD PD_BSR: BSR7 (Bit 7)                               */
#define PD_PD_BSR_BSR7_Msk                (0x80UL)                  /*!< PD PD_BSR: BSR7 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BSR_BSR6_Pos                (6UL)                     /*!< PD PD_BSR: BSR6 (Bit 6)                               */
#define PD_PD_BSR_BSR6_Msk                (0x40UL)                  /*!< PD PD_BSR: BSR6 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BSR_BSR5_Pos                (5UL)                     /*!< PD PD_BSR: BSR5 (Bit 5)                               */
#define PD_PD_BSR_BSR5_Msk                (0x20UL)                  /*!< PD PD_BSR: BSR5 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BSR_BSR4_Pos                (4UL)                     /*!< PD PD_BSR: BSR4 (Bit 4)                               */
#define PD_PD_BSR_BSR4_Msk                (0x10UL)                  /*!< PD PD_BSR: BSR4 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BSR_BSR3_Pos                (3UL)                     /*!< PD PD_BSR: BSR3 (Bit 3)                               */
#define PD_PD_BSR_BSR3_Msk                (0x8UL)                   /*!< PD PD_BSR: BSR3 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BSR_BSR2_Pos                (2UL)                     /*!< PD PD_BSR: BSR2 (Bit 2)                               */
#define PD_PD_BSR_BSR2_Msk                (0x4UL)                   /*!< PD PD_BSR: BSR2 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BSR_BSR1_Pos                (1UL)                     /*!< PD PD_BSR: BSR1 (Bit 1)                               */
#define PD_PD_BSR_BSR1_Msk                (0x2UL)                   /*!< PD PD_BSR: BSR1 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BSR_BSR0_Pos                (0UL)                     /*!< PD PD_BSR: BSR0 (Bit 0)                               */
#define PD_PD_BSR_BSR0_Msk                (0x1UL)                   /*!< PD PD_BSR: BSR0 (Bitfield-Mask: 0x01)                 */
/* ========================================================  PD_BCR  ========================================================= */
#define PD_PD_BCR_BCR7_Pos                (7UL)                     /*!< PD PD_BCR: BCR7 (Bit 7)                               */
#define PD_PD_BCR_BCR7_Msk                (0x80UL)                  /*!< PD PD_BCR: BCR7 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BCR_BCR6_Pos                (6UL)                     /*!< PD PD_BCR: BCR6 (Bit 6)                               */
#define PD_PD_BCR_BCR6_Msk                (0x40UL)                  /*!< PD PD_BCR: BCR6 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BCR_BCR5_Pos                (5UL)                     /*!< PD PD_BCR: BCR5 (Bit 5)                               */
#define PD_PD_BCR_BCR5_Msk                (0x20UL)                  /*!< PD PD_BCR: BCR5 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BCR_BCR4_Pos                (4UL)                     /*!< PD PD_BCR: BCR4 (Bit 4)                               */
#define PD_PD_BCR_BCR4_Msk                (0x10UL)                  /*!< PD PD_BCR: BCR4 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BCR_BCR3_Pos                (3UL)                     /*!< PD PD_BCR: BCR3 (Bit 3)                               */
#define PD_PD_BCR_BCR3_Msk                (0x8UL)                   /*!< PD PD_BCR: BCR3 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BCR_BCR2_Pos                (2UL)                     /*!< PD PD_BCR: BCR2 (Bit 2)                               */
#define PD_PD_BCR_BCR2_Msk                (0x4UL)                   /*!< PD PD_BCR: BCR2 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BCR_BCR1_Pos                (1UL)                     /*!< PD PD_BCR: BCR1 (Bit 1)                               */
#define PD_PD_BCR_BCR1_Msk                (0x2UL)                   /*!< PD PD_BCR: BCR1 (Bitfield-Mask: 0x01)                 */
#define PD_PD_BCR_BCR0_Pos                (0UL)                     /*!< PD PD_BCR: BCR0 (Bit 0)                               */
#define PD_PD_BCR_BCR0_Msk                (0x1UL)                   /*!< PD PD_BCR: BCR0 (Bitfield-Mask: 0x01)                 */
/* ======================================================  PD_OUTDMSK  ======================================================= */
#define PD_PD_OUTDMSK_OUTDMSK7_Pos        (7UL)                     /*!< PD PD_OUTDMSK: OUTDMSK7 (Bit 7)                       */
#define PD_PD_OUTDMSK_OUTDMSK7_Msk        (0x80UL)                  /*!< PD PD_OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)         */
#define PD_PD_OUTDMSK_OUTDMSK6_Pos        (6UL)                     /*!< PD PD_OUTDMSK: OUTDMSK6 (Bit 6)                       */
#define PD_PD_OUTDMSK_OUTDMSK6_Msk        (0x40UL)                  /*!< PD PD_OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)         */
#define PD_PD_OUTDMSK_OUTDMSK5_Pos        (5UL)                     /*!< PD PD_OUTDMSK: OUTDMSK5 (Bit 5)                       */
#define PD_PD_OUTDMSK_OUTDMSK5_Msk        (0x20UL)                  /*!< PD PD_OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)         */
#define PD_PD_OUTDMSK_OUTDMSK4_Pos        (4UL)                     /*!< PD PD_OUTDMSK: OUTDMSK4 (Bit 4)                       */
#define PD_PD_OUTDMSK_OUTDMSK4_Msk        (0x10UL)                  /*!< PD PD_OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)         */
#define PD_PD_OUTDMSK_OUTDMSK3_Pos        (3UL)                     /*!< PD PD_OUTDMSK: OUTDMSK3 (Bit 3)                       */
#define PD_PD_OUTDMSK_OUTDMSK3_Msk        (0x8UL)                   /*!< PD PD_OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)         */
#define PD_PD_OUTDMSK_OUTDMSK2_Pos        (2UL)                     /*!< PD PD_OUTDMSK: OUTDMSK2 (Bit 2)                       */
#define PD_PD_OUTDMSK_OUTDMSK2_Msk        (0x4UL)                   /*!< PD PD_OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)         */
#define PD_PD_OUTDMSK_OUTDMSK1_Pos        (1UL)                     /*!< PD PD_OUTDMSK: OUTDMSK1 (Bit 1)                       */
#define PD_PD_OUTDMSK_OUTDMSK1_Msk        (0x2UL)                   /*!< PD PD_OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)         */
#define PD_PD_OUTDMSK_OUTDMSK0_Pos        (0UL)                     /*!< PD PD_OUTDMSK: OUTDMSK0 (Bit 0)                       */
#define PD_PD_OUTDMSK_OUTDMSK0_Msk        (0x1UL)                   /*!< PD PD_OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)         */


/* =========================================================================================================================== */
/* ================                                            PE                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
#define PE_MOD_MODE15_Pos                 (30UL)                    /*!< PE MOD: MODE15 (Bit 30)                               */
#define PE_MOD_MODE15_Msk                 (0xc0000000UL)            /*!< PE MOD: MODE15 (Bitfield-Mask: 0x03)                  */
#define PE_MOD_MODE14_Pos                 (28UL)                    /*!< PE MOD: MODE14 (Bit 28)                               */
#define PE_MOD_MODE14_Msk                 (0x30000000UL)            /*!< PE MOD: MODE14 (Bitfield-Mask: 0x03)                  */
#define PE_MOD_MODE13_Pos                 (26UL)                    /*!< PE MOD: MODE13 (Bit 26)                               */
#define PE_MOD_MODE13_Msk                 (0xc000000UL)             /*!< PE MOD: MODE13 (Bitfield-Mask: 0x03)                  */
#define PE_MOD_MODE12_Pos                 (24UL)                    /*!< PE MOD: MODE12 (Bit 24)                               */
#define PE_MOD_MODE12_Msk                 (0x3000000UL)             /*!< PE MOD: MODE12 (Bitfield-Mask: 0x03)                  */
#define PE_MOD_MODE11_Pos                 (22UL)                    /*!< PE MOD: MODE11 (Bit 22)                               */
#define PE_MOD_MODE11_Msk                 (0xc00000UL)              /*!< PE MOD: MODE11 (Bitfield-Mask: 0x03)                  */
#define PE_MOD_MODE10_Pos                 (20UL)                    /*!< PE MOD: MODE10 (Bit 20)                               */
#define PE_MOD_MODE10_Msk                 (0x300000UL)              /*!< PE MOD: MODE10 (Bitfield-Mask: 0x03)                  */
#define PE_MOD_MODE9_Pos                  (18UL)                    /*!< PE MOD: MODE9 (Bit 18)                                */
#define PE_MOD_MODE9_Msk                  (0xc0000UL)               /*!< PE MOD: MODE9 (Bitfield-Mask: 0x03)                   */
#define PE_MOD_MODE8_Pos                  (16UL)                    /*!< PE MOD: MODE8 (Bit 16)                                */
#define PE_MOD_MODE8_Msk                  (0x30000UL)               /*!< PE MOD: MODE8 (Bitfield-Mask: 0x03)                   */
#define PE_MOD_MODE7_Pos                  (14UL)                    /*!< PE MOD: MODE7 (Bit 14)                                */
#define PE_MOD_MODE7_Msk                  (0xc000UL)                /*!< PE MOD: MODE7 (Bitfield-Mask: 0x03)                   */
#define PE_MOD_MODE6_Pos                  (12UL)                    /*!< PE MOD: MODE6 (Bit 12)                                */
#define PE_MOD_MODE6_Msk                  (0x3000UL)                /*!< PE MOD: MODE6 (Bitfield-Mask: 0x03)                   */
#define PE_MOD_MODE5_Pos                  (10UL)                    /*!< PE MOD: MODE5 (Bit 10)                                */
#define PE_MOD_MODE5_Msk                  (0xc00UL)                 /*!< PE MOD: MODE5 (Bitfield-Mask: 0x03)                   */
#define PE_MOD_MODE4_Pos                  (8UL)                     /*!< PE MOD: MODE4 (Bit 8)                                 */
#define PE_MOD_MODE4_Msk                  (0x300UL)                 /*!< PE MOD: MODE4 (Bitfield-Mask: 0x03)                   */
#define PE_MOD_MODE3_Pos                  (6UL)                     /*!< PE MOD: MODE3 (Bit 6)                                 */
#define PE_MOD_MODE3_Msk                  (0xc0UL)                  /*!< PE MOD: MODE3 (Bitfield-Mask: 0x03)                   */
#define PE_MOD_MODE2_Pos                  (4UL)                     /*!< PE MOD: MODE2 (Bit 4)                                 */
#define PE_MOD_MODE2_Msk                  (0x30UL)                  /*!< PE MOD: MODE2 (Bitfield-Mask: 0x03)                   */
#define PE_MOD_MODE1_Pos                  (2UL)                     /*!< PE MOD: MODE1 (Bit 2)                                 */
#define PE_MOD_MODE1_Msk                  (0xcUL)                   /*!< PE MOD: MODE1 (Bitfield-Mask: 0x03)                   */
#define PE_MOD_MODE0_Pos                  (0UL)                     /*!< PE MOD: MODE0 (Bit 0)                                 */
#define PE_MOD_MODE0_Msk                  (0x3UL)                   /*!< PE MOD: MODE0 (Bitfield-Mask: 0x03)                   */
/* ==========================================================  TYP  ========================================================== */
#define PE_TYP_TYP15_Pos                  (15UL)                    /*!< PE TYP: TYP15 (Bit 15)                                */
#define PE_TYP_TYP15_Msk                  (0x8000UL)                /*!< PE TYP: TYP15 (Bitfield-Mask: 0x01)                   */
#define PE_TYP_TYP14_Pos                  (14UL)                    /*!< PE TYP: TYP14 (Bit 14)                                */
#define PE_TYP_TYP14_Msk                  (0x4000UL)                /*!< PE TYP: TYP14 (Bitfield-Mask: 0x01)                   */
#define PE_TYP_TYP13_Pos                  (13UL)                    /*!< PE TYP: TYP13 (Bit 13)                                */
#define PE_TYP_TYP13_Msk                  (0x2000UL)                /*!< PE TYP: TYP13 (Bitfield-Mask: 0x01)                   */
#define PE_TYP_TYP12_Pos                  (12UL)                    /*!< PE TYP: TYP12 (Bit 12)                                */
#define PE_TYP_TYP12_Msk                  (0x1000UL)                /*!< PE TYP: TYP12 (Bitfield-Mask: 0x01)                   */
#define PE_TYP_TYP11_Pos                  (11UL)                    /*!< PE TYP: TYP11 (Bit 11)                                */
#define PE_TYP_TYP11_Msk                  (0x800UL)                 /*!< PE TYP: TYP11 (Bitfield-Mask: 0x01)                   */
#define PE_TYP_TYP10_Pos                  (10UL)                    /*!< PE TYP: TYP10 (Bit 10)                                */
#define PE_TYP_TYP10_Msk                  (0x400UL)                 /*!< PE TYP: TYP10 (Bitfield-Mask: 0x01)                   */
#define PE_TYP_TYP9_Pos                   (9UL)                     /*!< PE TYP: TYP9 (Bit 9)                                  */
#define PE_TYP_TYP9_Msk                   (0x200UL)                 /*!< PE TYP: TYP9 (Bitfield-Mask: 0x01)                    */
#define PE_TYP_TYP8_Pos                   (8UL)                     /*!< PE TYP: TYP8 (Bit 8)                                  */
#define PE_TYP_TYP8_Msk                   (0x100UL)                 /*!< PE TYP: TYP8 (Bitfield-Mask: 0x01)                    */
#define PE_TYP_TYP7_Pos                   (7UL)                     /*!< PE TYP: TYP7 (Bit 7)                                  */
#define PE_TYP_TYP7_Msk                   (0x80UL)                  /*!< PE TYP: TYP7 (Bitfield-Mask: 0x01)                    */
#define PE_TYP_TYP6_Pos                   (6UL)                     /*!< PE TYP: TYP6 (Bit 6)                                  */
#define PE_TYP_TYP6_Msk                   (0x40UL)                  /*!< PE TYP: TYP6 (Bitfield-Mask: 0x01)                    */
#define PE_TYP_TYP5_Pos                   (5UL)                     /*!< PE TYP: TYP5 (Bit 5)                                  */
#define PE_TYP_TYP5_Msk                   (0x20UL)                  /*!< PE TYP: TYP5 (Bitfield-Mask: 0x01)                    */
#define PE_TYP_TYP4_Pos                   (4UL)                     /*!< PE TYP: TYP4 (Bit 4)                                  */
#define PE_TYP_TYP4_Msk                   (0x10UL)                  /*!< PE TYP: TYP4 (Bitfield-Mask: 0x01)                    */
#define PE_TYP_TYP3_Pos                   (3UL)                     /*!< PE TYP: TYP3 (Bit 3)                                  */
#define PE_TYP_TYP3_Msk                   (0x8UL)                   /*!< PE TYP: TYP3 (Bitfield-Mask: 0x01)                    */
#define PE_TYP_TYP2_Pos                   (2UL)                     /*!< PE TYP: TYP2 (Bit 2)                                  */
#define PE_TYP_TYP2_Msk                   (0x4UL)                   /*!< PE TYP: TYP2 (Bitfield-Mask: 0x01)                    */
#define PE_TYP_TYP1_Pos                   (1UL)                     /*!< PE TYP: TYP1 (Bit 1)                                  */
#define PE_TYP_TYP1_Msk                   (0x2UL)                   /*!< PE TYP: TYP1 (Bitfield-Mask: 0x01)                    */
#define PE_TYP_TYP0_Pos                   (0UL)                     /*!< PE TYP: TYP0 (Bit 0)                                  */
#define PE_TYP_TYP0_Msk                   (0x1UL)                   /*!< PE TYP: TYP0 (Bitfield-Mask: 0x01)                    */
/* =========================================================  AFSR1  ========================================================= */
#define PE_AFSR1_AFSR7_Pos                (28UL)                    /*!< PE AFSR1: AFSR7 (Bit 28)                              */
#define PE_AFSR1_AFSR7_Msk                (0xf0000000UL)            /*!< PE AFSR1: AFSR7 (Bitfield-Mask: 0x0f)                 */
#define PE_AFSR1_AFSR6_Pos                (24UL)                    /*!< PE AFSR1: AFSR6 (Bit 24)                              */
#define PE_AFSR1_AFSR6_Msk                (0xf000000UL)             /*!< PE AFSR1: AFSR6 (Bitfield-Mask: 0x0f)                 */
#define PE_AFSR1_AFSR5_Pos                (20UL)                    /*!< PE AFSR1: AFSR5 (Bit 20)                              */
#define PE_AFSR1_AFSR5_Msk                (0xf00000UL)              /*!< PE AFSR1: AFSR5 (Bitfield-Mask: 0x0f)                 */
#define PE_AFSR1_AFSR4_Pos                (16UL)                    /*!< PE AFSR1: AFSR4 (Bit 16)                              */
#define PE_AFSR1_AFSR4_Msk                (0xf0000UL)               /*!< PE AFSR1: AFSR4 (Bitfield-Mask: 0x0f)                 */
#define PE_AFSR1_AFSR3_Pos                (12UL)                    /*!< PE AFSR1: AFSR3 (Bit 12)                              */
#define PE_AFSR1_AFSR3_Msk                (0xf000UL)                /*!< PE AFSR1: AFSR3 (Bitfield-Mask: 0x0f)                 */
#define PE_AFSR1_AFSR2_Pos                (8UL)                     /*!< PE AFSR1: AFSR2 (Bit 8)                               */
#define PE_AFSR1_AFSR2_Msk                (0xf00UL)                 /*!< PE AFSR1: AFSR2 (Bitfield-Mask: 0x0f)                 */
#define PE_AFSR1_AFSR1_Pos                (4UL)                     /*!< PE AFSR1: AFSR1 (Bit 4)                               */
#define PE_AFSR1_AFSR1_Msk                (0xf0UL)                  /*!< PE AFSR1: AFSR1 (Bitfield-Mask: 0x0f)                 */
#define PE_AFSR1_AFSR0_Pos                (0UL)                     /*!< PE AFSR1: AFSR0 (Bit 0)                               */
#define PE_AFSR1_AFSR0_Msk                (0xfUL)                   /*!< PE AFSR1: AFSR0 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  AFSR2  ========================================================= */
#define PE_AFSR2_AFSR15_Pos               (28UL)                    /*!< PE AFSR2: AFSR15 (Bit 28)                             */
#define PE_AFSR2_AFSR15_Msk               (0xf0000000UL)            /*!< PE AFSR2: AFSR15 (Bitfield-Mask: 0x0f)                */
#define PE_AFSR2_AFSR14_Pos               (24UL)                    /*!< PE AFSR2: AFSR14 (Bit 24)                             */
#define PE_AFSR2_AFSR14_Msk               (0xf000000UL)             /*!< PE AFSR2: AFSR14 (Bitfield-Mask: 0x0f)                */
#define PE_AFSR2_AFSR13_Pos               (20UL)                    /*!< PE AFSR2: AFSR13 (Bit 20)                             */
#define PE_AFSR2_AFSR13_Msk               (0xf00000UL)              /*!< PE AFSR2: AFSR13 (Bitfield-Mask: 0x0f)                */
#define PE_AFSR2_AFSR12_Pos               (16UL)                    /*!< PE AFSR2: AFSR12 (Bit 16)                             */
#define PE_AFSR2_AFSR12_Msk               (0xf0000UL)               /*!< PE AFSR2: AFSR12 (Bitfield-Mask: 0x0f)                */
#define PE_AFSR2_AFSR11_Pos               (12UL)                    /*!< PE AFSR2: AFSR11 (Bit 12)                             */
#define PE_AFSR2_AFSR11_Msk               (0xf000UL)                /*!< PE AFSR2: AFSR11 (Bitfield-Mask: 0x0f)                */
#define PE_AFSR2_AFSR10_Pos               (8UL)                     /*!< PE AFSR2: AFSR10 (Bit 8)                              */
#define PE_AFSR2_AFSR10_Msk               (0xf00UL)                 /*!< PE AFSR2: AFSR10 (Bitfield-Mask: 0x0f)                */
#define PE_AFSR2_AFSR9_Pos                (4UL)                     /*!< PE AFSR2: AFSR9 (Bit 4)                               */
#define PE_AFSR2_AFSR9_Msk                (0xf0UL)                  /*!< PE AFSR2: AFSR9 (Bitfield-Mask: 0x0f)                 */
#define PE_AFSR2_AFSR8_Pos                (0UL)                     /*!< PE AFSR2: AFSR8 (Bit 0)                               */
#define PE_AFSR2_AFSR8_Msk                (0xfUL)                   /*!< PE AFSR2: AFSR8 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  PUPD  ========================================================== */
#define PE_PUPD_PUPD15_Pos                (30UL)                    /*!< PE PUPD: PUPD15 (Bit 30)                              */
#define PE_PUPD_PUPD15_Msk                (0xc0000000UL)            /*!< PE PUPD: PUPD15 (Bitfield-Mask: 0x03)                 */
#define PE_PUPD_PUPD14_Pos                (28UL)                    /*!< PE PUPD: PUPD14 (Bit 28)                              */
#define PE_PUPD_PUPD14_Msk                (0x30000000UL)            /*!< PE PUPD: PUPD14 (Bitfield-Mask: 0x03)                 */
#define PE_PUPD_PUPD13_Pos                (26UL)                    /*!< PE PUPD: PUPD13 (Bit 26)                              */
#define PE_PUPD_PUPD13_Msk                (0xc000000UL)             /*!< PE PUPD: PUPD13 (Bitfield-Mask: 0x03)                 */
#define PE_PUPD_PUPD12_Pos                (24UL)                    /*!< PE PUPD: PUPD12 (Bit 24)                              */
#define PE_PUPD_PUPD12_Msk                (0x3000000UL)             /*!< PE PUPD: PUPD12 (Bitfield-Mask: 0x03)                 */
#define PE_PUPD_PUPD11_Pos                (22UL)                    /*!< PE PUPD: PUPD11 (Bit 22)                              */
#define PE_PUPD_PUPD11_Msk                (0xc00000UL)              /*!< PE PUPD: PUPD11 (Bitfield-Mask: 0x03)                 */
#define PE_PUPD_PUPD10_Pos                (20UL)                    /*!< PE PUPD: PUPD10 (Bit 20)                              */
#define PE_PUPD_PUPD10_Msk                (0x300000UL)              /*!< PE PUPD: PUPD10 (Bitfield-Mask: 0x03)                 */
#define PE_PUPD_PUPD9_Pos                 (18UL)                    /*!< PE PUPD: PUPD9 (Bit 18)                               */
#define PE_PUPD_PUPD9_Msk                 (0xc0000UL)               /*!< PE PUPD: PUPD9 (Bitfield-Mask: 0x03)                  */
#define PE_PUPD_PUPD8_Pos                 (16UL)                    /*!< PE PUPD: PUPD8 (Bit 16)                               */
#define PE_PUPD_PUPD8_Msk                 (0x30000UL)               /*!< PE PUPD: PUPD8 (Bitfield-Mask: 0x03)                  */
#define PE_PUPD_PUPD7_Pos                 (14UL)                    /*!< PE PUPD: PUPD7 (Bit 14)                               */
#define PE_PUPD_PUPD7_Msk                 (0xc000UL)                /*!< PE PUPD: PUPD7 (Bitfield-Mask: 0x03)                  */
#define PE_PUPD_PUPD6_Pos                 (12UL)                    /*!< PE PUPD: PUPD6 (Bit 12)                               */
#define PE_PUPD_PUPD6_Msk                 (0x3000UL)                /*!< PE PUPD: PUPD6 (Bitfield-Mask: 0x03)                  */
#define PE_PUPD_PUPD5_Pos                 (10UL)                    /*!< PE PUPD: PUPD5 (Bit 10)                               */
#define PE_PUPD_PUPD5_Msk                 (0xc00UL)                 /*!< PE PUPD: PUPD5 (Bitfield-Mask: 0x03)                  */
#define PE_PUPD_PUPD4_Pos                 (8UL)                     /*!< PE PUPD: PUPD4 (Bit 8)                                */
#define PE_PUPD_PUPD4_Msk                 (0x300UL)                 /*!< PE PUPD: PUPD4 (Bitfield-Mask: 0x03)                  */
#define PE_PUPD_PUPD3_Pos                 (6UL)                     /*!< PE PUPD: PUPD3 (Bit 6)                                */
#define PE_PUPD_PUPD3_Msk                 (0xc0UL)                  /*!< PE PUPD: PUPD3 (Bitfield-Mask: 0x03)                  */
#define PE_PUPD_PUPD2_Pos                 (4UL)                     /*!< PE PUPD: PUPD2 (Bit 4)                                */
#define PE_PUPD_PUPD2_Msk                 (0x30UL)                  /*!< PE PUPD: PUPD2 (Bitfield-Mask: 0x03)                  */
#define PE_PUPD_PUPD1_Pos                 (2UL)                     /*!< PE PUPD: PUPD1 (Bit 2)                                */
#define PE_PUPD_PUPD1_Msk                 (0xcUL)                   /*!< PE PUPD: PUPD1 (Bitfield-Mask: 0x03)                  */
#define PE_PUPD_PUPD0_Pos                 (0UL)                     /*!< PE PUPD: PUPD0 (Bit 0)                                */
#define PE_PUPD_PUPD0_Msk                 (0x3UL)                   /*!< PE PUPD: PUPD0 (Bitfield-Mask: 0x03)                  */
/* =========================================================  INDR  ========================================================== */
#define PE_INDR_INDR15_Pos                (15UL)                    /*!< PE INDR: INDR15 (Bit 15)                              */
#define PE_INDR_INDR15_Msk                (0x8000UL)                /*!< PE INDR: INDR15 (Bitfield-Mask: 0x01)                 */
#define PE_INDR_INDR14_Pos                (14UL)                    /*!< PE INDR: INDR14 (Bit 14)                              */
#define PE_INDR_INDR14_Msk                (0x4000UL)                /*!< PE INDR: INDR14 (Bitfield-Mask: 0x01)                 */
#define PE_INDR_INDR13_Pos                (13UL)                    /*!< PE INDR: INDR13 (Bit 13)                              */
#define PE_INDR_INDR13_Msk                (0x2000UL)                /*!< PE INDR: INDR13 (Bitfield-Mask: 0x01)                 */
#define PE_INDR_INDR12_Pos                (12UL)                    /*!< PE INDR: INDR12 (Bit 12)                              */
#define PE_INDR_INDR12_Msk                (0x1000UL)                /*!< PE INDR: INDR12 (Bitfield-Mask: 0x01)                 */
#define PE_INDR_INDR11_Pos                (11UL)                    /*!< PE INDR: INDR11 (Bit 11)                              */
#define PE_INDR_INDR11_Msk                (0x800UL)                 /*!< PE INDR: INDR11 (Bitfield-Mask: 0x01)                 */
#define PE_INDR_INDR10_Pos                (10UL)                    /*!< PE INDR: INDR10 (Bit 10)                              */
#define PE_INDR_INDR10_Msk                (0x400UL)                 /*!< PE INDR: INDR10 (Bitfield-Mask: 0x01)                 */
#define PE_INDR_INDR9_Pos                 (9UL)                     /*!< PE INDR: INDR9 (Bit 9)                                */
#define PE_INDR_INDR9_Msk                 (0x200UL)                 /*!< PE INDR: INDR9 (Bitfield-Mask: 0x01)                  */
#define PE_INDR_INDR8_Pos                 (8UL)                     /*!< PE INDR: INDR8 (Bit 8)                                */
#define PE_INDR_INDR8_Msk                 (0x100UL)                 /*!< PE INDR: INDR8 (Bitfield-Mask: 0x01)                  */
#define PE_INDR_INDR7_Pos                 (7UL)                     /*!< PE INDR: INDR7 (Bit 7)                                */
#define PE_INDR_INDR7_Msk                 (0x80UL)                  /*!< PE INDR: INDR7 (Bitfield-Mask: 0x01)                  */
#define PE_INDR_INDR6_Pos                 (6UL)                     /*!< PE INDR: INDR6 (Bit 6)                                */
#define PE_INDR_INDR6_Msk                 (0x40UL)                  /*!< PE INDR: INDR6 (Bitfield-Mask: 0x01)                  */
#define PE_INDR_INDR5_Pos                 (5UL)                     /*!< PE INDR: INDR5 (Bit 5)                                */
#define PE_INDR_INDR5_Msk                 (0x20UL)                  /*!< PE INDR: INDR5 (Bitfield-Mask: 0x01)                  */
#define PE_INDR_INDR4_Pos                 (4UL)                     /*!< PE INDR: INDR4 (Bit 4)                                */
#define PE_INDR_INDR4_Msk                 (0x10UL)                  /*!< PE INDR: INDR4 (Bitfield-Mask: 0x01)                  */
#define PE_INDR_INDR3_Pos                 (3UL)                     /*!< PE INDR: INDR3 (Bit 3)                                */
#define PE_INDR_INDR3_Msk                 (0x8UL)                   /*!< PE INDR: INDR3 (Bitfield-Mask: 0x01)                  */
#define PE_INDR_INDR2_Pos                 (2UL)                     /*!< PE INDR: INDR2 (Bit 2)                                */
#define PE_INDR_INDR2_Msk                 (0x4UL)                   /*!< PE INDR: INDR2 (Bitfield-Mask: 0x01)                  */
#define PE_INDR_INDR1_Pos                 (1UL)                     /*!< PE INDR: INDR1 (Bit 1)                                */
#define PE_INDR_INDR1_Msk                 (0x2UL)                   /*!< PE INDR: INDR1 (Bitfield-Mask: 0x01)                  */
#define PE_INDR_INDR0_Pos                 (0UL)                     /*!< PE INDR: INDR0 (Bit 0)                                */
#define PE_INDR_INDR0_Msk                 (0x1UL)                   /*!< PE INDR: INDR0 (Bitfield-Mask: 0x01)                  */
/* =========================================================  OUTDR  ========================================================= */
#define PE_OUTDR_OUTDR15_Pos              (15UL)                    /*!< PE OUTDR: OUTDR15 (Bit 15)                            */
#define PE_OUTDR_OUTDR15_Msk              (0x8000UL)                /*!< PE OUTDR: OUTDR15 (Bitfield-Mask: 0x01)               */
#define PE_OUTDR_OUTDR14_Pos              (14UL)                    /*!< PE OUTDR: OUTDR14 (Bit 14)                            */
#define PE_OUTDR_OUTDR14_Msk              (0x4000UL)                /*!< PE OUTDR: OUTDR14 (Bitfield-Mask: 0x01)               */
#define PE_OUTDR_OUTDR13_Pos              (13UL)                    /*!< PE OUTDR: OUTDR13 (Bit 13)                            */
#define PE_OUTDR_OUTDR13_Msk              (0x2000UL)                /*!< PE OUTDR: OUTDR13 (Bitfield-Mask: 0x01)               */
#define PE_OUTDR_OUTDR12_Pos              (12UL)                    /*!< PE OUTDR: OUTDR12 (Bit 12)                            */
#define PE_OUTDR_OUTDR12_Msk              (0x1000UL)                /*!< PE OUTDR: OUTDR12 (Bitfield-Mask: 0x01)               */
#define PE_OUTDR_OUTDR11_Pos              (11UL)                    /*!< PE OUTDR: OUTDR11 (Bit 11)                            */
#define PE_OUTDR_OUTDR11_Msk              (0x800UL)                 /*!< PE OUTDR: OUTDR11 (Bitfield-Mask: 0x01)               */
#define PE_OUTDR_OUTDR10_Pos              (10UL)                    /*!< PE OUTDR: OUTDR10 (Bit 10)                            */
#define PE_OUTDR_OUTDR10_Msk              (0x400UL)                 /*!< PE OUTDR: OUTDR10 (Bitfield-Mask: 0x01)               */
#define PE_OUTDR_OUTDR9_Pos               (9UL)                     /*!< PE OUTDR: OUTDR9 (Bit 9)                              */
#define PE_OUTDR_OUTDR9_Msk               (0x200UL)                 /*!< PE OUTDR: OUTDR9 (Bitfield-Mask: 0x01)                */
#define PE_OUTDR_OUTDR8_Pos               (8UL)                     /*!< PE OUTDR: OUTDR8 (Bit 8)                              */
#define PE_OUTDR_OUTDR8_Msk               (0x100UL)                 /*!< PE OUTDR: OUTDR8 (Bitfield-Mask: 0x01)                */
#define PE_OUTDR_OUTDR7_Pos               (7UL)                     /*!< PE OUTDR: OUTDR7 (Bit 7)                              */
#define PE_OUTDR_OUTDR7_Msk               (0x80UL)                  /*!< PE OUTDR: OUTDR7 (Bitfield-Mask: 0x01)                */
#define PE_OUTDR_OUTDR6_Pos               (6UL)                     /*!< PE OUTDR: OUTDR6 (Bit 6)                              */
#define PE_OUTDR_OUTDR6_Msk               (0x40UL)                  /*!< PE OUTDR: OUTDR6 (Bitfield-Mask: 0x01)                */
#define PE_OUTDR_OUTDR5_Pos               (5UL)                     /*!< PE OUTDR: OUTDR5 (Bit 5)                              */
#define PE_OUTDR_OUTDR5_Msk               (0x20UL)                  /*!< PE OUTDR: OUTDR5 (Bitfield-Mask: 0x01)                */
#define PE_OUTDR_OUTDR4_Pos               (4UL)                     /*!< PE OUTDR: OUTDR4 (Bit 4)                              */
#define PE_OUTDR_OUTDR4_Msk               (0x10UL)                  /*!< PE OUTDR: OUTDR4 (Bitfield-Mask: 0x01)                */
#define PE_OUTDR_OUTDR3_Pos               (3UL)                     /*!< PE OUTDR: OUTDR3 (Bit 3)                              */
#define PE_OUTDR_OUTDR3_Msk               (0x8UL)                   /*!< PE OUTDR: OUTDR3 (Bitfield-Mask: 0x01)                */
#define PE_OUTDR_OUTDR2_Pos               (2UL)                     /*!< PE OUTDR: OUTDR2 (Bit 2)                              */
#define PE_OUTDR_OUTDR2_Msk               (0x4UL)                   /*!< PE OUTDR: OUTDR2 (Bitfield-Mask: 0x01)                */
#define PE_OUTDR_OUTDR1_Pos               (1UL)                     /*!< PE OUTDR: OUTDR1 (Bit 1)                              */
#define PE_OUTDR_OUTDR1_Msk               (0x2UL)                   /*!< PE OUTDR: OUTDR1 (Bitfield-Mask: 0x01)                */
#define PE_OUTDR_OUTDR0_Pos               (0UL)                     /*!< PE OUTDR: OUTDR0 (Bit 0)                              */
#define PE_OUTDR_OUTDR0_Msk               (0x1UL)                   /*!< PE OUTDR: OUTDR0 (Bitfield-Mask: 0x01)                */
/* ==========================================================  BSR  ========================================================== */
#define PE_BSR_BSR15_Pos                  (15UL)                    /*!< PE BSR: BSR15 (Bit 15)                                */
#define PE_BSR_BSR15_Msk                  (0x8000UL)                /*!< PE BSR: BSR15 (Bitfield-Mask: 0x01)                   */
#define PE_BSR_BSR14_Pos                  (14UL)                    /*!< PE BSR: BSR14 (Bit 14)                                */
#define PE_BSR_BSR14_Msk                  (0x4000UL)                /*!< PE BSR: BSR14 (Bitfield-Mask: 0x01)                   */
#define PE_BSR_BSR13_Pos                  (13UL)                    /*!< PE BSR: BSR13 (Bit 13)                                */
#define PE_BSR_BSR13_Msk                  (0x2000UL)                /*!< PE BSR: BSR13 (Bitfield-Mask: 0x01)                   */
#define PE_BSR_BSR12_Pos                  (12UL)                    /*!< PE BSR: BSR12 (Bit 12)                                */
#define PE_BSR_BSR12_Msk                  (0x1000UL)                /*!< PE BSR: BSR12 (Bitfield-Mask: 0x01)                   */
#define PE_BSR_BSR11_Pos                  (11UL)                    /*!< PE BSR: BSR11 (Bit 11)                                */
#define PE_BSR_BSR11_Msk                  (0x800UL)                 /*!< PE BSR: BSR11 (Bitfield-Mask: 0x01)                   */
#define PE_BSR_BSR10_Pos                  (10UL)                    /*!< PE BSR: BSR10 (Bit 10)                                */
#define PE_BSR_BSR10_Msk                  (0x400UL)                 /*!< PE BSR: BSR10 (Bitfield-Mask: 0x01)                   */
#define PE_BSR_BSR9_Pos                   (9UL)                     /*!< PE BSR: BSR9 (Bit 9)                                  */
#define PE_BSR_BSR9_Msk                   (0x200UL)                 /*!< PE BSR: BSR9 (Bitfield-Mask: 0x01)                    */
#define PE_BSR_BSR8_Pos                   (8UL)                     /*!< PE BSR: BSR8 (Bit 8)                                  */
#define PE_BSR_BSR8_Msk                   (0x100UL)                 /*!< PE BSR: BSR8 (Bitfield-Mask: 0x01)                    */
#define PE_BSR_BSR7_Pos                   (7UL)                     /*!< PE BSR: BSR7 (Bit 7)                                  */
#define PE_BSR_BSR7_Msk                   (0x80UL)                  /*!< PE BSR: BSR7 (Bitfield-Mask: 0x01)                    */
#define PE_BSR_BSR6_Pos                   (6UL)                     /*!< PE BSR: BSR6 (Bit 6)                                  */
#define PE_BSR_BSR6_Msk                   (0x40UL)                  /*!< PE BSR: BSR6 (Bitfield-Mask: 0x01)                    */
#define PE_BSR_BSR5_Pos                   (5UL)                     /*!< PE BSR: BSR5 (Bit 5)                                  */
#define PE_BSR_BSR5_Msk                   (0x20UL)                  /*!< PE BSR: BSR5 (Bitfield-Mask: 0x01)                    */
#define PE_BSR_BSR4_Pos                   (4UL)                     /*!< PE BSR: BSR4 (Bit 4)                                  */
#define PE_BSR_BSR4_Msk                   (0x10UL)                  /*!< PE BSR: BSR4 (Bitfield-Mask: 0x01)                    */
#define PE_BSR_BSR3_Pos                   (3UL)                     /*!< PE BSR: BSR3 (Bit 3)                                  */
#define PE_BSR_BSR3_Msk                   (0x8UL)                   /*!< PE BSR: BSR3 (Bitfield-Mask: 0x01)                    */
#define PE_BSR_BSR2_Pos                   (2UL)                     /*!< PE BSR: BSR2 (Bit 2)                                  */
#define PE_BSR_BSR2_Msk                   (0x4UL)                   /*!< PE BSR: BSR2 (Bitfield-Mask: 0x01)                    */
#define PE_BSR_BSR1_Pos                   (1UL)                     /*!< PE BSR: BSR1 (Bit 1)                                  */
#define PE_BSR_BSR1_Msk                   (0x2UL)                   /*!< PE BSR: BSR1 (Bitfield-Mask: 0x01)                    */
#define PE_BSR_BSR0_Pos                   (0UL)                     /*!< PE BSR: BSR0 (Bit 0)                                  */
#define PE_BSR_BSR0_Msk                   (0x1UL)                   /*!< PE BSR: BSR0 (Bitfield-Mask: 0x01)                    */
/* ==========================================================  BCR  ========================================================== */
#define PE_BCR_BCR15_Pos                  (15UL)                    /*!< PE BCR: BCR15 (Bit 15)                                */
#define PE_BCR_BCR15_Msk                  (0x8000UL)                /*!< PE BCR: BCR15 (Bitfield-Mask: 0x01)                   */
#define PE_BCR_BCR14_Pos                  (14UL)                    /*!< PE BCR: BCR14 (Bit 14)                                */
#define PE_BCR_BCR14_Msk                  (0x4000UL)                /*!< PE BCR: BCR14 (Bitfield-Mask: 0x01)                   */
#define PE_BCR_BCR13_Pos                  (13UL)                    /*!< PE BCR: BCR13 (Bit 13)                                */
#define PE_BCR_BCR13_Msk                  (0x2000UL)                /*!< PE BCR: BCR13 (Bitfield-Mask: 0x01)                   */
#define PE_BCR_BCR12_Pos                  (12UL)                    /*!< PE BCR: BCR12 (Bit 12)                                */
#define PE_BCR_BCR12_Msk                  (0x1000UL)                /*!< PE BCR: BCR12 (Bitfield-Mask: 0x01)                   */
#define PE_BCR_BCR11_Pos                  (11UL)                    /*!< PE BCR: BCR11 (Bit 11)                                */
#define PE_BCR_BCR11_Msk                  (0x800UL)                 /*!< PE BCR: BCR11 (Bitfield-Mask: 0x01)                   */
#define PE_BCR_BCR10_Pos                  (10UL)                    /*!< PE BCR: BCR10 (Bit 10)                                */
#define PE_BCR_BCR10_Msk                  (0x400UL)                 /*!< PE BCR: BCR10 (Bitfield-Mask: 0x01)                   */
#define PE_BCR_BCR9_Pos                   (9UL)                     /*!< PE BCR: BCR9 (Bit 9)                                  */
#define PE_BCR_BCR9_Msk                   (0x200UL)                 /*!< PE BCR: BCR9 (Bitfield-Mask: 0x01)                    */
#define PE_BCR_BCR8_Pos                   (8UL)                     /*!< PE BCR: BCR8 (Bit 8)                                  */
#define PE_BCR_BCR8_Msk                   (0x100UL)                 /*!< PE BCR: BCR8 (Bitfield-Mask: 0x01)                    */
#define PE_BCR_BCR7_Pos                   (7UL)                     /*!< PE BCR: BCR7 (Bit 7)                                  */
#define PE_BCR_BCR7_Msk                   (0x80UL)                  /*!< PE BCR: BCR7 (Bitfield-Mask: 0x01)                    */
#define PE_BCR_BCR6_Pos                   (6UL)                     /*!< PE BCR: BCR6 (Bit 6)                                  */
#define PE_BCR_BCR6_Msk                   (0x40UL)                  /*!< PE BCR: BCR6 (Bitfield-Mask: 0x01)                    */
#define PE_BCR_BCR5_Pos                   (5UL)                     /*!< PE BCR: BCR5 (Bit 5)                                  */
#define PE_BCR_BCR5_Msk                   (0x20UL)                  /*!< PE BCR: BCR5 (Bitfield-Mask: 0x01)                    */
#define PE_BCR_BCR4_Pos                   (4UL)                     /*!< PE BCR: BCR4 (Bit 4)                                  */
#define PE_BCR_BCR4_Msk                   (0x10UL)                  /*!< PE BCR: BCR4 (Bitfield-Mask: 0x01)                    */
#define PE_BCR_BCR3_Pos                   (3UL)                     /*!< PE BCR: BCR3 (Bit 3)                                  */
#define PE_BCR_BCR3_Msk                   (0x8UL)                   /*!< PE BCR: BCR3 (Bitfield-Mask: 0x01)                    */
#define PE_BCR_BCR2_Pos                   (2UL)                     /*!< PE BCR: BCR2 (Bit 2)                                  */
#define PE_BCR_BCR2_Msk                   (0x4UL)                   /*!< PE BCR: BCR2 (Bitfield-Mask: 0x01)                    */
#define PE_BCR_BCR1_Pos                   (1UL)                     /*!< PE BCR: BCR1 (Bit 1)                                  */
#define PE_BCR_BCR1_Msk                   (0x2UL)                   /*!< PE BCR: BCR1 (Bitfield-Mask: 0x01)                    */
#define PE_BCR_BCR0_Pos                   (0UL)                     /*!< PE BCR: BCR0 (Bit 0)                                  */
#define PE_BCR_BCR0_Msk                   (0x1UL)                   /*!< PE BCR: BCR0 (Bitfield-Mask: 0x01)                    */
/* ========================================================  OUTDMSK  ======================================================== */
#define PE_OUTDMSK_OUTDMSK15_Pos          (15UL)                    /*!< PE OUTDMSK: OUTDMSK15 (Bit 15)                        */
#define PE_OUTDMSK_OUTDMSK15_Msk          (0x8000UL)                /*!< PE OUTDMSK: OUTDMSK15 (Bitfield-Mask: 0x01)           */
#define PE_OUTDMSK_OUTDMSK14_Pos          (14UL)                    /*!< PE OUTDMSK: OUTDMSK14 (Bit 14)                        */
#define PE_OUTDMSK_OUTDMSK14_Msk          (0x4000UL)                /*!< PE OUTDMSK: OUTDMSK14 (Bitfield-Mask: 0x01)           */
#define PE_OUTDMSK_OUTDMSK13_Pos          (13UL)                    /*!< PE OUTDMSK: OUTDMSK13 (Bit 13)                        */
#define PE_OUTDMSK_OUTDMSK13_Msk          (0x2000UL)                /*!< PE OUTDMSK: OUTDMSK13 (Bitfield-Mask: 0x01)           */
#define PE_OUTDMSK_OUTDMSK12_Pos          (12UL)                    /*!< PE OUTDMSK: OUTDMSK12 (Bit 12)                        */
#define PE_OUTDMSK_OUTDMSK12_Msk          (0x1000UL)                /*!< PE OUTDMSK: OUTDMSK12 (Bitfield-Mask: 0x01)           */
#define PE_OUTDMSK_OUTDMSK11_Pos          (11UL)                    /*!< PE OUTDMSK: OUTDMSK11 (Bit 11)                        */
#define PE_OUTDMSK_OUTDMSK11_Msk          (0x800UL)                 /*!< PE OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)           */
#define PE_OUTDMSK_OUTDMSK10_Pos          (10UL)                    /*!< PE OUTDMSK: OUTDMSK10 (Bit 10)                        */
#define PE_OUTDMSK_OUTDMSK10_Msk          (0x400UL)                 /*!< PE OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)           */
#define PE_OUTDMSK_OUTDMSK9_Pos           (9UL)                     /*!< PE OUTDMSK: OUTDMSK9 (Bit 9)                          */
#define PE_OUTDMSK_OUTDMSK9_Msk           (0x200UL)                 /*!< PE OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)            */
#define PE_OUTDMSK_OUTDMSK8_Pos           (8UL)                     /*!< PE OUTDMSK: OUTDMSK8 (Bit 8)                          */
#define PE_OUTDMSK_OUTDMSK8_Msk           (0x100UL)                 /*!< PE OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)            */
#define PE_OUTDMSK_OUTDMSK7_Pos           (7UL)                     /*!< PE OUTDMSK: OUTDMSK7 (Bit 7)                          */
#define PE_OUTDMSK_OUTDMSK7_Msk           (0x80UL)                  /*!< PE OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)            */
#define PE_OUTDMSK_OUTDMSK6_Pos           (6UL)                     /*!< PE OUTDMSK: OUTDMSK6 (Bit 6)                          */
#define PE_OUTDMSK_OUTDMSK6_Msk           (0x40UL)                  /*!< PE OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)            */
#define PE_OUTDMSK_OUTDMSK5_Pos           (5UL)                     /*!< PE OUTDMSK: OUTDMSK5 (Bit 5)                          */
#define PE_OUTDMSK_OUTDMSK5_Msk           (0x20UL)                  /*!< PE OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)            */
#define PE_OUTDMSK_OUTDMSK4_Pos           (4UL)                     /*!< PE OUTDMSK: OUTDMSK4 (Bit 4)                          */
#define PE_OUTDMSK_OUTDMSK4_Msk           (0x10UL)                  /*!< PE OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)            */
#define PE_OUTDMSK_OUTDMSK3_Pos           (3UL)                     /*!< PE OUTDMSK: OUTDMSK3 (Bit 3)                          */
#define PE_OUTDMSK_OUTDMSK3_Msk           (0x8UL)                   /*!< PE OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)            */
#define PE_OUTDMSK_OUTDMSK2_Pos           (2UL)                     /*!< PE OUTDMSK: OUTDMSK2 (Bit 2)                          */
#define PE_OUTDMSK_OUTDMSK2_Msk           (0x4UL)                   /*!< PE OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)            */
#define PE_OUTDMSK_OUTDMSK1_Pos           (1UL)                     /*!< PE OUTDMSK: OUTDMSK1 (Bit 1)                          */
#define PE_OUTDMSK_OUTDMSK1_Msk           (0x2UL)                   /*!< PE OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)            */
#define PE_OUTDMSK_OUTDMSK0_Pos           (0UL)                     /*!< PE OUTDMSK: OUTDMSK0 (Bit 0)                          */
#define PE_OUTDMSK_OUTDMSK0_Msk           (0x1UL)                   /*!< PE OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)            */
/* =========================================================  DBCR  ========================================================== */
#define PE_DBCR_DBCLK_Pos                 (16UL)                    /*!< PE DBCR: DBCLK (Bit 16)                               */
#define PE_DBCR_DBCLK_Msk                 (0x70000UL)               /*!< PE DBCR: DBCLK (Bitfield-Mask: 0x07)                  */
#define PE_DBCR_DBEN11_Pos                (11UL)                    /*!< PE DBCR: DBEN11 (Bit 11)                              */
#define PE_DBCR_DBEN11_Msk                (0x800UL)                 /*!< PE DBCR: DBEN11 (Bitfield-Mask: 0x01)                 */
#define PE_DBCR_DBEN10_Pos                (10UL)                    /*!< PE DBCR: DBEN10 (Bit 10)                              */
#define PE_DBCR_DBEN10_Msk                (0x400UL)                 /*!< PE DBCR: DBEN10 (Bitfield-Mask: 0x01)                 */
#define PE_DBCR_DBEN9_Pos                 (9UL)                     /*!< PE DBCR: DBEN9 (Bit 9)                                */
#define PE_DBCR_DBEN9_Msk                 (0x200UL)                 /*!< PE DBCR: DBEN9 (Bitfield-Mask: 0x01)                  */
#define PE_DBCR_DBEN8_Pos                 (8UL)                     /*!< PE DBCR: DBEN8 (Bit 8)                                */
#define PE_DBCR_DBEN8_Msk                 (0x100UL)                 /*!< PE DBCR: DBEN8 (Bitfield-Mask: 0x01)                  */
#define PE_DBCR_DBEN7_Pos                 (7UL)                     /*!< PE DBCR: DBEN7 (Bit 7)                                */
#define PE_DBCR_DBEN7_Msk                 (0x80UL)                  /*!< PE DBCR: DBEN7 (Bitfield-Mask: 0x01)                  */
#define PE_DBCR_DBEN6_Pos                 (6UL)                     /*!< PE DBCR: DBEN6 (Bit 6)                                */
#define PE_DBCR_DBEN6_Msk                 (0x40UL)                  /*!< PE DBCR: DBEN6 (Bitfield-Mask: 0x01)                  */
#define PE_DBCR_DBEN5_Pos                 (5UL)                     /*!< PE DBCR: DBEN5 (Bit 5)                                */
#define PE_DBCR_DBEN5_Msk                 (0x20UL)                  /*!< PE DBCR: DBEN5 (Bitfield-Mask: 0x01)                  */
#define PE_DBCR_DBEN4_Pos                 (4UL)                     /*!< PE DBCR: DBEN4 (Bit 4)                                */
#define PE_DBCR_DBEN4_Msk                 (0x10UL)                  /*!< PE DBCR: DBEN4 (Bitfield-Mask: 0x01)                  */
#define PE_DBCR_DBEN3_Pos                 (3UL)                     /*!< PE DBCR: DBEN3 (Bit 3)                                */
#define PE_DBCR_DBEN3_Msk                 (0x8UL)                   /*!< PE DBCR: DBEN3 (Bitfield-Mask: 0x01)                  */
#define PE_DBCR_DBEN2_Pos                 (2UL)                     /*!< PE DBCR: DBEN2 (Bit 2)                                */
#define PE_DBCR_DBEN2_Msk                 (0x4UL)                   /*!< PE DBCR: DBEN2 (Bitfield-Mask: 0x01)                  */
#define PE_DBCR_DBEN1_Pos                 (1UL)                     /*!< PE DBCR: DBEN1 (Bit 1)                                */
#define PE_DBCR_DBEN1_Msk                 (0x2UL)                   /*!< PE DBCR: DBEN1 (Bitfield-Mask: 0x01)                  */
#define PE_DBCR_DBEN0_Pos                 (0UL)                     /*!< PE DBCR: DBEN0 (Bit 0)                                */
#define PE_DBCR_DBEN0_Msk                 (0x1UL)                   /*!< PE DBCR: DBEN0 (Bitfield-Mask: 0x01)                  */
/* ========================================================  PE_MOD  ========================================================= */
#define PE_PE_MOD_MODE15_Pos              (30UL)                    /*!< PE PE_MOD: MODE15 (Bit 30)                            */
#define PE_PE_MOD_MODE15_Msk              (0xc0000000UL)            /*!< PE PE_MOD: MODE15 (Bitfield-Mask: 0x03)               */
#define PE_PE_MOD_MODE14_Pos              (28UL)                    /*!< PE PE_MOD: MODE14 (Bit 28)                            */
#define PE_PE_MOD_MODE14_Msk              (0x30000000UL)            /*!< PE PE_MOD: MODE14 (Bitfield-Mask: 0x03)               */
#define PE_PE_MOD_MODE13_Pos              (26UL)                    /*!< PE PE_MOD: MODE13 (Bit 26)                            */
#define PE_PE_MOD_MODE13_Msk              (0xc000000UL)             /*!< PE PE_MOD: MODE13 (Bitfield-Mask: 0x03)               */
#define PE_PE_MOD_MODE12_Pos              (24UL)                    /*!< PE PE_MOD: MODE12 (Bit 24)                            */
#define PE_PE_MOD_MODE12_Msk              (0x3000000UL)             /*!< PE PE_MOD: MODE12 (Bitfield-Mask: 0x03)               */
#define PE_PE_MOD_MODE11_Pos              (22UL)                    /*!< PE PE_MOD: MODE11 (Bit 22)                            */
#define PE_PE_MOD_MODE11_Msk              (0xc00000UL)              /*!< PE PE_MOD: MODE11 (Bitfield-Mask: 0x03)               */
#define PE_PE_MOD_MODE10_Pos              (20UL)                    /*!< PE PE_MOD: MODE10 (Bit 20)                            */
#define PE_PE_MOD_MODE10_Msk              (0x300000UL)              /*!< PE PE_MOD: MODE10 (Bitfield-Mask: 0x03)               */
#define PE_PE_MOD_MODE9_Pos               (18UL)                    /*!< PE PE_MOD: MODE9 (Bit 18)                             */
#define PE_PE_MOD_MODE9_Msk               (0xc0000UL)               /*!< PE PE_MOD: MODE9 (Bitfield-Mask: 0x03)                */
#define PE_PE_MOD_MODE8_Pos               (16UL)                    /*!< PE PE_MOD: MODE8 (Bit 16)                             */
#define PE_PE_MOD_MODE8_Msk               (0x30000UL)               /*!< PE PE_MOD: MODE8 (Bitfield-Mask: 0x03)                */
#define PE_PE_MOD_MODE7_Pos               (14UL)                    /*!< PE PE_MOD: MODE7 (Bit 14)                             */
#define PE_PE_MOD_MODE7_Msk               (0xc000UL)                /*!< PE PE_MOD: MODE7 (Bitfield-Mask: 0x03)                */
#define PE_PE_MOD_MODE6_Pos               (12UL)                    /*!< PE PE_MOD: MODE6 (Bit 12)                             */
#define PE_PE_MOD_MODE6_Msk               (0x3000UL)                /*!< PE PE_MOD: MODE6 (Bitfield-Mask: 0x03)                */
#define PE_PE_MOD_MODE5_Pos               (10UL)                    /*!< PE PE_MOD: MODE5 (Bit 10)                             */
#define PE_PE_MOD_MODE5_Msk               (0xc00UL)                 /*!< PE PE_MOD: MODE5 (Bitfield-Mask: 0x03)                */
#define PE_PE_MOD_MODE4_Pos               (8UL)                     /*!< PE PE_MOD: MODE4 (Bit 8)                              */
#define PE_PE_MOD_MODE4_Msk               (0x300UL)                 /*!< PE PE_MOD: MODE4 (Bitfield-Mask: 0x03)                */
#define PE_PE_MOD_MODE3_Pos               (6UL)                     /*!< PE PE_MOD: MODE3 (Bit 6)                              */
#define PE_PE_MOD_MODE3_Msk               (0xc0UL)                  /*!< PE PE_MOD: MODE3 (Bitfield-Mask: 0x03)                */
#define PE_PE_MOD_MODE2_Pos               (4UL)                     /*!< PE PE_MOD: MODE2 (Bit 4)                              */
#define PE_PE_MOD_MODE2_Msk               (0x30UL)                  /*!< PE PE_MOD: MODE2 (Bitfield-Mask: 0x03)                */
#define PE_PE_MOD_MODE1_Pos               (2UL)                     /*!< PE PE_MOD: MODE1 (Bit 2)                              */
#define PE_PE_MOD_MODE1_Msk               (0xcUL)                   /*!< PE PE_MOD: MODE1 (Bitfield-Mask: 0x03)                */
#define PE_PE_MOD_MODE0_Pos               (0UL)                     /*!< PE PE_MOD: MODE0 (Bit 0)                              */
#define PE_PE_MOD_MODE0_Msk               (0x3UL)                   /*!< PE PE_MOD: MODE0 (Bitfield-Mask: 0x03)                */
/* ========================================================  PE_TYP  ========================================================= */
#define PE_PE_TYP_TYP15_Pos               (15UL)                    /*!< PE PE_TYP: TYP15 (Bit 15)                             */
#define PE_PE_TYP_TYP15_Msk               (0x8000UL)                /*!< PE PE_TYP: TYP15 (Bitfield-Mask: 0x01)                */
#define PE_PE_TYP_TYP14_Pos               (14UL)                    /*!< PE PE_TYP: TYP14 (Bit 14)                             */
#define PE_PE_TYP_TYP14_Msk               (0x4000UL)                /*!< PE PE_TYP: TYP14 (Bitfield-Mask: 0x01)                */
#define PE_PE_TYP_TYP13_Pos               (13UL)                    /*!< PE PE_TYP: TYP13 (Bit 13)                             */
#define PE_PE_TYP_TYP13_Msk               (0x2000UL)                /*!< PE PE_TYP: TYP13 (Bitfield-Mask: 0x01)                */
#define PE_PE_TYP_TYP12_Pos               (12UL)                    /*!< PE PE_TYP: TYP12 (Bit 12)                             */
#define PE_PE_TYP_TYP12_Msk               (0x1000UL)                /*!< PE PE_TYP: TYP12 (Bitfield-Mask: 0x01)                */
#define PE_PE_TYP_TYP11_Pos               (11UL)                    /*!< PE PE_TYP: TYP11 (Bit 11)                             */
#define PE_PE_TYP_TYP11_Msk               (0x800UL)                 /*!< PE PE_TYP: TYP11 (Bitfield-Mask: 0x01)                */
#define PE_PE_TYP_TYP10_Pos               (10UL)                    /*!< PE PE_TYP: TYP10 (Bit 10)                             */
#define PE_PE_TYP_TYP10_Msk               (0x400UL)                 /*!< PE PE_TYP: TYP10 (Bitfield-Mask: 0x01)                */
#define PE_PE_TYP_TYP9_Pos                (9UL)                     /*!< PE PE_TYP: TYP9 (Bit 9)                               */
#define PE_PE_TYP_TYP9_Msk                (0x200UL)                 /*!< PE PE_TYP: TYP9 (Bitfield-Mask: 0x01)                 */
#define PE_PE_TYP_TYP8_Pos                (8UL)                     /*!< PE PE_TYP: TYP8 (Bit 8)                               */
#define PE_PE_TYP_TYP8_Msk                (0x100UL)                 /*!< PE PE_TYP: TYP8 (Bitfield-Mask: 0x01)                 */
#define PE_PE_TYP_TYP7_Pos                (7UL)                     /*!< PE PE_TYP: TYP7 (Bit 7)                               */
#define PE_PE_TYP_TYP7_Msk                (0x80UL)                  /*!< PE PE_TYP: TYP7 (Bitfield-Mask: 0x01)                 */
#define PE_PE_TYP_TYP6_Pos                (6UL)                     /*!< PE PE_TYP: TYP6 (Bit 6)                               */
#define PE_PE_TYP_TYP6_Msk                (0x40UL)                  /*!< PE PE_TYP: TYP6 (Bitfield-Mask: 0x01)                 */
#define PE_PE_TYP_TYP5_Pos                (5UL)                     /*!< PE PE_TYP: TYP5 (Bit 5)                               */
#define PE_PE_TYP_TYP5_Msk                (0x20UL)                  /*!< PE PE_TYP: TYP5 (Bitfield-Mask: 0x01)                 */
#define PE_PE_TYP_TYP4_Pos                (4UL)                     /*!< PE PE_TYP: TYP4 (Bit 4)                               */
#define PE_PE_TYP_TYP4_Msk                (0x10UL)                  /*!< PE PE_TYP: TYP4 (Bitfield-Mask: 0x01)                 */
#define PE_PE_TYP_TYP3_Pos                (3UL)                     /*!< PE PE_TYP: TYP3 (Bit 3)                               */
#define PE_PE_TYP_TYP3_Msk                (0x8UL)                   /*!< PE PE_TYP: TYP3 (Bitfield-Mask: 0x01)                 */
#define PE_PE_TYP_TYP2_Pos                (2UL)                     /*!< PE PE_TYP: TYP2 (Bit 2)                               */
#define PE_PE_TYP_TYP2_Msk                (0x4UL)                   /*!< PE PE_TYP: TYP2 (Bitfield-Mask: 0x01)                 */
#define PE_PE_TYP_TYP1_Pos                (1UL)                     /*!< PE PE_TYP: TYP1 (Bit 1)                               */
#define PE_PE_TYP_TYP1_Msk                (0x2UL)                   /*!< PE PE_TYP: TYP1 (Bitfield-Mask: 0x01)                 */
#define PE_PE_TYP_TYP0_Pos                (0UL)                     /*!< PE PE_TYP: TYP0 (Bit 0)                               */
#define PE_PE_TYP_TYP0_Msk                (0x1UL)                   /*!< PE PE_TYP: TYP0 (Bitfield-Mask: 0x01)                 */
/* =======================================================  PE_AFSR1  ======================================================== */
#define PE_PE_AFSR1_AFSR7_Pos             (28UL)                    /*!< PE PE_AFSR1: AFSR7 (Bit 28)                           */
#define PE_PE_AFSR1_AFSR7_Msk             (0xf0000000UL)            /*!< PE PE_AFSR1: AFSR7 (Bitfield-Mask: 0x0f)              */
#define PE_PE_AFSR1_AFSR6_Pos             (24UL)                    /*!< PE PE_AFSR1: AFSR6 (Bit 24)                           */
#define PE_PE_AFSR1_AFSR6_Msk             (0xf000000UL)             /*!< PE PE_AFSR1: AFSR6 (Bitfield-Mask: 0x0f)              */
#define PE_PE_AFSR1_AFSR5_Pos             (20UL)                    /*!< PE PE_AFSR1: AFSR5 (Bit 20)                           */
#define PE_PE_AFSR1_AFSR5_Msk             (0xf00000UL)              /*!< PE PE_AFSR1: AFSR5 (Bitfield-Mask: 0x0f)              */
#define PE_PE_AFSR1_AFSR4_Pos             (16UL)                    /*!< PE PE_AFSR1: AFSR4 (Bit 16)                           */
#define PE_PE_AFSR1_AFSR4_Msk             (0xf0000UL)               /*!< PE PE_AFSR1: AFSR4 (Bitfield-Mask: 0x0f)              */
#define PE_PE_AFSR1_AFSR3_Pos             (12UL)                    /*!< PE PE_AFSR1: AFSR3 (Bit 12)                           */
#define PE_PE_AFSR1_AFSR3_Msk             (0xf000UL)                /*!< PE PE_AFSR1: AFSR3 (Bitfield-Mask: 0x0f)              */
#define PE_PE_AFSR1_AFSR2_Pos             (8UL)                     /*!< PE PE_AFSR1: AFSR2 (Bit 8)                            */
#define PE_PE_AFSR1_AFSR2_Msk             (0xf00UL)                 /*!< PE PE_AFSR1: AFSR2 (Bitfield-Mask: 0x0f)              */
#define PE_PE_AFSR1_AFSR1_Pos             (4UL)                     /*!< PE PE_AFSR1: AFSR1 (Bit 4)                            */
#define PE_PE_AFSR1_AFSR1_Msk             (0xf0UL)                  /*!< PE PE_AFSR1: AFSR1 (Bitfield-Mask: 0x0f)              */
#define PE_PE_AFSR1_AFSR0_Pos             (0UL)                     /*!< PE PE_AFSR1: AFSR0 (Bit 0)                            */
#define PE_PE_AFSR1_AFSR0_Msk             (0xfUL)                   /*!< PE PE_AFSR1: AFSR0 (Bitfield-Mask: 0x0f)              */
/* =======================================================  PE_AFSR2  ======================================================== */
#define PE_PE_AFSR2_AFSR15_Pos            (28UL)                    /*!< PE PE_AFSR2: AFSR15 (Bit 28)                          */
#define PE_PE_AFSR2_AFSR15_Msk            (0xf0000000UL)            /*!< PE PE_AFSR2: AFSR15 (Bitfield-Mask: 0x0f)             */
#define PE_PE_AFSR2_AFSR14_Pos            (24UL)                    /*!< PE PE_AFSR2: AFSR14 (Bit 24)                          */
#define PE_PE_AFSR2_AFSR14_Msk            (0xf000000UL)             /*!< PE PE_AFSR2: AFSR14 (Bitfield-Mask: 0x0f)             */
#define PE_PE_AFSR2_AFSR13_Pos            (20UL)                    /*!< PE PE_AFSR2: AFSR13 (Bit 20)                          */
#define PE_PE_AFSR2_AFSR13_Msk            (0xf00000UL)              /*!< PE PE_AFSR2: AFSR13 (Bitfield-Mask: 0x0f)             */
#define PE_PE_AFSR2_AFSR12_Pos            (16UL)                    /*!< PE PE_AFSR2: AFSR12 (Bit 16)                          */
#define PE_PE_AFSR2_AFSR12_Msk            (0xf0000UL)               /*!< PE PE_AFSR2: AFSR12 (Bitfield-Mask: 0x0f)             */
#define PE_PE_AFSR2_AFSR11_Pos            (12UL)                    /*!< PE PE_AFSR2: AFSR11 (Bit 12)                          */
#define PE_PE_AFSR2_AFSR11_Msk            (0xf000UL)                /*!< PE PE_AFSR2: AFSR11 (Bitfield-Mask: 0x0f)             */
#define PE_PE_AFSR2_AFSR10_Pos            (8UL)                     /*!< PE PE_AFSR2: AFSR10 (Bit 8)                           */
#define PE_PE_AFSR2_AFSR10_Msk            (0xf00UL)                 /*!< PE PE_AFSR2: AFSR10 (Bitfield-Mask: 0x0f)             */
#define PE_PE_AFSR2_AFSR9_Pos             (4UL)                     /*!< PE PE_AFSR2: AFSR9 (Bit 4)                            */
#define PE_PE_AFSR2_AFSR9_Msk             (0xf0UL)                  /*!< PE PE_AFSR2: AFSR9 (Bitfield-Mask: 0x0f)              */
#define PE_PE_AFSR2_AFSR8_Pos             (0UL)                     /*!< PE PE_AFSR2: AFSR8 (Bit 0)                            */
#define PE_PE_AFSR2_AFSR8_Msk             (0xfUL)                   /*!< PE PE_AFSR2: AFSR8 (Bitfield-Mask: 0x0f)              */
/* ========================================================  PE_PUPD  ======================================================== */
#define PE_PE_PUPD_PUPD15_Pos             (30UL)                    /*!< PE PE_PUPD: PUPD15 (Bit 30)                           */
#define PE_PE_PUPD_PUPD15_Msk             (0xc0000000UL)            /*!< PE PE_PUPD: PUPD15 (Bitfield-Mask: 0x03)              */
#define PE_PE_PUPD_PUPD14_Pos             (28UL)                    /*!< PE PE_PUPD: PUPD14 (Bit 28)                           */
#define PE_PE_PUPD_PUPD14_Msk             (0x30000000UL)            /*!< PE PE_PUPD: PUPD14 (Bitfield-Mask: 0x03)              */
#define PE_PE_PUPD_PUPD13_Pos             (26UL)                    /*!< PE PE_PUPD: PUPD13 (Bit 26)                           */
#define PE_PE_PUPD_PUPD13_Msk             (0xc000000UL)             /*!< PE PE_PUPD: PUPD13 (Bitfield-Mask: 0x03)              */
#define PE_PE_PUPD_PUPD12_Pos             (24UL)                    /*!< PE PE_PUPD: PUPD12 (Bit 24)                           */
#define PE_PE_PUPD_PUPD12_Msk             (0x3000000UL)             /*!< PE PE_PUPD: PUPD12 (Bitfield-Mask: 0x03)              */
#define PE_PE_PUPD_PUPD11_Pos             (22UL)                    /*!< PE PE_PUPD: PUPD11 (Bit 22)                           */
#define PE_PE_PUPD_PUPD11_Msk             (0xc00000UL)              /*!< PE PE_PUPD: PUPD11 (Bitfield-Mask: 0x03)              */
#define PE_PE_PUPD_PUPD10_Pos             (20UL)                    /*!< PE PE_PUPD: PUPD10 (Bit 20)                           */
#define PE_PE_PUPD_PUPD10_Msk             (0x300000UL)              /*!< PE PE_PUPD: PUPD10 (Bitfield-Mask: 0x03)              */
#define PE_PE_PUPD_PUPD9_Pos              (18UL)                    /*!< PE PE_PUPD: PUPD9 (Bit 18)                            */
#define PE_PE_PUPD_PUPD9_Msk              (0xc0000UL)               /*!< PE PE_PUPD: PUPD9 (Bitfield-Mask: 0x03)               */
#define PE_PE_PUPD_PUPD8_Pos              (16UL)                    /*!< PE PE_PUPD: PUPD8 (Bit 16)                            */
#define PE_PE_PUPD_PUPD8_Msk              (0x30000UL)               /*!< PE PE_PUPD: PUPD8 (Bitfield-Mask: 0x03)               */
#define PE_PE_PUPD_PUPD7_Pos              (14UL)                    /*!< PE PE_PUPD: PUPD7 (Bit 14)                            */
#define PE_PE_PUPD_PUPD7_Msk              (0xc000UL)                /*!< PE PE_PUPD: PUPD7 (Bitfield-Mask: 0x03)               */
#define PE_PE_PUPD_PUPD6_Pos              (12UL)                    /*!< PE PE_PUPD: PUPD6 (Bit 12)                            */
#define PE_PE_PUPD_PUPD6_Msk              (0x3000UL)                /*!< PE PE_PUPD: PUPD6 (Bitfield-Mask: 0x03)               */
#define PE_PE_PUPD_PUPD5_Pos              (10UL)                    /*!< PE PE_PUPD: PUPD5 (Bit 10)                            */
#define PE_PE_PUPD_PUPD5_Msk              (0xc00UL)                 /*!< PE PE_PUPD: PUPD5 (Bitfield-Mask: 0x03)               */
#define PE_PE_PUPD_PUPD4_Pos              (8UL)                     /*!< PE PE_PUPD: PUPD4 (Bit 8)                             */
#define PE_PE_PUPD_PUPD4_Msk              (0x300UL)                 /*!< PE PE_PUPD: PUPD4 (Bitfield-Mask: 0x03)               */
#define PE_PE_PUPD_PUPD3_Pos              (6UL)                     /*!< PE PE_PUPD: PUPD3 (Bit 6)                             */
#define PE_PE_PUPD_PUPD3_Msk              (0xc0UL)                  /*!< PE PE_PUPD: PUPD3 (Bitfield-Mask: 0x03)               */
#define PE_PE_PUPD_PUPD2_Pos              (4UL)                     /*!< PE PE_PUPD: PUPD2 (Bit 4)                             */
#define PE_PE_PUPD_PUPD2_Msk              (0x30UL)                  /*!< PE PE_PUPD: PUPD2 (Bitfield-Mask: 0x03)               */
#define PE_PE_PUPD_PUPD1_Pos              (2UL)                     /*!< PE PE_PUPD: PUPD1 (Bit 2)                             */
#define PE_PE_PUPD_PUPD1_Msk              (0xcUL)                   /*!< PE PE_PUPD: PUPD1 (Bitfield-Mask: 0x03)               */
#define PE_PE_PUPD_PUPD0_Pos              (0UL)                     /*!< PE PE_PUPD: PUPD0 (Bit 0)                             */
#define PE_PE_PUPD_PUPD0_Msk              (0x3UL)                   /*!< PE PE_PUPD: PUPD0 (Bitfield-Mask: 0x03)               */
/* ========================================================  PE_INDR  ======================================================== */
#define PE_PE_INDR_INDR15_Pos             (15UL)                    /*!< PE PE_INDR: INDR15 (Bit 15)                           */
#define PE_PE_INDR_INDR15_Msk             (0x8000UL)                /*!< PE PE_INDR: INDR15 (Bitfield-Mask: 0x01)              */
#define PE_PE_INDR_INDR14_Pos             (14UL)                    /*!< PE PE_INDR: INDR14 (Bit 14)                           */
#define PE_PE_INDR_INDR14_Msk             (0x4000UL)                /*!< PE PE_INDR: INDR14 (Bitfield-Mask: 0x01)              */
#define PE_PE_INDR_INDR13_Pos             (13UL)                    /*!< PE PE_INDR: INDR13 (Bit 13)                           */
#define PE_PE_INDR_INDR13_Msk             (0x2000UL)                /*!< PE PE_INDR: INDR13 (Bitfield-Mask: 0x01)              */
#define PE_PE_INDR_INDR12_Pos             (12UL)                    /*!< PE PE_INDR: INDR12 (Bit 12)                           */
#define PE_PE_INDR_INDR12_Msk             (0x1000UL)                /*!< PE PE_INDR: INDR12 (Bitfield-Mask: 0x01)              */
#define PE_PE_INDR_INDR11_Pos             (11UL)                    /*!< PE PE_INDR: INDR11 (Bit 11)                           */
#define PE_PE_INDR_INDR11_Msk             (0x800UL)                 /*!< PE PE_INDR: INDR11 (Bitfield-Mask: 0x01)              */
#define PE_PE_INDR_INDR10_Pos             (10UL)                    /*!< PE PE_INDR: INDR10 (Bit 10)                           */
#define PE_PE_INDR_INDR10_Msk             (0x400UL)                 /*!< PE PE_INDR: INDR10 (Bitfield-Mask: 0x01)              */
#define PE_PE_INDR_INDR9_Pos              (9UL)                     /*!< PE PE_INDR: INDR9 (Bit 9)                             */
#define PE_PE_INDR_INDR9_Msk              (0x200UL)                 /*!< PE PE_INDR: INDR9 (Bitfield-Mask: 0x01)               */
#define PE_PE_INDR_INDR8_Pos              (8UL)                     /*!< PE PE_INDR: INDR8 (Bit 8)                             */
#define PE_PE_INDR_INDR8_Msk              (0x100UL)                 /*!< PE PE_INDR: INDR8 (Bitfield-Mask: 0x01)               */
#define PE_PE_INDR_INDR7_Pos              (7UL)                     /*!< PE PE_INDR: INDR7 (Bit 7)                             */
#define PE_PE_INDR_INDR7_Msk              (0x80UL)                  /*!< PE PE_INDR: INDR7 (Bitfield-Mask: 0x01)               */
#define PE_PE_INDR_INDR6_Pos              (6UL)                     /*!< PE PE_INDR: INDR6 (Bit 6)                             */
#define PE_PE_INDR_INDR6_Msk              (0x40UL)                  /*!< PE PE_INDR: INDR6 (Bitfield-Mask: 0x01)               */
#define PE_PE_INDR_INDR5_Pos              (5UL)                     /*!< PE PE_INDR: INDR5 (Bit 5)                             */
#define PE_PE_INDR_INDR5_Msk              (0x20UL)                  /*!< PE PE_INDR: INDR5 (Bitfield-Mask: 0x01)               */
#define PE_PE_INDR_INDR4_Pos              (4UL)                     /*!< PE PE_INDR: INDR4 (Bit 4)                             */
#define PE_PE_INDR_INDR4_Msk              (0x10UL)                  /*!< PE PE_INDR: INDR4 (Bitfield-Mask: 0x01)               */
#define PE_PE_INDR_INDR3_Pos              (3UL)                     /*!< PE PE_INDR: INDR3 (Bit 3)                             */
#define PE_PE_INDR_INDR3_Msk              (0x8UL)                   /*!< PE PE_INDR: INDR3 (Bitfield-Mask: 0x01)               */
#define PE_PE_INDR_INDR2_Pos              (2UL)                     /*!< PE PE_INDR: INDR2 (Bit 2)                             */
#define PE_PE_INDR_INDR2_Msk              (0x4UL)                   /*!< PE PE_INDR: INDR2 (Bitfield-Mask: 0x01)               */
#define PE_PE_INDR_INDR1_Pos              (1UL)                     /*!< PE PE_INDR: INDR1 (Bit 1)                             */
#define PE_PE_INDR_INDR1_Msk              (0x2UL)                   /*!< PE PE_INDR: INDR1 (Bitfield-Mask: 0x01)               */
#define PE_PE_INDR_INDR0_Pos              (0UL)                     /*!< PE PE_INDR: INDR0 (Bit 0)                             */
#define PE_PE_INDR_INDR0_Msk              (0x1UL)                   /*!< PE PE_INDR: INDR0 (Bitfield-Mask: 0x01)               */
/* =======================================================  PE_OUTDR  ======================================================== */
#define PE_PE_OUTDR_OUTDR15_Pos           (15UL)                    /*!< PE PE_OUTDR: OUTDR15 (Bit 15)                         */
#define PE_PE_OUTDR_OUTDR15_Msk           (0x8000UL)                /*!< PE PE_OUTDR: OUTDR15 (Bitfield-Mask: 0x01)            */
#define PE_PE_OUTDR_OUTDR14_Pos           (14UL)                    /*!< PE PE_OUTDR: OUTDR14 (Bit 14)                         */
#define PE_PE_OUTDR_OUTDR14_Msk           (0x4000UL)                /*!< PE PE_OUTDR: OUTDR14 (Bitfield-Mask: 0x01)            */
#define PE_PE_OUTDR_OUTDR13_Pos           (13UL)                    /*!< PE PE_OUTDR: OUTDR13 (Bit 13)                         */
#define PE_PE_OUTDR_OUTDR13_Msk           (0x2000UL)                /*!< PE PE_OUTDR: OUTDR13 (Bitfield-Mask: 0x01)            */
#define PE_PE_OUTDR_OUTDR12_Pos           (12UL)                    /*!< PE PE_OUTDR: OUTDR12 (Bit 12)                         */
#define PE_PE_OUTDR_OUTDR12_Msk           (0x1000UL)                /*!< PE PE_OUTDR: OUTDR12 (Bitfield-Mask: 0x01)            */
#define PE_PE_OUTDR_OUTDR11_Pos           (11UL)                    /*!< PE PE_OUTDR: OUTDR11 (Bit 11)                         */
#define PE_PE_OUTDR_OUTDR11_Msk           (0x800UL)                 /*!< PE PE_OUTDR: OUTDR11 (Bitfield-Mask: 0x01)            */
#define PE_PE_OUTDR_OUTDR10_Pos           (10UL)                    /*!< PE PE_OUTDR: OUTDR10 (Bit 10)                         */
#define PE_PE_OUTDR_OUTDR10_Msk           (0x400UL)                 /*!< PE PE_OUTDR: OUTDR10 (Bitfield-Mask: 0x01)            */
#define PE_PE_OUTDR_OUTDR9_Pos            (9UL)                     /*!< PE PE_OUTDR: OUTDR9 (Bit 9)                           */
#define PE_PE_OUTDR_OUTDR9_Msk            (0x200UL)                 /*!< PE PE_OUTDR: OUTDR9 (Bitfield-Mask: 0x01)             */
#define PE_PE_OUTDR_OUTDR8_Pos            (8UL)                     /*!< PE PE_OUTDR: OUTDR8 (Bit 8)                           */
#define PE_PE_OUTDR_OUTDR8_Msk            (0x100UL)                 /*!< PE PE_OUTDR: OUTDR8 (Bitfield-Mask: 0x01)             */
#define PE_PE_OUTDR_OUTDR7_Pos            (7UL)                     /*!< PE PE_OUTDR: OUTDR7 (Bit 7)                           */
#define PE_PE_OUTDR_OUTDR7_Msk            (0x80UL)                  /*!< PE PE_OUTDR: OUTDR7 (Bitfield-Mask: 0x01)             */
#define PE_PE_OUTDR_OUTDR6_Pos            (6UL)                     /*!< PE PE_OUTDR: OUTDR6 (Bit 6)                           */
#define PE_PE_OUTDR_OUTDR6_Msk            (0x40UL)                  /*!< PE PE_OUTDR: OUTDR6 (Bitfield-Mask: 0x01)             */
#define PE_PE_OUTDR_OUTDR5_Pos            (5UL)                     /*!< PE PE_OUTDR: OUTDR5 (Bit 5)                           */
#define PE_PE_OUTDR_OUTDR5_Msk            (0x20UL)                  /*!< PE PE_OUTDR: OUTDR5 (Bitfield-Mask: 0x01)             */
#define PE_PE_OUTDR_OUTDR4_Pos            (4UL)                     /*!< PE PE_OUTDR: OUTDR4 (Bit 4)                           */
#define PE_PE_OUTDR_OUTDR4_Msk            (0x10UL)                  /*!< PE PE_OUTDR: OUTDR4 (Bitfield-Mask: 0x01)             */
#define PE_PE_OUTDR_OUTDR3_Pos            (3UL)                     /*!< PE PE_OUTDR: OUTDR3 (Bit 3)                           */
#define PE_PE_OUTDR_OUTDR3_Msk            (0x8UL)                   /*!< PE PE_OUTDR: OUTDR3 (Bitfield-Mask: 0x01)             */
#define PE_PE_OUTDR_OUTDR2_Pos            (2UL)                     /*!< PE PE_OUTDR: OUTDR2 (Bit 2)                           */
#define PE_PE_OUTDR_OUTDR2_Msk            (0x4UL)                   /*!< PE PE_OUTDR: OUTDR2 (Bitfield-Mask: 0x01)             */
#define PE_PE_OUTDR_OUTDR1_Pos            (1UL)                     /*!< PE PE_OUTDR: OUTDR1 (Bit 1)                           */
#define PE_PE_OUTDR_OUTDR1_Msk            (0x2UL)                   /*!< PE PE_OUTDR: OUTDR1 (Bitfield-Mask: 0x01)             */
#define PE_PE_OUTDR_OUTDR0_Pos            (0UL)                     /*!< PE PE_OUTDR: OUTDR0 (Bit 0)                           */
#define PE_PE_OUTDR_OUTDR0_Msk            (0x1UL)                   /*!< PE PE_OUTDR: OUTDR0 (Bitfield-Mask: 0x01)             */
/* ========================================================  PE_BSR  ========================================================= */
#define PE_PE_BSR_BSR15_Pos               (15UL)                    /*!< PE PE_BSR: BSR15 (Bit 15)                             */
#define PE_PE_BSR_BSR15_Msk               (0x8000UL)                /*!< PE PE_BSR: BSR15 (Bitfield-Mask: 0x01)                */
#define PE_PE_BSR_BSR14_Pos               (14UL)                    /*!< PE PE_BSR: BSR14 (Bit 14)                             */
#define PE_PE_BSR_BSR14_Msk               (0x4000UL)                /*!< PE PE_BSR: BSR14 (Bitfield-Mask: 0x01)                */
#define PE_PE_BSR_BSR13_Pos               (13UL)                    /*!< PE PE_BSR: BSR13 (Bit 13)                             */
#define PE_PE_BSR_BSR13_Msk               (0x2000UL)                /*!< PE PE_BSR: BSR13 (Bitfield-Mask: 0x01)                */
#define PE_PE_BSR_BSR12_Pos               (12UL)                    /*!< PE PE_BSR: BSR12 (Bit 12)                             */
#define PE_PE_BSR_BSR12_Msk               (0x1000UL)                /*!< PE PE_BSR: BSR12 (Bitfield-Mask: 0x01)                */
#define PE_PE_BSR_BSR11_Pos               (11UL)                    /*!< PE PE_BSR: BSR11 (Bit 11)                             */
#define PE_PE_BSR_BSR11_Msk               (0x800UL)                 /*!< PE PE_BSR: BSR11 (Bitfield-Mask: 0x01)                */
#define PE_PE_BSR_BSR10_Pos               (10UL)                    /*!< PE PE_BSR: BSR10 (Bit 10)                             */
#define PE_PE_BSR_BSR10_Msk               (0x400UL)                 /*!< PE PE_BSR: BSR10 (Bitfield-Mask: 0x01)                */
#define PE_PE_BSR_BSR9_Pos                (9UL)                     /*!< PE PE_BSR: BSR9 (Bit 9)                               */
#define PE_PE_BSR_BSR9_Msk                (0x200UL)                 /*!< PE PE_BSR: BSR9 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BSR_BSR8_Pos                (8UL)                     /*!< PE PE_BSR: BSR8 (Bit 8)                               */
#define PE_PE_BSR_BSR8_Msk                (0x100UL)                 /*!< PE PE_BSR: BSR8 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BSR_BSR7_Pos                (7UL)                     /*!< PE PE_BSR: BSR7 (Bit 7)                               */
#define PE_PE_BSR_BSR7_Msk                (0x80UL)                  /*!< PE PE_BSR: BSR7 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BSR_BSR6_Pos                (6UL)                     /*!< PE PE_BSR: BSR6 (Bit 6)                               */
#define PE_PE_BSR_BSR6_Msk                (0x40UL)                  /*!< PE PE_BSR: BSR6 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BSR_BSR5_Pos                (5UL)                     /*!< PE PE_BSR: BSR5 (Bit 5)                               */
#define PE_PE_BSR_BSR5_Msk                (0x20UL)                  /*!< PE PE_BSR: BSR5 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BSR_BSR4_Pos                (4UL)                     /*!< PE PE_BSR: BSR4 (Bit 4)                               */
#define PE_PE_BSR_BSR4_Msk                (0x10UL)                  /*!< PE PE_BSR: BSR4 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BSR_BSR3_Pos                (3UL)                     /*!< PE PE_BSR: BSR3 (Bit 3)                               */
#define PE_PE_BSR_BSR3_Msk                (0x8UL)                   /*!< PE PE_BSR: BSR3 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BSR_BSR2_Pos                (2UL)                     /*!< PE PE_BSR: BSR2 (Bit 2)                               */
#define PE_PE_BSR_BSR2_Msk                (0x4UL)                   /*!< PE PE_BSR: BSR2 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BSR_BSR1_Pos                (1UL)                     /*!< PE PE_BSR: BSR1 (Bit 1)                               */
#define PE_PE_BSR_BSR1_Msk                (0x2UL)                   /*!< PE PE_BSR: BSR1 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BSR_BSR0_Pos                (0UL)                     /*!< PE PE_BSR: BSR0 (Bit 0)                               */
#define PE_PE_BSR_BSR0_Msk                (0x1UL)                   /*!< PE PE_BSR: BSR0 (Bitfield-Mask: 0x01)                 */
/* ========================================================  PE_BCR  ========================================================= */
#define PE_PE_BCR_BCR15_Pos               (15UL)                    /*!< PE PE_BCR: BCR15 (Bit 15)                             */
#define PE_PE_BCR_BCR15_Msk               (0x8000UL)                /*!< PE PE_BCR: BCR15 (Bitfield-Mask: 0x01)                */
#define PE_PE_BCR_BCR14_Pos               (14UL)                    /*!< PE PE_BCR: BCR14 (Bit 14)                             */
#define PE_PE_BCR_BCR14_Msk               (0x4000UL)                /*!< PE PE_BCR: BCR14 (Bitfield-Mask: 0x01)                */
#define PE_PE_BCR_BCR13_Pos               (13UL)                    /*!< PE PE_BCR: BCR13 (Bit 13)                             */
#define PE_PE_BCR_BCR13_Msk               (0x2000UL)                /*!< PE PE_BCR: BCR13 (Bitfield-Mask: 0x01)                */
#define PE_PE_BCR_BCR12_Pos               (12UL)                    /*!< PE PE_BCR: BCR12 (Bit 12)                             */
#define PE_PE_BCR_BCR12_Msk               (0x1000UL)                /*!< PE PE_BCR: BCR12 (Bitfield-Mask: 0x01)                */
#define PE_PE_BCR_BCR11_Pos               (11UL)                    /*!< PE PE_BCR: BCR11 (Bit 11)                             */
#define PE_PE_BCR_BCR11_Msk               (0x800UL)                 /*!< PE PE_BCR: BCR11 (Bitfield-Mask: 0x01)                */
#define PE_PE_BCR_BCR10_Pos               (10UL)                    /*!< PE PE_BCR: BCR10 (Bit 10)                             */
#define PE_PE_BCR_BCR10_Msk               (0x400UL)                 /*!< PE PE_BCR: BCR10 (Bitfield-Mask: 0x01)                */
#define PE_PE_BCR_BCR9_Pos                (9UL)                     /*!< PE PE_BCR: BCR9 (Bit 9)                               */
#define PE_PE_BCR_BCR9_Msk                (0x200UL)                 /*!< PE PE_BCR: BCR9 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BCR_BCR8_Pos                (8UL)                     /*!< PE PE_BCR: BCR8 (Bit 8)                               */
#define PE_PE_BCR_BCR8_Msk                (0x100UL)                 /*!< PE PE_BCR: BCR8 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BCR_BCR7_Pos                (7UL)                     /*!< PE PE_BCR: BCR7 (Bit 7)                               */
#define PE_PE_BCR_BCR7_Msk                (0x80UL)                  /*!< PE PE_BCR: BCR7 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BCR_BCR6_Pos                (6UL)                     /*!< PE PE_BCR: BCR6 (Bit 6)                               */
#define PE_PE_BCR_BCR6_Msk                (0x40UL)                  /*!< PE PE_BCR: BCR6 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BCR_BCR5_Pos                (5UL)                     /*!< PE PE_BCR: BCR5 (Bit 5)                               */
#define PE_PE_BCR_BCR5_Msk                (0x20UL)                  /*!< PE PE_BCR: BCR5 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BCR_BCR4_Pos                (4UL)                     /*!< PE PE_BCR: BCR4 (Bit 4)                               */
#define PE_PE_BCR_BCR4_Msk                (0x10UL)                  /*!< PE PE_BCR: BCR4 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BCR_BCR3_Pos                (3UL)                     /*!< PE PE_BCR: BCR3 (Bit 3)                               */
#define PE_PE_BCR_BCR3_Msk                (0x8UL)                   /*!< PE PE_BCR: BCR3 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BCR_BCR2_Pos                (2UL)                     /*!< PE PE_BCR: BCR2 (Bit 2)                               */
#define PE_PE_BCR_BCR2_Msk                (0x4UL)                   /*!< PE PE_BCR: BCR2 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BCR_BCR1_Pos                (1UL)                     /*!< PE PE_BCR: BCR1 (Bit 1)                               */
#define PE_PE_BCR_BCR1_Msk                (0x2UL)                   /*!< PE PE_BCR: BCR1 (Bitfield-Mask: 0x01)                 */
#define PE_PE_BCR_BCR0_Pos                (0UL)                     /*!< PE PE_BCR: BCR0 (Bit 0)                               */
#define PE_PE_BCR_BCR0_Msk                (0x1UL)                   /*!< PE PE_BCR: BCR0 (Bitfield-Mask: 0x01)                 */
/* ======================================================  PE_OUTDMSK  ======================================================= */
#define PE_PE_OUTDMSK_OUTDMSK15_Pos       (15UL)                    /*!< PE PE_OUTDMSK: OUTDMSK15 (Bit 15)                     */
#define PE_PE_OUTDMSK_OUTDMSK15_Msk       (0x8000UL)                /*!< PE PE_OUTDMSK: OUTDMSK15 (Bitfield-Mask: 0x01)        */
#define PE_PE_OUTDMSK_OUTDMSK14_Pos       (14UL)                    /*!< PE PE_OUTDMSK: OUTDMSK14 (Bit 14)                     */
#define PE_PE_OUTDMSK_OUTDMSK14_Msk       (0x4000UL)                /*!< PE PE_OUTDMSK: OUTDMSK14 (Bitfield-Mask: 0x01)        */
#define PE_PE_OUTDMSK_OUTDMSK13_Pos       (13UL)                    /*!< PE PE_OUTDMSK: OUTDMSK13 (Bit 13)                     */
#define PE_PE_OUTDMSK_OUTDMSK13_Msk       (0x2000UL)                /*!< PE PE_OUTDMSK: OUTDMSK13 (Bitfield-Mask: 0x01)        */
#define PE_PE_OUTDMSK_OUTDMSK12_Pos       (12UL)                    /*!< PE PE_OUTDMSK: OUTDMSK12 (Bit 12)                     */
#define PE_PE_OUTDMSK_OUTDMSK12_Msk       (0x1000UL)                /*!< PE PE_OUTDMSK: OUTDMSK12 (Bitfield-Mask: 0x01)        */
#define PE_PE_OUTDMSK_OUTDMSK11_Pos       (11UL)                    /*!< PE PE_OUTDMSK: OUTDMSK11 (Bit 11)                     */
#define PE_PE_OUTDMSK_OUTDMSK11_Msk       (0x800UL)                 /*!< PE PE_OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)        */
#define PE_PE_OUTDMSK_OUTDMSK10_Pos       (10UL)                    /*!< PE PE_OUTDMSK: OUTDMSK10 (Bit 10)                     */
#define PE_PE_OUTDMSK_OUTDMSK10_Msk       (0x400UL)                 /*!< PE PE_OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)        */
#define PE_PE_OUTDMSK_OUTDMSK9_Pos        (9UL)                     /*!< PE PE_OUTDMSK: OUTDMSK9 (Bit 9)                       */
#define PE_PE_OUTDMSK_OUTDMSK9_Msk        (0x200UL)                 /*!< PE PE_OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)         */
#define PE_PE_OUTDMSK_OUTDMSK8_Pos        (8UL)                     /*!< PE PE_OUTDMSK: OUTDMSK8 (Bit 8)                       */
#define PE_PE_OUTDMSK_OUTDMSK8_Msk        (0x100UL)                 /*!< PE PE_OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)         */
#define PE_PE_OUTDMSK_OUTDMSK7_Pos        (7UL)                     /*!< PE PE_OUTDMSK: OUTDMSK7 (Bit 7)                       */
#define PE_PE_OUTDMSK_OUTDMSK7_Msk        (0x80UL)                  /*!< PE PE_OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)         */
#define PE_PE_OUTDMSK_OUTDMSK6_Pos        (6UL)                     /*!< PE PE_OUTDMSK: OUTDMSK6 (Bit 6)                       */
#define PE_PE_OUTDMSK_OUTDMSK6_Msk        (0x40UL)                  /*!< PE PE_OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)         */
#define PE_PE_OUTDMSK_OUTDMSK5_Pos        (5UL)                     /*!< PE PE_OUTDMSK: OUTDMSK5 (Bit 5)                       */
#define PE_PE_OUTDMSK_OUTDMSK5_Msk        (0x20UL)                  /*!< PE PE_OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)         */
#define PE_PE_OUTDMSK_OUTDMSK4_Pos        (4UL)                     /*!< PE PE_OUTDMSK: OUTDMSK4 (Bit 4)                       */
#define PE_PE_OUTDMSK_OUTDMSK4_Msk        (0x10UL)                  /*!< PE PE_OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)         */
#define PE_PE_OUTDMSK_OUTDMSK3_Pos        (3UL)                     /*!< PE PE_OUTDMSK: OUTDMSK3 (Bit 3)                       */
#define PE_PE_OUTDMSK_OUTDMSK3_Msk        (0x8UL)                   /*!< PE PE_OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)         */
#define PE_PE_OUTDMSK_OUTDMSK2_Pos        (2UL)                     /*!< PE PE_OUTDMSK: OUTDMSK2 (Bit 2)                       */
#define PE_PE_OUTDMSK_OUTDMSK2_Msk        (0x4UL)                   /*!< PE PE_OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)         */
#define PE_PE_OUTDMSK_OUTDMSK1_Pos        (1UL)                     /*!< PE PE_OUTDMSK: OUTDMSK1 (Bit 1)                       */
#define PE_PE_OUTDMSK_OUTDMSK1_Msk        (0x2UL)                   /*!< PE PE_OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)         */
#define PE_PE_OUTDMSK_OUTDMSK0_Pos        (0UL)                     /*!< PE PE_OUTDMSK: OUTDMSK0 (Bit 0)                       */
#define PE_PE_OUTDMSK_OUTDMSK0_Msk        (0x1UL)                   /*!< PE PE_OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)         */
/* ========================================================  PE_DBCR  ======================================================== */
#define PE_PE_DBCR_DBCLK_Pos              (16UL)                    /*!< PE PE_DBCR: DBCLK (Bit 16)                            */
#define PE_PE_DBCR_DBCLK_Msk              (0x70000UL)               /*!< PE PE_DBCR: DBCLK (Bitfield-Mask: 0x07)               */
#define PE_PE_DBCR_DBEN3_Pos              (3UL)                     /*!< PE PE_DBCR: DBEN3 (Bit 3)                             */
#define PE_PE_DBCR_DBEN3_Msk              (0x8UL)                   /*!< PE PE_DBCR: DBEN3 (Bitfield-Mask: 0x01)               */
#define PE_PE_DBCR_DBEN2_Pos              (2UL)                     /*!< PE PE_DBCR: DBEN2 (Bit 2)                             */
#define PE_PE_DBCR_DBEN2_Msk              (0x4UL)                   /*!< PE PE_DBCR: DBEN2 (Bitfield-Mask: 0x01)               */
#define PE_PE_DBCR_DBEN1_Pos              (1UL)                     /*!< PE PE_DBCR: DBEN1 (Bit 1)                             */
#define PE_PE_DBCR_DBEN1_Msk              (0x2UL)                   /*!< PE PE_DBCR: DBEN1 (Bitfield-Mask: 0x01)               */
#define PE_PE_DBCR_DBEN0_Pos              (0UL)                     /*!< PE PE_DBCR: DBEN0 (Bit 0)                             */
#define PE_PE_DBCR_DBEN0_Msk              (0x1UL)                   /*!< PE PE_DBCR: DBEN0 (Bitfield-Mask: 0x01)               */


/* =========================================================================================================================== */
/* ================                                            PF                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
#define PF_MOD_MODE15_Pos                 (30UL)                    /*!< PF MOD: MODE15 (Bit 30)                               */
#define PF_MOD_MODE15_Msk                 (0xc0000000UL)            /*!< PF MOD: MODE15 (Bitfield-Mask: 0x03)                  */
#define PF_MOD_MODE14_Pos                 (28UL)                    /*!< PF MOD: MODE14 (Bit 28)                               */
#define PF_MOD_MODE14_Msk                 (0x30000000UL)            /*!< PF MOD: MODE14 (Bitfield-Mask: 0x03)                  */
#define PF_MOD_MODE13_Pos                 (26UL)                    /*!< PF MOD: MODE13 (Bit 26)                               */
#define PF_MOD_MODE13_Msk                 (0xc000000UL)             /*!< PF MOD: MODE13 (Bitfield-Mask: 0x03)                  */
#define PF_MOD_MODE12_Pos                 (24UL)                    /*!< PF MOD: MODE12 (Bit 24)                               */
#define PF_MOD_MODE12_Msk                 (0x3000000UL)             /*!< PF MOD: MODE12 (Bitfield-Mask: 0x03)                  */
#define PF_MOD_MODE11_Pos                 (22UL)                    /*!< PF MOD: MODE11 (Bit 22)                               */
#define PF_MOD_MODE11_Msk                 (0xc00000UL)              /*!< PF MOD: MODE11 (Bitfield-Mask: 0x03)                  */
#define PF_MOD_MODE10_Pos                 (20UL)                    /*!< PF MOD: MODE10 (Bit 20)                               */
#define PF_MOD_MODE10_Msk                 (0x300000UL)              /*!< PF MOD: MODE10 (Bitfield-Mask: 0x03)                  */
#define PF_MOD_MODE9_Pos                  (18UL)                    /*!< PF MOD: MODE9 (Bit 18)                                */
#define PF_MOD_MODE9_Msk                  (0xc0000UL)               /*!< PF MOD: MODE9 (Bitfield-Mask: 0x03)                   */
#define PF_MOD_MODE8_Pos                  (16UL)                    /*!< PF MOD: MODE8 (Bit 16)                                */
#define PF_MOD_MODE8_Msk                  (0x30000UL)               /*!< PF MOD: MODE8 (Bitfield-Mask: 0x03)                   */
#define PF_MOD_MODE7_Pos                  (14UL)                    /*!< PF MOD: MODE7 (Bit 14)                                */
#define PF_MOD_MODE7_Msk                  (0xc000UL)                /*!< PF MOD: MODE7 (Bitfield-Mask: 0x03)                   */
#define PF_MOD_MODE6_Pos                  (12UL)                    /*!< PF MOD: MODE6 (Bit 12)                                */
#define PF_MOD_MODE6_Msk                  (0x3000UL)                /*!< PF MOD: MODE6 (Bitfield-Mask: 0x03)                   */
#define PF_MOD_MODE5_Pos                  (10UL)                    /*!< PF MOD: MODE5 (Bit 10)                                */
#define PF_MOD_MODE5_Msk                  (0xc00UL)                 /*!< PF MOD: MODE5 (Bitfield-Mask: 0x03)                   */
#define PF_MOD_MODE4_Pos                  (8UL)                     /*!< PF MOD: MODE4 (Bit 8)                                 */
#define PF_MOD_MODE4_Msk                  (0x300UL)                 /*!< PF MOD: MODE4 (Bitfield-Mask: 0x03)                   */
#define PF_MOD_MODE3_Pos                  (6UL)                     /*!< PF MOD: MODE3 (Bit 6)                                 */
#define PF_MOD_MODE3_Msk                  (0xc0UL)                  /*!< PF MOD: MODE3 (Bitfield-Mask: 0x03)                   */
#define PF_MOD_MODE2_Pos                  (4UL)                     /*!< PF MOD: MODE2 (Bit 4)                                 */
#define PF_MOD_MODE2_Msk                  (0x30UL)                  /*!< PF MOD: MODE2 (Bitfield-Mask: 0x03)                   */
#define PF_MOD_MODE1_Pos                  (2UL)                     /*!< PF MOD: MODE1 (Bit 2)                                 */
#define PF_MOD_MODE1_Msk                  (0xcUL)                   /*!< PF MOD: MODE1 (Bitfield-Mask: 0x03)                   */
#define PF_MOD_MODE0_Pos                  (0UL)                     /*!< PF MOD: MODE0 (Bit 0)                                 */
#define PF_MOD_MODE0_Msk                  (0x3UL)                   /*!< PF MOD: MODE0 (Bitfield-Mask: 0x03)                   */
/* ==========================================================  TYP  ========================================================== */
#define PF_TYP_TYP15_Pos                  (15UL)                    /*!< PF TYP: TYP15 (Bit 15)                                */
#define PF_TYP_TYP15_Msk                  (0x8000UL)                /*!< PF TYP: TYP15 (Bitfield-Mask: 0x01)                   */
#define PF_TYP_TYP14_Pos                  (14UL)                    /*!< PF TYP: TYP14 (Bit 14)                                */
#define PF_TYP_TYP14_Msk                  (0x4000UL)                /*!< PF TYP: TYP14 (Bitfield-Mask: 0x01)                   */
#define PF_TYP_TYP13_Pos                  (13UL)                    /*!< PF TYP: TYP13 (Bit 13)                                */
#define PF_TYP_TYP13_Msk                  (0x2000UL)                /*!< PF TYP: TYP13 (Bitfield-Mask: 0x01)                   */
#define PF_TYP_TYP12_Pos                  (12UL)                    /*!< PF TYP: TYP12 (Bit 12)                                */
#define PF_TYP_TYP12_Msk                  (0x1000UL)                /*!< PF TYP: TYP12 (Bitfield-Mask: 0x01)                   */
#define PF_TYP_TYP11_Pos                  (11UL)                    /*!< PF TYP: TYP11 (Bit 11)                                */
#define PF_TYP_TYP11_Msk                  (0x800UL)                 /*!< PF TYP: TYP11 (Bitfield-Mask: 0x01)                   */
#define PF_TYP_TYP10_Pos                  (10UL)                    /*!< PF TYP: TYP10 (Bit 10)                                */
#define PF_TYP_TYP10_Msk                  (0x400UL)                 /*!< PF TYP: TYP10 (Bitfield-Mask: 0x01)                   */
#define PF_TYP_TYP9_Pos                   (9UL)                     /*!< PF TYP: TYP9 (Bit 9)                                  */
#define PF_TYP_TYP9_Msk                   (0x200UL)                 /*!< PF TYP: TYP9 (Bitfield-Mask: 0x01)                    */
#define PF_TYP_TYP8_Pos                   (8UL)                     /*!< PF TYP: TYP8 (Bit 8)                                  */
#define PF_TYP_TYP8_Msk                   (0x100UL)                 /*!< PF TYP: TYP8 (Bitfield-Mask: 0x01)                    */
#define PF_TYP_TYP7_Pos                   (7UL)                     /*!< PF TYP: TYP7 (Bit 7)                                  */
#define PF_TYP_TYP7_Msk                   (0x80UL)                  /*!< PF TYP: TYP7 (Bitfield-Mask: 0x01)                    */
#define PF_TYP_TYP6_Pos                   (6UL)                     /*!< PF TYP: TYP6 (Bit 6)                                  */
#define PF_TYP_TYP6_Msk                   (0x40UL)                  /*!< PF TYP: TYP6 (Bitfield-Mask: 0x01)                    */
#define PF_TYP_TYP5_Pos                   (5UL)                     /*!< PF TYP: TYP5 (Bit 5)                                  */
#define PF_TYP_TYP5_Msk                   (0x20UL)                  /*!< PF TYP: TYP5 (Bitfield-Mask: 0x01)                    */
#define PF_TYP_TYP4_Pos                   (4UL)                     /*!< PF TYP: TYP4 (Bit 4)                                  */
#define PF_TYP_TYP4_Msk                   (0x10UL)                  /*!< PF TYP: TYP4 (Bitfield-Mask: 0x01)                    */
#define PF_TYP_TYP3_Pos                   (3UL)                     /*!< PF TYP: TYP3 (Bit 3)                                  */
#define PF_TYP_TYP3_Msk                   (0x8UL)                   /*!< PF TYP: TYP3 (Bitfield-Mask: 0x01)                    */
#define PF_TYP_TYP2_Pos                   (2UL)                     /*!< PF TYP: TYP2 (Bit 2)                                  */
#define PF_TYP_TYP2_Msk                   (0x4UL)                   /*!< PF TYP: TYP2 (Bitfield-Mask: 0x01)                    */
#define PF_TYP_TYP1_Pos                   (1UL)                     /*!< PF TYP: TYP1 (Bit 1)                                  */
#define PF_TYP_TYP1_Msk                   (0x2UL)                   /*!< PF TYP: TYP1 (Bitfield-Mask: 0x01)                    */
#define PF_TYP_TYP0_Pos                   (0UL)                     /*!< PF TYP: TYP0 (Bit 0)                                  */
#define PF_TYP_TYP0_Msk                   (0x1UL)                   /*!< PF TYP: TYP0 (Bitfield-Mask: 0x01)                    */
/* =========================================================  AFSR1  ========================================================= */
#define PF_AFSR1_AFSR7_Pos                (28UL)                    /*!< PF AFSR1: AFSR7 (Bit 28)                              */
#define PF_AFSR1_AFSR7_Msk                (0xf0000000UL)            /*!< PF AFSR1: AFSR7 (Bitfield-Mask: 0x0f)                 */
#define PF_AFSR1_AFSR6_Pos                (24UL)                    /*!< PF AFSR1: AFSR6 (Bit 24)                              */
#define PF_AFSR1_AFSR6_Msk                (0xf000000UL)             /*!< PF AFSR1: AFSR6 (Bitfield-Mask: 0x0f)                 */
#define PF_AFSR1_AFSR5_Pos                (20UL)                    /*!< PF AFSR1: AFSR5 (Bit 20)                              */
#define PF_AFSR1_AFSR5_Msk                (0xf00000UL)              /*!< PF AFSR1: AFSR5 (Bitfield-Mask: 0x0f)                 */
#define PF_AFSR1_AFSR4_Pos                (16UL)                    /*!< PF AFSR1: AFSR4 (Bit 16)                              */
#define PF_AFSR1_AFSR4_Msk                (0xf0000UL)               /*!< PF AFSR1: AFSR4 (Bitfield-Mask: 0x0f)                 */
#define PF_AFSR1_AFSR3_Pos                (12UL)                    /*!< PF AFSR1: AFSR3 (Bit 12)                              */
#define PF_AFSR1_AFSR3_Msk                (0xf000UL)                /*!< PF AFSR1: AFSR3 (Bitfield-Mask: 0x0f)                 */
#define PF_AFSR1_AFSR2_Pos                (8UL)                     /*!< PF AFSR1: AFSR2 (Bit 8)                               */
#define PF_AFSR1_AFSR2_Msk                (0xf00UL)                 /*!< PF AFSR1: AFSR2 (Bitfield-Mask: 0x0f)                 */
#define PF_AFSR1_AFSR1_Pos                (4UL)                     /*!< PF AFSR1: AFSR1 (Bit 4)                               */
#define PF_AFSR1_AFSR1_Msk                (0xf0UL)                  /*!< PF AFSR1: AFSR1 (Bitfield-Mask: 0x0f)                 */
#define PF_AFSR1_AFSR0_Pos                (0UL)                     /*!< PF AFSR1: AFSR0 (Bit 0)                               */
#define PF_AFSR1_AFSR0_Msk                (0xfUL)                   /*!< PF AFSR1: AFSR0 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  AFSR2  ========================================================= */
#define PF_AFSR2_AFSR15_Pos               (28UL)                    /*!< PF AFSR2: AFSR15 (Bit 28)                             */
#define PF_AFSR2_AFSR15_Msk               (0xf0000000UL)            /*!< PF AFSR2: AFSR15 (Bitfield-Mask: 0x0f)                */
#define PF_AFSR2_AFSR14_Pos               (24UL)                    /*!< PF AFSR2: AFSR14 (Bit 24)                             */
#define PF_AFSR2_AFSR14_Msk               (0xf000000UL)             /*!< PF AFSR2: AFSR14 (Bitfield-Mask: 0x0f)                */
#define PF_AFSR2_AFSR13_Pos               (20UL)                    /*!< PF AFSR2: AFSR13 (Bit 20)                             */
#define PF_AFSR2_AFSR13_Msk               (0xf00000UL)              /*!< PF AFSR2: AFSR13 (Bitfield-Mask: 0x0f)                */
#define PF_AFSR2_AFSR12_Pos               (16UL)                    /*!< PF AFSR2: AFSR12 (Bit 16)                             */
#define PF_AFSR2_AFSR12_Msk               (0xf0000UL)               /*!< PF AFSR2: AFSR12 (Bitfield-Mask: 0x0f)                */
#define PF_AFSR2_AFSR11_Pos               (12UL)                    /*!< PF AFSR2: AFSR11 (Bit 12)                             */
#define PF_AFSR2_AFSR11_Msk               (0xf000UL)                /*!< PF AFSR2: AFSR11 (Bitfield-Mask: 0x0f)                */
#define PF_AFSR2_AFSR10_Pos               (8UL)                     /*!< PF AFSR2: AFSR10 (Bit 8)                              */
#define PF_AFSR2_AFSR10_Msk               (0xf00UL)                 /*!< PF AFSR2: AFSR10 (Bitfield-Mask: 0x0f)                */
#define PF_AFSR2_AFSR9_Pos                (4UL)                     /*!< PF AFSR2: AFSR9 (Bit 4)                               */
#define PF_AFSR2_AFSR9_Msk                (0xf0UL)                  /*!< PF AFSR2: AFSR9 (Bitfield-Mask: 0x0f)                 */
#define PF_AFSR2_AFSR8_Pos                (0UL)                     /*!< PF AFSR2: AFSR8 (Bit 0)                               */
#define PF_AFSR2_AFSR8_Msk                (0xfUL)                   /*!< PF AFSR2: AFSR8 (Bitfield-Mask: 0x0f)                 */
/* =========================================================  PUPD  ========================================================== */
#define PF_PUPD_PUPD15_Pos                (30UL)                    /*!< PF PUPD: PUPD15 (Bit 30)                              */
#define PF_PUPD_PUPD15_Msk                (0xc0000000UL)            /*!< PF PUPD: PUPD15 (Bitfield-Mask: 0x03)                 */
#define PF_PUPD_PUPD14_Pos                (28UL)                    /*!< PF PUPD: PUPD14 (Bit 28)                              */
#define PF_PUPD_PUPD14_Msk                (0x30000000UL)            /*!< PF PUPD: PUPD14 (Bitfield-Mask: 0x03)                 */
#define PF_PUPD_PUPD13_Pos                (26UL)                    /*!< PF PUPD: PUPD13 (Bit 26)                              */
#define PF_PUPD_PUPD13_Msk                (0xc000000UL)             /*!< PF PUPD: PUPD13 (Bitfield-Mask: 0x03)                 */
#define PF_PUPD_PUPD12_Pos                (24UL)                    /*!< PF PUPD: PUPD12 (Bit 24)                              */
#define PF_PUPD_PUPD12_Msk                (0x3000000UL)             /*!< PF PUPD: PUPD12 (Bitfield-Mask: 0x03)                 */
#define PF_PUPD_PUPD11_Pos                (22UL)                    /*!< PF PUPD: PUPD11 (Bit 22)                              */
#define PF_PUPD_PUPD11_Msk                (0xc00000UL)              /*!< PF PUPD: PUPD11 (Bitfield-Mask: 0x03)                 */
#define PF_PUPD_PUPD10_Pos                (20UL)                    /*!< PF PUPD: PUPD10 (Bit 20)                              */
#define PF_PUPD_PUPD10_Msk                (0x300000UL)              /*!< PF PUPD: PUPD10 (Bitfield-Mask: 0x03)                 */
#define PF_PUPD_PUPD9_Pos                 (18UL)                    /*!< PF PUPD: PUPD9 (Bit 18)                               */
#define PF_PUPD_PUPD9_Msk                 (0xc0000UL)               /*!< PF PUPD: PUPD9 (Bitfield-Mask: 0x03)                  */
#define PF_PUPD_PUPD8_Pos                 (16UL)                    /*!< PF PUPD: PUPD8 (Bit 16)                               */
#define PF_PUPD_PUPD8_Msk                 (0x30000UL)               /*!< PF PUPD: PUPD8 (Bitfield-Mask: 0x03)                  */
#define PF_PUPD_PUPD7_Pos                 (14UL)                    /*!< PF PUPD: PUPD7 (Bit 14)                               */
#define PF_PUPD_PUPD7_Msk                 (0xc000UL)                /*!< PF PUPD: PUPD7 (Bitfield-Mask: 0x03)                  */
#define PF_PUPD_PUPD6_Pos                 (12UL)                    /*!< PF PUPD: PUPD6 (Bit 12)                               */
#define PF_PUPD_PUPD6_Msk                 (0x3000UL)                /*!< PF PUPD: PUPD6 (Bitfield-Mask: 0x03)                  */
#define PF_PUPD_PUPD5_Pos                 (10UL)                    /*!< PF PUPD: PUPD5 (Bit 10)                               */
#define PF_PUPD_PUPD5_Msk                 (0xc00UL)                 /*!< PF PUPD: PUPD5 (Bitfield-Mask: 0x03)                  */
#define PF_PUPD_PUPD4_Pos                 (8UL)                     /*!< PF PUPD: PUPD4 (Bit 8)                                */
#define PF_PUPD_PUPD4_Msk                 (0x300UL)                 /*!< PF PUPD: PUPD4 (Bitfield-Mask: 0x03)                  */
#define PF_PUPD_PUPD3_Pos                 (6UL)                     /*!< PF PUPD: PUPD3 (Bit 6)                                */
#define PF_PUPD_PUPD3_Msk                 (0xc0UL)                  /*!< PF PUPD: PUPD3 (Bitfield-Mask: 0x03)                  */
#define PF_PUPD_PUPD2_Pos                 (4UL)                     /*!< PF PUPD: PUPD2 (Bit 4)                                */
#define PF_PUPD_PUPD2_Msk                 (0x30UL)                  /*!< PF PUPD: PUPD2 (Bitfield-Mask: 0x03)                  */
#define PF_PUPD_PUPD1_Pos                 (2UL)                     /*!< PF PUPD: PUPD1 (Bit 2)                                */
#define PF_PUPD_PUPD1_Msk                 (0xcUL)                   /*!< PF PUPD: PUPD1 (Bitfield-Mask: 0x03)                  */
#define PF_PUPD_PUPD0_Pos                 (0UL)                     /*!< PF PUPD: PUPD0 (Bit 0)                                */
#define PF_PUPD_PUPD0_Msk                 (0x3UL)                   /*!< PF PUPD: PUPD0 (Bitfield-Mask: 0x03)                  */
/* =========================================================  INDR  ========================================================== */
#define PF_INDR_INDR15_Pos                (15UL)                    /*!< PF INDR: INDR15 (Bit 15)                              */
#define PF_INDR_INDR15_Msk                (0x8000UL)                /*!< PF INDR: INDR15 (Bitfield-Mask: 0x01)                 */
#define PF_INDR_INDR14_Pos                (14UL)                    /*!< PF INDR: INDR14 (Bit 14)                              */
#define PF_INDR_INDR14_Msk                (0x4000UL)                /*!< PF INDR: INDR14 (Bitfield-Mask: 0x01)                 */
#define PF_INDR_INDR13_Pos                (13UL)                    /*!< PF INDR: INDR13 (Bit 13)                              */
#define PF_INDR_INDR13_Msk                (0x2000UL)                /*!< PF INDR: INDR13 (Bitfield-Mask: 0x01)                 */
#define PF_INDR_INDR12_Pos                (12UL)                    /*!< PF INDR: INDR12 (Bit 12)                              */
#define PF_INDR_INDR12_Msk                (0x1000UL)                /*!< PF INDR: INDR12 (Bitfield-Mask: 0x01)                 */
#define PF_INDR_INDR11_Pos                (11UL)                    /*!< PF INDR: INDR11 (Bit 11)                              */
#define PF_INDR_INDR11_Msk                (0x800UL)                 /*!< PF INDR: INDR11 (Bitfield-Mask: 0x01)                 */
#define PF_INDR_INDR10_Pos                (10UL)                    /*!< PF INDR: INDR10 (Bit 10)                              */
#define PF_INDR_INDR10_Msk                (0x400UL)                 /*!< PF INDR: INDR10 (Bitfield-Mask: 0x01)                 */
#define PF_INDR_INDR9_Pos                 (9UL)                     /*!< PF INDR: INDR9 (Bit 9)                                */
#define PF_INDR_INDR9_Msk                 (0x200UL)                 /*!< PF INDR: INDR9 (Bitfield-Mask: 0x01)                  */
#define PF_INDR_INDR8_Pos                 (8UL)                     /*!< PF INDR: INDR8 (Bit 8)                                */
#define PF_INDR_INDR8_Msk                 (0x100UL)                 /*!< PF INDR: INDR8 (Bitfield-Mask: 0x01)                  */
#define PF_INDR_INDR7_Pos                 (7UL)                     /*!< PF INDR: INDR7 (Bit 7)                                */
#define PF_INDR_INDR7_Msk                 (0x80UL)                  /*!< PF INDR: INDR7 (Bitfield-Mask: 0x01)                  */
#define PF_INDR_INDR6_Pos                 (6UL)                     /*!< PF INDR: INDR6 (Bit 6)                                */
#define PF_INDR_INDR6_Msk                 (0x40UL)                  /*!< PF INDR: INDR6 (Bitfield-Mask: 0x01)                  */
#define PF_INDR_INDR5_Pos                 (5UL)                     /*!< PF INDR: INDR5 (Bit 5)                                */
#define PF_INDR_INDR5_Msk                 (0x20UL)                  /*!< PF INDR: INDR5 (Bitfield-Mask: 0x01)                  */
#define PF_INDR_INDR4_Pos                 (4UL)                     /*!< PF INDR: INDR4 (Bit 4)                                */
#define PF_INDR_INDR4_Msk                 (0x10UL)                  /*!< PF INDR: INDR4 (Bitfield-Mask: 0x01)                  */
#define PF_INDR_INDR3_Pos                 (3UL)                     /*!< PF INDR: INDR3 (Bit 3)                                */
#define PF_INDR_INDR3_Msk                 (0x8UL)                   /*!< PF INDR: INDR3 (Bitfield-Mask: 0x01)                  */
#define PF_INDR_INDR2_Pos                 (2UL)                     /*!< PF INDR: INDR2 (Bit 2)                                */
#define PF_INDR_INDR2_Msk                 (0x4UL)                   /*!< PF INDR: INDR2 (Bitfield-Mask: 0x01)                  */
#define PF_INDR_INDR1_Pos                 (1UL)                     /*!< PF INDR: INDR1 (Bit 1)                                */
#define PF_INDR_INDR1_Msk                 (0x2UL)                   /*!< PF INDR: INDR1 (Bitfield-Mask: 0x01)                  */
#define PF_INDR_INDR0_Pos                 (0UL)                     /*!< PF INDR: INDR0 (Bit 0)                                */
#define PF_INDR_INDR0_Msk                 (0x1UL)                   /*!< PF INDR: INDR0 (Bitfield-Mask: 0x01)                  */
/* =========================================================  OUTDR  ========================================================= */
#define PF_OUTDR_OUTDR15_Pos              (15UL)                    /*!< PF OUTDR: OUTDR15 (Bit 15)                            */
#define PF_OUTDR_OUTDR15_Msk              (0x8000UL)                /*!< PF OUTDR: OUTDR15 (Bitfield-Mask: 0x01)               */
#define PF_OUTDR_OUTDR14_Pos              (14UL)                    /*!< PF OUTDR: OUTDR14 (Bit 14)                            */
#define PF_OUTDR_OUTDR14_Msk              (0x4000UL)                /*!< PF OUTDR: OUTDR14 (Bitfield-Mask: 0x01)               */
#define PF_OUTDR_OUTDR13_Pos              (13UL)                    /*!< PF OUTDR: OUTDR13 (Bit 13)                            */
#define PF_OUTDR_OUTDR13_Msk              (0x2000UL)                /*!< PF OUTDR: OUTDR13 (Bitfield-Mask: 0x01)               */
#define PF_OUTDR_OUTDR12_Pos              (12UL)                    /*!< PF OUTDR: OUTDR12 (Bit 12)                            */
#define PF_OUTDR_OUTDR12_Msk              (0x1000UL)                /*!< PF OUTDR: OUTDR12 (Bitfield-Mask: 0x01)               */
#define PF_OUTDR_OUTDR11_Pos              (11UL)                    /*!< PF OUTDR: OUTDR11 (Bit 11)                            */
#define PF_OUTDR_OUTDR11_Msk              (0x800UL)                 /*!< PF OUTDR: OUTDR11 (Bitfield-Mask: 0x01)               */
#define PF_OUTDR_OUTDR10_Pos              (10UL)                    /*!< PF OUTDR: OUTDR10 (Bit 10)                            */
#define PF_OUTDR_OUTDR10_Msk              (0x400UL)                 /*!< PF OUTDR: OUTDR10 (Bitfield-Mask: 0x01)               */
#define PF_OUTDR_OUTDR9_Pos               (9UL)                     /*!< PF OUTDR: OUTDR9 (Bit 9)                              */
#define PF_OUTDR_OUTDR9_Msk               (0x200UL)                 /*!< PF OUTDR: OUTDR9 (Bitfield-Mask: 0x01)                */
#define PF_OUTDR_OUTDR8_Pos               (8UL)                     /*!< PF OUTDR: OUTDR8 (Bit 8)                              */
#define PF_OUTDR_OUTDR8_Msk               (0x100UL)                 /*!< PF OUTDR: OUTDR8 (Bitfield-Mask: 0x01)                */
#define PF_OUTDR_OUTDR7_Pos               (7UL)                     /*!< PF OUTDR: OUTDR7 (Bit 7)                              */
#define PF_OUTDR_OUTDR7_Msk               (0x80UL)                  /*!< PF OUTDR: OUTDR7 (Bitfield-Mask: 0x01)                */
#define PF_OUTDR_OUTDR6_Pos               (6UL)                     /*!< PF OUTDR: OUTDR6 (Bit 6)                              */
#define PF_OUTDR_OUTDR6_Msk               (0x40UL)                  /*!< PF OUTDR: OUTDR6 (Bitfield-Mask: 0x01)                */
#define PF_OUTDR_OUTDR5_Pos               (5UL)                     /*!< PF OUTDR: OUTDR5 (Bit 5)                              */
#define PF_OUTDR_OUTDR5_Msk               (0x20UL)                  /*!< PF OUTDR: OUTDR5 (Bitfield-Mask: 0x01)                */
#define PF_OUTDR_OUTDR4_Pos               (4UL)                     /*!< PF OUTDR: OUTDR4 (Bit 4)                              */
#define PF_OUTDR_OUTDR4_Msk               (0x10UL)                  /*!< PF OUTDR: OUTDR4 (Bitfield-Mask: 0x01)                */
#define PF_OUTDR_OUTDR3_Pos               (3UL)                     /*!< PF OUTDR: OUTDR3 (Bit 3)                              */
#define PF_OUTDR_OUTDR3_Msk               (0x8UL)                   /*!< PF OUTDR: OUTDR3 (Bitfield-Mask: 0x01)                */
#define PF_OUTDR_OUTDR2_Pos               (2UL)                     /*!< PF OUTDR: OUTDR2 (Bit 2)                              */
#define PF_OUTDR_OUTDR2_Msk               (0x4UL)                   /*!< PF OUTDR: OUTDR2 (Bitfield-Mask: 0x01)                */
#define PF_OUTDR_OUTDR1_Pos               (1UL)                     /*!< PF OUTDR: OUTDR1 (Bit 1)                              */
#define PF_OUTDR_OUTDR1_Msk               (0x2UL)                   /*!< PF OUTDR: OUTDR1 (Bitfield-Mask: 0x01)                */
#define PF_OUTDR_OUTDR0_Pos               (0UL)                     /*!< PF OUTDR: OUTDR0 (Bit 0)                              */
#define PF_OUTDR_OUTDR0_Msk               (0x1UL)                   /*!< PF OUTDR: OUTDR0 (Bitfield-Mask: 0x01)                */
/* ==========================================================  BSR  ========================================================== */
#define PF_BSR_BSR15_Pos                  (15UL)                    /*!< PF BSR: BSR15 (Bit 15)                                */
#define PF_BSR_BSR15_Msk                  (0x8000UL)                /*!< PF BSR: BSR15 (Bitfield-Mask: 0x01)                   */
#define PF_BSR_BSR14_Pos                  (14UL)                    /*!< PF BSR: BSR14 (Bit 14)                                */
#define PF_BSR_BSR14_Msk                  (0x4000UL)                /*!< PF BSR: BSR14 (Bitfield-Mask: 0x01)                   */
#define PF_BSR_BSR13_Pos                  (13UL)                    /*!< PF BSR: BSR13 (Bit 13)                                */
#define PF_BSR_BSR13_Msk                  (0x2000UL)                /*!< PF BSR: BSR13 (Bitfield-Mask: 0x01)                   */
#define PF_BSR_BSR12_Pos                  (12UL)                    /*!< PF BSR: BSR12 (Bit 12)                                */
#define PF_BSR_BSR12_Msk                  (0x1000UL)                /*!< PF BSR: BSR12 (Bitfield-Mask: 0x01)                   */
#define PF_BSR_BSR11_Pos                  (11UL)                    /*!< PF BSR: BSR11 (Bit 11)                                */
#define PF_BSR_BSR11_Msk                  (0x800UL)                 /*!< PF BSR: BSR11 (Bitfield-Mask: 0x01)                   */
#define PF_BSR_BSR10_Pos                  (10UL)                    /*!< PF BSR: BSR10 (Bit 10)                                */
#define PF_BSR_BSR10_Msk                  (0x400UL)                 /*!< PF BSR: BSR10 (Bitfield-Mask: 0x01)                   */
#define PF_BSR_BSR9_Pos                   (9UL)                     /*!< PF BSR: BSR9 (Bit 9)                                  */
#define PF_BSR_BSR9_Msk                   (0x200UL)                 /*!< PF BSR: BSR9 (Bitfield-Mask: 0x01)                    */
#define PF_BSR_BSR8_Pos                   (8UL)                     /*!< PF BSR: BSR8 (Bit 8)                                  */
#define PF_BSR_BSR8_Msk                   (0x100UL)                 /*!< PF BSR: BSR8 (Bitfield-Mask: 0x01)                    */
#define PF_BSR_BSR7_Pos                   (7UL)                     /*!< PF BSR: BSR7 (Bit 7)                                  */
#define PF_BSR_BSR7_Msk                   (0x80UL)                  /*!< PF BSR: BSR7 (Bitfield-Mask: 0x01)                    */
#define PF_BSR_BSR6_Pos                   (6UL)                     /*!< PF BSR: BSR6 (Bit 6)                                  */
#define PF_BSR_BSR6_Msk                   (0x40UL)                  /*!< PF BSR: BSR6 (Bitfield-Mask: 0x01)                    */
#define PF_BSR_BSR5_Pos                   (5UL)                     /*!< PF BSR: BSR5 (Bit 5)                                  */
#define PF_BSR_BSR5_Msk                   (0x20UL)                  /*!< PF BSR: BSR5 (Bitfield-Mask: 0x01)                    */
#define PF_BSR_BSR4_Pos                   (4UL)                     /*!< PF BSR: BSR4 (Bit 4)                                  */
#define PF_BSR_BSR4_Msk                   (0x10UL)                  /*!< PF BSR: BSR4 (Bitfield-Mask: 0x01)                    */
#define PF_BSR_BSR3_Pos                   (3UL)                     /*!< PF BSR: BSR3 (Bit 3)                                  */
#define PF_BSR_BSR3_Msk                   (0x8UL)                   /*!< PF BSR: BSR3 (Bitfield-Mask: 0x01)                    */
#define PF_BSR_BSR2_Pos                   (2UL)                     /*!< PF BSR: BSR2 (Bit 2)                                  */
#define PF_BSR_BSR2_Msk                   (0x4UL)                   /*!< PF BSR: BSR2 (Bitfield-Mask: 0x01)                    */
#define PF_BSR_BSR1_Pos                   (1UL)                     /*!< PF BSR: BSR1 (Bit 1)                                  */
#define PF_BSR_BSR1_Msk                   (0x2UL)                   /*!< PF BSR: BSR1 (Bitfield-Mask: 0x01)                    */
#define PF_BSR_BSR0_Pos                   (0UL)                     /*!< PF BSR: BSR0 (Bit 0)                                  */
#define PF_BSR_BSR0_Msk                   (0x1UL)                   /*!< PF BSR: BSR0 (Bitfield-Mask: 0x01)                    */
/* ==========================================================  BCR  ========================================================== */
#define PF_BCR_BCR15_Pos                  (15UL)                    /*!< PF BCR: BCR15 (Bit 15)                                */
#define PF_BCR_BCR15_Msk                  (0x8000UL)                /*!< PF BCR: BCR15 (Bitfield-Mask: 0x01)                   */
#define PF_BCR_BCR14_Pos                  (14UL)                    /*!< PF BCR: BCR14 (Bit 14)                                */
#define PF_BCR_BCR14_Msk                  (0x4000UL)                /*!< PF BCR: BCR14 (Bitfield-Mask: 0x01)                   */
#define PF_BCR_BCR13_Pos                  (13UL)                    /*!< PF BCR: BCR13 (Bit 13)                                */
#define PF_BCR_BCR13_Msk                  (0x2000UL)                /*!< PF BCR: BCR13 (Bitfield-Mask: 0x01)                   */
#define PF_BCR_BCR12_Pos                  (12UL)                    /*!< PF BCR: BCR12 (Bit 12)                                */
#define PF_BCR_BCR12_Msk                  (0x1000UL)                /*!< PF BCR: BCR12 (Bitfield-Mask: 0x01)                   */
#define PF_BCR_BCR11_Pos                  (11UL)                    /*!< PF BCR: BCR11 (Bit 11)                                */
#define PF_BCR_BCR11_Msk                  (0x800UL)                 /*!< PF BCR: BCR11 (Bitfield-Mask: 0x01)                   */
#define PF_BCR_BCR10_Pos                  (10UL)                    /*!< PF BCR: BCR10 (Bit 10)                                */
#define PF_BCR_BCR10_Msk                  (0x400UL)                 /*!< PF BCR: BCR10 (Bitfield-Mask: 0x01)                   */
#define PF_BCR_BCR9_Pos                   (9UL)                     /*!< PF BCR: BCR9 (Bit 9)                                  */
#define PF_BCR_BCR9_Msk                   (0x200UL)                 /*!< PF BCR: BCR9 (Bitfield-Mask: 0x01)                    */
#define PF_BCR_BCR8_Pos                   (8UL)                     /*!< PF BCR: BCR8 (Bit 8)                                  */
#define PF_BCR_BCR8_Msk                   (0x100UL)                 /*!< PF BCR: BCR8 (Bitfield-Mask: 0x01)                    */
#define PF_BCR_BCR7_Pos                   (7UL)                     /*!< PF BCR: BCR7 (Bit 7)                                  */
#define PF_BCR_BCR7_Msk                   (0x80UL)                  /*!< PF BCR: BCR7 (Bitfield-Mask: 0x01)                    */
#define PF_BCR_BCR6_Pos                   (6UL)                     /*!< PF BCR: BCR6 (Bit 6)                                  */
#define PF_BCR_BCR6_Msk                   (0x40UL)                  /*!< PF BCR: BCR6 (Bitfield-Mask: 0x01)                    */
#define PF_BCR_BCR5_Pos                   (5UL)                     /*!< PF BCR: BCR5 (Bit 5)                                  */
#define PF_BCR_BCR5_Msk                   (0x20UL)                  /*!< PF BCR: BCR5 (Bitfield-Mask: 0x01)                    */
#define PF_BCR_BCR4_Pos                   (4UL)                     /*!< PF BCR: BCR4 (Bit 4)                                  */
#define PF_BCR_BCR4_Msk                   (0x10UL)                  /*!< PF BCR: BCR4 (Bitfield-Mask: 0x01)                    */
#define PF_BCR_BCR3_Pos                   (3UL)                     /*!< PF BCR: BCR3 (Bit 3)                                  */
#define PF_BCR_BCR3_Msk                   (0x8UL)                   /*!< PF BCR: BCR3 (Bitfield-Mask: 0x01)                    */
#define PF_BCR_BCR2_Pos                   (2UL)                     /*!< PF BCR: BCR2 (Bit 2)                                  */
#define PF_BCR_BCR2_Msk                   (0x4UL)                   /*!< PF BCR: BCR2 (Bitfield-Mask: 0x01)                    */
#define PF_BCR_BCR1_Pos                   (1UL)                     /*!< PF BCR: BCR1 (Bit 1)                                  */
#define PF_BCR_BCR1_Msk                   (0x2UL)                   /*!< PF BCR: BCR1 (Bitfield-Mask: 0x01)                    */
#define PF_BCR_BCR0_Pos                   (0UL)                     /*!< PF BCR: BCR0 (Bit 0)                                  */
#define PF_BCR_BCR0_Msk                   (0x1UL)                   /*!< PF BCR: BCR0 (Bitfield-Mask: 0x01)                    */
/* ========================================================  OUTDMSK  ======================================================== */
#define PF_OUTDMSK_OUTDMSK15_Pos          (15UL)                    /*!< PF OUTDMSK: OUTDMSK15 (Bit 15)                        */
#define PF_OUTDMSK_OUTDMSK15_Msk          (0x8000UL)                /*!< PF OUTDMSK: OUTDMSK15 (Bitfield-Mask: 0x01)           */
#define PF_OUTDMSK_OUTDMSK14_Pos          (14UL)                    /*!< PF OUTDMSK: OUTDMSK14 (Bit 14)                        */
#define PF_OUTDMSK_OUTDMSK14_Msk          (0x4000UL)                /*!< PF OUTDMSK: OUTDMSK14 (Bitfield-Mask: 0x01)           */
#define PF_OUTDMSK_OUTDMSK13_Pos          (13UL)                    /*!< PF OUTDMSK: OUTDMSK13 (Bit 13)                        */
#define PF_OUTDMSK_OUTDMSK13_Msk          (0x2000UL)                /*!< PF OUTDMSK: OUTDMSK13 (Bitfield-Mask: 0x01)           */
#define PF_OUTDMSK_OUTDMSK12_Pos          (12UL)                    /*!< PF OUTDMSK: OUTDMSK12 (Bit 12)                        */
#define PF_OUTDMSK_OUTDMSK12_Msk          (0x1000UL)                /*!< PF OUTDMSK: OUTDMSK12 (Bitfield-Mask: 0x01)           */
#define PF_OUTDMSK_OUTDMSK11_Pos          (11UL)                    /*!< PF OUTDMSK: OUTDMSK11 (Bit 11)                        */
#define PF_OUTDMSK_OUTDMSK11_Msk          (0x800UL)                 /*!< PF OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)           */
#define PF_OUTDMSK_OUTDMSK10_Pos          (10UL)                    /*!< PF OUTDMSK: OUTDMSK10 (Bit 10)                        */
#define PF_OUTDMSK_OUTDMSK10_Msk          (0x400UL)                 /*!< PF OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)           */
#define PF_OUTDMSK_OUTDMSK9_Pos           (9UL)                     /*!< PF OUTDMSK: OUTDMSK9 (Bit 9)                          */
#define PF_OUTDMSK_OUTDMSK9_Msk           (0x200UL)                 /*!< PF OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)            */
#define PF_OUTDMSK_OUTDMSK8_Pos           (8UL)                     /*!< PF OUTDMSK: OUTDMSK8 (Bit 8)                          */
#define PF_OUTDMSK_OUTDMSK8_Msk           (0x100UL)                 /*!< PF OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)            */
#define PF_OUTDMSK_OUTDMSK7_Pos           (7UL)                     /*!< PF OUTDMSK: OUTDMSK7 (Bit 7)                          */
#define PF_OUTDMSK_OUTDMSK7_Msk           (0x80UL)                  /*!< PF OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)            */
#define PF_OUTDMSK_OUTDMSK6_Pos           (6UL)                     /*!< PF OUTDMSK: OUTDMSK6 (Bit 6)                          */
#define PF_OUTDMSK_OUTDMSK6_Msk           (0x40UL)                  /*!< PF OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)            */
#define PF_OUTDMSK_OUTDMSK5_Pos           (5UL)                     /*!< PF OUTDMSK: OUTDMSK5 (Bit 5)                          */
#define PF_OUTDMSK_OUTDMSK5_Msk           (0x20UL)                  /*!< PF OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)            */
#define PF_OUTDMSK_OUTDMSK4_Pos           (4UL)                     /*!< PF OUTDMSK: OUTDMSK4 (Bit 4)                          */
#define PF_OUTDMSK_OUTDMSK4_Msk           (0x10UL)                  /*!< PF OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)            */
#define PF_OUTDMSK_OUTDMSK3_Pos           (3UL)                     /*!< PF OUTDMSK: OUTDMSK3 (Bit 3)                          */
#define PF_OUTDMSK_OUTDMSK3_Msk           (0x8UL)                   /*!< PF OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)            */
#define PF_OUTDMSK_OUTDMSK2_Pos           (2UL)                     /*!< PF OUTDMSK: OUTDMSK2 (Bit 2)                          */
#define PF_OUTDMSK_OUTDMSK2_Msk           (0x4UL)                   /*!< PF OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)            */
#define PF_OUTDMSK_OUTDMSK1_Pos           (1UL)                     /*!< PF OUTDMSK: OUTDMSK1 (Bit 1)                          */
#define PF_OUTDMSK_OUTDMSK1_Msk           (0x2UL)                   /*!< PF OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)            */
#define PF_OUTDMSK_OUTDMSK0_Pos           (0UL)                     /*!< PF OUTDMSK: OUTDMSK0 (Bit 0)                          */
#define PF_OUTDMSK_OUTDMSK0_Msk           (0x1UL)                   /*!< PF OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)            */
/* =========================================================  DBCR  ========================================================== */
#define PF_DBCR_DBCLK_Pos                 (16UL)                    /*!< PF DBCR: DBCLK (Bit 16)                               */
#define PF_DBCR_DBCLK_Msk                 (0x70000UL)               /*!< PF DBCR: DBCLK (Bitfield-Mask: 0x07)                  */
#define PF_DBCR_DBEN11_Pos                (11UL)                    /*!< PF DBCR: DBEN11 (Bit 11)                              */
#define PF_DBCR_DBEN11_Msk                (0x800UL)                 /*!< PF DBCR: DBEN11 (Bitfield-Mask: 0x01)                 */
#define PF_DBCR_DBEN10_Pos                (10UL)                    /*!< PF DBCR: DBEN10 (Bit 10)                              */
#define PF_DBCR_DBEN10_Msk                (0x400UL)                 /*!< PF DBCR: DBEN10 (Bitfield-Mask: 0x01)                 */
#define PF_DBCR_DBEN9_Pos                 (9UL)                     /*!< PF DBCR: DBEN9 (Bit 9)                                */
#define PF_DBCR_DBEN9_Msk                 (0x200UL)                 /*!< PF DBCR: DBEN9 (Bitfield-Mask: 0x01)                  */
#define PF_DBCR_DBEN8_Pos                 (8UL)                     /*!< PF DBCR: DBEN8 (Bit 8)                                */
#define PF_DBCR_DBEN8_Msk                 (0x100UL)                 /*!< PF DBCR: DBEN8 (Bitfield-Mask: 0x01)                  */
#define PF_DBCR_DBEN7_Pos                 (7UL)                     /*!< PF DBCR: DBEN7 (Bit 7)                                */
#define PF_DBCR_DBEN7_Msk                 (0x80UL)                  /*!< PF DBCR: DBEN7 (Bitfield-Mask: 0x01)                  */
#define PF_DBCR_DBEN6_Pos                 (6UL)                     /*!< PF DBCR: DBEN6 (Bit 6)                                */
#define PF_DBCR_DBEN6_Msk                 (0x40UL)                  /*!< PF DBCR: DBEN6 (Bitfield-Mask: 0x01)                  */
#define PF_DBCR_DBEN5_Pos                 (5UL)                     /*!< PF DBCR: DBEN5 (Bit 5)                                */
#define PF_DBCR_DBEN5_Msk                 (0x20UL)                  /*!< PF DBCR: DBEN5 (Bitfield-Mask: 0x01)                  */
#define PF_DBCR_DBEN4_Pos                 (4UL)                     /*!< PF DBCR: DBEN4 (Bit 4)                                */
#define PF_DBCR_DBEN4_Msk                 (0x10UL)                  /*!< PF DBCR: DBEN4 (Bitfield-Mask: 0x01)                  */
#define PF_DBCR_DBEN3_Pos                 (3UL)                     /*!< PF DBCR: DBEN3 (Bit 3)                                */
#define PF_DBCR_DBEN3_Msk                 (0x8UL)                   /*!< PF DBCR: DBEN3 (Bitfield-Mask: 0x01)                  */
#define PF_DBCR_DBEN2_Pos                 (2UL)                     /*!< PF DBCR: DBEN2 (Bit 2)                                */
#define PF_DBCR_DBEN2_Msk                 (0x4UL)                   /*!< PF DBCR: DBEN2 (Bitfield-Mask: 0x01)                  */
#define PF_DBCR_DBEN1_Pos                 (1UL)                     /*!< PF DBCR: DBEN1 (Bit 1)                                */
#define PF_DBCR_DBEN1_Msk                 (0x2UL)                   /*!< PF DBCR: DBEN1 (Bitfield-Mask: 0x01)                  */
#define PF_DBCR_DBEN0_Pos                 (0UL)                     /*!< PF DBCR: DBEN0 (Bit 0)                                */
#define PF_DBCR_DBEN0_Msk                 (0x1UL)                   /*!< PF DBCR: DBEN0 (Bitfield-Mask: 0x01)                  */
/* ========================================================  PF_MOD  ========================================================= */
#define PF_PF_MOD_MODE11_Pos              (22UL)                    /*!< PF PF_MOD: MODE11 (Bit 22)                            */
#define PF_PF_MOD_MODE11_Msk              (0xc00000UL)              /*!< PF PF_MOD: MODE11 (Bitfield-Mask: 0x03)               */
#define PF_PF_MOD_MODE10_Pos              (20UL)                    /*!< PF PF_MOD: MODE10 (Bit 20)                            */
#define PF_PF_MOD_MODE10_Msk              (0x300000UL)              /*!< PF PF_MOD: MODE10 (Bitfield-Mask: 0x03)               */
#define PF_PF_MOD_MODE9_Pos               (18UL)                    /*!< PF PF_MOD: MODE9 (Bit 18)                             */
#define PF_PF_MOD_MODE9_Msk               (0xc0000UL)               /*!< PF PF_MOD: MODE9 (Bitfield-Mask: 0x03)                */
#define PF_PF_MOD_MODE8_Pos               (16UL)                    /*!< PF PF_MOD: MODE8 (Bit 16)                             */
#define PF_PF_MOD_MODE8_Msk               (0x30000UL)               /*!< PF PF_MOD: MODE8 (Bitfield-Mask: 0x03)                */
#define PF_PF_MOD_MODE7_Pos               (14UL)                    /*!< PF PF_MOD: MODE7 (Bit 14)                             */
#define PF_PF_MOD_MODE7_Msk               (0xc000UL)                /*!< PF PF_MOD: MODE7 (Bitfield-Mask: 0x03)                */
#define PF_PF_MOD_MODE6_Pos               (12UL)                    /*!< PF PF_MOD: MODE6 (Bit 12)                             */
#define PF_PF_MOD_MODE6_Msk               (0x3000UL)                /*!< PF PF_MOD: MODE6 (Bitfield-Mask: 0x03)                */
#define PF_PF_MOD_MODE5_Pos               (10UL)                    /*!< PF PF_MOD: MODE5 (Bit 10)                             */
#define PF_PF_MOD_MODE5_Msk               (0xc00UL)                 /*!< PF PF_MOD: MODE5 (Bitfield-Mask: 0x03)                */
#define PF_PF_MOD_MODE4_Pos               (8UL)                     /*!< PF PF_MOD: MODE4 (Bit 8)                              */
#define PF_PF_MOD_MODE4_Msk               (0x300UL)                 /*!< PF PF_MOD: MODE4 (Bitfield-Mask: 0x03)                */
#define PF_PF_MOD_MODE3_Pos               (6UL)                     /*!< PF PF_MOD: MODE3 (Bit 6)                              */
#define PF_PF_MOD_MODE3_Msk               (0xc0UL)                  /*!< PF PF_MOD: MODE3 (Bitfield-Mask: 0x03)                */
#define PF_PF_MOD_MODE2_Pos               (4UL)                     /*!< PF PF_MOD: MODE2 (Bit 4)                              */
#define PF_PF_MOD_MODE2_Msk               (0x30UL)                  /*!< PF PF_MOD: MODE2 (Bitfield-Mask: 0x03)                */
#define PF_PF_MOD_MODE1_Pos               (2UL)                     /*!< PF PF_MOD: MODE1 (Bit 2)                              */
#define PF_PF_MOD_MODE1_Msk               (0xcUL)                   /*!< PF PF_MOD: MODE1 (Bitfield-Mask: 0x03)                */
#define PF_PF_MOD_MODE0_Pos               (0UL)                     /*!< PF PF_MOD: MODE0 (Bit 0)                              */
#define PF_PF_MOD_MODE0_Msk               (0x3UL)                   /*!< PF PF_MOD: MODE0 (Bitfield-Mask: 0x03)                */
/* ========================================================  PF_TYP  ========================================================= */
#define PF_PF_TYP_TYP11_Pos               (11UL)                    /*!< PF PF_TYP: TYP11 (Bit 11)                             */
#define PF_PF_TYP_TYP11_Msk               (0x800UL)                 /*!< PF PF_TYP: TYP11 (Bitfield-Mask: 0x01)                */
#define PF_PF_TYP_TYP10_Pos               (10UL)                    /*!< PF PF_TYP: TYP10 (Bit 10)                             */
#define PF_PF_TYP_TYP10_Msk               (0x400UL)                 /*!< PF PF_TYP: TYP10 (Bitfield-Mask: 0x01)                */
#define PF_PF_TYP_TYP9_Pos                (9UL)                     /*!< PF PF_TYP: TYP9 (Bit 9)                               */
#define PF_PF_TYP_TYP9_Msk                (0x200UL)                 /*!< PF PF_TYP: TYP9 (Bitfield-Mask: 0x01)                 */
#define PF_PF_TYP_TYP8_Pos                (8UL)                     /*!< PF PF_TYP: TYP8 (Bit 8)                               */
#define PF_PF_TYP_TYP8_Msk                (0x100UL)                 /*!< PF PF_TYP: TYP8 (Bitfield-Mask: 0x01)                 */
#define PF_PF_TYP_TYP7_Pos                (7UL)                     /*!< PF PF_TYP: TYP7 (Bit 7)                               */
#define PF_PF_TYP_TYP7_Msk                (0x80UL)                  /*!< PF PF_TYP: TYP7 (Bitfield-Mask: 0x01)                 */
#define PF_PF_TYP_TYP6_Pos                (6UL)                     /*!< PF PF_TYP: TYP6 (Bit 6)                               */
#define PF_PF_TYP_TYP6_Msk                (0x40UL)                  /*!< PF PF_TYP: TYP6 (Bitfield-Mask: 0x01)                 */
#define PF_PF_TYP_TYP5_Pos                (5UL)                     /*!< PF PF_TYP: TYP5 (Bit 5)                               */
#define PF_PF_TYP_TYP5_Msk                (0x20UL)                  /*!< PF PF_TYP: TYP5 (Bitfield-Mask: 0x01)                 */
#define PF_PF_TYP_TYP4_Pos                (4UL)                     /*!< PF PF_TYP: TYP4 (Bit 4)                               */
#define PF_PF_TYP_TYP4_Msk                (0x10UL)                  /*!< PF PF_TYP: TYP4 (Bitfield-Mask: 0x01)                 */
#define PF_PF_TYP_TYP3_Pos                (3UL)                     /*!< PF PF_TYP: TYP3 (Bit 3)                               */
#define PF_PF_TYP_TYP3_Msk                (0x8UL)                   /*!< PF PF_TYP: TYP3 (Bitfield-Mask: 0x01)                 */
#define PF_PF_TYP_TYP2_Pos                (2UL)                     /*!< PF PF_TYP: TYP2 (Bit 2)                               */
#define PF_PF_TYP_TYP2_Msk                (0x4UL)                   /*!< PF PF_TYP: TYP2 (Bitfield-Mask: 0x01)                 */
#define PF_PF_TYP_TYP1_Pos                (1UL)                     /*!< PF PF_TYP: TYP1 (Bit 1)                               */
#define PF_PF_TYP_TYP1_Msk                (0x2UL)                   /*!< PF PF_TYP: TYP1 (Bitfield-Mask: 0x01)                 */
#define PF_PF_TYP_TYP0_Pos                (0UL)                     /*!< PF PF_TYP: TYP0 (Bit 0)                               */
#define PF_PF_TYP_TYP0_Msk                (0x1UL)                   /*!< PF PF_TYP: TYP0 (Bitfield-Mask: 0x01)                 */
/* =======================================================  PF_AFSR1  ======================================================== */
#define PF_PF_AFSR1_AFSR7_Pos             (28UL)                    /*!< PF PF_AFSR1: AFSR7 (Bit 28)                           */
#define PF_PF_AFSR1_AFSR7_Msk             (0xf0000000UL)            /*!< PF PF_AFSR1: AFSR7 (Bitfield-Mask: 0x0f)              */
#define PF_PF_AFSR1_AFSR6_Pos             (24UL)                    /*!< PF PF_AFSR1: AFSR6 (Bit 24)                           */
#define PF_PF_AFSR1_AFSR6_Msk             (0xf000000UL)             /*!< PF PF_AFSR1: AFSR6 (Bitfield-Mask: 0x0f)              */
#define PF_PF_AFSR1_AFSR5_Pos             (20UL)                    /*!< PF PF_AFSR1: AFSR5 (Bit 20)                           */
#define PF_PF_AFSR1_AFSR5_Msk             (0xf00000UL)              /*!< PF PF_AFSR1: AFSR5 (Bitfield-Mask: 0x0f)              */
#define PF_PF_AFSR1_AFSR4_Pos             (16UL)                    /*!< PF PF_AFSR1: AFSR4 (Bit 16)                           */
#define PF_PF_AFSR1_AFSR4_Msk             (0xf0000UL)               /*!< PF PF_AFSR1: AFSR4 (Bitfield-Mask: 0x0f)              */
#define PF_PF_AFSR1_AFSR3_Pos             (12UL)                    /*!< PF PF_AFSR1: AFSR3 (Bit 12)                           */
#define PF_PF_AFSR1_AFSR3_Msk             (0xf000UL)                /*!< PF PF_AFSR1: AFSR3 (Bitfield-Mask: 0x0f)              */
#define PF_PF_AFSR1_AFSR2_Pos             (8UL)                     /*!< PF PF_AFSR1: AFSR2 (Bit 8)                            */
#define PF_PF_AFSR1_AFSR2_Msk             (0xf00UL)                 /*!< PF PF_AFSR1: AFSR2 (Bitfield-Mask: 0x0f)              */
#define PF_PF_AFSR1_AFSR1_Pos             (4UL)                     /*!< PF PF_AFSR1: AFSR1 (Bit 4)                            */
#define PF_PF_AFSR1_AFSR1_Msk             (0xf0UL)                  /*!< PF PF_AFSR1: AFSR1 (Bitfield-Mask: 0x0f)              */
#define PF_PF_AFSR1_AFSR0_Pos             (0UL)                     /*!< PF PF_AFSR1: AFSR0 (Bit 0)                            */
#define PF_PF_AFSR1_AFSR0_Msk             (0xfUL)                   /*!< PF PF_AFSR1: AFSR0 (Bitfield-Mask: 0x0f)              */
/* =======================================================  PF_AFSR2  ======================================================== */
#define PF_PF_AFSR2_AFSR11_Pos            (12UL)                    /*!< PF PF_AFSR2: AFSR11 (Bit 12)                          */
#define PF_PF_AFSR2_AFSR11_Msk            (0xf000UL)                /*!< PF PF_AFSR2: AFSR11 (Bitfield-Mask: 0x0f)             */
#define PF_PF_AFSR2_AFSR10_Pos            (8UL)                     /*!< PF PF_AFSR2: AFSR10 (Bit 8)                           */
#define PF_PF_AFSR2_AFSR10_Msk            (0xf00UL)                 /*!< PF PF_AFSR2: AFSR10 (Bitfield-Mask: 0x0f)             */
#define PF_PF_AFSR2_AFSR9_Pos             (4UL)                     /*!< PF PF_AFSR2: AFSR9 (Bit 4)                            */
#define PF_PF_AFSR2_AFSR9_Msk             (0xf0UL)                  /*!< PF PF_AFSR2: AFSR9 (Bitfield-Mask: 0x0f)              */
#define PF_PF_AFSR2_AFSR8_Pos             (0UL)                     /*!< PF PF_AFSR2: AFSR8 (Bit 0)                            */
#define PF_PF_AFSR2_AFSR8_Msk             (0xfUL)                   /*!< PF PF_AFSR2: AFSR8 (Bitfield-Mask: 0x0f)              */
/* ========================================================  PF_PUPD  ======================================================== */
#define PF_PF_PUPD_PUPD11_Pos             (22UL)                    /*!< PF PF_PUPD: PUPD11 (Bit 22)                           */
#define PF_PF_PUPD_PUPD11_Msk             (0xc00000UL)              /*!< PF PF_PUPD: PUPD11 (Bitfield-Mask: 0x03)              */
#define PF_PF_PUPD_PUPD10_Pos             (20UL)                    /*!< PF PF_PUPD: PUPD10 (Bit 20)                           */
#define PF_PF_PUPD_PUPD10_Msk             (0x300000UL)              /*!< PF PF_PUPD: PUPD10 (Bitfield-Mask: 0x03)              */
#define PF_PF_PUPD_PUPD9_Pos              (18UL)                    /*!< PF PF_PUPD: PUPD9 (Bit 18)                            */
#define PF_PF_PUPD_PUPD9_Msk              (0xc0000UL)               /*!< PF PF_PUPD: PUPD9 (Bitfield-Mask: 0x03)               */
#define PF_PF_PUPD_PUPD8_Pos              (16UL)                    /*!< PF PF_PUPD: PUPD8 (Bit 16)                            */
#define PF_PF_PUPD_PUPD8_Msk              (0x30000UL)               /*!< PF PF_PUPD: PUPD8 (Bitfield-Mask: 0x03)               */
#define PF_PF_PUPD_PUPD7_Pos              (14UL)                    /*!< PF PF_PUPD: PUPD7 (Bit 14)                            */
#define PF_PF_PUPD_PUPD7_Msk              (0xc000UL)                /*!< PF PF_PUPD: PUPD7 (Bitfield-Mask: 0x03)               */
#define PF_PF_PUPD_PUPD6_Pos              (12UL)                    /*!< PF PF_PUPD: PUPD6 (Bit 12)                            */
#define PF_PF_PUPD_PUPD6_Msk              (0x3000UL)                /*!< PF PF_PUPD: PUPD6 (Bitfield-Mask: 0x03)               */
#define PF_PF_PUPD_PUPD5_Pos              (10UL)                    /*!< PF PF_PUPD: PUPD5 (Bit 10)                            */
#define PF_PF_PUPD_PUPD5_Msk              (0xc00UL)                 /*!< PF PF_PUPD: PUPD5 (Bitfield-Mask: 0x03)               */
#define PF_PF_PUPD_PUPD4_Pos              (8UL)                     /*!< PF PF_PUPD: PUPD4 (Bit 8)                             */
#define PF_PF_PUPD_PUPD4_Msk              (0x300UL)                 /*!< PF PF_PUPD: PUPD4 (Bitfield-Mask: 0x03)               */
#define PF_PF_PUPD_PUPD3_Pos              (6UL)                     /*!< PF PF_PUPD: PUPD3 (Bit 6)                             */
#define PF_PF_PUPD_PUPD3_Msk              (0xc0UL)                  /*!< PF PF_PUPD: PUPD3 (Bitfield-Mask: 0x03)               */
#define PF_PF_PUPD_PUPD2_Pos              (4UL)                     /*!< PF PF_PUPD: PUPD2 (Bit 4)                             */
#define PF_PF_PUPD_PUPD2_Msk              (0x30UL)                  /*!< PF PF_PUPD: PUPD2 (Bitfield-Mask: 0x03)               */
#define PF_PF_PUPD_PUPD1_Pos              (2UL)                     /*!< PF PF_PUPD: PUPD1 (Bit 2)                             */
#define PF_PF_PUPD_PUPD1_Msk              (0xcUL)                   /*!< PF PF_PUPD: PUPD1 (Bitfield-Mask: 0x03)               */
#define PF_PF_PUPD_PUPD0_Pos              (0UL)                     /*!< PF PF_PUPD: PUPD0 (Bit 0)                             */
#define PF_PF_PUPD_PUPD0_Msk              (0x3UL)                   /*!< PF PF_PUPD: PUPD0 (Bitfield-Mask: 0x03)               */
/* ========================================================  PF_INDR  ======================================================== */
#define PF_PF_INDR_INDR11_Pos             (11UL)                    /*!< PF PF_INDR: INDR11 (Bit 11)                           */
#define PF_PF_INDR_INDR11_Msk             (0x800UL)                 /*!< PF PF_INDR: INDR11 (Bitfield-Mask: 0x01)              */
#define PF_PF_INDR_INDR10_Pos             (10UL)                    /*!< PF PF_INDR: INDR10 (Bit 10)                           */
#define PF_PF_INDR_INDR10_Msk             (0x400UL)                 /*!< PF PF_INDR: INDR10 (Bitfield-Mask: 0x01)              */
#define PF_PF_INDR_INDR9_Pos              (9UL)                     /*!< PF PF_INDR: INDR9 (Bit 9)                             */
#define PF_PF_INDR_INDR9_Msk              (0x200UL)                 /*!< PF PF_INDR: INDR9 (Bitfield-Mask: 0x01)               */
#define PF_PF_INDR_INDR8_Pos              (8UL)                     /*!< PF PF_INDR: INDR8 (Bit 8)                             */
#define PF_PF_INDR_INDR8_Msk              (0x100UL)                 /*!< PF PF_INDR: INDR8 (Bitfield-Mask: 0x01)               */
#define PF_PF_INDR_INDR7_Pos              (7UL)                     /*!< PF PF_INDR: INDR7 (Bit 7)                             */
#define PF_PF_INDR_INDR7_Msk              (0x80UL)                  /*!< PF PF_INDR: INDR7 (Bitfield-Mask: 0x01)               */
#define PF_PF_INDR_INDR6_Pos              (6UL)                     /*!< PF PF_INDR: INDR6 (Bit 6)                             */
#define PF_PF_INDR_INDR6_Msk              (0x40UL)                  /*!< PF PF_INDR: INDR6 (Bitfield-Mask: 0x01)               */
#define PF_PF_INDR_INDR5_Pos              (5UL)                     /*!< PF PF_INDR: INDR5 (Bit 5)                             */
#define PF_PF_INDR_INDR5_Msk              (0x20UL)                  /*!< PF PF_INDR: INDR5 (Bitfield-Mask: 0x01)               */
#define PF_PF_INDR_INDR4_Pos              (4UL)                     /*!< PF PF_INDR: INDR4 (Bit 4)                             */
#define PF_PF_INDR_INDR4_Msk              (0x10UL)                  /*!< PF PF_INDR: INDR4 (Bitfield-Mask: 0x01)               */
#define PF_PF_INDR_INDR3_Pos              (3UL)                     /*!< PF PF_INDR: INDR3 (Bit 3)                             */
#define PF_PF_INDR_INDR3_Msk              (0x8UL)                   /*!< PF PF_INDR: INDR3 (Bitfield-Mask: 0x01)               */
#define PF_PF_INDR_INDR2_Pos              (2UL)                     /*!< PF PF_INDR: INDR2 (Bit 2)                             */
#define PF_PF_INDR_INDR2_Msk              (0x4UL)                   /*!< PF PF_INDR: INDR2 (Bitfield-Mask: 0x01)               */
#define PF_PF_INDR_INDR1_Pos              (1UL)                     /*!< PF PF_INDR: INDR1 (Bit 1)                             */
#define PF_PF_INDR_INDR1_Msk              (0x2UL)                   /*!< PF PF_INDR: INDR1 (Bitfield-Mask: 0x01)               */
#define PF_PF_INDR_INDR0_Pos              (0UL)                     /*!< PF PF_INDR: INDR0 (Bit 0)                             */
#define PF_PF_INDR_INDR0_Msk              (0x1UL)                   /*!< PF PF_INDR: INDR0 (Bitfield-Mask: 0x01)               */
/* =======================================================  PF_OUTDR  ======================================================== */
#define PF_PF_OUTDR_OUTDR11_Pos           (11UL)                    /*!< PF PF_OUTDR: OUTDR11 (Bit 11)                         */
#define PF_PF_OUTDR_OUTDR11_Msk           (0x800UL)                 /*!< PF PF_OUTDR: OUTDR11 (Bitfield-Mask: 0x01)            */
#define PF_PF_OUTDR_OUTDR10_Pos           (10UL)                    /*!< PF PF_OUTDR: OUTDR10 (Bit 10)                         */
#define PF_PF_OUTDR_OUTDR10_Msk           (0x400UL)                 /*!< PF PF_OUTDR: OUTDR10 (Bitfield-Mask: 0x01)            */
#define PF_PF_OUTDR_OUTDR9_Pos            (9UL)                     /*!< PF PF_OUTDR: OUTDR9 (Bit 9)                           */
#define PF_PF_OUTDR_OUTDR9_Msk            (0x200UL)                 /*!< PF PF_OUTDR: OUTDR9 (Bitfield-Mask: 0x01)             */
#define PF_PF_OUTDR_OUTDR8_Pos            (8UL)                     /*!< PF PF_OUTDR: OUTDR8 (Bit 8)                           */
#define PF_PF_OUTDR_OUTDR8_Msk            (0x100UL)                 /*!< PF PF_OUTDR: OUTDR8 (Bitfield-Mask: 0x01)             */
#define PF_PF_OUTDR_OUTDR7_Pos            (7UL)                     /*!< PF PF_OUTDR: OUTDR7 (Bit 7)                           */
#define PF_PF_OUTDR_OUTDR7_Msk            (0x80UL)                  /*!< PF PF_OUTDR: OUTDR7 (Bitfield-Mask: 0x01)             */
#define PF_PF_OUTDR_OUTDR6_Pos            (6UL)                     /*!< PF PF_OUTDR: OUTDR6 (Bit 6)                           */
#define PF_PF_OUTDR_OUTDR6_Msk            (0x40UL)                  /*!< PF PF_OUTDR: OUTDR6 (Bitfield-Mask: 0x01)             */
#define PF_PF_OUTDR_OUTDR5_Pos            (5UL)                     /*!< PF PF_OUTDR: OUTDR5 (Bit 5)                           */
#define PF_PF_OUTDR_OUTDR5_Msk            (0x20UL)                  /*!< PF PF_OUTDR: OUTDR5 (Bitfield-Mask: 0x01)             */
#define PF_PF_OUTDR_OUTDR4_Pos            (4UL)                     /*!< PF PF_OUTDR: OUTDR4 (Bit 4)                           */
#define PF_PF_OUTDR_OUTDR4_Msk            (0x10UL)                  /*!< PF PF_OUTDR: OUTDR4 (Bitfield-Mask: 0x01)             */
#define PF_PF_OUTDR_OUTDR3_Pos            (3UL)                     /*!< PF PF_OUTDR: OUTDR3 (Bit 3)                           */
#define PF_PF_OUTDR_OUTDR3_Msk            (0x8UL)                   /*!< PF PF_OUTDR: OUTDR3 (Bitfield-Mask: 0x01)             */
#define PF_PF_OUTDR_OUTDR2_Pos            (2UL)                     /*!< PF PF_OUTDR: OUTDR2 (Bit 2)                           */
#define PF_PF_OUTDR_OUTDR2_Msk            (0x4UL)                   /*!< PF PF_OUTDR: OUTDR2 (Bitfield-Mask: 0x01)             */
#define PF_PF_OUTDR_OUTDR1_Pos            (1UL)                     /*!< PF PF_OUTDR: OUTDR1 (Bit 1)                           */
#define PF_PF_OUTDR_OUTDR1_Msk            (0x2UL)                   /*!< PF PF_OUTDR: OUTDR1 (Bitfield-Mask: 0x01)             */
#define PF_PF_OUTDR_OUTDR0_Pos            (0UL)                     /*!< PF PF_OUTDR: OUTDR0 (Bit 0)                           */
#define PF_PF_OUTDR_OUTDR0_Msk            (0x1UL)                   /*!< PF PF_OUTDR: OUTDR0 (Bitfield-Mask: 0x01)             */
/* ========================================================  PF_BSR  ========================================================= */
#define PF_PF_BSR_BSR11_Pos               (11UL)                    /*!< PF PF_BSR: BSR11 (Bit 11)                             */
#define PF_PF_BSR_BSR11_Msk               (0x800UL)                 /*!< PF PF_BSR: BSR11 (Bitfield-Mask: 0x01)                */
#define PF_PF_BSR_BSR10_Pos               (10UL)                    /*!< PF PF_BSR: BSR10 (Bit 10)                             */
#define PF_PF_BSR_BSR10_Msk               (0x400UL)                 /*!< PF PF_BSR: BSR10 (Bitfield-Mask: 0x01)                */
#define PF_PF_BSR_BSR9_Pos                (9UL)                     /*!< PF PF_BSR: BSR9 (Bit 9)                               */
#define PF_PF_BSR_BSR9_Msk                (0x200UL)                 /*!< PF PF_BSR: BSR9 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BSR_BSR8_Pos                (8UL)                     /*!< PF PF_BSR: BSR8 (Bit 8)                               */
#define PF_PF_BSR_BSR8_Msk                (0x100UL)                 /*!< PF PF_BSR: BSR8 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BSR_BSR7_Pos                (7UL)                     /*!< PF PF_BSR: BSR7 (Bit 7)                               */
#define PF_PF_BSR_BSR7_Msk                (0x80UL)                  /*!< PF PF_BSR: BSR7 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BSR_BSR6_Pos                (6UL)                     /*!< PF PF_BSR: BSR6 (Bit 6)                               */
#define PF_PF_BSR_BSR6_Msk                (0x40UL)                  /*!< PF PF_BSR: BSR6 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BSR_BSR5_Pos                (5UL)                     /*!< PF PF_BSR: BSR5 (Bit 5)                               */
#define PF_PF_BSR_BSR5_Msk                (0x20UL)                  /*!< PF PF_BSR: BSR5 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BSR_BSR4_Pos                (4UL)                     /*!< PF PF_BSR: BSR4 (Bit 4)                               */
#define PF_PF_BSR_BSR4_Msk                (0x10UL)                  /*!< PF PF_BSR: BSR4 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BSR_BSR3_Pos                (3UL)                     /*!< PF PF_BSR: BSR3 (Bit 3)                               */
#define PF_PF_BSR_BSR3_Msk                (0x8UL)                   /*!< PF PF_BSR: BSR3 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BSR_BSR2_Pos                (2UL)                     /*!< PF PF_BSR: BSR2 (Bit 2)                               */
#define PF_PF_BSR_BSR2_Msk                (0x4UL)                   /*!< PF PF_BSR: BSR2 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BSR_BSR1_Pos                (1UL)                     /*!< PF PF_BSR: BSR1 (Bit 1)                               */
#define PF_PF_BSR_BSR1_Msk                (0x2UL)                   /*!< PF PF_BSR: BSR1 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BSR_BSR0_Pos                (0UL)                     /*!< PF PF_BSR: BSR0 (Bit 0)                               */
#define PF_PF_BSR_BSR0_Msk                (0x1UL)                   /*!< PF PF_BSR: BSR0 (Bitfield-Mask: 0x01)                 */
/* ========================================================  PF_BCR  ========================================================= */
#define PF_PF_BCR_BCR11_Pos               (11UL)                    /*!< PF PF_BCR: BCR11 (Bit 11)                             */
#define PF_PF_BCR_BCR11_Msk               (0x800UL)                 /*!< PF PF_BCR: BCR11 (Bitfield-Mask: 0x01)                */
#define PF_PF_BCR_BCR10_Pos               (10UL)                    /*!< PF PF_BCR: BCR10 (Bit 10)                             */
#define PF_PF_BCR_BCR10_Msk               (0x400UL)                 /*!< PF PF_BCR: BCR10 (Bitfield-Mask: 0x01)                */
#define PF_PF_BCR_BCR9_Pos                (9UL)                     /*!< PF PF_BCR: BCR9 (Bit 9)                               */
#define PF_PF_BCR_BCR9_Msk                (0x200UL)                 /*!< PF PF_BCR: BCR9 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BCR_BCR8_Pos                (8UL)                     /*!< PF PF_BCR: BCR8 (Bit 8)                               */
#define PF_PF_BCR_BCR8_Msk                (0x100UL)                 /*!< PF PF_BCR: BCR8 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BCR_BCR7_Pos                (7UL)                     /*!< PF PF_BCR: BCR7 (Bit 7)                               */
#define PF_PF_BCR_BCR7_Msk                (0x80UL)                  /*!< PF PF_BCR: BCR7 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BCR_BCR6_Pos                (6UL)                     /*!< PF PF_BCR: BCR6 (Bit 6)                               */
#define PF_PF_BCR_BCR6_Msk                (0x40UL)                  /*!< PF PF_BCR: BCR6 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BCR_BCR5_Pos                (5UL)                     /*!< PF PF_BCR: BCR5 (Bit 5)                               */
#define PF_PF_BCR_BCR5_Msk                (0x20UL)                  /*!< PF PF_BCR: BCR5 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BCR_BCR4_Pos                (4UL)                     /*!< PF PF_BCR: BCR4 (Bit 4)                               */
#define PF_PF_BCR_BCR4_Msk                (0x10UL)                  /*!< PF PF_BCR: BCR4 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BCR_BCR3_Pos                (3UL)                     /*!< PF PF_BCR: BCR3 (Bit 3)                               */
#define PF_PF_BCR_BCR3_Msk                (0x8UL)                   /*!< PF PF_BCR: BCR3 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BCR_BCR2_Pos                (2UL)                     /*!< PF PF_BCR: BCR2 (Bit 2)                               */
#define PF_PF_BCR_BCR2_Msk                (0x4UL)                   /*!< PF PF_BCR: BCR2 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BCR_BCR1_Pos                (1UL)                     /*!< PF PF_BCR: BCR1 (Bit 1)                               */
#define PF_PF_BCR_BCR1_Msk                (0x2UL)                   /*!< PF PF_BCR: BCR1 (Bitfield-Mask: 0x01)                 */
#define PF_PF_BCR_BCR0_Pos                (0UL)                     /*!< PF PF_BCR: BCR0 (Bit 0)                               */
#define PF_PF_BCR_BCR0_Msk                (0x1UL)                   /*!< PF PF_BCR: BCR0 (Bitfield-Mask: 0x01)                 */
/* ======================================================  PF_OUTDMSK  ======================================================= */
#define PF_PF_OUTDMSK_OUTDMSK11_Pos       (11UL)                    /*!< PF PF_OUTDMSK: OUTDMSK11 (Bit 11)                     */
#define PF_PF_OUTDMSK_OUTDMSK11_Msk       (0x800UL)                 /*!< PF PF_OUTDMSK: OUTDMSK11 (Bitfield-Mask: 0x01)        */
#define PF_PF_OUTDMSK_OUTDMSK10_Pos       (10UL)                    /*!< PF PF_OUTDMSK: OUTDMSK10 (Bit 10)                     */
#define PF_PF_OUTDMSK_OUTDMSK10_Msk       (0x400UL)                 /*!< PF PF_OUTDMSK: OUTDMSK10 (Bitfield-Mask: 0x01)        */
#define PF_PF_OUTDMSK_OUTDMSK9_Pos        (9UL)                     /*!< PF PF_OUTDMSK: OUTDMSK9 (Bit 9)                       */
#define PF_PF_OUTDMSK_OUTDMSK9_Msk        (0x200UL)                 /*!< PF PF_OUTDMSK: OUTDMSK9 (Bitfield-Mask: 0x01)         */
#define PF_PF_OUTDMSK_OUTDMSK8_Pos        (8UL)                     /*!< PF PF_OUTDMSK: OUTDMSK8 (Bit 8)                       */
#define PF_PF_OUTDMSK_OUTDMSK8_Msk        (0x100UL)                 /*!< PF PF_OUTDMSK: OUTDMSK8 (Bitfield-Mask: 0x01)         */
#define PF_PF_OUTDMSK_OUTDMSK7_Pos        (7UL)                     /*!< PF PF_OUTDMSK: OUTDMSK7 (Bit 7)                       */
#define PF_PF_OUTDMSK_OUTDMSK7_Msk        (0x80UL)                  /*!< PF PF_OUTDMSK: OUTDMSK7 (Bitfield-Mask: 0x01)         */
#define PF_PF_OUTDMSK_OUTDMSK6_Pos        (6UL)                     /*!< PF PF_OUTDMSK: OUTDMSK6 (Bit 6)                       */
#define PF_PF_OUTDMSK_OUTDMSK6_Msk        (0x40UL)                  /*!< PF PF_OUTDMSK: OUTDMSK6 (Bitfield-Mask: 0x01)         */
#define PF_PF_OUTDMSK_OUTDMSK5_Pos        (5UL)                     /*!< PF PF_OUTDMSK: OUTDMSK5 (Bit 5)                       */
#define PF_PF_OUTDMSK_OUTDMSK5_Msk        (0x20UL)                  /*!< PF PF_OUTDMSK: OUTDMSK5 (Bitfield-Mask: 0x01)         */
#define PF_PF_OUTDMSK_OUTDMSK4_Pos        (4UL)                     /*!< PF PF_OUTDMSK: OUTDMSK4 (Bit 4)                       */
#define PF_PF_OUTDMSK_OUTDMSK4_Msk        (0x10UL)                  /*!< PF PF_OUTDMSK: OUTDMSK4 (Bitfield-Mask: 0x01)         */
#define PF_PF_OUTDMSK_OUTDMSK3_Pos        (3UL)                     /*!< PF PF_OUTDMSK: OUTDMSK3 (Bit 3)                       */
#define PF_PF_OUTDMSK_OUTDMSK3_Msk        (0x8UL)                   /*!< PF PF_OUTDMSK: OUTDMSK3 (Bitfield-Mask: 0x01)         */
#define PF_PF_OUTDMSK_OUTDMSK2_Pos        (2UL)                     /*!< PF PF_OUTDMSK: OUTDMSK2 (Bit 2)                       */
#define PF_PF_OUTDMSK_OUTDMSK2_Msk        (0x4UL)                   /*!< PF PF_OUTDMSK: OUTDMSK2 (Bitfield-Mask: 0x01)         */
#define PF_PF_OUTDMSK_OUTDMSK1_Pos        (1UL)                     /*!< PF PF_OUTDMSK: OUTDMSK1 (Bit 1)                       */
#define PF_PF_OUTDMSK_OUTDMSK1_Msk        (0x2UL)                   /*!< PF PF_OUTDMSK: OUTDMSK1 (Bitfield-Mask: 0x01)         */
#define PF_PF_OUTDMSK_OUTDMSK0_Pos        (0UL)                     /*!< PF PF_OUTDMSK: OUTDMSK0 (Bit 0)                       */
#define PF_PF_OUTDMSK_OUTDMSK0_Msk        (0x1UL)                   /*!< PF PF_OUTDMSK: OUTDMSK0 (Bitfield-Mask: 0x01)         */


/* =========================================================================================================================== */
/* ================                                            FMC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  ADR  ========================================================== */
#define FMC_ADR_ADDR_Pos                  (0UL)                     /*!< FMC ADR: ADDR (Bit 0)                                 */
#define FMC_ADR_ADDR_Msk                  (0xffffffffUL)            /*!< FMC ADR: ADDR (Bitfield-Mask: 0xffffffff)             */
/* =========================================================  IDR1  ========================================================== */
#define FMC_IDR1_ID1_Pos                  (0UL)                     /*!< FMC IDR1: ID1 (Bit 0)                                 */
#define FMC_IDR1_ID1_Msk                  (0xffffffffUL)            /*!< FMC IDR1: ID1 (Bitfield-Mask: 0xffffffff)             */
/* =========================================================  IDR2  ========================================================== */
#define FMC_IDR2_ID2_Pos                  (0UL)                     /*!< FMC IDR2: ID2 (Bit 0)                                 */
#define FMC_IDR2_ID2_Msk                  (0xffffffffUL)            /*!< FMC IDR2: ID2 (Bitfield-Mask: 0xffffffff)             */
/* ==========================================================  CR  =========================================================== */
#define FMC_CR_WTIDKY_Pos                 (16UL)                    /*!< FMC CR: WTIDKY (Bit 16)                               */
#define FMC_CR_WTIDKY_Msk                 (0xffff0000UL)            /*!< FMC CR: WTIDKY (Bitfield-Mask: 0xffff)                */
#define FMC_CR_FMKEY_Pos                  (8UL)                     /*!< FMC CR: FMKEY (Bit 8)                                 */
#define FMC_CR_FMKEY_Msk                  (0xff00UL)                /*!< FMC CR: FMKEY (Bitfield-Mask: 0xff)                   */
#define FMC_CR_FMBUSY_Pos                 (7UL)                     /*!< FMC CR: FMBUSY (Bit 7)                                */
#define FMC_CR_FMBUSY_Msk                 (0x80UL)                  /*!< FMC CR: FMBUSY (Bitfield-Mask: 0x01)                  */
#define FMC_CR_FMOD_Pos                   (0UL)                     /*!< FMC CR: FMOD (Bit 0)                                  */
#define FMC_CR_FMOD_Msk                   (0xfUL)                   /*!< FMC CR: FMOD (Bitfield-Mask: 0x0f)                    */
/* ==========================================================  BCR  ========================================================== */
#define FMC_BCR_WTIDKY_Pos                (16UL)                    /*!< FMC BCR: WTIDKY (Bit 16)                              */
#define FMC_BCR_WTIDKY_Msk                (0xffff0000UL)            /*!< FMC BCR: WTIDKY (Bitfield-Mask: 0xffff)               */
#define FMC_BCR_CNF3BEN_Pos               (8UL)                     /*!< FMC BCR: CNF3BEN (Bit 8)                              */
#define FMC_BCR_CNF3BEN_Msk               (0xf00UL)                 /*!< FMC BCR: CNF3BEN (Bitfield-Mask: 0x0f)                */
#define FMC_BCR_CNF2BEN_Pos               (4UL)                     /*!< FMC BCR: CNF2BEN (Bit 4)                              */
#define FMC_BCR_CNF2BEN_Msk               (0xf0UL)                  /*!< FMC BCR: CNF2BEN (Bitfield-Mask: 0x0f)                */
#define FMC_BCR_CNF1BEN_Pos               (0UL)                     /*!< FMC BCR: CNF1BEN (Bit 0)                              */
#define FMC_BCR_CNF1BEN_Msk               (0xfUL)                   /*!< FMC BCR: CNF1BEN (Bitfield-Mask: 0x0f)                */
/* ========================================================  ERFLAG  ========================================================= */
#define FMC_ERFLAG_INSTFLAG_Pos           (1UL)                     /*!< FMC ERFLAG: INSTFLAG (Bit 1)                          */
#define FMC_ERFLAG_INSTFLAG_Msk           (0x2UL)                   /*!< FMC ERFLAG: INSTFLAG (Bitfield-Mask: 0x01)            */
#define FMC_ERFLAG_FMOPFLAG_Pos           (0UL)                     /*!< FMC ERFLAG: FMOPFLAG (Bit 0)                          */
#define FMC_ERFLAG_FMOPFLAG_Msk           (0x1UL)                   /*!< FMC ERFLAG: FMOPFLAG (Bitfield-Mask: 0x01)            */
/* ========================================================  PAGEBUF  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define WDT_CR_WTIDKY_Pos                 (16UL)                    /*!< WDT CR: WTIDKY (Bit 16)                               */
#define WDT_CR_WTIDKY_Msk                 (0xffff0000UL)            /*!< WDT CR: WTIDKY (Bitfield-Mask: 0xffff)                */
#define WDT_CR_RSTEN_Pos                  (10UL)                    /*!< WDT CR: RSTEN (Bit 10)                                */
#define WDT_CR_RSTEN_Msk                  (0xfc00UL)                /*!< WDT CR: RSTEN (Bitfield-Mask: 0x3f)                   */
#define WDT_CR_CNTEN_Pos                  (4UL)                     /*!< WDT CR: CNTEN (Bit 4)                                 */
#define WDT_CR_CNTEN_Msk                  (0x3f0UL)                 /*!< WDT CR: CNTEN (Bitfield-Mask: 0x3f)                   */
#define WDT_CR_WINMIEN_Pos                (3UL)                     /*!< WDT CR: WINMIEN (Bit 3)                               */
#define WDT_CR_WINMIEN_Msk                (0x8UL)                   /*!< WDT CR: WINMIEN (Bitfield-Mask: 0x01)                 */
#define WDT_CR_UNFIEN_Pos                 (2UL)                     /*!< WDT CR: UNFIEN (Bit 2)                                */
#define WDT_CR_UNFIEN_Msk                 (0x4UL)                   /*!< WDT CR: UNFIEN (Bitfield-Mask: 0x01)                  */
#define WDT_CR_CLKDIV_Pos                 (0UL)                     /*!< WDT CR: CLKDIV (Bit 0)                                */
#define WDT_CR_CLKDIV_Msk                 (0x3UL)                   /*!< WDT CR: CLKDIV (Bitfield-Mask: 0x03)                  */
/* ==========================================================  SR  =========================================================== */
#define WDT_SR_DBGCNTEN_Pos               (7UL)                     /*!< WDT SR: DBGCNTEN (Bit 7)                              */
#define WDT_SR_DBGCNTEN_Msk               (0x80UL)                  /*!< WDT SR: DBGCNTEN (Bitfield-Mask: 0x01)                */
#define WDT_SR_WINMIFLAG_Pos              (1UL)                     /*!< WDT SR: WINMIFLAG (Bit 1)                             */
#define WDT_SR_WINMIFLAG_Msk              (0x2UL)                   /*!< WDT SR: WINMIFLAG (Bitfield-Mask: 0x01)               */
#define WDT_SR_UNFIFLAG_Pos               (0UL)                     /*!< WDT SR: UNFIFLAG (Bit 0)                              */
#define WDT_SR_UNFIFLAG_Msk               (0x1UL)                   /*!< WDT SR: UNFIFLAG (Bitfield-Mask: 0x01)                */
/* ==========================================================  DR  =========================================================== */
#define WDT_DR_DATA_Pos                   (0UL)                     /*!< WDT DR: DATA (Bit 0)                                  */
#define WDT_DR_DATA_Msk                   (0xffffffUL)              /*!< WDT DR: DATA (Bitfield-Mask: 0xffffff)                */
/* ==========================================================  CNT  ========================================================== */
#define WDT_CNT_CNT_Pos                   (0UL)                     /*!< WDT CNT: CNT (Bit 0)                                  */
#define WDT_CNT_CNT_Msk                   (0xffffffUL)              /*!< WDT CNT: CNT (Bitfield-Mask: 0xffffff)                */
/* =========================================================  WINDR  ========================================================= */
#define WDT_WINDR_WDATA_Pos               (0UL)                     /*!< WDT WINDR: WDATA (Bit 0)                              */
#define WDT_WINDR_WDATA_Msk               (0xffffffUL)              /*!< WDT WINDR: WDATA (Bitfield-Mask: 0xffffff)            */
/* =========================================================  CNTR  ========================================================== */
#define WDT_CNTR_CNTR_Pos                 (0UL)                     /*!< WDT CNTR: CNTR (Bit 0)                                */
#define WDT_CNTR_CNTR_Msk                 (0xffUL)                  /*!< WDT CNTR: CNTR (Bitfield-Mask: 0xff)                  */


/* =========================================================================================================================== */
/* ================                                            WT                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define WT_CR_WTEN_Pos                    (7UL)                     /*!< WT CR: WTEN (Bit 7)                                   */
#define WT_CR_WTEN_Msk                    (0x80UL)                  /*!< WT CR: WTEN (Bitfield-Mask: 0x01)                     */
#define WT_CR_WTINTV_Pos                  (4UL)                     /*!< WT CR: WTINTV (Bit 4)                                 */
#define WT_CR_WTINTV_Msk                  (0x30UL)                  /*!< WT CR: WTINTV (Bitfield-Mask: 0x03)                   */
#define WT_CR_WTIEN_Pos                   (3UL)                     /*!< WT CR: WTIEN (Bit 3)                                  */
#define WT_CR_WTIEN_Msk                   (0x8UL)                   /*!< WT CR: WTIEN (Bitfield-Mask: 0x01)                    */
#define WT_CR_WTIFLAG_Pos                 (1UL)                     /*!< WT CR: WTIFLAG (Bit 1)                                */
#define WT_CR_WTIFLAG_Msk                 (0x2UL)                   /*!< WT CR: WTIFLAG (Bitfield-Mask: 0x01)                  */
#define WT_CR_WTCLR_Pos                   (0UL)                     /*!< WT CR: WTCLR (Bit 0)                                  */
#define WT_CR_WTCLR_Msk                   (0x1UL)                   /*!< WT CR: WTCLR (Bitfield-Mask: 0x01)                    */
/* ==========================================================  DR  =========================================================== */
#define WT_DR_WTDATA_Pos                  (0UL)                     /*!< WT DR: WTDATA (Bit 0)                                 */
#define WT_DR_WTDATA_Msk                  (0xfffUL)                 /*!< WT DR: WTDATA (Bitfield-Mask: 0xfff)                  */
/* ==========================================================  CNT  ========================================================== */
#define WT_CNT_CNT_Pos                    (0UL)                     /*!< WT CNT: CNT (Bit 0)                                   */
#define WT_CNT_CNT_Msk                    (0xfffUL)                 /*!< WT CNT: CNT (Bitfield-Mask: 0xfff)                    */


/* =========================================================================================================================== */
/* ================                                          TIMER1n                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER1n_CR_T1nEN_Pos              (15UL)                    /*!< TIMER1n CR: T1nEN (Bit 15)                            */
#define TIMER1n_CR_T1nEN_Msk              (0x8000UL)                /*!< TIMER1n CR: T1nEN (Bitfield-Mask: 0x01)               */
#define TIMER1n_CR_T1nCLK_Pos             (14UL)                    /*!< TIMER1n CR: T1nCLK (Bit 14)                           */
#define TIMER1n_CR_T1nCLK_Msk             (0x4000UL)                /*!< TIMER1n CR: T1nCLK (Bitfield-Mask: 0x01)              */
#define TIMER1n_CR_T1nMS_Pos              (12UL)                    /*!< TIMER1n CR: T1nMS (Bit 12)                            */
#define TIMER1n_CR_T1nMS_Msk              (0x3000UL)                /*!< TIMER1n CR: T1nMS (Bitfield-Mask: 0x03)               */
#define TIMER1n_CR_T1nECE_Pos             (11UL)                    /*!< TIMER1n CR: T1nECE (Bit 11)                           */
#define TIMER1n_CR_T1nECE_Msk             (0x800UL)                 /*!< TIMER1n CR: T1nECE (Bitfield-Mask: 0x01)              */
#define TIMER1n_CR_T1nOPOL_Pos            (8UL)                     /*!< TIMER1n CR: T1nOPOL (Bit 8)                           */
#define TIMER1n_CR_T1nOPOL_Msk            (0x100UL)                 /*!< TIMER1n CR: T1nOPOL (Bitfield-Mask: 0x01)             */
#define TIMER1n_CR_T1nCPOL_Pos            (6UL)                     /*!< TIMER1n CR: T1nCPOL (Bit 6)                           */
#define TIMER1n_CR_T1nCPOL_Msk            (0xc0UL)                  /*!< TIMER1n CR: T1nCPOL (Bitfield-Mask: 0x03)             */
#define TIMER1n_CR_T1nMIEN_Pos            (5UL)                     /*!< TIMER1n CR: T1nMIEN (Bit 5)                           */
#define TIMER1n_CR_T1nMIEN_Msk            (0x20UL)                  /*!< TIMER1n CR: T1nMIEN (Bitfield-Mask: 0x01)             */
#define TIMER1n_CR_T1nCIEN_Pos            (4UL)                     /*!< TIMER1n CR: T1nCIEN (Bit 4)                           */
#define TIMER1n_CR_T1nCIEN_Msk            (0x10UL)                  /*!< TIMER1n CR: T1nCIEN (Bitfield-Mask: 0x01)             */
#define TIMER1n_CR_T1nMIFLAG_Pos          (3UL)                     /*!< TIMER1n CR: T1nMIFLAG (Bit 3)                         */
#define TIMER1n_CR_T1nMIFLAG_Msk          (0x8UL)                   /*!< TIMER1n CR: T1nMIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER1n_CR_T1nCIFLAG_Pos          (2UL)                     /*!< TIMER1n CR: T1nCIFLAG (Bit 2)                         */
#define TIMER1n_CR_T1nCIFLAG_Msk          (0x4UL)                   /*!< TIMER1n CR: T1nCIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER1n_CR_T1nPAU_Pos             (1UL)                     /*!< TIMER1n CR: T1nPAU (Bit 1)                            */
#define TIMER1n_CR_T1nPAU_Msk             (0x2UL)                   /*!< TIMER1n CR: T1nPAU (Bitfield-Mask: 0x01)              */
#define TIMER1n_CR_T1nCLR_Pos             (0UL)                     /*!< TIMER1n CR: T1nCLR (Bit 0)                            */
#define TIMER1n_CR_T1nCLR_Msk             (0x1UL)                   /*!< TIMER1n CR: T1nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  ADR  ========================================================== */
#define TIMER1n_ADR_ADATA_Pos             (0UL)                     /*!< TIMER1n ADR: ADATA (Bit 0)                            */
#define TIMER1n_ADR_ADATA_Msk             (0xffffUL)                /*!< TIMER1n ADR: ADATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  BDR  ========================================================== */
#define TIMER1n_BDR_BDATA_Pos             (0UL)                     /*!< TIMER1n BDR: BDATA (Bit 0)                            */
#define TIMER1n_BDR_BDATA_Msk             (0xffffUL)                /*!< TIMER1n BDR: BDATA (Bitfield-Mask: 0xffff)            */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER1n_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER1n CAPDR: CAPD (Bit 0)                           */
#define TIMER1n_CAPDR_CAPD_Msk            (0xffffUL)                /*!< TIMER1n CAPDR: CAPD (Bitfield-Mask: 0xffff)           */
/* =========================================================  PREDR  ========================================================= */
#define TIMER1n_PREDR_PRED_Pos            (0UL)                     /*!< TIMER1n PREDR: PRED (Bit 0)                           */
#define TIMER1n_PREDR_PRED_Msk            (0xfffUL)                 /*!< TIMER1n PREDR: PRED (Bitfield-Mask: 0xfff)            */
/* ==========================================================  CNT  ========================================================== */
#define TIMER1n_CNT_CNT_Pos               (0UL)                     /*!< TIMER1n CNT: CNT (Bit 0)                              */
#define TIMER1n_CNT_CNT_Msk               (0xffffUL)                /*!< TIMER1n CNT: CNT (Bitfield-Mask: 0xffff)              */


/* =========================================================================================================================== */
/* ================                                          TIMER10                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER10_CR_T1nEN_Pos              (15UL)                    /*!< TIMER10 CR: T1nEN (Bit 15)                            */
#define TIMER10_CR_T1nEN_Msk              (0x8000UL)                /*!< TIMER10 CR: T1nEN (Bitfield-Mask: 0x01)               */
#define TIMER10_CR_T1nCLK_Pos             (14UL)                    /*!< TIMER10 CR: T1nCLK (Bit 14)                           */
#define TIMER10_CR_T1nCLK_Msk             (0x4000UL)                /*!< TIMER10 CR: T1nCLK (Bitfield-Mask: 0x01)              */
#define TIMER10_CR_T1nMS_Pos              (12UL)                    /*!< TIMER10 CR: T1nMS (Bit 12)                            */
#define TIMER10_CR_T1nMS_Msk              (0x3000UL)                /*!< TIMER10 CR: T1nMS (Bitfield-Mask: 0x03)               */
#define TIMER10_CR_T1nECE_Pos             (11UL)                    /*!< TIMER10 CR: T1nECE (Bit 11)                           */
#define TIMER10_CR_T1nECE_Msk             (0x800UL)                 /*!< TIMER10 CR: T1nECE (Bitfield-Mask: 0x01)              */
#define TIMER10_CR_T1nOPOL_Pos            (8UL)                     /*!< TIMER10 CR: T1nOPOL (Bit 8)                           */
#define TIMER10_CR_T1nOPOL_Msk            (0x100UL)                 /*!< TIMER10 CR: T1nOPOL (Bitfield-Mask: 0x01)             */
#define TIMER10_CR_T1nCPOL_Pos            (6UL)                     /*!< TIMER10 CR: T1nCPOL (Bit 6)                           */
#define TIMER10_CR_T1nCPOL_Msk            (0xc0UL)                  /*!< TIMER10 CR: T1nCPOL (Bitfield-Mask: 0x03)             */
#define TIMER10_CR_T1nMIEN_Pos            (5UL)                     /*!< TIMER10 CR: T1nMIEN (Bit 5)                           */
#define TIMER10_CR_T1nMIEN_Msk            (0x20UL)                  /*!< TIMER10 CR: T1nMIEN (Bitfield-Mask: 0x01)             */
#define TIMER10_CR_T1nCIEN_Pos            (4UL)                     /*!< TIMER10 CR: T1nCIEN (Bit 4)                           */
#define TIMER10_CR_T1nCIEN_Msk            (0x10UL)                  /*!< TIMER10 CR: T1nCIEN (Bitfield-Mask: 0x01)             */
#define TIMER10_CR_T1nMIFLAG_Pos          (3UL)                     /*!< TIMER10 CR: T1nMIFLAG (Bit 3)                         */
#define TIMER10_CR_T1nMIFLAG_Msk          (0x8UL)                   /*!< TIMER10 CR: T1nMIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER10_CR_T1nCIFLAG_Pos          (2UL)                     /*!< TIMER10 CR: T1nCIFLAG (Bit 2)                         */
#define TIMER10_CR_T1nCIFLAG_Msk          (0x4UL)                   /*!< TIMER10 CR: T1nCIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER10_CR_T1nPAU_Pos             (1UL)                     /*!< TIMER10 CR: T1nPAU (Bit 1)                            */
#define TIMER10_CR_T1nPAU_Msk             (0x2UL)                   /*!< TIMER10 CR: T1nPAU (Bitfield-Mask: 0x01)              */
#define TIMER10_CR_T1nCLR_Pos             (0UL)                     /*!< TIMER10 CR: T1nCLR (Bit 0)                            */
#define TIMER10_CR_T1nCLR_Msk             (0x1UL)                   /*!< TIMER10 CR: T1nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  ADR  ========================================================== */
#define TIMER10_ADR_ADATA_Pos             (0UL)                     /*!< TIMER10 ADR: ADATA (Bit 0)                            */
#define TIMER10_ADR_ADATA_Msk             (0xffffUL)                /*!< TIMER10 ADR: ADATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  BDR  ========================================================== */
#define TIMER10_BDR_BDATA_Pos             (0UL)                     /*!< TIMER10 BDR: BDATA (Bit 0)                            */
#define TIMER10_BDR_BDATA_Msk             (0xffffUL)                /*!< TIMER10 BDR: BDATA (Bitfield-Mask: 0xffff)            */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER10_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER10 CAPDR: CAPD (Bit 0)                           */
#define TIMER10_CAPDR_CAPD_Msk            (0xffffUL)                /*!< TIMER10 CAPDR: CAPD (Bitfield-Mask: 0xffff)           */
/* =========================================================  PREDR  ========================================================= */
#define TIMER10_PREDR_PRED_Pos            (0UL)                     /*!< TIMER10 PREDR: PRED (Bit 0)                           */
#define TIMER10_PREDR_PRED_Msk            (0xfffUL)                 /*!< TIMER10 PREDR: PRED (Bitfield-Mask: 0xfff)            */
/* ==========================================================  CNT  ========================================================== */
#define TIMER10_CNT_CNT_Pos               (0UL)                     /*!< TIMER10 CNT: CNT (Bit 0)                              */
#define TIMER10_CNT_CNT_Msk               (0xffffUL)                /*!< TIMER10 CNT: CNT (Bitfield-Mask: 0xffff)              */


/* =========================================================================================================================== */
/* ================                                          TIMER11                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER11_CR_T1nEN_Pos              (15UL)                    /*!< TIMER11 CR: T1nEN (Bit 15)                            */
#define TIMER11_CR_T1nEN_Msk              (0x8000UL)                /*!< TIMER11 CR: T1nEN (Bitfield-Mask: 0x01)               */
#define TIMER11_CR_T1nCLK_Pos             (14UL)                    /*!< TIMER11 CR: T1nCLK (Bit 14)                           */
#define TIMER11_CR_T1nCLK_Msk             (0x4000UL)                /*!< TIMER11 CR: T1nCLK (Bitfield-Mask: 0x01)              */
#define TIMER11_CR_T1nMS_Pos              (12UL)                    /*!< TIMER11 CR: T1nMS (Bit 12)                            */
#define TIMER11_CR_T1nMS_Msk              (0x3000UL)                /*!< TIMER11 CR: T1nMS (Bitfield-Mask: 0x03)               */
#define TIMER11_CR_T1nECE_Pos             (11UL)                    /*!< TIMER11 CR: T1nECE (Bit 11)                           */
#define TIMER11_CR_T1nECE_Msk             (0x800UL)                 /*!< TIMER11 CR: T1nECE (Bitfield-Mask: 0x01)              */
#define TIMER11_CR_T1nOPOL_Pos            (8UL)                     /*!< TIMER11 CR: T1nOPOL (Bit 8)                           */
#define TIMER11_CR_T1nOPOL_Msk            (0x100UL)                 /*!< TIMER11 CR: T1nOPOL (Bitfield-Mask: 0x01)             */
#define TIMER11_CR_T1nCPOL_Pos            (6UL)                     /*!< TIMER11 CR: T1nCPOL (Bit 6)                           */
#define TIMER11_CR_T1nCPOL_Msk            (0xc0UL)                  /*!< TIMER11 CR: T1nCPOL (Bitfield-Mask: 0x03)             */
#define TIMER11_CR_T1nMIEN_Pos            (5UL)                     /*!< TIMER11 CR: T1nMIEN (Bit 5)                           */
#define TIMER11_CR_T1nMIEN_Msk            (0x20UL)                  /*!< TIMER11 CR: T1nMIEN (Bitfield-Mask: 0x01)             */
#define TIMER11_CR_T1nCIEN_Pos            (4UL)                     /*!< TIMER11 CR: T1nCIEN (Bit 4)                           */
#define TIMER11_CR_T1nCIEN_Msk            (0x10UL)                  /*!< TIMER11 CR: T1nCIEN (Bitfield-Mask: 0x01)             */
#define TIMER11_CR_T1nMIFLAG_Pos          (3UL)                     /*!< TIMER11 CR: T1nMIFLAG (Bit 3)                         */
#define TIMER11_CR_T1nMIFLAG_Msk          (0x8UL)                   /*!< TIMER11 CR: T1nMIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER11_CR_T1nCIFLAG_Pos          (2UL)                     /*!< TIMER11 CR: T1nCIFLAG (Bit 2)                         */
#define TIMER11_CR_T1nCIFLAG_Msk          (0x4UL)                   /*!< TIMER11 CR: T1nCIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER11_CR_T1nPAU_Pos             (1UL)                     /*!< TIMER11 CR: T1nPAU (Bit 1)                            */
#define TIMER11_CR_T1nPAU_Msk             (0x2UL)                   /*!< TIMER11 CR: T1nPAU (Bitfield-Mask: 0x01)              */
#define TIMER11_CR_T1nCLR_Pos             (0UL)                     /*!< TIMER11 CR: T1nCLR (Bit 0)                            */
#define TIMER11_CR_T1nCLR_Msk             (0x1UL)                   /*!< TIMER11 CR: T1nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  ADR  ========================================================== */
#define TIMER11_ADR_ADATA_Pos             (0UL)                     /*!< TIMER11 ADR: ADATA (Bit 0)                            */
#define TIMER11_ADR_ADATA_Msk             (0xffffUL)                /*!< TIMER11 ADR: ADATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  BDR  ========================================================== */
#define TIMER11_BDR_BDATA_Pos             (0UL)                     /*!< TIMER11 BDR: BDATA (Bit 0)                            */
#define TIMER11_BDR_BDATA_Msk             (0xffffUL)                /*!< TIMER11 BDR: BDATA (Bitfield-Mask: 0xffff)            */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER11_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER11 CAPDR: CAPD (Bit 0)                           */
#define TIMER11_CAPDR_CAPD_Msk            (0xffffUL)                /*!< TIMER11 CAPDR: CAPD (Bitfield-Mask: 0xffff)           */
/* =========================================================  PREDR  ========================================================= */
#define TIMER11_PREDR_PRED_Pos            (0UL)                     /*!< TIMER11 PREDR: PRED (Bit 0)                           */
#define TIMER11_PREDR_PRED_Msk            (0xfffUL)                 /*!< TIMER11 PREDR: PRED (Bitfield-Mask: 0xfff)            */
/* ==========================================================  CNT  ========================================================== */
#define TIMER11_CNT_CNT_Pos               (0UL)                     /*!< TIMER11 CNT: CNT (Bit 0)                              */
#define TIMER11_CNT_CNT_Msk               (0xffffUL)                /*!< TIMER11 CNT: CNT (Bitfield-Mask: 0xffff)              */


/* =========================================================================================================================== */
/* ================                                          TIMER12                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER12_CR_T1nEN_Pos              (15UL)                    /*!< TIMER12 CR: T1nEN (Bit 15)                            */
#define TIMER12_CR_T1nEN_Msk              (0x8000UL)                /*!< TIMER12 CR: T1nEN (Bitfield-Mask: 0x01)               */
#define TIMER12_CR_T1nCLK_Pos             (14UL)                    /*!< TIMER12 CR: T1nCLK (Bit 14)                           */
#define TIMER12_CR_T1nCLK_Msk             (0x4000UL)                /*!< TIMER12 CR: T1nCLK (Bitfield-Mask: 0x01)              */
#define TIMER12_CR_T1nMS_Pos              (12UL)                    /*!< TIMER12 CR: T1nMS (Bit 12)                            */
#define TIMER12_CR_T1nMS_Msk              (0x3000UL)                /*!< TIMER12 CR: T1nMS (Bitfield-Mask: 0x03)               */
#define TIMER12_CR_T1nECE_Pos             (11UL)                    /*!< TIMER12 CR: T1nECE (Bit 11)                           */
#define TIMER12_CR_T1nECE_Msk             (0x800UL)                 /*!< TIMER12 CR: T1nECE (Bitfield-Mask: 0x01)              */
#define TIMER12_CR_T1nOPOL_Pos            (8UL)                     /*!< TIMER12 CR: T1nOPOL (Bit 8)                           */
#define TIMER12_CR_T1nOPOL_Msk            (0x100UL)                 /*!< TIMER12 CR: T1nOPOL (Bitfield-Mask: 0x01)             */
#define TIMER12_CR_T1nCPOL_Pos            (6UL)                     /*!< TIMER12 CR: T1nCPOL (Bit 6)                           */
#define TIMER12_CR_T1nCPOL_Msk            (0xc0UL)                  /*!< TIMER12 CR: T1nCPOL (Bitfield-Mask: 0x03)             */
#define TIMER12_CR_T1nMIEN_Pos            (5UL)                     /*!< TIMER12 CR: T1nMIEN (Bit 5)                           */
#define TIMER12_CR_T1nMIEN_Msk            (0x20UL)                  /*!< TIMER12 CR: T1nMIEN (Bitfield-Mask: 0x01)             */
#define TIMER12_CR_T1nCIEN_Pos            (4UL)                     /*!< TIMER12 CR: T1nCIEN (Bit 4)                           */
#define TIMER12_CR_T1nCIEN_Msk            (0x10UL)                  /*!< TIMER12 CR: T1nCIEN (Bitfield-Mask: 0x01)             */
#define TIMER12_CR_T1nMIFLAG_Pos          (3UL)                     /*!< TIMER12 CR: T1nMIFLAG (Bit 3)                         */
#define TIMER12_CR_T1nMIFLAG_Msk          (0x8UL)                   /*!< TIMER12 CR: T1nMIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER12_CR_T1nCIFLAG_Pos          (2UL)                     /*!< TIMER12 CR: T1nCIFLAG (Bit 2)                         */
#define TIMER12_CR_T1nCIFLAG_Msk          (0x4UL)                   /*!< TIMER12 CR: T1nCIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER12_CR_T1nPAU_Pos             (1UL)                     /*!< TIMER12 CR: T1nPAU (Bit 1)                            */
#define TIMER12_CR_T1nPAU_Msk             (0x2UL)                   /*!< TIMER12 CR: T1nPAU (Bitfield-Mask: 0x01)              */
#define TIMER12_CR_T1nCLR_Pos             (0UL)                     /*!< TIMER12 CR: T1nCLR (Bit 0)                            */
#define TIMER12_CR_T1nCLR_Msk             (0x1UL)                   /*!< TIMER12 CR: T1nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  ADR  ========================================================== */
#define TIMER12_ADR_ADATA_Pos             (0UL)                     /*!< TIMER12 ADR: ADATA (Bit 0)                            */
#define TIMER12_ADR_ADATA_Msk             (0xffffUL)                /*!< TIMER12 ADR: ADATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  BDR  ========================================================== */
#define TIMER12_BDR_BDATA_Pos             (0UL)                     /*!< TIMER12 BDR: BDATA (Bit 0)                            */
#define TIMER12_BDR_BDATA_Msk             (0xffffUL)                /*!< TIMER12 BDR: BDATA (Bitfield-Mask: 0xffff)            */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER12_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER12 CAPDR: CAPD (Bit 0)                           */
#define TIMER12_CAPDR_CAPD_Msk            (0xffffUL)                /*!< TIMER12 CAPDR: CAPD (Bitfield-Mask: 0xffff)           */
/* =========================================================  PREDR  ========================================================= */
#define TIMER12_PREDR_PRED_Pos            (0UL)                     /*!< TIMER12 PREDR: PRED (Bit 0)                           */
#define TIMER12_PREDR_PRED_Msk            (0xfffUL)                 /*!< TIMER12 PREDR: PRED (Bitfield-Mask: 0xfff)            */
/* ==========================================================  CNT  ========================================================== */
#define TIMER12_CNT_CNT_Pos               (0UL)                     /*!< TIMER12 CNT: CNT (Bit 0)                              */
#define TIMER12_CNT_CNT_Msk               (0xffffUL)                /*!< TIMER12 CNT: CNT (Bitfield-Mask: 0xffff)              */


/* =========================================================================================================================== */
/* ================                                          TIMER13                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER13_CR_T1nEN_Pos              (15UL)                    /*!< TIMER13 CR: T1nEN (Bit 15)                            */
#define TIMER13_CR_T1nEN_Msk              (0x8000UL)                /*!< TIMER13 CR: T1nEN (Bitfield-Mask: 0x01)               */
#define TIMER13_CR_T1nCLK_Pos             (14UL)                    /*!< TIMER13 CR: T1nCLK (Bit 14)                           */
#define TIMER13_CR_T1nCLK_Msk             (0x4000UL)                /*!< TIMER13 CR: T1nCLK (Bitfield-Mask: 0x01)              */
#define TIMER13_CR_T1nMS_Pos              (12UL)                    /*!< TIMER13 CR: T1nMS (Bit 12)                            */
#define TIMER13_CR_T1nMS_Msk              (0x3000UL)                /*!< TIMER13 CR: T1nMS (Bitfield-Mask: 0x03)               */
#define TIMER13_CR_T1nECE_Pos             (11UL)                    /*!< TIMER13 CR: T1nECE (Bit 11)                           */
#define TIMER13_CR_T1nECE_Msk             (0x800UL)                 /*!< TIMER13 CR: T1nECE (Bitfield-Mask: 0x01)              */
#define TIMER13_CR_T1nOPOL_Pos            (8UL)                     /*!< TIMER13 CR: T1nOPOL (Bit 8)                           */
#define TIMER13_CR_T1nOPOL_Msk            (0x100UL)                 /*!< TIMER13 CR: T1nOPOL (Bitfield-Mask: 0x01)             */
#define TIMER13_CR_T1nCPOL_Pos            (6UL)                     /*!< TIMER13 CR: T1nCPOL (Bit 6)                           */
#define TIMER13_CR_T1nCPOL_Msk            (0xc0UL)                  /*!< TIMER13 CR: T1nCPOL (Bitfield-Mask: 0x03)             */
#define TIMER13_CR_T1nMIEN_Pos            (5UL)                     /*!< TIMER13 CR: T1nMIEN (Bit 5)                           */
#define TIMER13_CR_T1nMIEN_Msk            (0x20UL)                  /*!< TIMER13 CR: T1nMIEN (Bitfield-Mask: 0x01)             */
#define TIMER13_CR_T1nCIEN_Pos            (4UL)                     /*!< TIMER13 CR: T1nCIEN (Bit 4)                           */
#define TIMER13_CR_T1nCIEN_Msk            (0x10UL)                  /*!< TIMER13 CR: T1nCIEN (Bitfield-Mask: 0x01)             */
#define TIMER13_CR_T1nMIFLAG_Pos          (3UL)                     /*!< TIMER13 CR: T1nMIFLAG (Bit 3)                         */
#define TIMER13_CR_T1nMIFLAG_Msk          (0x8UL)                   /*!< TIMER13 CR: T1nMIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER13_CR_T1nCIFLAG_Pos          (2UL)                     /*!< TIMER13 CR: T1nCIFLAG (Bit 2)                         */
#define TIMER13_CR_T1nCIFLAG_Msk          (0x4UL)                   /*!< TIMER13 CR: T1nCIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER13_CR_T1nPAU_Pos             (1UL)                     /*!< TIMER13 CR: T1nPAU (Bit 1)                            */
#define TIMER13_CR_T1nPAU_Msk             (0x2UL)                   /*!< TIMER13 CR: T1nPAU (Bitfield-Mask: 0x01)              */
#define TIMER13_CR_T1nCLR_Pos             (0UL)                     /*!< TIMER13 CR: T1nCLR (Bit 0)                            */
#define TIMER13_CR_T1nCLR_Msk             (0x1UL)                   /*!< TIMER13 CR: T1nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  ADR  ========================================================== */
#define TIMER13_ADR_ADATA_Pos             (0UL)                     /*!< TIMER13 ADR: ADATA (Bit 0)                            */
#define TIMER13_ADR_ADATA_Msk             (0xffffUL)                /*!< TIMER13 ADR: ADATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  BDR  ========================================================== */
#define TIMER13_BDR_BDATA_Pos             (0UL)                     /*!< TIMER13 BDR: BDATA (Bit 0)                            */
#define TIMER13_BDR_BDATA_Msk             (0xffffUL)                /*!< TIMER13 BDR: BDATA (Bitfield-Mask: 0xffff)            */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER13_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER13 CAPDR: CAPD (Bit 0)                           */
#define TIMER13_CAPDR_CAPD_Msk            (0xffffUL)                /*!< TIMER13 CAPDR: CAPD (Bitfield-Mask: 0xffff)           */
/* =========================================================  PREDR  ========================================================= */
#define TIMER13_PREDR_PRED_Pos            (0UL)                     /*!< TIMER13 PREDR: PRED (Bit 0)                           */
#define TIMER13_PREDR_PRED_Msk            (0xfffUL)                 /*!< TIMER13 PREDR: PRED (Bitfield-Mask: 0xfff)            */
/* ==========================================================  CNT  ========================================================== */
#define TIMER13_CNT_CNT_Pos               (0UL)                     /*!< TIMER13 CNT: CNT (Bit 0)                              */
#define TIMER13_CNT_CNT_Msk               (0xffffUL)                /*!< TIMER13 CNT: CNT (Bitfield-Mask: 0xffff)              */


/* =========================================================================================================================== */
/* ================                                          TIMER14                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER14_CR_T1nEN_Pos              (15UL)                    /*!< TIMER14 CR: T1nEN (Bit 15)                            */
#define TIMER14_CR_T1nEN_Msk              (0x8000UL)                /*!< TIMER14 CR: T1nEN (Bitfield-Mask: 0x01)               */
#define TIMER14_CR_T1nCLK_Pos             (14UL)                    /*!< TIMER14 CR: T1nCLK (Bit 14)                           */
#define TIMER14_CR_T1nCLK_Msk             (0x4000UL)                /*!< TIMER14 CR: T1nCLK (Bitfield-Mask: 0x01)              */
#define TIMER14_CR_T1nMS_Pos              (12UL)                    /*!< TIMER14 CR: T1nMS (Bit 12)                            */
#define TIMER14_CR_T1nMS_Msk              (0x3000UL)                /*!< TIMER14 CR: T1nMS (Bitfield-Mask: 0x03)               */
#define TIMER14_CR_T1nECE_Pos             (11UL)                    /*!< TIMER14 CR: T1nECE (Bit 11)                           */
#define TIMER14_CR_T1nECE_Msk             (0x800UL)                 /*!< TIMER14 CR: T1nECE (Bitfield-Mask: 0x01)              */
#define TIMER14_CR_T1nOPOL_Pos            (8UL)                     /*!< TIMER14 CR: T1nOPOL (Bit 8)                           */
#define TIMER14_CR_T1nOPOL_Msk            (0x100UL)                 /*!< TIMER14 CR: T1nOPOL (Bitfield-Mask: 0x01)             */
#define TIMER14_CR_T1nCPOL_Pos            (6UL)                     /*!< TIMER14 CR: T1nCPOL (Bit 6)                           */
#define TIMER14_CR_T1nCPOL_Msk            (0xc0UL)                  /*!< TIMER14 CR: T1nCPOL (Bitfield-Mask: 0x03)             */
#define TIMER14_CR_T1nMIEN_Pos            (5UL)                     /*!< TIMER14 CR: T1nMIEN (Bit 5)                           */
#define TIMER14_CR_T1nMIEN_Msk            (0x20UL)                  /*!< TIMER14 CR: T1nMIEN (Bitfield-Mask: 0x01)             */
#define TIMER14_CR_T1nCIEN_Pos            (4UL)                     /*!< TIMER14 CR: T1nCIEN (Bit 4)                           */
#define TIMER14_CR_T1nCIEN_Msk            (0x10UL)                  /*!< TIMER14 CR: T1nCIEN (Bitfield-Mask: 0x01)             */
#define TIMER14_CR_T1nMIFLAG_Pos          (3UL)                     /*!< TIMER14 CR: T1nMIFLAG (Bit 3)                         */
#define TIMER14_CR_T1nMIFLAG_Msk          (0x8UL)                   /*!< TIMER14 CR: T1nMIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER14_CR_T1nCIFLAG_Pos          (2UL)                     /*!< TIMER14 CR: T1nCIFLAG (Bit 2)                         */
#define TIMER14_CR_T1nCIFLAG_Msk          (0x4UL)                   /*!< TIMER14 CR: T1nCIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER14_CR_T1nPAU_Pos             (1UL)                     /*!< TIMER14 CR: T1nPAU (Bit 1)                            */
#define TIMER14_CR_T1nPAU_Msk             (0x2UL)                   /*!< TIMER14 CR: T1nPAU (Bitfield-Mask: 0x01)              */
#define TIMER14_CR_T1nCLR_Pos             (0UL)                     /*!< TIMER14 CR: T1nCLR (Bit 0)                            */
#define TIMER14_CR_T1nCLR_Msk             (0x1UL)                   /*!< TIMER14 CR: T1nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  ADR  ========================================================== */
#define TIMER14_ADR_ADATA_Pos             (0UL)                     /*!< TIMER14 ADR: ADATA (Bit 0)                            */
#define TIMER14_ADR_ADATA_Msk             (0xffffUL)                /*!< TIMER14 ADR: ADATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  BDR  ========================================================== */
#define TIMER14_BDR_BDATA_Pos             (0UL)                     /*!< TIMER14 BDR: BDATA (Bit 0)                            */
#define TIMER14_BDR_BDATA_Msk             (0xffffUL)                /*!< TIMER14 BDR: BDATA (Bitfield-Mask: 0xffff)            */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER14_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER14 CAPDR: CAPD (Bit 0)                           */
#define TIMER14_CAPDR_CAPD_Msk            (0xffffUL)                /*!< TIMER14 CAPDR: CAPD (Bitfield-Mask: 0xffff)           */
/* =========================================================  PREDR  ========================================================= */
#define TIMER14_PREDR_PRED_Pos            (0UL)                     /*!< TIMER14 PREDR: PRED (Bit 0)                           */
#define TIMER14_PREDR_PRED_Msk            (0xfffUL)                 /*!< TIMER14 PREDR: PRED (Bitfield-Mask: 0xfff)            */
/* ==========================================================  CNT  ========================================================== */
#define TIMER14_CNT_CNT_Pos               (0UL)                     /*!< TIMER14 CNT: CNT (Bit 0)                              */
#define TIMER14_CNT_CNT_Msk               (0xffffUL)                /*!< TIMER14 CNT: CNT (Bitfield-Mask: 0xffff)              */


/* =========================================================================================================================== */
/* ================                                          TIMER15                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER15_CR_T1nEN_Pos              (15UL)                    /*!< TIMER15 CR: T1nEN (Bit 15)                            */
#define TIMER15_CR_T1nEN_Msk              (0x8000UL)                /*!< TIMER15 CR: T1nEN (Bitfield-Mask: 0x01)               */
#define TIMER15_CR_T1nCLK_Pos             (14UL)                    /*!< TIMER15 CR: T1nCLK (Bit 14)                           */
#define TIMER15_CR_T1nCLK_Msk             (0x4000UL)                /*!< TIMER15 CR: T1nCLK (Bitfield-Mask: 0x01)              */
#define TIMER15_CR_T1nMS_Pos              (12UL)                    /*!< TIMER15 CR: T1nMS (Bit 12)                            */
#define TIMER15_CR_T1nMS_Msk              (0x3000UL)                /*!< TIMER15 CR: T1nMS (Bitfield-Mask: 0x03)               */
#define TIMER15_CR_T1nECE_Pos             (11UL)                    /*!< TIMER15 CR: T1nECE (Bit 11)                           */
#define TIMER15_CR_T1nECE_Msk             (0x800UL)                 /*!< TIMER15 CR: T1nECE (Bitfield-Mask: 0x01)              */
#define TIMER15_CR_T1nOPOL_Pos            (8UL)                     /*!< TIMER15 CR: T1nOPOL (Bit 8)                           */
#define TIMER15_CR_T1nOPOL_Msk            (0x100UL)                 /*!< TIMER15 CR: T1nOPOL (Bitfield-Mask: 0x01)             */
#define TIMER15_CR_T1nCPOL_Pos            (6UL)                     /*!< TIMER15 CR: T1nCPOL (Bit 6)                           */
#define TIMER15_CR_T1nCPOL_Msk            (0xc0UL)                  /*!< TIMER15 CR: T1nCPOL (Bitfield-Mask: 0x03)             */
#define TIMER15_CR_T1nMIEN_Pos            (5UL)                     /*!< TIMER15 CR: T1nMIEN (Bit 5)                           */
#define TIMER15_CR_T1nMIEN_Msk            (0x20UL)                  /*!< TIMER15 CR: T1nMIEN (Bitfield-Mask: 0x01)             */
#define TIMER15_CR_T1nCIEN_Pos            (4UL)                     /*!< TIMER15 CR: T1nCIEN (Bit 4)                           */
#define TIMER15_CR_T1nCIEN_Msk            (0x10UL)                  /*!< TIMER15 CR: T1nCIEN (Bitfield-Mask: 0x01)             */
#define TIMER15_CR_T1nMIFLAG_Pos          (3UL)                     /*!< TIMER15 CR: T1nMIFLAG (Bit 3)                         */
#define TIMER15_CR_T1nMIFLAG_Msk          (0x8UL)                   /*!< TIMER15 CR: T1nMIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER15_CR_T1nCIFLAG_Pos          (2UL)                     /*!< TIMER15 CR: T1nCIFLAG (Bit 2)                         */
#define TIMER15_CR_T1nCIFLAG_Msk          (0x4UL)                   /*!< TIMER15 CR: T1nCIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER15_CR_T1nPAU_Pos             (1UL)                     /*!< TIMER15 CR: T1nPAU (Bit 1)                            */
#define TIMER15_CR_T1nPAU_Msk             (0x2UL)                   /*!< TIMER15 CR: T1nPAU (Bitfield-Mask: 0x01)              */
#define TIMER15_CR_T1nCLR_Pos             (0UL)                     /*!< TIMER15 CR: T1nCLR (Bit 0)                            */
#define TIMER15_CR_T1nCLR_Msk             (0x1UL)                   /*!< TIMER15 CR: T1nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  ADR  ========================================================== */
#define TIMER15_ADR_ADATA_Pos             (0UL)                     /*!< TIMER15 ADR: ADATA (Bit 0)                            */
#define TIMER15_ADR_ADATA_Msk             (0xffffUL)                /*!< TIMER15 ADR: ADATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  BDR  ========================================================== */
#define TIMER15_BDR_BDATA_Pos             (0UL)                     /*!< TIMER15 BDR: BDATA (Bit 0)                            */
#define TIMER15_BDR_BDATA_Msk             (0xffffUL)                /*!< TIMER15 BDR: BDATA (Bitfield-Mask: 0xffff)            */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER15_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER15 CAPDR: CAPD (Bit 0)                           */
#define TIMER15_CAPDR_CAPD_Msk            (0xffffUL)                /*!< TIMER15 CAPDR: CAPD (Bitfield-Mask: 0xffff)           */
/* =========================================================  PREDR  ========================================================= */
#define TIMER15_PREDR_PRED_Pos            (0UL)                     /*!< TIMER15 PREDR: PRED (Bit 0)                           */
#define TIMER15_PREDR_PRED_Msk            (0xfffUL)                 /*!< TIMER15 PREDR: PRED (Bitfield-Mask: 0xfff)            */
/* ==========================================================  CNT  ========================================================== */
#define TIMER15_CNT_CNT_Pos               (0UL)                     /*!< TIMER15 CNT: CNT (Bit 0)                              */
#define TIMER15_CNT_CNT_Msk               (0xffffUL)                /*!< TIMER15 CNT: CNT (Bitfield-Mask: 0xffff)              */


/* =========================================================================================================================== */
/* ================                                          TIMER16                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER16_CR_T1nEN_Pos              (15UL)                    /*!< TIMER16 CR: T1nEN (Bit 15)                            */
#define TIMER16_CR_T1nEN_Msk              (0x8000UL)                /*!< TIMER16 CR: T1nEN (Bitfield-Mask: 0x01)               */
#define TIMER16_CR_T1nCLK_Pos             (14UL)                    /*!< TIMER16 CR: T1nCLK (Bit 14)                           */
#define TIMER16_CR_T1nCLK_Msk             (0x4000UL)                /*!< TIMER16 CR: T1nCLK (Bitfield-Mask: 0x01)              */
#define TIMER16_CR_T1nMS_Pos              (12UL)                    /*!< TIMER16 CR: T1nMS (Bit 12)                            */
#define TIMER16_CR_T1nMS_Msk              (0x3000UL)                /*!< TIMER16 CR: T1nMS (Bitfield-Mask: 0x03)               */
#define TIMER16_CR_T1nECE_Pos             (11UL)                    /*!< TIMER16 CR: T1nECE (Bit 11)                           */
#define TIMER16_CR_T1nECE_Msk             (0x800UL)                 /*!< TIMER16 CR: T1nECE (Bitfield-Mask: 0x01)              */
#define TIMER16_CR_T1nOPOL_Pos            (8UL)                     /*!< TIMER16 CR: T1nOPOL (Bit 8)                           */
#define TIMER16_CR_T1nOPOL_Msk            (0x100UL)                 /*!< TIMER16 CR: T1nOPOL (Bitfield-Mask: 0x01)             */
#define TIMER16_CR_T1nCPOL_Pos            (6UL)                     /*!< TIMER16 CR: T1nCPOL (Bit 6)                           */
#define TIMER16_CR_T1nCPOL_Msk            (0xc0UL)                  /*!< TIMER16 CR: T1nCPOL (Bitfield-Mask: 0x03)             */
#define TIMER16_CR_T1nMIEN_Pos            (5UL)                     /*!< TIMER16 CR: T1nMIEN (Bit 5)                           */
#define TIMER16_CR_T1nMIEN_Msk            (0x20UL)                  /*!< TIMER16 CR: T1nMIEN (Bitfield-Mask: 0x01)             */
#define TIMER16_CR_T1nCIEN_Pos            (4UL)                     /*!< TIMER16 CR: T1nCIEN (Bit 4)                           */
#define TIMER16_CR_T1nCIEN_Msk            (0x10UL)                  /*!< TIMER16 CR: T1nCIEN (Bitfield-Mask: 0x01)             */
#define TIMER16_CR_T1nMIFLAG_Pos          (3UL)                     /*!< TIMER16 CR: T1nMIFLAG (Bit 3)                         */
#define TIMER16_CR_T1nMIFLAG_Msk          (0x8UL)                   /*!< TIMER16 CR: T1nMIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER16_CR_T1nCIFLAG_Pos          (2UL)                     /*!< TIMER16 CR: T1nCIFLAG (Bit 2)                         */
#define TIMER16_CR_T1nCIFLAG_Msk          (0x4UL)                   /*!< TIMER16 CR: T1nCIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER16_CR_T1nPAU_Pos             (1UL)                     /*!< TIMER16 CR: T1nPAU (Bit 1)                            */
#define TIMER16_CR_T1nPAU_Msk             (0x2UL)                   /*!< TIMER16 CR: T1nPAU (Bitfield-Mask: 0x01)              */
#define TIMER16_CR_T1nCLR_Pos             (0UL)                     /*!< TIMER16 CR: T1nCLR (Bit 0)                            */
#define TIMER16_CR_T1nCLR_Msk             (0x1UL)                   /*!< TIMER16 CR: T1nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  ADR  ========================================================== */
#define TIMER16_ADR_ADATA_Pos             (0UL)                     /*!< TIMER16 ADR: ADATA (Bit 0)                            */
#define TIMER16_ADR_ADATA_Msk             (0xffffUL)                /*!< TIMER16 ADR: ADATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  BDR  ========================================================== */
#define TIMER16_BDR_BDATA_Pos             (0UL)                     /*!< TIMER16 BDR: BDATA (Bit 0)                            */
#define TIMER16_BDR_BDATA_Msk             (0xffffUL)                /*!< TIMER16 BDR: BDATA (Bitfield-Mask: 0xffff)            */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER16_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER16 CAPDR: CAPD (Bit 0)                           */
#define TIMER16_CAPDR_CAPD_Msk            (0xffffUL)                /*!< TIMER16 CAPDR: CAPD (Bitfield-Mask: 0xffff)           */
/* =========================================================  PREDR  ========================================================= */
#define TIMER16_PREDR_PRED_Pos            (0UL)                     /*!< TIMER16 PREDR: PRED (Bit 0)                           */
#define TIMER16_PREDR_PRED_Msk            (0xfffUL)                 /*!< TIMER16 PREDR: PRED (Bitfield-Mask: 0xfff)            */
/* ==========================================================  CNT  ========================================================== */
#define TIMER16_CNT_CNT_Pos               (0UL)                     /*!< TIMER16 CNT: CNT (Bit 0)                              */
#define TIMER16_CNT_CNT_Msk               (0xffffUL)                /*!< TIMER16 CNT: CNT (Bitfield-Mask: 0xffff)              */


/* =========================================================================================================================== */
/* ================                                          TIMER2n                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER2n_CR_T2nEN_Pos              (15UL)                    /*!< TIMER2n CR: T2nEN (Bit 15)                            */
#define TIMER2n_CR_T2nEN_Msk              (0x8000UL)                /*!< TIMER2n CR: T2nEN (Bitfield-Mask: 0x01)               */
#define TIMER2n_CR_T2nCLK_Pos             (14UL)                    /*!< TIMER2n CR: T2nCLK (Bit 14)                           */
#define TIMER2n_CR_T2nCLK_Msk             (0x4000UL)                /*!< TIMER2n CR: T2nCLK (Bitfield-Mask: 0x01)              */
#define TIMER2n_CR_T2nMS_Pos              (12UL)                    /*!< TIMER2n CR: T2nMS (Bit 12)                            */
#define TIMER2n_CR_T2nMS_Msk              (0x3000UL)                /*!< TIMER2n CR: T2nMS (Bitfield-Mask: 0x03)               */
#define TIMER2n_CR_T2nECE_Pos             (11UL)                    /*!< TIMER2n CR: T2nECE (Bit 11)                           */
#define TIMER2n_CR_T2nECE_Msk             (0x800UL)                 /*!< TIMER2n CR: T2nECE (Bitfield-Mask: 0x01)              */
#define TIMER2n_CR_CAPSEL_Pos             (9UL)                     /*!< TIMER2n CR: CAPSEL (Bit 9)                            */
#define TIMER2n_CR_CAPSEL_Msk             (0x600UL)                 /*!< TIMER2n CR: CAPSEL (Bitfield-Mask: 0x03)              */
#define TIMER2n_CR_T2nOPOL_Pos            (8UL)                     /*!< TIMER2n CR: T2nOPOL (Bit 8)                           */
#define TIMER2n_CR_T2nOPOL_Msk            (0x100UL)                 /*!< TIMER2n CR: T2nOPOL (Bitfield-Mask: 0x01)             */
#define TIMER2n_CR_T2nCPOL_Pos            (6UL)                     /*!< TIMER2n CR: T2nCPOL (Bit 6)                           */
#define TIMER2n_CR_T2nCPOL_Msk            (0xc0UL)                  /*!< TIMER2n CR: T2nCPOL (Bitfield-Mask: 0x03)             */
#define TIMER2n_CR_T2nMIEN_Pos            (5UL)                     /*!< TIMER2n CR: T2nMIEN (Bit 5)                           */
#define TIMER2n_CR_T2nMIEN_Msk            (0x20UL)                  /*!< TIMER2n CR: T2nMIEN (Bitfield-Mask: 0x01)             */
#define TIMER2n_CR_T2nCIEN_Pos            (4UL)                     /*!< TIMER2n CR: T2nCIEN (Bit 4)                           */
#define TIMER2n_CR_T2nCIEN_Msk            (0x10UL)                  /*!< TIMER2n CR: T2nCIEN (Bitfield-Mask: 0x01)             */
#define TIMER2n_CR_T2nMIFLAG_Pos          (3UL)                     /*!< TIMER2n CR: T2nMIFLAG (Bit 3)                         */
#define TIMER2n_CR_T2nMIFLAG_Msk          (0x8UL)                   /*!< TIMER2n CR: T2nMIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER2n_CR_T2nCIFLAG_Pos          (2UL)                     /*!< TIMER2n CR: T2nCIFLAG (Bit 2)                         */
#define TIMER2n_CR_T2nCIFLAG_Msk          (0x4UL)                   /*!< TIMER2n CR: T2nCIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER2n_CR_T2nPAU_Pos             (1UL)                     /*!< TIMER2n CR: T2nPAU (Bit 1)                            */
#define TIMER2n_CR_T2nPAU_Msk             (0x2UL)                   /*!< TIMER2n CR: T2nPAU (Bitfield-Mask: 0x01)              */
#define TIMER2n_CR_T2nCLR_Pos             (0UL)                     /*!< TIMER2n CR: T2nCLR (Bit 0)                            */
#define TIMER2n_CR_T2nCLR_Msk             (0x1UL)                   /*!< TIMER2n CR: T2nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  ADR  ========================================================== */
#define TIMER2n_ADR_ADATA_Pos             (0UL)                     /*!< TIMER2n ADR: ADATA (Bit 0)                            */
#define TIMER2n_ADR_ADATA_Msk             (0xffffffffUL)            /*!< TIMER2n ADR: ADATA (Bitfield-Mask: 0xffffffff)        */
/* ==========================================================  BDR  ========================================================== */
#define TIMER2n_BDR_BDATA_Pos             (0UL)                     /*!< TIMER2n BDR: BDATA (Bit 0)                            */
#define TIMER2n_BDR_BDATA_Msk             (0xffffffffUL)            /*!< TIMER2n BDR: BDATA (Bitfield-Mask: 0xffffffff)        */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER2n_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER2n CAPDR: CAPD (Bit 0)                           */
#define TIMER2n_CAPDR_CAPD_Msk            (0xffffffffUL)            /*!< TIMER2n CAPDR: CAPD (Bitfield-Mask: 0xffffffff)       */
/* =========================================================  PREDR  ========================================================= */
#define TIMER2n_PREDR_PRED_Pos            (0UL)                     /*!< TIMER2n PREDR: PRED (Bit 0)                           */
#define TIMER2n_PREDR_PRED_Msk            (0xfffUL)                 /*!< TIMER2n PREDR: PRED (Bitfield-Mask: 0xfff)            */
/* ==========================================================  CNT  ========================================================== */
#define TIMER2n_CNT_CNT_Pos               (0UL)                     /*!< TIMER2n CNT: CNT (Bit 0)                              */
#define TIMER2n_CNT_CNT_Msk               (0xffffffffUL)            /*!< TIMER2n CNT: CNT (Bitfield-Mask: 0xffffffff)          */


/* =========================================================================================================================== */
/* ================                                          TIMER20                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER20_CR_T2nEN_Pos              (15UL)                    /*!< TIMER20 CR: T2nEN (Bit 15)                            */
#define TIMER20_CR_T2nEN_Msk              (0x8000UL)                /*!< TIMER20 CR: T2nEN (Bitfield-Mask: 0x01)               */
#define TIMER20_CR_T2nCLK_Pos             (14UL)                    /*!< TIMER20 CR: T2nCLK (Bit 14)                           */
#define TIMER20_CR_T2nCLK_Msk             (0x4000UL)                /*!< TIMER20 CR: T2nCLK (Bitfield-Mask: 0x01)              */
#define TIMER20_CR_T2nMS_Pos              (12UL)                    /*!< TIMER20 CR: T2nMS (Bit 12)                            */
#define TIMER20_CR_T2nMS_Msk              (0x3000UL)                /*!< TIMER20 CR: T2nMS (Bitfield-Mask: 0x03)               */
#define TIMER20_CR_T2nECE_Pos             (11UL)                    /*!< TIMER20 CR: T2nECE (Bit 11)                           */
#define TIMER20_CR_T2nECE_Msk             (0x800UL)                 /*!< TIMER20 CR: T2nECE (Bitfield-Mask: 0x01)              */
#define TIMER20_CR_CAPSEL_Pos             (9UL)                     /*!< TIMER20 CR: CAPSEL (Bit 9)                            */
#define TIMER20_CR_CAPSEL_Msk             (0x600UL)                 /*!< TIMER20 CR: CAPSEL (Bitfield-Mask: 0x03)              */
#define TIMER20_CR_T2nOPOL_Pos            (8UL)                     /*!< TIMER20 CR: T2nOPOL (Bit 8)                           */
#define TIMER20_CR_T2nOPOL_Msk            (0x100UL)                 /*!< TIMER20 CR: T2nOPOL (Bitfield-Mask: 0x01)             */
#define TIMER20_CR_T2nCPOL_Pos            (6UL)                     /*!< TIMER20 CR: T2nCPOL (Bit 6)                           */
#define TIMER20_CR_T2nCPOL_Msk            (0xc0UL)                  /*!< TIMER20 CR: T2nCPOL (Bitfield-Mask: 0x03)             */
#define TIMER20_CR_T2nMIEN_Pos            (5UL)                     /*!< TIMER20 CR: T2nMIEN (Bit 5)                           */
#define TIMER20_CR_T2nMIEN_Msk            (0x20UL)                  /*!< TIMER20 CR: T2nMIEN (Bitfield-Mask: 0x01)             */
#define TIMER20_CR_T2nCIEN_Pos            (4UL)                     /*!< TIMER20 CR: T2nCIEN (Bit 4)                           */
#define TIMER20_CR_T2nCIEN_Msk            (0x10UL)                  /*!< TIMER20 CR: T2nCIEN (Bitfield-Mask: 0x01)             */
#define TIMER20_CR_T2nMIFLAG_Pos          (3UL)                     /*!< TIMER20 CR: T2nMIFLAG (Bit 3)                         */
#define TIMER20_CR_T2nMIFLAG_Msk          (0x8UL)                   /*!< TIMER20 CR: T2nMIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER20_CR_T2nCIFLAG_Pos          (2UL)                     /*!< TIMER20 CR: T2nCIFLAG (Bit 2)                         */
#define TIMER20_CR_T2nCIFLAG_Msk          (0x4UL)                   /*!< TIMER20 CR: T2nCIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER20_CR_T2nPAU_Pos             (1UL)                     /*!< TIMER20 CR: T2nPAU (Bit 1)                            */
#define TIMER20_CR_T2nPAU_Msk             (0x2UL)                   /*!< TIMER20 CR: T2nPAU (Bitfield-Mask: 0x01)              */
#define TIMER20_CR_T2nCLR_Pos             (0UL)                     /*!< TIMER20 CR: T2nCLR (Bit 0)                            */
#define TIMER20_CR_T2nCLR_Msk             (0x1UL)                   /*!< TIMER20 CR: T2nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  ADR  ========================================================== */
#define TIMER20_ADR_ADATA_Pos             (0UL)                     /*!< TIMER20 ADR: ADATA (Bit 0)                            */
#define TIMER20_ADR_ADATA_Msk             (0xffffffffUL)            /*!< TIMER20 ADR: ADATA (Bitfield-Mask: 0xffffffff)        */
/* ==========================================================  BDR  ========================================================== */
#define TIMER20_BDR_BDATA_Pos             (0UL)                     /*!< TIMER20 BDR: BDATA (Bit 0)                            */
#define TIMER20_BDR_BDATA_Msk             (0xffffffffUL)            /*!< TIMER20 BDR: BDATA (Bitfield-Mask: 0xffffffff)        */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER20_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER20 CAPDR: CAPD (Bit 0)                           */
#define TIMER20_CAPDR_CAPD_Msk            (0xffffffffUL)            /*!< TIMER20 CAPDR: CAPD (Bitfield-Mask: 0xffffffff)       */
/* =========================================================  PREDR  ========================================================= */
#define TIMER20_PREDR_PRED_Pos            (0UL)                     /*!< TIMER20 PREDR: PRED (Bit 0)                           */
#define TIMER20_PREDR_PRED_Msk            (0xfffUL)                 /*!< TIMER20 PREDR: PRED (Bitfield-Mask: 0xfff)            */
/* ==========================================================  CNT  ========================================================== */
#define TIMER20_CNT_CNT_Pos               (0UL)                     /*!< TIMER20 CNT: CNT (Bit 0)                              */
#define TIMER20_CNT_CNT_Msk               (0xffffffffUL)            /*!< TIMER20 CNT: CNT (Bitfield-Mask: 0xffffffff)          */
/* ======================================================  TIMER20_CR  ======================================================= */
#define TIMER20_TIMER20_CR_T2nEN_Pos      (15UL)                    /*!< TIMER20 TIMER20_CR: T2nEN (Bit 15)                    */
#define TIMER20_TIMER20_CR_T2nEN_Msk      (0x8000UL)                /*!< TIMER20 TIMER20_CR: T2nEN (Bitfield-Mask: 0x01)       */
#define TIMER20_TIMER20_CR_T2nCLK_Pos     (14UL)                    /*!< TIMER20 TIMER20_CR: T2nCLK (Bit 14)                   */
#define TIMER20_TIMER20_CR_T2nCLK_Msk     (0x4000UL)                /*!< TIMER20 TIMER20_CR: T2nCLK (Bitfield-Mask: 0x01)      */
#define TIMER20_TIMER20_CR_T2nMS_Pos      (12UL)                    /*!< TIMER20 TIMER20_CR: T2nMS (Bit 12)                    */
#define TIMER20_TIMER20_CR_T2nMS_Msk      (0x3000UL)                /*!< TIMER20 TIMER20_CR: T2nMS (Bitfield-Mask: 0x03)       */
#define TIMER20_TIMER20_CR_T2nECE_Pos     (11UL)                    /*!< TIMER20 TIMER20_CR: T2nECE (Bit 11)                   */
#define TIMER20_TIMER20_CR_T2nECE_Msk     (0x800UL)                 /*!< TIMER20 TIMER20_CR: T2nECE (Bitfield-Mask: 0x01)      */
#define TIMER20_TIMER20_CR_CAPSEL_Pos     (9UL)                     /*!< TIMER20 TIMER20_CR: CAPSEL (Bit 9)                    */
#define TIMER20_TIMER20_CR_CAPSEL_Msk     (0x600UL)                 /*!< TIMER20 TIMER20_CR: CAPSEL (Bitfield-Mask: 0x03)      */
#define TIMER20_TIMER20_CR_T2nOPOL_Pos    (8UL)                     /*!< TIMER20 TIMER20_CR: T2nOPOL (Bit 8)                   */
#define TIMER20_TIMER20_CR_T2nOPOL_Msk    (0x100UL)                 /*!< TIMER20 TIMER20_CR: T2nOPOL (Bitfield-Mask: 0x01)     */
#define TIMER20_TIMER20_CR_T2nCPOL_Pos    (6UL)                     /*!< TIMER20 TIMER20_CR: T2nCPOL (Bit 6)                   */
#define TIMER20_TIMER20_CR_T2nCPOL_Msk    (0xc0UL)                  /*!< TIMER20 TIMER20_CR: T2nCPOL (Bitfield-Mask: 0x03)     */
#define TIMER20_TIMER20_CR_T2nMIEN_Pos    (5UL)                     /*!< TIMER20 TIMER20_CR: T2nMIEN (Bit 5)                   */
#define TIMER20_TIMER20_CR_T2nMIEN_Msk    (0x20UL)                  /*!< TIMER20 TIMER20_CR: T2nMIEN (Bitfield-Mask: 0x01)     */
#define TIMER20_TIMER20_CR_T2nCIEN_Pos    (4UL)                     /*!< TIMER20 TIMER20_CR: T2nCIEN (Bit 4)                   */
#define TIMER20_TIMER20_CR_T2nCIEN_Msk    (0x10UL)                  /*!< TIMER20 TIMER20_CR: T2nCIEN (Bitfield-Mask: 0x01)     */
#define TIMER20_TIMER20_CR_T2nMIFLAG_Pos  (3UL)                     /*!< TIMER20 TIMER20_CR: T2nMIFLAG (Bit 3)                 */
#define TIMER20_TIMER20_CR_T2nMIFLAG_Msk  (0x8UL)                   /*!< TIMER20 TIMER20_CR: T2nMIFLAG (Bitfield-Mask: 0x01)   */
#define TIMER20_TIMER20_CR_T2nCIFLAG_Pos  (2UL)                     /*!< TIMER20 TIMER20_CR: T2nCIFLAG (Bit 2)                 */
#define TIMER20_TIMER20_CR_T2nCIFLAG_Msk  (0x4UL)                   /*!< TIMER20 TIMER20_CR: T2nCIFLAG (Bitfield-Mask: 0x01)   */
#define TIMER20_TIMER20_CR_T2nPAU_Pos     (1UL)                     /*!< TIMER20 TIMER20_CR: T2nPAU (Bit 1)                    */
#define TIMER20_TIMER20_CR_T2nPAU_Msk     (0x2UL)                   /*!< TIMER20 TIMER20_CR: T2nPAU (Bitfield-Mask: 0x01)      */
#define TIMER20_TIMER20_CR_T2nCLR_Pos     (0UL)                     /*!< TIMER20 TIMER20_CR: T2nCLR (Bit 0)                    */
#define TIMER20_TIMER20_CR_T2nCLR_Msk     (0x1UL)                   /*!< TIMER20 TIMER20_CR: T2nCLR (Bitfield-Mask: 0x01)      */


/* =========================================================================================================================== */
/* ================                                          TIMER21                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER21_CR_T2nEN_Pos              (15UL)                    /*!< TIMER21 CR: T2nEN (Bit 15)                            */
#define TIMER21_CR_T2nEN_Msk              (0x8000UL)                /*!< TIMER21 CR: T2nEN (Bitfield-Mask: 0x01)               */
#define TIMER21_CR_T2nCLK_Pos             (14UL)                    /*!< TIMER21 CR: T2nCLK (Bit 14)                           */
#define TIMER21_CR_T2nCLK_Msk             (0x4000UL)                /*!< TIMER21 CR: T2nCLK (Bitfield-Mask: 0x01)              */
#define TIMER21_CR_T2nMS_Pos              (12UL)                    /*!< TIMER21 CR: T2nMS (Bit 12)                            */
#define TIMER21_CR_T2nMS_Msk              (0x3000UL)                /*!< TIMER21 CR: T2nMS (Bitfield-Mask: 0x03)               */
#define TIMER21_CR_T2nECE_Pos             (11UL)                    /*!< TIMER21 CR: T2nECE (Bit 11)                           */
#define TIMER21_CR_T2nECE_Msk             (0x800UL)                 /*!< TIMER21 CR: T2nECE (Bitfield-Mask: 0x01)              */
#define TIMER21_CR_CAPSEL_Pos             (9UL)                     /*!< TIMER21 CR: CAPSEL (Bit 9)                            */
#define TIMER21_CR_CAPSEL_Msk             (0x600UL)                 /*!< TIMER21 CR: CAPSEL (Bitfield-Mask: 0x03)              */
#define TIMER21_CR_T2nOPOL_Pos            (8UL)                     /*!< TIMER21 CR: T2nOPOL (Bit 8)                           */
#define TIMER21_CR_T2nOPOL_Msk            (0x100UL)                 /*!< TIMER21 CR: T2nOPOL (Bitfield-Mask: 0x01)             */
#define TIMER21_CR_T2nCPOL_Pos            (6UL)                     /*!< TIMER21 CR: T2nCPOL (Bit 6)                           */
#define TIMER21_CR_T2nCPOL_Msk            (0xc0UL)                  /*!< TIMER21 CR: T2nCPOL (Bitfield-Mask: 0x03)             */
#define TIMER21_CR_T2nMIEN_Pos            (5UL)                     /*!< TIMER21 CR: T2nMIEN (Bit 5)                           */
#define TIMER21_CR_T2nMIEN_Msk            (0x20UL)                  /*!< TIMER21 CR: T2nMIEN (Bitfield-Mask: 0x01)             */
#define TIMER21_CR_T2nCIEN_Pos            (4UL)                     /*!< TIMER21 CR: T2nCIEN (Bit 4)                           */
#define TIMER21_CR_T2nCIEN_Msk            (0x10UL)                  /*!< TIMER21 CR: T2nCIEN (Bitfield-Mask: 0x01)             */
#define TIMER21_CR_T2nMIFLAG_Pos          (3UL)                     /*!< TIMER21 CR: T2nMIFLAG (Bit 3)                         */
#define TIMER21_CR_T2nMIFLAG_Msk          (0x8UL)                   /*!< TIMER21 CR: T2nMIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER21_CR_T2nCIFLAG_Pos          (2UL)                     /*!< TIMER21 CR: T2nCIFLAG (Bit 2)                         */
#define TIMER21_CR_T2nCIFLAG_Msk          (0x4UL)                   /*!< TIMER21 CR: T2nCIFLAG (Bitfield-Mask: 0x01)           */
#define TIMER21_CR_T2nPAU_Pos             (1UL)                     /*!< TIMER21 CR: T2nPAU (Bit 1)                            */
#define TIMER21_CR_T2nPAU_Msk             (0x2UL)                   /*!< TIMER21 CR: T2nPAU (Bitfield-Mask: 0x01)              */
#define TIMER21_CR_T2nCLR_Pos             (0UL)                     /*!< TIMER21 CR: T2nCLR (Bit 0)                            */
#define TIMER21_CR_T2nCLR_Msk             (0x1UL)                   /*!< TIMER21 CR: T2nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  ADR  ========================================================== */
#define TIMER21_ADR_ADATA_Pos             (0UL)                     /*!< TIMER21 ADR: ADATA (Bit 0)                            */
#define TIMER21_ADR_ADATA_Msk             (0xffffffffUL)            /*!< TIMER21 ADR: ADATA (Bitfield-Mask: 0xffffffff)        */
/* ==========================================================  BDR  ========================================================== */
#define TIMER21_BDR_BDATA_Pos             (0UL)                     /*!< TIMER21 BDR: BDATA (Bit 0)                            */
#define TIMER21_BDR_BDATA_Msk             (0xffffffffUL)            /*!< TIMER21 BDR: BDATA (Bitfield-Mask: 0xffffffff)        */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER21_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER21 CAPDR: CAPD (Bit 0)                           */
#define TIMER21_CAPDR_CAPD_Msk            (0xffffffffUL)            /*!< TIMER21 CAPDR: CAPD (Bitfield-Mask: 0xffffffff)       */
/* =========================================================  PREDR  ========================================================= */
#define TIMER21_PREDR_PRED_Pos            (0UL)                     /*!< TIMER21 PREDR: PRED (Bit 0)                           */
#define TIMER21_PREDR_PRED_Msk            (0xfffUL)                 /*!< TIMER21 PREDR: PRED (Bitfield-Mask: 0xfff)            */
/* ==========================================================  CNT  ========================================================== */
#define TIMER21_CNT_CNT_Pos               (0UL)                     /*!< TIMER21 CNT: CNT (Bit 0)                              */
#define TIMER21_CNT_CNT_Msk               (0xffffffffUL)            /*!< TIMER21 CNT: CNT (Bitfield-Mask: 0xffffffff)          */
/* ======================================================  TIMER21_CR  ======================================================= */
#define TIMER21_TIMER21_CR_T2nEN_Pos      (15UL)                    /*!< TIMER21 TIMER21_CR: T2nEN (Bit 15)                    */
#define TIMER21_TIMER21_CR_T2nEN_Msk      (0x8000UL)                /*!< TIMER21 TIMER21_CR: T2nEN (Bitfield-Mask: 0x01)       */
#define TIMER21_TIMER21_CR_T2nCLK_Pos     (14UL)                    /*!< TIMER21 TIMER21_CR: T2nCLK (Bit 14)                   */
#define TIMER21_TIMER21_CR_T2nCLK_Msk     (0x4000UL)                /*!< TIMER21 TIMER21_CR: T2nCLK (Bitfield-Mask: 0x01)      */
#define TIMER21_TIMER21_CR_T2nMS_Pos      (12UL)                    /*!< TIMER21 TIMER21_CR: T2nMS (Bit 12)                    */
#define TIMER21_TIMER21_CR_T2nMS_Msk      (0x3000UL)                /*!< TIMER21 TIMER21_CR: T2nMS (Bitfield-Mask: 0x03)       */
#define TIMER21_TIMER21_CR_T2nECE_Pos     (11UL)                    /*!< TIMER21 TIMER21_CR: T2nECE (Bit 11)                   */
#define TIMER21_TIMER21_CR_T2nECE_Msk     (0x800UL)                 /*!< TIMER21 TIMER21_CR: T2nECE (Bitfield-Mask: 0x01)      */
#define TIMER21_TIMER21_CR_T2nOPOL_Pos    (8UL)                     /*!< TIMER21 TIMER21_CR: T2nOPOL (Bit 8)                   */
#define TIMER21_TIMER21_CR_T2nOPOL_Msk    (0x100UL)                 /*!< TIMER21 TIMER21_CR: T2nOPOL (Bitfield-Mask: 0x01)     */
#define TIMER21_TIMER21_CR_T2nCPOL_Pos    (6UL)                     /*!< TIMER21 TIMER21_CR: T2nCPOL (Bit 6)                   */
#define TIMER21_TIMER21_CR_T2nCPOL_Msk    (0xc0UL)                  /*!< TIMER21 TIMER21_CR: T2nCPOL (Bitfield-Mask: 0x03)     */
#define TIMER21_TIMER21_CR_T2nMIEN_Pos    (5UL)                     /*!< TIMER21 TIMER21_CR: T2nMIEN (Bit 5)                   */
#define TIMER21_TIMER21_CR_T2nMIEN_Msk    (0x20UL)                  /*!< TIMER21 TIMER21_CR: T2nMIEN (Bitfield-Mask: 0x01)     */
#define TIMER21_TIMER21_CR_T2nCIEN_Pos    (4UL)                     /*!< TIMER21 TIMER21_CR: T2nCIEN (Bit 4)                   */
#define TIMER21_TIMER21_CR_T2nCIEN_Msk    (0x10UL)                  /*!< TIMER21 TIMER21_CR: T2nCIEN (Bitfield-Mask: 0x01)     */
#define TIMER21_TIMER21_CR_T2nMIFLAG_Pos  (3UL)                     /*!< TIMER21 TIMER21_CR: T2nMIFLAG (Bit 3)                 */
#define TIMER21_TIMER21_CR_T2nMIFLAG_Msk  (0x8UL)                   /*!< TIMER21 TIMER21_CR: T2nMIFLAG (Bitfield-Mask: 0x01)   */
#define TIMER21_TIMER21_CR_T2nCIFLAG_Pos  (2UL)                     /*!< TIMER21 TIMER21_CR: T2nCIFLAG (Bit 2)                 */
#define TIMER21_TIMER21_CR_T2nCIFLAG_Msk  (0x4UL)                   /*!< TIMER21 TIMER21_CR: T2nCIFLAG (Bitfield-Mask: 0x01)   */
#define TIMER21_TIMER21_CR_T2nPAU_Pos     (1UL)                     /*!< TIMER21 TIMER21_CR: T2nPAU (Bit 1)                    */
#define TIMER21_TIMER21_CR_T2nPAU_Msk     (0x2UL)                   /*!< TIMER21 TIMER21_CR: T2nPAU (Bitfield-Mask: 0x01)      */
#define TIMER21_TIMER21_CR_T2nCLR_Pos     (0UL)                     /*!< TIMER21 TIMER21_CR: T2nCLR (Bit 0)                    */
#define TIMER21_TIMER21_CR_T2nCLR_Msk     (0x1UL)                   /*!< TIMER21 TIMER21_CR: T2nCLR (Bitfield-Mask: 0x01)      */


/* =========================================================================================================================== */
/* ================                                          TIMER3n                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER3n_CR_T3nEN_Pos              (15UL)                    /*!< TIMER3n CR: T3nEN (Bit 15)                            */
#define TIMER3n_CR_T3nEN_Msk              (0x8000UL)                /*!< TIMER3n CR: T3nEN (Bitfield-Mask: 0x01)               */
#define TIMER3n_CR_T3nCLK_Pos             (14UL)                    /*!< TIMER3n CR: T3nCLK (Bit 14)                           */
#define TIMER3n_CR_T3nCLK_Msk             (0x4000UL)                /*!< TIMER3n CR: T3nCLK (Bitfield-Mask: 0x01)              */
#define TIMER3n_CR_T3nMS_Pos              (12UL)                    /*!< TIMER3n CR: T3nMS (Bit 12)                            */
#define TIMER3n_CR_T3nMS_Msk              (0x3000UL)                /*!< TIMER3n CR: T3nMS (Bitfield-Mask: 0x03)               */
#define TIMER3n_CR_T3nECE_Pos             (11UL)                    /*!< TIMER3n CR: T3nECE (Bit 11)                           */
#define TIMER3n_CR_T3nECE_Msk             (0x800UL)                 /*!< TIMER3n CR: T3nECE (Bitfield-Mask: 0x01)              */
#define TIMER3n_CR_FORCA_Pos              (10UL)                    /*!< TIMER3n CR: FORCA (Bit 10)                            */
#define TIMER3n_CR_FORCA_Msk              (0x400UL)                 /*!< TIMER3n CR: FORCA (Bitfield-Mask: 0x01)               */
#define TIMER3n_CR_DLYEN_Pos              (9UL)                     /*!< TIMER3n CR: DLYEN (Bit 9)                             */
#define TIMER3n_CR_DLYEN_Msk              (0x200UL)                 /*!< TIMER3n CR: DLYEN (Bitfield-Mask: 0x01)               */
#define TIMER3n_CR_DLYPOS_Pos             (8UL)                     /*!< TIMER3n CR: DLYPOS (Bit 8)                            */
#define TIMER3n_CR_DLYPOS_Msk             (0x100UL)                 /*!< TIMER3n CR: DLYPOS (Bitfield-Mask: 0x01)              */
#define TIMER3n_CR_T3nCPOL_Pos            (6UL)                     /*!< TIMER3n CR: T3nCPOL (Bit 6)                           */
#define TIMER3n_CR_T3nCPOL_Msk            (0xc0UL)                  /*!< TIMER3n CR: T3nCPOL (Bitfield-Mask: 0x03)             */
#define TIMER3n_CR_UPDT_Pos               (4UL)                     /*!< TIMER3n CR: UPDT (Bit 4)                              */
#define TIMER3n_CR_UPDT_Msk               (0x30UL)                  /*!< TIMER3n CR: UPDT (Bitfield-Mask: 0x03)                */
#define TIMER3n_CR_PMOC_Pos               (1UL)                     /*!< TIMER3n CR: PMOC (Bit 1)                              */
#define TIMER3n_CR_PMOC_Msk               (0xeUL)                   /*!< TIMER3n CR: PMOC (Bitfield-Mask: 0x07)                */
#define TIMER3n_CR_T3nCLR_Pos             (0UL)                     /*!< TIMER3n CR: T3nCLR (Bit 0)                            */
#define TIMER3n_CR_T3nCLR_Msk             (0x1UL)                   /*!< TIMER3n CR: T3nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  PDR  ========================================================== */
#define TIMER3n_PDR_PDATA_Pos             (0UL)                     /*!< TIMER3n PDR: PDATA (Bit 0)                            */
#define TIMER3n_PDR_PDATA_Msk             (0xffffUL)                /*!< TIMER3n PDR: PDATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  ADR  ========================================================== */
#define TIMER3n_ADR_ADATA_Pos             (0UL)                     /*!< TIMER3n ADR: ADATA (Bit 0)                            */
#define TIMER3n_ADR_ADATA_Msk             (0xffffUL)                /*!< TIMER3n ADR: ADATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  BDR  ========================================================== */
#define TIMER3n_BDR_BDATA_Pos             (0UL)                     /*!< TIMER3n BDR: BDATA (Bit 0)                            */
#define TIMER3n_BDR_BDATA_Msk             (0xffffUL)                /*!< TIMER3n BDR: BDATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  CDR  ========================================================== */
#define TIMER3n_CDR_CDATA_Pos             (0UL)                     /*!< TIMER3n CDR: CDATA (Bit 0)                            */
#define TIMER3n_CDR_CDATA_Msk             (0xffffUL)                /*!< TIMER3n CDR: CDATA (Bitfield-Mask: 0xffff)            */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER3n_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER3n CAPDR: CAPD (Bit 0)                           */
#define TIMER3n_CAPDR_CAPD_Msk            (0xffffUL)                /*!< TIMER3n CAPDR: CAPD (Bitfield-Mask: 0xffff)           */
/* =========================================================  PREDR  ========================================================= */
#define TIMER3n_PREDR_PRED_Pos            (0UL)                     /*!< TIMER3n PREDR: PRED (Bit 0)                           */
#define TIMER3n_PREDR_PRED_Msk            (0xfffUL)                 /*!< TIMER3n PREDR: PRED (Bitfield-Mask: 0xfff)            */
/* ==========================================================  CNT  ========================================================== */
#define TIMER3n_CNT_CNT_Pos               (0UL)                     /*!< TIMER3n CNT: CNT (Bit 0)                              */
#define TIMER3n_CNT_CNT_Msk               (0xffffUL)                /*!< TIMER3n CNT: CNT (Bitfield-Mask: 0xffff)              */
/* =========================================================  OUTCR  ========================================================= */
#define TIMER3n_OUTCR_WTIDKY_Pos          (16UL)                    /*!< TIMER3n OUTCR: WTIDKY (Bit 16)                        */
#define TIMER3n_OUTCR_WTIDKY_Msk          (0xffff0000UL)            /*!< TIMER3n OUTCR: WTIDKY (Bitfield-Mask: 0xffff)         */
#define TIMER3n_OUTCR_POLB_Pos            (15UL)                    /*!< TIMER3n OUTCR: POLB (Bit 15)                          */
#define TIMER3n_OUTCR_POLB_Msk            (0x8000UL)                /*!< TIMER3n OUTCR: POLB (Bitfield-Mask: 0x01)             */
#define TIMER3n_OUTCR_POLA_Pos            (14UL)                    /*!< TIMER3n OUTCR: POLA (Bit 14)                          */
#define TIMER3n_OUTCR_POLA_Msk            (0x4000UL)                /*!< TIMER3n OUTCR: POLA (Bitfield-Mask: 0x01)             */
#define TIMER3n_OUTCR_PABOE_Pos           (13UL)                    /*!< TIMER3n OUTCR: PABOE (Bit 13)                         */
#define TIMER3n_OUTCR_PABOE_Msk           (0x2000UL)                /*!< TIMER3n OUTCR: PABOE (Bitfield-Mask: 0x01)            */
#define TIMER3n_OUTCR_PBBOE_Pos           (12UL)                    /*!< TIMER3n OUTCR: PBBOE (Bit 12)                         */
#define TIMER3n_OUTCR_PBBOE_Msk           (0x1000UL)                /*!< TIMER3n OUTCR: PBBOE (Bitfield-Mask: 0x01)            */
#define TIMER3n_OUTCR_PCBOE_Pos           (11UL)                    /*!< TIMER3n OUTCR: PCBOE (Bit 11)                         */
#define TIMER3n_OUTCR_PCBOE_Msk           (0x800UL)                 /*!< TIMER3n OUTCR: PCBOE (Bitfield-Mask: 0x01)            */
#define TIMER3n_OUTCR_PAAOE_Pos           (10UL)                    /*!< TIMER3n OUTCR: PAAOE (Bit 10)                         */
#define TIMER3n_OUTCR_PAAOE_Msk           (0x400UL)                 /*!< TIMER3n OUTCR: PAAOE (Bitfield-Mask: 0x01)            */
#define TIMER3n_OUTCR_PBAOE_Pos           (9UL)                     /*!< TIMER3n OUTCR: PBAOE (Bit 9)                          */
#define TIMER3n_OUTCR_PBAOE_Msk           (0x200UL)                 /*!< TIMER3n OUTCR: PBAOE (Bitfield-Mask: 0x01)            */
#define TIMER3n_OUTCR_PCAOE_Pos           (8UL)                     /*!< TIMER3n OUTCR: PCAOE (Bit 8)                          */
#define TIMER3n_OUTCR_PCAOE_Msk           (0x100UL)                 /*!< TIMER3n OUTCR: PCAOE (Bitfield-Mask: 0x01)            */
#define TIMER3n_OUTCR_LVLAB_Pos           (6UL)                     /*!< TIMER3n OUTCR: LVLAB (Bit 6)                          */
#define TIMER3n_OUTCR_LVLAB_Msk           (0x40UL)                  /*!< TIMER3n OUTCR: LVLAB (Bitfield-Mask: 0x01)            */
#define TIMER3n_OUTCR_LVLBB_Pos           (5UL)                     /*!< TIMER3n OUTCR: LVLBB (Bit 5)                          */
#define TIMER3n_OUTCR_LVLBB_Msk           (0x20UL)                  /*!< TIMER3n OUTCR: LVLBB (Bitfield-Mask: 0x01)            */
#define TIMER3n_OUTCR_LVLCB_Pos           (4UL)                     /*!< TIMER3n OUTCR: LVLCB (Bit 4)                          */
#define TIMER3n_OUTCR_LVLCB_Msk           (0x10UL)                  /*!< TIMER3n OUTCR: LVLCB (Bitfield-Mask: 0x01)            */
#define TIMER3n_OUTCR_LVLAA_Pos           (2UL)                     /*!< TIMER3n OUTCR: LVLAA (Bit 2)                          */
#define TIMER3n_OUTCR_LVLAA_Msk           (0x4UL)                   /*!< TIMER3n OUTCR: LVLAA (Bitfield-Mask: 0x01)            */
#define TIMER3n_OUTCR_LVLBA_Pos           (1UL)                     /*!< TIMER3n OUTCR: LVLBA (Bit 1)                          */
#define TIMER3n_OUTCR_LVLBA_Msk           (0x2UL)                   /*!< TIMER3n OUTCR: LVLBA (Bitfield-Mask: 0x01)            */
#define TIMER3n_OUTCR_LVLCA_Pos           (0UL)                     /*!< TIMER3n OUTCR: LVLCA (Bit 0)                          */
#define TIMER3n_OUTCR_LVLCA_Msk           (0x1UL)                   /*!< TIMER3n OUTCR: LVLCA (Bitfield-Mask: 0x01)            */
/* ==========================================================  DLY  ========================================================== */
#define TIMER3n_DLY_DLY_Pos               (0UL)                     /*!< TIMER3n DLY: DLY (Bit 0)                              */
#define TIMER3n_DLY_DLY_Msk               (0x3ffUL)                 /*!< TIMER3n DLY: DLY (Bitfield-Mask: 0x3ff)               */
/* =========================================================  INTCR  ========================================================= */
#define TIMER3n_INTCR_HIZIEN_Pos          (6UL)                     /*!< TIMER3n INTCR: HIZIEN (Bit 6)                         */
#define TIMER3n_INTCR_HIZIEN_Msk          (0x40UL)                  /*!< TIMER3n INTCR: HIZIEN (Bitfield-Mask: 0x01)           */
#define TIMER3n_INTCR_T3nCIEN_Pos         (5UL)                     /*!< TIMER3n INTCR: T3nCIEN (Bit 5)                        */
#define TIMER3n_INTCR_T3nCIEN_Msk         (0x20UL)                  /*!< TIMER3n INTCR: T3nCIEN (Bitfield-Mask: 0x01)          */
#define TIMER3n_INTCR_T3nBTIEN_Pos        (4UL)                     /*!< TIMER3n INTCR: T3nBTIEN (Bit 4)                       */
#define TIMER3n_INTCR_T3nBTIEN_Msk        (0x10UL)                  /*!< TIMER3n INTCR: T3nBTIEN (Bitfield-Mask: 0x01)         */
#define TIMER3n_INTCR_T3nPMIEN_Pos        (3UL)                     /*!< TIMER3n INTCR: T3nPMIEN (Bit 3)                       */
#define TIMER3n_INTCR_T3nPMIEN_Msk        (0x8UL)                   /*!< TIMER3n INTCR: T3nPMIEN (Bitfield-Mask: 0x01)         */
#define TIMER3n_INTCR_T3nAMIEN_Pos        (2UL)                     /*!< TIMER3n INTCR: T3nAMIEN (Bit 2)                       */
#define TIMER3n_INTCR_T3nAMIEN_Msk        (0x4UL)                   /*!< TIMER3n INTCR: T3nAMIEN (Bitfield-Mask: 0x01)         */
#define TIMER3n_INTCR_T3nBMIEN_Pos        (1UL)                     /*!< TIMER3n INTCR: T3nBMIEN (Bit 1)                       */
#define TIMER3n_INTCR_T3nBMIEN_Msk        (0x2UL)                   /*!< TIMER3n INTCR: T3nBMIEN (Bitfield-Mask: 0x01)         */
#define TIMER3n_INTCR_T3nCMIEN_Pos        (0UL)                     /*!< TIMER3n INTCR: T3nCMIEN (Bit 0)                       */
#define TIMER3n_INTCR_T3nCMIEN_Msk        (0x1UL)                   /*!< TIMER3n INTCR: T3nCMIEN (Bitfield-Mask: 0x01)         */
/* ========================================================  INTFLAG  ======================================================== */
#define TIMER3n_INTFLAG_HIZIFLAG_Pos      (6UL)                     /*!< TIMER3n INTFLAG: HIZIFLAG (Bit 6)                     */
#define TIMER3n_INTFLAG_HIZIFLAG_Msk      (0x40UL)                  /*!< TIMER3n INTFLAG: HIZIFLAG (Bitfield-Mask: 0x01)       */
#define TIMER3n_INTFLAG_T3nCIFLAG_Pos     (5UL)                     /*!< TIMER3n INTFLAG: T3nCIFLAG (Bit 5)                    */
#define TIMER3n_INTFLAG_T3nCIFLAG_Msk     (0x20UL)                  /*!< TIMER3n INTFLAG: T3nCIFLAG (Bitfield-Mask: 0x01)      */
#define TIMER3n_INTFLAG_T3nBTIFLAG_Pos    (4UL)                     /*!< TIMER3n INTFLAG: T3nBTIFLAG (Bit 4)                   */
#define TIMER3n_INTFLAG_T3nBTIFLAG_Msk    (0x10UL)                  /*!< TIMER3n INTFLAG: T3nBTIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER3n_INTFLAG_T3nPMIFLAG_Pos    (3UL)                     /*!< TIMER3n INTFLAG: T3nPMIFLAG (Bit 3)                   */
#define TIMER3n_INTFLAG_T3nPMIFLAG_Msk    (0x8UL)                   /*!< TIMER3n INTFLAG: T3nPMIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER3n_INTFLAG_T3nAMIFLAG_Pos    (2UL)                     /*!< TIMER3n INTFLAG: T3nAMIFLAG (Bit 2)                   */
#define TIMER3n_INTFLAG_T3nAMIFLAG_Msk    (0x4UL)                   /*!< TIMER3n INTFLAG: T3nAMIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER3n_INTFLAG_T3nBMIFLAG_Pos    (1UL)                     /*!< TIMER3n INTFLAG: T3nBMIFLAG (Bit 1)                   */
#define TIMER3n_INTFLAG_T3nBMIFLAG_Msk    (0x2UL)                   /*!< TIMER3n INTFLAG: T3nBMIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER3n_INTFLAG_T3nCMIFLAG_Pos    (0UL)                     /*!< TIMER3n INTFLAG: T3nCMIFLAG (Bit 0)                   */
#define TIMER3n_INTFLAG_T3nCMIFLAG_Msk    (0x1UL)                   /*!< TIMER3n INTFLAG: T3nCMIFLAG (Bitfield-Mask: 0x01)     */
/* =========================================================  HIZCR  ========================================================= */
#define TIMER3n_HIZCR_HIZEN_Pos           (7UL)                     /*!< TIMER3n HIZCR: HIZEN (Bit 7)                          */
#define TIMER3n_HIZCR_HIZEN_Msk           (0x80UL)                  /*!< TIMER3n HIZCR: HIZEN (Bitfield-Mask: 0x01)            */
#define TIMER3n_HIZCR_HIZSW_Pos           (4UL)                     /*!< TIMER3n HIZCR: HIZSW (Bit 4)                          */
#define TIMER3n_HIZCR_HIZSW_Msk           (0x10UL)                  /*!< TIMER3n HIZCR: HIZSW (Bitfield-Mask: 0x01)            */
#define TIMER3n_HIZCR_HEDGE_Pos           (2UL)                     /*!< TIMER3n HIZCR: HEDGE (Bit 2)                          */
#define TIMER3n_HIZCR_HEDGE_Msk           (0x4UL)                   /*!< TIMER3n HIZCR: HEDGE (Bitfield-Mask: 0x01)            */
#define TIMER3n_HIZCR_HIZSTA_Pos          (1UL)                     /*!< TIMER3n HIZCR: HIZSTA (Bit 1)                         */
#define TIMER3n_HIZCR_HIZSTA_Msk          (0x2UL)                   /*!< TIMER3n HIZCR: HIZSTA (Bitfield-Mask: 0x01)           */
#define TIMER3n_HIZCR_HIZCLR_Pos          (0UL)                     /*!< TIMER3n HIZCR: HIZCLR (Bit 0)                         */
#define TIMER3n_HIZCR_HIZCLR_Msk          (0x1UL)                   /*!< TIMER3n HIZCR: HIZCLR (Bitfield-Mask: 0x01)           */
/* =========================================================  ADTCR  ========================================================= */
#define TIMER3n_ADTCR_T3nBTTG_Pos         (4UL)                     /*!< TIMER3n ADTCR: T3nBTTG (Bit 4)                        */
#define TIMER3n_ADTCR_T3nBTTG_Msk         (0x10UL)                  /*!< TIMER3n ADTCR: T3nBTTG (Bitfield-Mask: 0x01)          */
#define TIMER3n_ADTCR_T3nPMTG_Pos         (3UL)                     /*!< TIMER3n ADTCR: T3nPMTG (Bit 3)                        */
#define TIMER3n_ADTCR_T3nPMTG_Msk         (0x8UL)                   /*!< TIMER3n ADTCR: T3nPMTG (Bitfield-Mask: 0x01)          */
#define TIMER3n_ADTCR_T3nAMTG_Pos         (2UL)                     /*!< TIMER3n ADTCR: T3nAMTG (Bit 2)                        */
#define TIMER3n_ADTCR_T3nAMTG_Msk         (0x4UL)                   /*!< TIMER3n ADTCR: T3nAMTG (Bitfield-Mask: 0x01)          */
#define TIMER3n_ADTCR_T3nBMTG_Pos         (1UL)                     /*!< TIMER3n ADTCR: T3nBMTG (Bit 1)                        */
#define TIMER3n_ADTCR_T3nBMTG_Msk         (0x2UL)                   /*!< TIMER3n ADTCR: T3nBMTG (Bitfield-Mask: 0x01)          */
#define TIMER3n_ADTCR_T3nCMTG_Pos         (0UL)                     /*!< TIMER3n ADTCR: T3nCMTG (Bit 0)                        */
#define TIMER3n_ADTCR_T3nCMTG_Msk         (0x1UL)                   /*!< TIMER3n ADTCR: T3nCMTG (Bitfield-Mask: 0x01)          */
/* =========================================================  ADTDR  ========================================================= */
#define TIMER3n_ADTDR_ADTDATA_Pos         (0UL)                     /*!< TIMER3n ADTDR: ADTDATA (Bit 0)                        */
#define TIMER3n_ADTDR_ADTDATA_Msk         (0x3fffUL)                /*!< TIMER3n ADTDR: ADTDATA (Bitfield-Mask: 0x3fff)        */


/* =========================================================================================================================== */
/* ================                                          TIMER30                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER30_CR_T3nEN_Pos              (15UL)                    /*!< TIMER30 CR: T3nEN (Bit 15)                            */
#define TIMER30_CR_T3nEN_Msk              (0x8000UL)                /*!< TIMER30 CR: T3nEN (Bitfield-Mask: 0x01)               */
#define TIMER30_CR_T3nCLK_Pos             (14UL)                    /*!< TIMER30 CR: T3nCLK (Bit 14)                           */
#define TIMER30_CR_T3nCLK_Msk             (0x4000UL)                /*!< TIMER30 CR: T3nCLK (Bitfield-Mask: 0x01)              */
#define TIMER30_CR_T3nMS_Pos              (12UL)                    /*!< TIMER30 CR: T3nMS (Bit 12)                            */
#define TIMER30_CR_T3nMS_Msk              (0x3000UL)                /*!< TIMER30 CR: T3nMS (Bitfield-Mask: 0x03)               */
#define TIMER30_CR_T3nECE_Pos             (11UL)                    /*!< TIMER30 CR: T3nECE (Bit 11)                           */
#define TIMER30_CR_T3nECE_Msk             (0x800UL)                 /*!< TIMER30 CR: T3nECE (Bitfield-Mask: 0x01)              */
#define TIMER30_CR_FORCA_Pos              (10UL)                    /*!< TIMER30 CR: FORCA (Bit 10)                            */
#define TIMER30_CR_FORCA_Msk              (0x400UL)                 /*!< TIMER30 CR: FORCA (Bitfield-Mask: 0x01)               */
#define TIMER30_CR_DLYEN_Pos              (9UL)                     /*!< TIMER30 CR: DLYEN (Bit 9)                             */
#define TIMER30_CR_DLYEN_Msk              (0x200UL)                 /*!< TIMER30 CR: DLYEN (Bitfield-Mask: 0x01)               */
#define TIMER30_CR_DLYPOS_Pos             (8UL)                     /*!< TIMER30 CR: DLYPOS (Bit 8)                            */
#define TIMER30_CR_DLYPOS_Msk             (0x100UL)                 /*!< TIMER30 CR: DLYPOS (Bitfield-Mask: 0x01)              */
#define TIMER30_CR_T3nCPOL_Pos            (6UL)                     /*!< TIMER30 CR: T3nCPOL (Bit 6)                           */
#define TIMER30_CR_T3nCPOL_Msk            (0xc0UL)                  /*!< TIMER30 CR: T3nCPOL (Bitfield-Mask: 0x03)             */
#define TIMER30_CR_UPDT_Pos               (4UL)                     /*!< TIMER30 CR: UPDT (Bit 4)                              */
#define TIMER30_CR_UPDT_Msk               (0x30UL)                  /*!< TIMER30 CR: UPDT (Bitfield-Mask: 0x03)                */
#define TIMER30_CR_PMOC_Pos               (1UL)                     /*!< TIMER30 CR: PMOC (Bit 1)                              */
#define TIMER30_CR_PMOC_Msk               (0xeUL)                   /*!< TIMER30 CR: PMOC (Bitfield-Mask: 0x07)                */
#define TIMER30_CR_T3nCLR_Pos             (0UL)                     /*!< TIMER30 CR: T3nCLR (Bit 0)                            */
#define TIMER30_CR_T3nCLR_Msk             (0x1UL)                   /*!< TIMER30 CR: T3nCLR (Bitfield-Mask: 0x01)              */
/* ==========================================================  PDR  ========================================================== */
#define TIMER30_PDR_PDATA_Pos             (0UL)                     /*!< TIMER30 PDR: PDATA (Bit 0)                            */
#define TIMER30_PDR_PDATA_Msk             (0xffffUL)                /*!< TIMER30 PDR: PDATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  ADR  ========================================================== */
#define TIMER30_ADR_ADATA_Pos             (0UL)                     /*!< TIMER30 ADR: ADATA (Bit 0)                            */
#define TIMER30_ADR_ADATA_Msk             (0xffffUL)                /*!< TIMER30 ADR: ADATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  BDR  ========================================================== */
#define TIMER30_BDR_BDATA_Pos             (0UL)                     /*!< TIMER30 BDR: BDATA (Bit 0)                            */
#define TIMER30_BDR_BDATA_Msk             (0xffffUL)                /*!< TIMER30 BDR: BDATA (Bitfield-Mask: 0xffff)            */
/* ==========================================================  CDR  ========================================================== */
#define TIMER30_CDR_CDATA_Pos             (0UL)                     /*!< TIMER30 CDR: CDATA (Bit 0)                            */
#define TIMER30_CDR_CDATA_Msk             (0xffffUL)                /*!< TIMER30 CDR: CDATA (Bitfield-Mask: 0xffff)            */
/* =========================================================  CAPDR  ========================================================= */
#define TIMER30_CAPDR_CAPD_Pos            (0UL)                     /*!< TIMER30 CAPDR: CAPD (Bit 0)                           */
#define TIMER30_CAPDR_CAPD_Msk            (0xffffUL)                /*!< TIMER30 CAPDR: CAPD (Bitfield-Mask: 0xffff)           */
/* =========================================================  PREDR  ========================================================= */
#define TIMER30_PREDR_PRED_Pos            (0UL)                     /*!< TIMER30 PREDR: PRED (Bit 0)                           */
#define TIMER30_PREDR_PRED_Msk            (0xfffUL)                 /*!< TIMER30 PREDR: PRED (Bitfield-Mask: 0xfff)            */
/* ==========================================================  CNT  ========================================================== */
#define TIMER30_CNT_CNT_Pos               (0UL)                     /*!< TIMER30 CNT: CNT (Bit 0)                              */
#define TIMER30_CNT_CNT_Msk               (0xffffUL)                /*!< TIMER30 CNT: CNT (Bitfield-Mask: 0xffff)              */
/* =========================================================  OUTCR  ========================================================= */
#define TIMER30_OUTCR_WTIDKY_Pos          (16UL)                    /*!< TIMER30 OUTCR: WTIDKY (Bit 16)                        */
#define TIMER30_OUTCR_WTIDKY_Msk          (0xffff0000UL)            /*!< TIMER30 OUTCR: WTIDKY (Bitfield-Mask: 0xffff)         */
#define TIMER30_OUTCR_POLB_Pos            (15UL)                    /*!< TIMER30 OUTCR: POLB (Bit 15)                          */
#define TIMER30_OUTCR_POLB_Msk            (0x8000UL)                /*!< TIMER30 OUTCR: POLB (Bitfield-Mask: 0x01)             */
#define TIMER30_OUTCR_POLA_Pos            (14UL)                    /*!< TIMER30 OUTCR: POLA (Bit 14)                          */
#define TIMER30_OUTCR_POLA_Msk            (0x4000UL)                /*!< TIMER30 OUTCR: POLA (Bitfield-Mask: 0x01)             */
#define TIMER30_OUTCR_PABOE_Pos           (13UL)                    /*!< TIMER30 OUTCR: PABOE (Bit 13)                         */
#define TIMER30_OUTCR_PABOE_Msk           (0x2000UL)                /*!< TIMER30 OUTCR: PABOE (Bitfield-Mask: 0x01)            */
#define TIMER30_OUTCR_PBBOE_Pos           (12UL)                    /*!< TIMER30 OUTCR: PBBOE (Bit 12)                         */
#define TIMER30_OUTCR_PBBOE_Msk           (0x1000UL)                /*!< TIMER30 OUTCR: PBBOE (Bitfield-Mask: 0x01)            */
#define TIMER30_OUTCR_PCBOE_Pos           (11UL)                    /*!< TIMER30 OUTCR: PCBOE (Bit 11)                         */
#define TIMER30_OUTCR_PCBOE_Msk           (0x800UL)                 /*!< TIMER30 OUTCR: PCBOE (Bitfield-Mask: 0x01)            */
#define TIMER30_OUTCR_PAAOE_Pos           (10UL)                    /*!< TIMER30 OUTCR: PAAOE (Bit 10)                         */
#define TIMER30_OUTCR_PAAOE_Msk           (0x400UL)                 /*!< TIMER30 OUTCR: PAAOE (Bitfield-Mask: 0x01)            */
#define TIMER30_OUTCR_PBAOE_Pos           (9UL)                     /*!< TIMER30 OUTCR: PBAOE (Bit 9)                          */
#define TIMER30_OUTCR_PBAOE_Msk           (0x200UL)                 /*!< TIMER30 OUTCR: PBAOE (Bitfield-Mask: 0x01)            */
#define TIMER30_OUTCR_PCAOE_Pos           (8UL)                     /*!< TIMER30 OUTCR: PCAOE (Bit 8)                          */
#define TIMER30_OUTCR_PCAOE_Msk           (0x100UL)                 /*!< TIMER30 OUTCR: PCAOE (Bitfield-Mask: 0x01)            */
#define TIMER30_OUTCR_LVLAB_Pos           (6UL)                     /*!< TIMER30 OUTCR: LVLAB (Bit 6)                          */
#define TIMER30_OUTCR_LVLAB_Msk           (0x40UL)                  /*!< TIMER30 OUTCR: LVLAB (Bitfield-Mask: 0x01)            */
#define TIMER30_OUTCR_LVLBB_Pos           (5UL)                     /*!< TIMER30 OUTCR: LVLBB (Bit 5)                          */
#define TIMER30_OUTCR_LVLBB_Msk           (0x20UL)                  /*!< TIMER30 OUTCR: LVLBB (Bitfield-Mask: 0x01)            */
#define TIMER30_OUTCR_LVLCB_Pos           (4UL)                     /*!< TIMER30 OUTCR: LVLCB (Bit 4)                          */
#define TIMER30_OUTCR_LVLCB_Msk           (0x10UL)                  /*!< TIMER30 OUTCR: LVLCB (Bitfield-Mask: 0x01)            */
#define TIMER30_OUTCR_LVLAA_Pos           (2UL)                     /*!< TIMER30 OUTCR: LVLAA (Bit 2)                          */
#define TIMER30_OUTCR_LVLAA_Msk           (0x4UL)                   /*!< TIMER30 OUTCR: LVLAA (Bitfield-Mask: 0x01)            */
#define TIMER30_OUTCR_LVLBA_Pos           (1UL)                     /*!< TIMER30 OUTCR: LVLBA (Bit 1)                          */
#define TIMER30_OUTCR_LVLBA_Msk           (0x2UL)                   /*!< TIMER30 OUTCR: LVLBA (Bitfield-Mask: 0x01)            */
#define TIMER30_OUTCR_LVLCA_Pos           (0UL)                     /*!< TIMER30 OUTCR: LVLCA (Bit 0)                          */
#define TIMER30_OUTCR_LVLCA_Msk           (0x1UL)                   /*!< TIMER30 OUTCR: LVLCA (Bitfield-Mask: 0x01)            */
/* ==========================================================  DLY  ========================================================== */
#define TIMER30_DLY_DLY_Pos               (0UL)                     /*!< TIMER30 DLY: DLY (Bit 0)                              */
#define TIMER30_DLY_DLY_Msk               (0x3ffUL)                 /*!< TIMER30 DLY: DLY (Bitfield-Mask: 0x3ff)               */
/* =========================================================  INTCR  ========================================================= */
#define TIMER30_INTCR_HIZIEN_Pos          (6UL)                     /*!< TIMER30 INTCR: HIZIEN (Bit 6)                         */
#define TIMER30_INTCR_HIZIEN_Msk          (0x40UL)                  /*!< TIMER30 INTCR: HIZIEN (Bitfield-Mask: 0x01)           */
#define TIMER30_INTCR_T3nCIEN_Pos         (5UL)                     /*!< TIMER30 INTCR: T3nCIEN (Bit 5)                        */
#define TIMER30_INTCR_T3nCIEN_Msk         (0x20UL)                  /*!< TIMER30 INTCR: T3nCIEN (Bitfield-Mask: 0x01)          */
#define TIMER30_INTCR_T3nBTIEN_Pos        (4UL)                     /*!< TIMER30 INTCR: T3nBTIEN (Bit 4)                       */
#define TIMER30_INTCR_T3nBTIEN_Msk        (0x10UL)                  /*!< TIMER30 INTCR: T3nBTIEN (Bitfield-Mask: 0x01)         */
#define TIMER30_INTCR_T3nPMIEN_Pos        (3UL)                     /*!< TIMER30 INTCR: T3nPMIEN (Bit 3)                       */
#define TIMER30_INTCR_T3nPMIEN_Msk        (0x8UL)                   /*!< TIMER30 INTCR: T3nPMIEN (Bitfield-Mask: 0x01)         */
#define TIMER30_INTCR_T3nAMIEN_Pos        (2UL)                     /*!< TIMER30 INTCR: T3nAMIEN (Bit 2)                       */
#define TIMER30_INTCR_T3nAMIEN_Msk        (0x4UL)                   /*!< TIMER30 INTCR: T3nAMIEN (Bitfield-Mask: 0x01)         */
#define TIMER30_INTCR_T3nBMIEN_Pos        (1UL)                     /*!< TIMER30 INTCR: T3nBMIEN (Bit 1)                       */
#define TIMER30_INTCR_T3nBMIEN_Msk        (0x2UL)                   /*!< TIMER30 INTCR: T3nBMIEN (Bitfield-Mask: 0x01)         */
#define TIMER30_INTCR_T3nCMIEN_Pos        (0UL)                     /*!< TIMER30 INTCR: T3nCMIEN (Bit 0)                       */
#define TIMER30_INTCR_T3nCMIEN_Msk        (0x1UL)                   /*!< TIMER30 INTCR: T3nCMIEN (Bitfield-Mask: 0x01)         */
/* ========================================================  INTFLAG  ======================================================== */
#define TIMER30_INTFLAG_HIZIFLAG_Pos      (6UL)                     /*!< TIMER30 INTFLAG: HIZIFLAG (Bit 6)                     */
#define TIMER30_INTFLAG_HIZIFLAG_Msk      (0x40UL)                  /*!< TIMER30 INTFLAG: HIZIFLAG (Bitfield-Mask: 0x01)       */
#define TIMER30_INTFLAG_T3nCIFLAG_Pos     (5UL)                     /*!< TIMER30 INTFLAG: T3nCIFLAG (Bit 5)                    */
#define TIMER30_INTFLAG_T3nCIFLAG_Msk     (0x20UL)                  /*!< TIMER30 INTFLAG: T3nCIFLAG (Bitfield-Mask: 0x01)      */
#define TIMER30_INTFLAG_T3nBTIFLAG_Pos    (4UL)                     /*!< TIMER30 INTFLAG: T3nBTIFLAG (Bit 4)                   */
#define TIMER30_INTFLAG_T3nBTIFLAG_Msk    (0x10UL)                  /*!< TIMER30 INTFLAG: T3nBTIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER30_INTFLAG_T3nPMIFLAG_Pos    (3UL)                     /*!< TIMER30 INTFLAG: T3nPMIFLAG (Bit 3)                   */
#define TIMER30_INTFLAG_T3nPMIFLAG_Msk    (0x8UL)                   /*!< TIMER30 INTFLAG: T3nPMIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER30_INTFLAG_T3nAMIFLAG_Pos    (2UL)                     /*!< TIMER30 INTFLAG: T3nAMIFLAG (Bit 2)                   */
#define TIMER30_INTFLAG_T3nAMIFLAG_Msk    (0x4UL)                   /*!< TIMER30 INTFLAG: T3nAMIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER30_INTFLAG_T3nBMIFLAG_Pos    (1UL)                     /*!< TIMER30 INTFLAG: T3nBMIFLAG (Bit 1)                   */
#define TIMER30_INTFLAG_T3nBMIFLAG_Msk    (0x2UL)                   /*!< TIMER30 INTFLAG: T3nBMIFLAG (Bitfield-Mask: 0x01)     */
#define TIMER30_INTFLAG_T3nCMIFLAG_Pos    (0UL)                     /*!< TIMER30 INTFLAG: T3nCMIFLAG (Bit 0)                   */
#define TIMER30_INTFLAG_T3nCMIFLAG_Msk    (0x1UL)                   /*!< TIMER30 INTFLAG: T3nCMIFLAG (Bitfield-Mask: 0x01)     */
/* =========================================================  HIZCR  ========================================================= */
#define TIMER30_HIZCR_HIZEN_Pos           (7UL)                     /*!< TIMER30 HIZCR: HIZEN (Bit 7)                          */
#define TIMER30_HIZCR_HIZEN_Msk           (0x80UL)                  /*!< TIMER30 HIZCR: HIZEN (Bitfield-Mask: 0x01)            */
#define TIMER30_HIZCR_HIZSW_Pos           (4UL)                     /*!< TIMER30 HIZCR: HIZSW (Bit 4)                          */
#define TIMER30_HIZCR_HIZSW_Msk           (0x10UL)                  /*!< TIMER30 HIZCR: HIZSW (Bitfield-Mask: 0x01)            */
#define TIMER30_HIZCR_HEDGE_Pos           (2UL)                     /*!< TIMER30 HIZCR: HEDGE (Bit 2)                          */
#define TIMER30_HIZCR_HEDGE_Msk           (0x4UL)                   /*!< TIMER30 HIZCR: HEDGE (Bitfield-Mask: 0x01)            */
#define TIMER30_HIZCR_HIZSTA_Pos          (1UL)                     /*!< TIMER30 HIZCR: HIZSTA (Bit 1)                         */
#define TIMER30_HIZCR_HIZSTA_Msk          (0x2UL)                   /*!< TIMER30 HIZCR: HIZSTA (Bitfield-Mask: 0x01)           */
#define TIMER30_HIZCR_HIZCLR_Pos          (0UL)                     /*!< TIMER30 HIZCR: HIZCLR (Bit 0)                         */
#define TIMER30_HIZCR_HIZCLR_Msk          (0x1UL)                   /*!< TIMER30 HIZCR: HIZCLR (Bitfield-Mask: 0x01)           */
/* =========================================================  ADTCR  ========================================================= */
#define TIMER30_ADTCR_T3nBTTG_Pos         (4UL)                     /*!< TIMER30 ADTCR: T3nBTTG (Bit 4)                        */
#define TIMER30_ADTCR_T3nBTTG_Msk         (0x10UL)                  /*!< TIMER30 ADTCR: T3nBTTG (Bitfield-Mask: 0x01)          */
#define TIMER30_ADTCR_T3nPMTG_Pos         (3UL)                     /*!< TIMER30 ADTCR: T3nPMTG (Bit 3)                        */
#define TIMER30_ADTCR_T3nPMTG_Msk         (0x8UL)                   /*!< TIMER30 ADTCR: T3nPMTG (Bitfield-Mask: 0x01)          */
#define TIMER30_ADTCR_T3nAMTG_Pos         (2UL)                     /*!< TIMER30 ADTCR: T3nAMTG (Bit 2)                        */
#define TIMER30_ADTCR_T3nAMTG_Msk         (0x4UL)                   /*!< TIMER30 ADTCR: T3nAMTG (Bitfield-Mask: 0x01)          */
#define TIMER30_ADTCR_T3nBMTG_Pos         (1UL)                     /*!< TIMER30 ADTCR: T3nBMTG (Bit 1)                        */
#define TIMER30_ADTCR_T3nBMTG_Msk         (0x2UL)                   /*!< TIMER30 ADTCR: T3nBMTG (Bitfield-Mask: 0x01)          */
#define TIMER30_ADTCR_T3nCMTG_Pos         (0UL)                     /*!< TIMER30 ADTCR: T3nCMTG (Bit 0)                        */
#define TIMER30_ADTCR_T3nCMTG_Msk         (0x1UL)                   /*!< TIMER30 ADTCR: T3nCMTG (Bitfield-Mask: 0x01)          */
/* =========================================================  ADTDR  ========================================================= */
#define TIMER30_ADTDR_ADTDATA_Pos         (0UL)                     /*!< TIMER30 ADTDR: ADTDATA (Bit 0)                        */
#define TIMER30_ADTDR_ADTDATA_Msk         (0x3fffUL)                /*!< TIMER30 ADTDR: ADTDATA (Bitfield-Mask: 0x3fff)        */
/* =======================================================  T30_OUTCR  ======================================================= */
#define TIMER30_T30_OUTCR_WTIDKY_Pos      (16UL)                    /*!< TIMER30 T30_OUTCR: WTIDKY (Bit 16)                    */
#define TIMER30_T30_OUTCR_WTIDKY_Msk      (0xffff0000UL)            /*!< TIMER30 T30_OUTCR: WTIDKY (Bitfield-Mask: 0xffff)     */
#define TIMER30_T30_OUTCR_POLB_Pos        (15UL)                    /*!< TIMER30 T30_OUTCR: POLB (Bit 15)                      */
#define TIMER30_T30_OUTCR_POLB_Msk        (0x8000UL)                /*!< TIMER30 T30_OUTCR: POLB (Bitfield-Mask: 0x01)         */
#define TIMER30_T30_OUTCR_POLA_Pos        (14UL)                    /*!< TIMER30 T30_OUTCR: POLA (Bit 14)                      */
#define TIMER30_T30_OUTCR_POLA_Msk        (0x4000UL)                /*!< TIMER30 T30_OUTCR: POLA (Bitfield-Mask: 0x01)         */
#define TIMER30_T30_OUTCR_PABOE_Pos       (13UL)                    /*!< TIMER30 T30_OUTCR: PABOE (Bit 13)                     */
#define TIMER30_T30_OUTCR_PABOE_Msk       (0x2000UL)                /*!< TIMER30 T30_OUTCR: PABOE (Bitfield-Mask: 0x01)        */
#define TIMER30_T30_OUTCR_PBBOE_Pos       (12UL)                    /*!< TIMER30 T30_OUTCR: PBBOE (Bit 12)                     */
#define TIMER30_T30_OUTCR_PBBOE_Msk       (0x1000UL)                /*!< TIMER30 T30_OUTCR: PBBOE (Bitfield-Mask: 0x01)        */
#define TIMER30_T30_OUTCR_PCBOE_Pos       (11UL)                    /*!< TIMER30 T30_OUTCR: PCBOE (Bit 11)                     */
#define TIMER30_T30_OUTCR_PCBOE_Msk       (0x800UL)                 /*!< TIMER30 T30_OUTCR: PCBOE (Bitfield-Mask: 0x01)        */
#define TIMER30_T30_OUTCR_PAAOE_Pos       (10UL)                    /*!< TIMER30 T30_OUTCR: PAAOE (Bit 10)                     */
#define TIMER30_T30_OUTCR_PAAOE_Msk       (0x400UL)                 /*!< TIMER30 T30_OUTCR: PAAOE (Bitfield-Mask: 0x01)        */
#define TIMER30_T30_OUTCR_PBAOE_Pos       (9UL)                     /*!< TIMER30 T30_OUTCR: PBAOE (Bit 9)                      */
#define TIMER30_T30_OUTCR_PBAOE_Msk       (0x200UL)                 /*!< TIMER30 T30_OUTCR: PBAOE (Bitfield-Mask: 0x01)        */
#define TIMER30_T30_OUTCR_PCAOE_Pos       (8UL)                     /*!< TIMER30 T30_OUTCR: PCAOE (Bit 8)                      */
#define TIMER30_T30_OUTCR_PCAOE_Msk       (0x100UL)                 /*!< TIMER30 T30_OUTCR: PCAOE (Bitfield-Mask: 0x01)        */
#define TIMER30_T30_OUTCR_LVLAB_Pos       (6UL)                     /*!< TIMER30 T30_OUTCR: LVLAB (Bit 6)                      */
#define TIMER30_T30_OUTCR_LVLAB_Msk       (0x40UL)                  /*!< TIMER30 T30_OUTCR: LVLAB (Bitfield-Mask: 0x01)        */
#define TIMER30_T30_OUTCR_LVLBB_Pos       (5UL)                     /*!< TIMER30 T30_OUTCR: LVLBB (Bit 5)                      */
#define TIMER30_T30_OUTCR_LVLBB_Msk       (0x20UL)                  /*!< TIMER30 T30_OUTCR: LVLBB (Bitfield-Mask: 0x01)        */
#define TIMER30_T30_OUTCR_LVLCB_Pos       (4UL)                     /*!< TIMER30 T30_OUTCR: LVLCB (Bit 4)                      */
#define TIMER30_T30_OUTCR_LVLCB_Msk       (0x10UL)                  /*!< TIMER30 T30_OUTCR: LVLCB (Bitfield-Mask: 0x01)        */
#define TIMER30_T30_OUTCR_LVLAA_Pos       (2UL)                     /*!< TIMER30 T30_OUTCR: LVLAA (Bit 2)                      */
#define TIMER30_T30_OUTCR_LVLAA_Msk       (0x4UL)                   /*!< TIMER30 T30_OUTCR: LVLAA (Bitfield-Mask: 0x01)        */
#define TIMER30_T30_OUTCR_LVLBA_Pos       (1UL)                     /*!< TIMER30 T30_OUTCR: LVLBA (Bit 1)                      */
#define TIMER30_T30_OUTCR_LVLBA_Msk       (0x2UL)                   /*!< TIMER30 T30_OUTCR: LVLBA (Bitfield-Mask: 0x01)        */
#define TIMER30_T30_OUTCR_LVLCA_Pos       (0UL)                     /*!< TIMER30 T30_OUTCR: LVLCA (Bit 0)                      */
#define TIMER30_T30_OUTCR_LVLCA_Msk       (0x1UL)                   /*!< TIMER30 T30_OUTCR: LVLCA (Bitfield-Mask: 0x01)        */


/* =========================================================================================================================== */
/* ================                                            ADC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define ADC_CR_ADCEN_Pos                  (15UL)                    /*!< ADC CR: ADCEN (Bit 15)                                */
#define ADC_CR_ADCEN_Msk                  (0x8000UL)                /*!< ADC CR: ADCEN (Bitfield-Mask: 0x01)                   */
#define ADC_CR_TRIG_Pos                   (11UL)                    /*!< ADC CR: TRIG (Bit 11)                                 */
#define ADC_CR_TRIG_Msk                   (0x3800UL)                /*!< ADC CR: TRIG (Bitfield-Mask: 0x07)                    */
#define ADC_CR_REFSEL_Pos                 (10UL)                    /*!< ADC CR: REFSEL (Bit 10)                               */
#define ADC_CR_REFSEL_Msk                 (0x400UL)                 /*!< ADC CR: REFSEL (Bitfield-Mask: 0x01)                  */
#define ADC_CR_ADST_Pos                   (8UL)                     /*!< ADC CR: ADST (Bit 8)                                  */
#define ADC_CR_ADST_Msk                   (0x100UL)                 /*!< ADC CR: ADST (Bitfield-Mask: 0x01)                    */
#define ADC_CR_ADCIEN_Pos                 (5UL)                     /*!< ADC CR: ADCIEN (Bit 5)                                */
#define ADC_CR_ADCIEN_Msk                 (0x20UL)                  /*!< ADC CR: ADCIEN (Bitfield-Mask: 0x01)                  */
#define ADC_CR_ADCIFLAG_Pos               (4UL)                     /*!< ADC CR: ADCIFLAG (Bit 4)                              */
#define ADC_CR_ADCIFLAG_Msk               (0x10UL)                  /*!< ADC CR: ADCIFLAG (Bitfield-Mask: 0x01)                */
#define ADC_CR_ADSEL_Pos                  (0UL)                     /*!< ADC CR: ADSEL (Bit 0)                                 */
#define ADC_CR_ADSEL_Msk                  (0xfUL)                   /*!< ADC CR: ADSEL (Bitfield-Mask: 0x0f)                   */
/* ==========================================================  DR  =========================================================== */
#define ADC_DR_ADDATA_Pos                 (0UL)                     /*!< ADC DR: ADDATA (Bit 0)                                */
#define ADC_DR_ADDATA_Msk                 (0xfffUL)                 /*!< ADC DR: ADDATA (Bitfield-Mask: 0xfff)                 */
/* =========================================================  PREDR  ========================================================= */
#define ADC_PREDR_PRED_Pos                (0UL)                     /*!< ADC PREDR: PRED (Bit 0)                               */
#define ADC_PREDR_PRED_Msk                (0x1fUL)                  /*!< ADC PREDR: PRED (Bitfield-Mask: 0x1f)                 */


/* =========================================================================================================================== */
/* ================                                          USART1n                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
#define USART1n_CR1_USTnMS_Pos            (14UL)                    /*!< USART1n CR1: USTnMS (Bit 14)                          */
#define USART1n_CR1_USTnMS_Msk            (0xc000UL)                /*!< USART1n CR1: USTnMS (Bitfield-Mask: 0x03)             */
#define USART1n_CR1_USTnP_Pos             (12UL)                    /*!< USART1n CR1: USTnP (Bit 12)                           */
#define USART1n_CR1_USTnP_Msk             (0x3000UL)                /*!< USART1n CR1: USTnP (Bitfield-Mask: 0x03)              */
#define USART1n_CR1_USTnS_Pos             (9UL)                     /*!< USART1n CR1: USTnS (Bit 9)                            */
#define USART1n_CR1_USTnS_Msk             (0xe00UL)                 /*!< USART1n CR1: USTnS (Bitfield-Mask: 0x07)              */
#define USART1n_CR1_ORDn_Pos              (8UL)                     /*!< USART1n CR1: ORDn (Bit 8)                             */
#define USART1n_CR1_ORDn_Msk              (0x100UL)                 /*!< USART1n CR1: ORDn (Bitfield-Mask: 0x01)               */
#define USART1n_CR1_CPOLn_Pos             (7UL)                     /*!< USART1n CR1: CPOLn (Bit 7)                            */
#define USART1n_CR1_CPOLn_Msk             (0x80UL)                  /*!< USART1n CR1: CPOLn (Bitfield-Mask: 0x01)              */
#define USART1n_CR1_CPHAn_Pos             (6UL)                     /*!< USART1n CR1: CPHAn (Bit 6)                            */
#define USART1n_CR1_CPHAn_Msk             (0x40UL)                  /*!< USART1n CR1: CPHAn (Bitfield-Mask: 0x01)              */
#define USART1n_CR1_DRIEn_Pos             (5UL)                     /*!< USART1n CR1: DRIEn (Bit 5)                            */
#define USART1n_CR1_DRIEn_Msk             (0x20UL)                  /*!< USART1n CR1: DRIEn (Bitfield-Mask: 0x01)              */
#define USART1n_CR1_TXCIEn_Pos            (4UL)                     /*!< USART1n CR1: TXCIEn (Bit 4)                           */
#define USART1n_CR1_TXCIEn_Msk            (0x10UL)                  /*!< USART1n CR1: TXCIEn (Bitfield-Mask: 0x01)             */
#define USART1n_CR1_RXCIEn_Pos            (3UL)                     /*!< USART1n CR1: RXCIEn (Bit 3)                           */
#define USART1n_CR1_RXCIEn_Msk            (0x8UL)                   /*!< USART1n CR1: RXCIEn (Bitfield-Mask: 0x01)             */
#define USART1n_CR1_WAKEIEn_Pos           (2UL)                     /*!< USART1n CR1: WAKEIEn (Bit 2)                          */
#define USART1n_CR1_WAKEIEn_Msk           (0x4UL)                   /*!< USART1n CR1: WAKEIEn (Bitfield-Mask: 0x01)            */
#define USART1n_CR1_TXEn_Pos              (1UL)                     /*!< USART1n CR1: TXEn (Bit 1)                             */
#define USART1n_CR1_TXEn_Msk              (0x2UL)                   /*!< USART1n CR1: TXEn (Bitfield-Mask: 0x01)               */
#define USART1n_CR1_RXEn_Pos              (0UL)                     /*!< USART1n CR1: RXEn (Bit 0)                             */
#define USART1n_CR1_RXEn_Msk              (0x1UL)                   /*!< USART1n CR1: RXEn (Bitfield-Mask: 0x01)               */
/* ==========================================================  CR2  ========================================================== */
#define USART1n_CR2_USTnEN_Pos            (9UL)                     /*!< USART1n CR2: USTnEN (Bit 9)                           */
#define USART1n_CR2_USTnEN_Msk            (0x200UL)                 /*!< USART1n CR2: USTnEN (Bitfield-Mask: 0x01)             */
#define USART1n_CR2_DBLSn_Pos             (8UL)                     /*!< USART1n CR2: DBLSn (Bit 8)                            */
#define USART1n_CR2_DBLSn_Msk             (0x100UL)                 /*!< USART1n CR2: DBLSn (Bitfield-Mask: 0x01)              */
#define USART1n_CR2_MASTERn_Pos           (7UL)                     /*!< USART1n CR2: MASTERn (Bit 7)                          */
#define USART1n_CR2_MASTERn_Msk           (0x80UL)                  /*!< USART1n CR2: MASTERn (Bitfield-Mask: 0x01)            */
#define USART1n_CR2_LOOPSn_Pos            (6UL)                     /*!< USART1n CR2: LOOPSn (Bit 6)                           */
#define USART1n_CR2_LOOPSn_Msk            (0x40UL)                  /*!< USART1n CR2: LOOPSn (Bitfield-Mask: 0x01)             */
#define USART1n_CR2_DISSCKn_Pos           (5UL)                     /*!< USART1n CR2: DISSCKn (Bit 5)                          */
#define USART1n_CR2_DISSCKn_Msk           (0x20UL)                  /*!< USART1n CR2: DISSCKn (Bitfield-Mask: 0x01)            */
#define USART1n_CR2_USTnSSEN_Pos          (4UL)                     /*!< USART1n CR2: USTnSSEN (Bit 4)                         */
#define USART1n_CR2_USTnSSEN_Msk          (0x10UL)                  /*!< USART1n CR2: USTnSSEN (Bitfield-Mask: 0x01)           */
#define USART1n_CR2_FXCHn_Pos             (3UL)                     /*!< USART1n CR2: FXCHn (Bit 3)                            */
#define USART1n_CR2_FXCHn_Msk             (0x8UL)                   /*!< USART1n CR2: FXCHn (Bitfield-Mask: 0x01)              */
#define USART1n_CR2_USTnSB_Pos            (2UL)                     /*!< USART1n CR2: USTnSB (Bit 2)                           */
#define USART1n_CR2_USTnSB_Msk            (0x4UL)                   /*!< USART1n CR2: USTnSB (Bitfield-Mask: 0x01)             */
#define USART1n_CR2_USTnTX8_Pos           (1UL)                     /*!< USART1n CR2: USTnTX8 (Bit 1)                          */
#define USART1n_CR2_USTnTX8_Msk           (0x2UL)                   /*!< USART1n CR2: USTnTX8 (Bitfield-Mask: 0x01)            */
#define USART1n_CR2_USTnRX8_Pos           (0UL)                     /*!< USART1n CR2: USTnRX8 (Bit 0)                          */
#define USART1n_CR2_USTnRX8_Msk           (0x1UL)                   /*!< USART1n CR2: USTnRX8 (Bitfield-Mask: 0x01)            */
/* ==========================================================  ST  =========================================================== */
#define USART1n_ST_DREn_Pos               (7UL)                     /*!< USART1n ST: DREn (Bit 7)                              */
#define USART1n_ST_DREn_Msk               (0x80UL)                  /*!< USART1n ST: DREn (Bitfield-Mask: 0x01)                */
#define USART1n_ST_TXCn_Pos               (6UL)                     /*!< USART1n ST: TXCn (Bit 6)                              */
#define USART1n_ST_TXCn_Msk               (0x40UL)                  /*!< USART1n ST: TXCn (Bitfield-Mask: 0x01)                */
#define USART1n_ST_RXCn_Pos               (5UL)                     /*!< USART1n ST: RXCn (Bit 5)                              */
#define USART1n_ST_RXCn_Msk               (0x20UL)                  /*!< USART1n ST: RXCn (Bitfield-Mask: 0x01)                */
#define USART1n_ST_WAKEn_Pos              (4UL)                     /*!< USART1n ST: WAKEn (Bit 4)                             */
#define USART1n_ST_WAKEn_Msk              (0x10UL)                  /*!< USART1n ST: WAKEn (Bitfield-Mask: 0x01)               */
#define USART1n_ST_DORn_Pos               (2UL)                     /*!< USART1n ST: DORn (Bit 2)                              */
#define USART1n_ST_DORn_Msk               (0x4UL)                   /*!< USART1n ST: DORn (Bitfield-Mask: 0x01)                */
#define USART1n_ST_FEn_Pos                (1UL)                     /*!< USART1n ST: FEn (Bit 1)                               */
#define USART1n_ST_FEn_Msk                (0x2UL)                   /*!< USART1n ST: FEn (Bitfield-Mask: 0x01)                 */
#define USART1n_ST_PEn_Pos                (0UL)                     /*!< USART1n ST: PEn (Bit 0)                               */
#define USART1n_ST_PEn_Msk                (0x1UL)                   /*!< USART1n ST: PEn (Bitfield-Mask: 0x01)                 */
/* ==========================================================  BDR  ========================================================== */
#define USART1n_BDR_BDATA_Pos             (0UL)                     /*!< USART1n BDR: BDATA (Bit 0)                            */
#define USART1n_BDR_BDATA_Msk             (0xfffUL)                 /*!< USART1n BDR: BDATA (Bitfield-Mask: 0xfff)             */
/* ==========================================================  DR  =========================================================== */
#define USART1n_DR_DATA_Pos               (0UL)                     /*!< USART1n DR: DATA (Bit 0)                              */
#define USART1n_DR_DATA_Msk               (0xffUL)                  /*!< USART1n DR: DATA (Bitfield-Mask: 0xff)                */


/* =========================================================================================================================== */
/* ================                                          USART10                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
#define USART10_CR1_USTnMS_Pos            (14UL)                    /*!< USART10 CR1: USTnMS (Bit 14)                          */
#define USART10_CR1_USTnMS_Msk            (0xc000UL)                /*!< USART10 CR1: USTnMS (Bitfield-Mask: 0x03)             */
#define USART10_CR1_USTnP_Pos             (12UL)                    /*!< USART10 CR1: USTnP (Bit 12)                           */
#define USART10_CR1_USTnP_Msk             (0x3000UL)                /*!< USART10 CR1: USTnP (Bitfield-Mask: 0x03)              */
#define USART10_CR1_USTnS_Pos             (9UL)                     /*!< USART10 CR1: USTnS (Bit 9)                            */
#define USART10_CR1_USTnS_Msk             (0xe00UL)                 /*!< USART10 CR1: USTnS (Bitfield-Mask: 0x07)              */
#define USART10_CR1_ORDn_Pos              (8UL)                     /*!< USART10 CR1: ORDn (Bit 8)                             */
#define USART10_CR1_ORDn_Msk              (0x100UL)                 /*!< USART10 CR1: ORDn (Bitfield-Mask: 0x01)               */
#define USART10_CR1_CPOLn_Pos             (7UL)                     /*!< USART10 CR1: CPOLn (Bit 7)                            */
#define USART10_CR1_CPOLn_Msk             (0x80UL)                  /*!< USART10 CR1: CPOLn (Bitfield-Mask: 0x01)              */
#define USART10_CR1_CPHAn_Pos             (6UL)                     /*!< USART10 CR1: CPHAn (Bit 6)                            */
#define USART10_CR1_CPHAn_Msk             (0x40UL)                  /*!< USART10 CR1: CPHAn (Bitfield-Mask: 0x01)              */
#define USART10_CR1_DRIEn_Pos             (5UL)                     /*!< USART10 CR1: DRIEn (Bit 5)                            */
#define USART10_CR1_DRIEn_Msk             (0x20UL)                  /*!< USART10 CR1: DRIEn (Bitfield-Mask: 0x01)              */
#define USART10_CR1_TXCIEn_Pos            (4UL)                     /*!< USART10 CR1: TXCIEn (Bit 4)                           */
#define USART10_CR1_TXCIEn_Msk            (0x10UL)                  /*!< USART10 CR1: TXCIEn (Bitfield-Mask: 0x01)             */
#define USART10_CR1_RXCIEn_Pos            (3UL)                     /*!< USART10 CR1: RXCIEn (Bit 3)                           */
#define USART10_CR1_RXCIEn_Msk            (0x8UL)                   /*!< USART10 CR1: RXCIEn (Bitfield-Mask: 0x01)             */
#define USART10_CR1_WAKEIEn_Pos           (2UL)                     /*!< USART10 CR1: WAKEIEn (Bit 2)                          */
#define USART10_CR1_WAKEIEn_Msk           (0x4UL)                   /*!< USART10 CR1: WAKEIEn (Bitfield-Mask: 0x01)            */
#define USART10_CR1_TXEn_Pos              (1UL)                     /*!< USART10 CR1: TXEn (Bit 1)                             */
#define USART10_CR1_TXEn_Msk              (0x2UL)                   /*!< USART10 CR1: TXEn (Bitfield-Mask: 0x01)               */
#define USART10_CR1_RXEn_Pos              (0UL)                     /*!< USART10 CR1: RXEn (Bit 0)                             */
#define USART10_CR1_RXEn_Msk              (0x1UL)                   /*!< USART10 CR1: RXEn (Bitfield-Mask: 0x01)               */
/* ==========================================================  CR2  ========================================================== */
#define USART10_CR2_USTnEN_Pos            (9UL)                     /*!< USART10 CR2: USTnEN (Bit 9)                           */
#define USART10_CR2_USTnEN_Msk            (0x200UL)                 /*!< USART10 CR2: USTnEN (Bitfield-Mask: 0x01)             */
#define USART10_CR2_DBLSn_Pos             (8UL)                     /*!< USART10 CR2: DBLSn (Bit 8)                            */
#define USART10_CR2_DBLSn_Msk             (0x100UL)                 /*!< USART10 CR2: DBLSn (Bitfield-Mask: 0x01)              */
#define USART10_CR2_MASTERn_Pos           (7UL)                     /*!< USART10 CR2: MASTERn (Bit 7)                          */
#define USART10_CR2_MASTERn_Msk           (0x80UL)                  /*!< USART10 CR2: MASTERn (Bitfield-Mask: 0x01)            */
#define USART10_CR2_LOOPSn_Pos            (6UL)                     /*!< USART10 CR2: LOOPSn (Bit 6)                           */
#define USART10_CR2_LOOPSn_Msk            (0x40UL)                  /*!< USART10 CR2: LOOPSn (Bitfield-Mask: 0x01)             */
#define USART10_CR2_DISSCKn_Pos           (5UL)                     /*!< USART10 CR2: DISSCKn (Bit 5)                          */
#define USART10_CR2_DISSCKn_Msk           (0x20UL)                  /*!< USART10 CR2: DISSCKn (Bitfield-Mask: 0x01)            */
#define USART10_CR2_USTnSSEN_Pos          (4UL)                     /*!< USART10 CR2: USTnSSEN (Bit 4)                         */
#define USART10_CR2_USTnSSEN_Msk          (0x10UL)                  /*!< USART10 CR2: USTnSSEN (Bitfield-Mask: 0x01)           */
#define USART10_CR2_FXCHn_Pos             (3UL)                     /*!< USART10 CR2: FXCHn (Bit 3)                            */
#define USART10_CR2_FXCHn_Msk             (0x8UL)                   /*!< USART10 CR2: FXCHn (Bitfield-Mask: 0x01)              */
#define USART10_CR2_USTnSB_Pos            (2UL)                     /*!< USART10 CR2: USTnSB (Bit 2)                           */
#define USART10_CR2_USTnSB_Msk            (0x4UL)                   /*!< USART10 CR2: USTnSB (Bitfield-Mask: 0x01)             */
#define USART10_CR2_USTnTX8_Pos           (1UL)                     /*!< USART10 CR2: USTnTX8 (Bit 1)                          */
#define USART10_CR2_USTnTX8_Msk           (0x2UL)                   /*!< USART10 CR2: USTnTX8 (Bitfield-Mask: 0x01)            */
#define USART10_CR2_USTnRX8_Pos           (0UL)                     /*!< USART10 CR2: USTnRX8 (Bit 0)                          */
#define USART10_CR2_USTnRX8_Msk           (0x1UL)                   /*!< USART10 CR2: USTnRX8 (Bitfield-Mask: 0x01)            */
/* ==========================================================  ST  =========================================================== */
#define USART10_ST_DREn_Pos               (7UL)                     /*!< USART10 ST: DREn (Bit 7)                              */
#define USART10_ST_DREn_Msk               (0x80UL)                  /*!< USART10 ST: DREn (Bitfield-Mask: 0x01)                */
#define USART10_ST_TXCn_Pos               (6UL)                     /*!< USART10 ST: TXCn (Bit 6)                              */
#define USART10_ST_TXCn_Msk               (0x40UL)                  /*!< USART10 ST: TXCn (Bitfield-Mask: 0x01)                */
#define USART10_ST_RXCn_Pos               (5UL)                     /*!< USART10 ST: RXCn (Bit 5)                              */
#define USART10_ST_RXCn_Msk               (0x20UL)                  /*!< USART10 ST: RXCn (Bitfield-Mask: 0x01)                */
#define USART10_ST_WAKEn_Pos              (4UL)                     /*!< USART10 ST: WAKEn (Bit 4)                             */
#define USART10_ST_WAKEn_Msk              (0x10UL)                  /*!< USART10 ST: WAKEn (Bitfield-Mask: 0x01)               */
#define USART10_ST_DORn_Pos               (2UL)                     /*!< USART10 ST: DORn (Bit 2)                              */
#define USART10_ST_DORn_Msk               (0x4UL)                   /*!< USART10 ST: DORn (Bitfield-Mask: 0x01)                */
#define USART10_ST_FEn_Pos                (1UL)                     /*!< USART10 ST: FEn (Bit 1)                               */
#define USART10_ST_FEn_Msk                (0x2UL)                   /*!< USART10 ST: FEn (Bitfield-Mask: 0x01)                 */
#define USART10_ST_PEn_Pos                (0UL)                     /*!< USART10 ST: PEn (Bit 0)                               */
#define USART10_ST_PEn_Msk                (0x1UL)                   /*!< USART10 ST: PEn (Bitfield-Mask: 0x01)                 */
/* ==========================================================  BDR  ========================================================== */
#define USART10_BDR_BDATA_Pos             (0UL)                     /*!< USART10 BDR: BDATA (Bit 0)                            */
#define USART10_BDR_BDATA_Msk             (0xfffUL)                 /*!< USART10 BDR: BDATA (Bitfield-Mask: 0xfff)             */
/* ==========================================================  DR  =========================================================== */
#define USART10_DR_DATA_Pos               (0UL)                     /*!< USART10 DR: DATA (Bit 0)                              */
#define USART10_DR_DATA_Msk               (0xffUL)                  /*!< USART10 DR: DATA (Bitfield-Mask: 0xff)                */


/* =========================================================================================================================== */
/* ================                                          USART11                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
#define USART11_CR1_USTnMS_Pos            (14UL)                    /*!< USART11 CR1: USTnMS (Bit 14)                          */
#define USART11_CR1_USTnMS_Msk            (0xc000UL)                /*!< USART11 CR1: USTnMS (Bitfield-Mask: 0x03)             */
#define USART11_CR1_USTnP_Pos             (12UL)                    /*!< USART11 CR1: USTnP (Bit 12)                           */
#define USART11_CR1_USTnP_Msk             (0x3000UL)                /*!< USART11 CR1: USTnP (Bitfield-Mask: 0x03)              */
#define USART11_CR1_USTnS_Pos             (9UL)                     /*!< USART11 CR1: USTnS (Bit 9)                            */
#define USART11_CR1_USTnS_Msk             (0xe00UL)                 /*!< USART11 CR1: USTnS (Bitfield-Mask: 0x07)              */
#define USART11_CR1_ORDn_Pos              (8UL)                     /*!< USART11 CR1: ORDn (Bit 8)                             */
#define USART11_CR1_ORDn_Msk              (0x100UL)                 /*!< USART11 CR1: ORDn (Bitfield-Mask: 0x01)               */
#define USART11_CR1_CPOLn_Pos             (7UL)                     /*!< USART11 CR1: CPOLn (Bit 7)                            */
#define USART11_CR1_CPOLn_Msk             (0x80UL)                  /*!< USART11 CR1: CPOLn (Bitfield-Mask: 0x01)              */
#define USART11_CR1_CPHAn_Pos             (6UL)                     /*!< USART11 CR1: CPHAn (Bit 6)                            */
#define USART11_CR1_CPHAn_Msk             (0x40UL)                  /*!< USART11 CR1: CPHAn (Bitfield-Mask: 0x01)              */
#define USART11_CR1_DRIEn_Pos             (5UL)                     /*!< USART11 CR1: DRIEn (Bit 5)                            */
#define USART11_CR1_DRIEn_Msk             (0x20UL)                  /*!< USART11 CR1: DRIEn (Bitfield-Mask: 0x01)              */
#define USART11_CR1_TXCIEn_Pos            (4UL)                     /*!< USART11 CR1: TXCIEn (Bit 4)                           */
#define USART11_CR1_TXCIEn_Msk            (0x10UL)                  /*!< USART11 CR1: TXCIEn (Bitfield-Mask: 0x01)             */
#define USART11_CR1_RXCIEn_Pos            (3UL)                     /*!< USART11 CR1: RXCIEn (Bit 3)                           */
#define USART11_CR1_RXCIEn_Msk            (0x8UL)                   /*!< USART11 CR1: RXCIEn (Bitfield-Mask: 0x01)             */
#define USART11_CR1_WAKEIEn_Pos           (2UL)                     /*!< USART11 CR1: WAKEIEn (Bit 2)                          */
#define USART11_CR1_WAKEIEn_Msk           (0x4UL)                   /*!< USART11 CR1: WAKEIEn (Bitfield-Mask: 0x01)            */
#define USART11_CR1_TXEn_Pos              (1UL)                     /*!< USART11 CR1: TXEn (Bit 1)                             */
#define USART11_CR1_TXEn_Msk              (0x2UL)                   /*!< USART11 CR1: TXEn (Bitfield-Mask: 0x01)               */
#define USART11_CR1_RXEn_Pos              (0UL)                     /*!< USART11 CR1: RXEn (Bit 0)                             */
#define USART11_CR1_RXEn_Msk              (0x1UL)                   /*!< USART11 CR1: RXEn (Bitfield-Mask: 0x01)               */
/* ==========================================================  CR2  ========================================================== */
#define USART11_CR2_USTnEN_Pos            (9UL)                     /*!< USART11 CR2: USTnEN (Bit 9)                           */
#define USART11_CR2_USTnEN_Msk            (0x200UL)                 /*!< USART11 CR2: USTnEN (Bitfield-Mask: 0x01)             */
#define USART11_CR2_DBLSn_Pos             (8UL)                     /*!< USART11 CR2: DBLSn (Bit 8)                            */
#define USART11_CR2_DBLSn_Msk             (0x100UL)                 /*!< USART11 CR2: DBLSn (Bitfield-Mask: 0x01)              */
#define USART11_CR2_MASTERn_Pos           (7UL)                     /*!< USART11 CR2: MASTERn (Bit 7)                          */
#define USART11_CR2_MASTERn_Msk           (0x80UL)                  /*!< USART11 CR2: MASTERn (Bitfield-Mask: 0x01)            */
#define USART11_CR2_LOOPSn_Pos            (6UL)                     /*!< USART11 CR2: LOOPSn (Bit 6)                           */
#define USART11_CR2_LOOPSn_Msk            (0x40UL)                  /*!< USART11 CR2: LOOPSn (Bitfield-Mask: 0x01)             */
#define USART11_CR2_DISSCKn_Pos           (5UL)                     /*!< USART11 CR2: DISSCKn (Bit 5)                          */
#define USART11_CR2_DISSCKn_Msk           (0x20UL)                  /*!< USART11 CR2: DISSCKn (Bitfield-Mask: 0x01)            */
#define USART11_CR2_USTnSSEN_Pos          (4UL)                     /*!< USART11 CR2: USTnSSEN (Bit 4)                         */
#define USART11_CR2_USTnSSEN_Msk          (0x10UL)                  /*!< USART11 CR2: USTnSSEN (Bitfield-Mask: 0x01)           */
#define USART11_CR2_FXCHn_Pos             (3UL)                     /*!< USART11 CR2: FXCHn (Bit 3)                            */
#define USART11_CR2_FXCHn_Msk             (0x8UL)                   /*!< USART11 CR2: FXCHn (Bitfield-Mask: 0x01)              */
#define USART11_CR2_USTnSB_Pos            (2UL)                     /*!< USART11 CR2: USTnSB (Bit 2)                           */
#define USART11_CR2_USTnSB_Msk            (0x4UL)                   /*!< USART11 CR2: USTnSB (Bitfield-Mask: 0x01)             */
#define USART11_CR2_USTnTX8_Pos           (1UL)                     /*!< USART11 CR2: USTnTX8 (Bit 1)                          */
#define USART11_CR2_USTnTX8_Msk           (0x2UL)                   /*!< USART11 CR2: USTnTX8 (Bitfield-Mask: 0x01)            */
#define USART11_CR2_USTnRX8_Pos           (0UL)                     /*!< USART11 CR2: USTnRX8 (Bit 0)                          */
#define USART11_CR2_USTnRX8_Msk           (0x1UL)                   /*!< USART11 CR2: USTnRX8 (Bitfield-Mask: 0x01)            */
/* ==========================================================  ST  =========================================================== */
#define USART11_ST_DREn_Pos               (7UL)                     /*!< USART11 ST: DREn (Bit 7)                              */
#define USART11_ST_DREn_Msk               (0x80UL)                  /*!< USART11 ST: DREn (Bitfield-Mask: 0x01)                */
#define USART11_ST_TXCn_Pos               (6UL)                     /*!< USART11 ST: TXCn (Bit 6)                              */
#define USART11_ST_TXCn_Msk               (0x40UL)                  /*!< USART11 ST: TXCn (Bitfield-Mask: 0x01)                */
#define USART11_ST_RXCn_Pos               (5UL)                     /*!< USART11 ST: RXCn (Bit 5)                              */
#define USART11_ST_RXCn_Msk               (0x20UL)                  /*!< USART11 ST: RXCn (Bitfield-Mask: 0x01)                */
#define USART11_ST_WAKEn_Pos              (4UL)                     /*!< USART11 ST: WAKEn (Bit 4)                             */
#define USART11_ST_WAKEn_Msk              (0x10UL)                  /*!< USART11 ST: WAKEn (Bitfield-Mask: 0x01)               */
#define USART11_ST_DORn_Pos               (2UL)                     /*!< USART11 ST: DORn (Bit 2)                              */
#define USART11_ST_DORn_Msk               (0x4UL)                   /*!< USART11 ST: DORn (Bitfield-Mask: 0x01)                */
#define USART11_ST_FEn_Pos                (1UL)                     /*!< USART11 ST: FEn (Bit 1)                               */
#define USART11_ST_FEn_Msk                (0x2UL)                   /*!< USART11 ST: FEn (Bitfield-Mask: 0x01)                 */
#define USART11_ST_PEn_Pos                (0UL)                     /*!< USART11 ST: PEn (Bit 0)                               */
#define USART11_ST_PEn_Msk                (0x1UL)                   /*!< USART11 ST: PEn (Bitfield-Mask: 0x01)                 */
/* ==========================================================  BDR  ========================================================== */
#define USART11_BDR_BDATA_Pos             (0UL)                     /*!< USART11 BDR: BDATA (Bit 0)                            */
#define USART11_BDR_BDATA_Msk             (0xfffUL)                 /*!< USART11 BDR: BDATA (Bitfield-Mask: 0xfff)             */
/* ==========================================================  DR  =========================================================== */
#define USART11_DR_DATA_Pos               (0UL)                     /*!< USART11 DR: DATA (Bit 0)                              */
#define USART11_DR_DATA_Msk               (0xffUL)                  /*!< USART11 DR: DATA (Bitfield-Mask: 0xff)                */


/* =========================================================================================================================== */
/* ================                                          USART12                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
#define USART12_CR1_USTnMS_Pos            (14UL)                    /*!< USART12 CR1: USTnMS (Bit 14)                          */
#define USART12_CR1_USTnMS_Msk            (0xc000UL)                /*!< USART12 CR1: USTnMS (Bitfield-Mask: 0x03)             */
#define USART12_CR1_USTnP_Pos             (12UL)                    /*!< USART12 CR1: USTnP (Bit 12)                           */
#define USART12_CR1_USTnP_Msk             (0x3000UL)                /*!< USART12 CR1: USTnP (Bitfield-Mask: 0x03)              */
#define USART12_CR1_USTnS_Pos             (9UL)                     /*!< USART12 CR1: USTnS (Bit 9)                            */
#define USART12_CR1_USTnS_Msk             (0xe00UL)                 /*!< USART12 CR1: USTnS (Bitfield-Mask: 0x07)              */
#define USART12_CR1_ORDn_Pos              (8UL)                     /*!< USART12 CR1: ORDn (Bit 8)                             */
#define USART12_CR1_ORDn_Msk              (0x100UL)                 /*!< USART12 CR1: ORDn (Bitfield-Mask: 0x01)               */
#define USART12_CR1_CPOLn_Pos             (7UL)                     /*!< USART12 CR1: CPOLn (Bit 7)                            */
#define USART12_CR1_CPOLn_Msk             (0x80UL)                  /*!< USART12 CR1: CPOLn (Bitfield-Mask: 0x01)              */
#define USART12_CR1_CPHAn_Pos             (6UL)                     /*!< USART12 CR1: CPHAn (Bit 6)                            */
#define USART12_CR1_CPHAn_Msk             (0x40UL)                  /*!< USART12 CR1: CPHAn (Bitfield-Mask: 0x01)              */
#define USART12_CR1_DRIEn_Pos             (5UL)                     /*!< USART12 CR1: DRIEn (Bit 5)                            */
#define USART12_CR1_DRIEn_Msk             (0x20UL)                  /*!< USART12 CR1: DRIEn (Bitfield-Mask: 0x01)              */
#define USART12_CR1_TXCIEn_Pos            (4UL)                     /*!< USART12 CR1: TXCIEn (Bit 4)                           */
#define USART12_CR1_TXCIEn_Msk            (0x10UL)                  /*!< USART12 CR1: TXCIEn (Bitfield-Mask: 0x01)             */
#define USART12_CR1_RXCIEn_Pos            (3UL)                     /*!< USART12 CR1: RXCIEn (Bit 3)                           */
#define USART12_CR1_RXCIEn_Msk            (0x8UL)                   /*!< USART12 CR1: RXCIEn (Bitfield-Mask: 0x01)             */
#define USART12_CR1_WAKEIEn_Pos           (2UL)                     /*!< USART12 CR1: WAKEIEn (Bit 2)                          */
#define USART12_CR1_WAKEIEn_Msk           (0x4UL)                   /*!< USART12 CR1: WAKEIEn (Bitfield-Mask: 0x01)            */
#define USART12_CR1_TXEn_Pos              (1UL)                     /*!< USART12 CR1: TXEn (Bit 1)                             */
#define USART12_CR1_TXEn_Msk              (0x2UL)                   /*!< USART12 CR1: TXEn (Bitfield-Mask: 0x01)               */
#define USART12_CR1_RXEn_Pos              (0UL)                     /*!< USART12 CR1: RXEn (Bit 0)                             */
#define USART12_CR1_RXEn_Msk              (0x1UL)                   /*!< USART12 CR1: RXEn (Bitfield-Mask: 0x01)               */
/* ==========================================================  CR2  ========================================================== */
#define USART12_CR2_USTnEN_Pos            (9UL)                     /*!< USART12 CR2: USTnEN (Bit 9)                           */
#define USART12_CR2_USTnEN_Msk            (0x200UL)                 /*!< USART12 CR2: USTnEN (Bitfield-Mask: 0x01)             */
#define USART12_CR2_DBLSn_Pos             (8UL)                     /*!< USART12 CR2: DBLSn (Bit 8)                            */
#define USART12_CR2_DBLSn_Msk             (0x100UL)                 /*!< USART12 CR2: DBLSn (Bitfield-Mask: 0x01)              */
#define USART12_CR2_MASTERn_Pos           (7UL)                     /*!< USART12 CR2: MASTERn (Bit 7)                          */
#define USART12_CR2_MASTERn_Msk           (0x80UL)                  /*!< USART12 CR2: MASTERn (Bitfield-Mask: 0x01)            */
#define USART12_CR2_LOOPSn_Pos            (6UL)                     /*!< USART12 CR2: LOOPSn (Bit 6)                           */
#define USART12_CR2_LOOPSn_Msk            (0x40UL)                  /*!< USART12 CR2: LOOPSn (Bitfield-Mask: 0x01)             */
#define USART12_CR2_DISSCKn_Pos           (5UL)                     /*!< USART12 CR2: DISSCKn (Bit 5)                          */
#define USART12_CR2_DISSCKn_Msk           (0x20UL)                  /*!< USART12 CR2: DISSCKn (Bitfield-Mask: 0x01)            */
#define USART12_CR2_USTnSSEN_Pos          (4UL)                     /*!< USART12 CR2: USTnSSEN (Bit 4)                         */
#define USART12_CR2_USTnSSEN_Msk          (0x10UL)                  /*!< USART12 CR2: USTnSSEN (Bitfield-Mask: 0x01)           */
#define USART12_CR2_FXCHn_Pos             (3UL)                     /*!< USART12 CR2: FXCHn (Bit 3)                            */
#define USART12_CR2_FXCHn_Msk             (0x8UL)                   /*!< USART12 CR2: FXCHn (Bitfield-Mask: 0x01)              */
#define USART12_CR2_USTnSB_Pos            (2UL)                     /*!< USART12 CR2: USTnSB (Bit 2)                           */
#define USART12_CR2_USTnSB_Msk            (0x4UL)                   /*!< USART12 CR2: USTnSB (Bitfield-Mask: 0x01)             */
#define USART12_CR2_USTnTX8_Pos           (1UL)                     /*!< USART12 CR2: USTnTX8 (Bit 1)                          */
#define USART12_CR2_USTnTX8_Msk           (0x2UL)                   /*!< USART12 CR2: USTnTX8 (Bitfield-Mask: 0x01)            */
#define USART12_CR2_USTnRX8_Pos           (0UL)                     /*!< USART12 CR2: USTnRX8 (Bit 0)                          */
#define USART12_CR2_USTnRX8_Msk           (0x1UL)                   /*!< USART12 CR2: USTnRX8 (Bitfield-Mask: 0x01)            */
/* ==========================================================  ST  =========================================================== */
#define USART12_ST_DREn_Pos               (7UL)                     /*!< USART12 ST: DREn (Bit 7)                              */
#define USART12_ST_DREn_Msk               (0x80UL)                  /*!< USART12 ST: DREn (Bitfield-Mask: 0x01)                */
#define USART12_ST_TXCn_Pos               (6UL)                     /*!< USART12 ST: TXCn (Bit 6)                              */
#define USART12_ST_TXCn_Msk               (0x40UL)                  /*!< USART12 ST: TXCn (Bitfield-Mask: 0x01)                */
#define USART12_ST_RXCn_Pos               (5UL)                     /*!< USART12 ST: RXCn (Bit 5)                              */
#define USART12_ST_RXCn_Msk               (0x20UL)                  /*!< USART12 ST: RXCn (Bitfield-Mask: 0x01)                */
#define USART12_ST_WAKEn_Pos              (4UL)                     /*!< USART12 ST: WAKEn (Bit 4)                             */
#define USART12_ST_WAKEn_Msk              (0x10UL)                  /*!< USART12 ST: WAKEn (Bitfield-Mask: 0x01)               */
#define USART12_ST_DORn_Pos               (2UL)                     /*!< USART12 ST: DORn (Bit 2)                              */
#define USART12_ST_DORn_Msk               (0x4UL)                   /*!< USART12 ST: DORn (Bitfield-Mask: 0x01)                */
#define USART12_ST_FEn_Pos                (1UL)                     /*!< USART12 ST: FEn (Bit 1)                               */
#define USART12_ST_FEn_Msk                (0x2UL)                   /*!< USART12 ST: FEn (Bitfield-Mask: 0x01)                 */
#define USART12_ST_PEn_Pos                (0UL)                     /*!< USART12 ST: PEn (Bit 0)                               */
#define USART12_ST_PEn_Msk                (0x1UL)                   /*!< USART12 ST: PEn (Bitfield-Mask: 0x01)                 */
/* ==========================================================  BDR  ========================================================== */
#define USART12_BDR_BDATA_Pos             (0UL)                     /*!< USART12 BDR: BDATA (Bit 0)                            */
#define USART12_BDR_BDATA_Msk             (0xfffUL)                 /*!< USART12 BDR: BDATA (Bitfield-Mask: 0xfff)             */
/* ==========================================================  DR  =========================================================== */
#define USART12_DR_DATA_Pos               (0UL)                     /*!< USART12 DR: DATA (Bit 0)                              */
#define USART12_DR_DATA_Msk               (0xffUL)                  /*!< USART12 DR: DATA (Bitfield-Mask: 0xff)                */


/* =========================================================================================================================== */
/* ================                                          USART13                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
#define USART13_CR1_USTnMS_Pos            (14UL)                    /*!< USART13 CR1: USTnMS (Bit 14)                          */
#define USART13_CR1_USTnMS_Msk            (0xc000UL)                /*!< USART13 CR1: USTnMS (Bitfield-Mask: 0x03)             */
#define USART13_CR1_USTnP_Pos             (12UL)                    /*!< USART13 CR1: USTnP (Bit 12)                           */
#define USART13_CR1_USTnP_Msk             (0x3000UL)                /*!< USART13 CR1: USTnP (Bitfield-Mask: 0x03)              */
#define USART13_CR1_USTnS_Pos             (9UL)                     /*!< USART13 CR1: USTnS (Bit 9)                            */
#define USART13_CR1_USTnS_Msk             (0xe00UL)                 /*!< USART13 CR1: USTnS (Bitfield-Mask: 0x07)              */
#define USART13_CR1_ORDn_Pos              (8UL)                     /*!< USART13 CR1: ORDn (Bit 8)                             */
#define USART13_CR1_ORDn_Msk              (0x100UL)                 /*!< USART13 CR1: ORDn (Bitfield-Mask: 0x01)               */
#define USART13_CR1_CPOLn_Pos             (7UL)                     /*!< USART13 CR1: CPOLn (Bit 7)                            */
#define USART13_CR1_CPOLn_Msk             (0x80UL)                  /*!< USART13 CR1: CPOLn (Bitfield-Mask: 0x01)              */
#define USART13_CR1_CPHAn_Pos             (6UL)                     /*!< USART13 CR1: CPHAn (Bit 6)                            */
#define USART13_CR1_CPHAn_Msk             (0x40UL)                  /*!< USART13 CR1: CPHAn (Bitfield-Mask: 0x01)              */
#define USART13_CR1_DRIEn_Pos             (5UL)                     /*!< USART13 CR1: DRIEn (Bit 5)                            */
#define USART13_CR1_DRIEn_Msk             (0x20UL)                  /*!< USART13 CR1: DRIEn (Bitfield-Mask: 0x01)              */
#define USART13_CR1_TXCIEn_Pos            (4UL)                     /*!< USART13 CR1: TXCIEn (Bit 4)                           */
#define USART13_CR1_TXCIEn_Msk            (0x10UL)                  /*!< USART13 CR1: TXCIEn (Bitfield-Mask: 0x01)             */
#define USART13_CR1_RXCIEn_Pos            (3UL)                     /*!< USART13 CR1: RXCIEn (Bit 3)                           */
#define USART13_CR1_RXCIEn_Msk            (0x8UL)                   /*!< USART13 CR1: RXCIEn (Bitfield-Mask: 0x01)             */
#define USART13_CR1_WAKEIEn_Pos           (2UL)                     /*!< USART13 CR1: WAKEIEn (Bit 2)                          */
#define USART13_CR1_WAKEIEn_Msk           (0x4UL)                   /*!< USART13 CR1: WAKEIEn (Bitfield-Mask: 0x01)            */
#define USART13_CR1_TXEn_Pos              (1UL)                     /*!< USART13 CR1: TXEn (Bit 1)                             */
#define USART13_CR1_TXEn_Msk              (0x2UL)                   /*!< USART13 CR1: TXEn (Bitfield-Mask: 0x01)               */
#define USART13_CR1_RXEn_Pos              (0UL)                     /*!< USART13 CR1: RXEn (Bit 0)                             */
#define USART13_CR1_RXEn_Msk              (0x1UL)                   /*!< USART13 CR1: RXEn (Bitfield-Mask: 0x01)               */
/* ==========================================================  CR2  ========================================================== */
#define USART13_CR2_USTnEN_Pos            (9UL)                     /*!< USART13 CR2: USTnEN (Bit 9)                           */
#define USART13_CR2_USTnEN_Msk            (0x200UL)                 /*!< USART13 CR2: USTnEN (Bitfield-Mask: 0x01)             */
#define USART13_CR2_DBLSn_Pos             (8UL)                     /*!< USART13 CR2: DBLSn (Bit 8)                            */
#define USART13_CR2_DBLSn_Msk             (0x100UL)                 /*!< USART13 CR2: DBLSn (Bitfield-Mask: 0x01)              */
#define USART13_CR2_MASTERn_Pos           (7UL)                     /*!< USART13 CR2: MASTERn (Bit 7)                          */
#define USART13_CR2_MASTERn_Msk           (0x80UL)                  /*!< USART13 CR2: MASTERn (Bitfield-Mask: 0x01)            */
#define USART13_CR2_LOOPSn_Pos            (6UL)                     /*!< USART13 CR2: LOOPSn (Bit 6)                           */
#define USART13_CR2_LOOPSn_Msk            (0x40UL)                  /*!< USART13 CR2: LOOPSn (Bitfield-Mask: 0x01)             */
#define USART13_CR2_DISSCKn_Pos           (5UL)                     /*!< USART13 CR2: DISSCKn (Bit 5)                          */
#define USART13_CR2_DISSCKn_Msk           (0x20UL)                  /*!< USART13 CR2: DISSCKn (Bitfield-Mask: 0x01)            */
#define USART13_CR2_USTnSSEN_Pos          (4UL)                     /*!< USART13 CR2: USTnSSEN (Bit 4)                         */
#define USART13_CR2_USTnSSEN_Msk          (0x10UL)                  /*!< USART13 CR2: USTnSSEN (Bitfield-Mask: 0x01)           */
#define USART13_CR2_FXCHn_Pos             (3UL)                     /*!< USART13 CR2: FXCHn (Bit 3)                            */
#define USART13_CR2_FXCHn_Msk             (0x8UL)                   /*!< USART13 CR2: FXCHn (Bitfield-Mask: 0x01)              */
#define USART13_CR2_USTnSB_Pos            (2UL)                     /*!< USART13 CR2: USTnSB (Bit 2)                           */
#define USART13_CR2_USTnSB_Msk            (0x4UL)                   /*!< USART13 CR2: USTnSB (Bitfield-Mask: 0x01)             */
#define USART13_CR2_USTnTX8_Pos           (1UL)                     /*!< USART13 CR2: USTnTX8 (Bit 1)                          */
#define USART13_CR2_USTnTX8_Msk           (0x2UL)                   /*!< USART13 CR2: USTnTX8 (Bitfield-Mask: 0x01)            */
#define USART13_CR2_USTnRX8_Pos           (0UL)                     /*!< USART13 CR2: USTnRX8 (Bit 0)                          */
#define USART13_CR2_USTnRX8_Msk           (0x1UL)                   /*!< USART13 CR2: USTnRX8 (Bitfield-Mask: 0x01)            */
/* ==========================================================  ST  =========================================================== */
#define USART13_ST_DREn_Pos               (7UL)                     /*!< USART13 ST: DREn (Bit 7)                              */
#define USART13_ST_DREn_Msk               (0x80UL)                  /*!< USART13 ST: DREn (Bitfield-Mask: 0x01)                */
#define USART13_ST_TXCn_Pos               (6UL)                     /*!< USART13 ST: TXCn (Bit 6)                              */
#define USART13_ST_TXCn_Msk               (0x40UL)                  /*!< USART13 ST: TXCn (Bitfield-Mask: 0x01)                */
#define USART13_ST_RXCn_Pos               (5UL)                     /*!< USART13 ST: RXCn (Bit 5)                              */
#define USART13_ST_RXCn_Msk               (0x20UL)                  /*!< USART13 ST: RXCn (Bitfield-Mask: 0x01)                */
#define USART13_ST_WAKEn_Pos              (4UL)                     /*!< USART13 ST: WAKEn (Bit 4)                             */
#define USART13_ST_WAKEn_Msk              (0x10UL)                  /*!< USART13 ST: WAKEn (Bitfield-Mask: 0x01)               */
#define USART13_ST_DORn_Pos               (2UL)                     /*!< USART13 ST: DORn (Bit 2)                              */
#define USART13_ST_DORn_Msk               (0x4UL)                   /*!< USART13 ST: DORn (Bitfield-Mask: 0x01)                */
#define USART13_ST_FEn_Pos                (1UL)                     /*!< USART13 ST: FEn (Bit 1)                               */
#define USART13_ST_FEn_Msk                (0x2UL)                   /*!< USART13 ST: FEn (Bitfield-Mask: 0x01)                 */
#define USART13_ST_PEn_Pos                (0UL)                     /*!< USART13 ST: PEn (Bit 0)                               */
#define USART13_ST_PEn_Msk                (0x1UL)                   /*!< USART13 ST: PEn (Bitfield-Mask: 0x01)                 */
/* ==========================================================  BDR  ========================================================== */
#define USART13_BDR_BDATA_Pos             (0UL)                     /*!< USART13 BDR: BDATA (Bit 0)                            */
#define USART13_BDR_BDATA_Msk             (0xfffUL)                 /*!< USART13 BDR: BDATA (Bitfield-Mask: 0xfff)             */
/* ==========================================================  DR  =========================================================== */
#define USART13_DR_DATA_Pos               (0UL)                     /*!< USART13 DR: DATA (Bit 0)                              */
#define USART13_DR_DATA_Msk               (0xffUL)                  /*!< USART13 DR: DATA (Bitfield-Mask: 0xff)                */


/* =========================================================================================================================== */
/* ================                                           UARTn                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  RBR  ========================================================== */
#define UARTn_RBR_RBR_Pos                 (0UL)                     /*!< UARTn RBR: RBR (Bit 0)                                */
#define UARTn_RBR_RBR_Msk                 (0xffUL)                  /*!< UARTn RBR: RBR (Bitfield-Mask: 0xff)                  */
/* ==========================================================  THR  ========================================================== */
#define UARTn_THR_THR_Pos                 (0UL)                     /*!< UARTn THR: THR (Bit 0)                                */
#define UARTn_THR_THR_Msk                 (0xffUL)                  /*!< UARTn THR: THR (Bitfield-Mask: 0xff)                  */
/* ==========================================================  IER  ========================================================== */
#define UARTn_IER_TXEIE_Pos               (3UL)                     /*!< UARTn IER: TXEIE (Bit 3)                              */
#define UARTn_IER_TXEIE_Msk               (0x8UL)                   /*!< UARTn IER: TXEIE (Bitfield-Mask: 0x01)                */
#define UARTn_IER_RLSIE_Pos               (2UL)                     /*!< UARTn IER: RLSIE (Bit 2)                              */
#define UARTn_IER_RLSIE_Msk               (0x4UL)                   /*!< UARTn IER: RLSIE (Bitfield-Mask: 0x01)                */
#define UARTn_IER_THREIE_Pos              (1UL)                     /*!< UARTn IER: THREIE (Bit 1)                             */
#define UARTn_IER_THREIE_Msk              (0x2UL)                   /*!< UARTn IER: THREIE (Bitfield-Mask: 0x01)               */
#define UARTn_IER_DRIE_Pos                (0UL)                     /*!< UARTn IER: DRIE (Bit 0)                               */
#define UARTn_IER_DRIE_Msk                (0x1UL)                   /*!< UARTn IER: DRIE (Bitfield-Mask: 0x01)                 */
/* ==========================================================  IIR  ========================================================== */
#define UARTn_IIR_TXE_Pos                 (4UL)                     /*!< UARTn IIR: TXE (Bit 4)                                */
#define UARTn_IIR_TXE_Msk                 (0x10UL)                  /*!< UARTn IIR: TXE (Bitfield-Mask: 0x01)                  */
#define UARTn_IIR_IID_Pos                 (1UL)                     /*!< UARTn IIR: IID (Bit 1)                                */
#define UARTn_IIR_IID_Msk                 (0x6UL)                   /*!< UARTn IIR: IID (Bitfield-Mask: 0x03)                  */
#define UARTn_IIR_IPEN_Pos                (0UL)                     /*!< UARTn IIR: IPEN (Bit 0)                               */
#define UARTn_IIR_IPEN_Msk                (0x1UL)                   /*!< UARTn IIR: IPEN (Bitfield-Mask: 0x01)                 */
/* ==========================================================  LCR  ========================================================== */
#define UARTn_LCR_BREAK_Pos               (6UL)                     /*!< UARTn LCR: BREAK (Bit 6)                              */
#define UARTn_LCR_BREAK_Msk               (0x40UL)                  /*!< UARTn LCR: BREAK (Bitfield-Mask: 0x01)                */
#define UARTn_LCR_STICKP_Pos              (5UL)                     /*!< UARTn LCR: STICKP (Bit 5)                             */
#define UARTn_LCR_STICKP_Msk              (0x20UL)                  /*!< UARTn LCR: STICKP (Bitfield-Mask: 0x01)               */
#define UARTn_LCR_PARITY_Pos              (4UL)                     /*!< UARTn LCR: PARITY (Bit 4)                             */
#define UARTn_LCR_PARITY_Msk              (0x10UL)                  /*!< UARTn LCR: PARITY (Bitfield-Mask: 0x01)               */
#define UARTn_LCR_PEN_Pos                 (3UL)                     /*!< UARTn LCR: PEN (Bit 3)                                */
#define UARTn_LCR_PEN_Msk                 (0x8UL)                   /*!< UARTn LCR: PEN (Bitfield-Mask: 0x01)                  */
#define UARTn_LCR_STOPBIT_Pos             (2UL)                     /*!< UARTn LCR: STOPBIT (Bit 2)                            */
#define UARTn_LCR_STOPBIT_Msk             (0x4UL)                   /*!< UARTn LCR: STOPBIT (Bitfield-Mask: 0x01)              */
#define UARTn_LCR_DLEN_Pos                (0UL)                     /*!< UARTn LCR: DLEN (Bit 0)                               */
#define UARTn_LCR_DLEN_Msk                (0x3UL)                   /*!< UARTn LCR: DLEN (Bitfield-Mask: 0x03)                 */
/* ==========================================================  DCR  ========================================================== */
#define UARTn_DCR_LBON_Pos                (4UL)                     /*!< UARTn DCR: LBON (Bit 4)                               */
#define UARTn_DCR_LBON_Msk                (0x10UL)                  /*!< UARTn DCR: LBON (Bitfield-Mask: 0x01)                 */
#define UARTn_DCR_RXINV_Pos               (3UL)                     /*!< UARTn DCR: RXINV (Bit 3)                              */
#define UARTn_DCR_RXINV_Msk               (0x8UL)                   /*!< UARTn DCR: RXINV (Bitfield-Mask: 0x01)                */
#define UARTn_DCR_TXINV_Pos               (2UL)                     /*!< UARTn DCR: TXINV (Bit 2)                              */
#define UARTn_DCR_TXINV_Msk               (0x4UL)                   /*!< UARTn DCR: TXINV (Bitfield-Mask: 0x01)                */
/* ==========================================================  LSR  ========================================================== */
#define UARTn_LSR_TEMT_Pos                (6UL)                     /*!< UARTn LSR: TEMT (Bit 6)                               */
#define UARTn_LSR_TEMT_Msk                (0x40UL)                  /*!< UARTn LSR: TEMT (Bitfield-Mask: 0x01)                 */
#define UARTn_LSR_THRE_Pos                (5UL)                     /*!< UARTn LSR: THRE (Bit 5)                               */
#define UARTn_LSR_THRE_Msk                (0x20UL)                  /*!< UARTn LSR: THRE (Bitfield-Mask: 0x01)                 */
#define UARTn_LSR_BI_Pos                  (4UL)                     /*!< UARTn LSR: BI (Bit 4)                                 */
#define UARTn_LSR_BI_Msk                  (0x10UL)                  /*!< UARTn LSR: BI (Bitfield-Mask: 0x01)                   */
#define UARTn_LSR_FE_Pos                  (3UL)                     /*!< UARTn LSR: FE (Bit 3)                                 */
#define UARTn_LSR_FE_Msk                  (0x8UL)                   /*!< UARTn LSR: FE (Bitfield-Mask: 0x01)                   */
#define UARTn_LSR_PE_Pos                  (2UL)                     /*!< UARTn LSR: PE (Bit 2)                                 */
#define UARTn_LSR_PE_Msk                  (0x4UL)                   /*!< UARTn LSR: PE (Bitfield-Mask: 0x01)                   */
#define UARTn_LSR_OE_Pos                  (1UL)                     /*!< UARTn LSR: OE (Bit 1)                                 */
#define UARTn_LSR_OE_Msk                  (0x2UL)                   /*!< UARTn LSR: OE (Bitfield-Mask: 0x01)                   */
#define UARTn_LSR_DR_Pos                  (0UL)                     /*!< UARTn LSR: DR (Bit 0)                                 */
#define UARTn_LSR_DR_Msk                  (0x1UL)                   /*!< UARTn LSR: DR (Bitfield-Mask: 0x01)                   */
/* ==========================================================  BDR  ========================================================== */
#define UARTn_BDR_BDR_Pos                 (0UL)                     /*!< UARTn BDR: BDR (Bit 0)                                */
#define UARTn_BDR_BDR_Msk                 (0xffffUL)                /*!< UARTn BDR: BDR (Bitfield-Mask: 0xffff)                */
/* ==========================================================  BFR  ========================================================== */
#define UARTn_BFR_BFR_Pos                 (0UL)                     /*!< UARTn BFR: BFR (Bit 0)                                */
#define UARTn_BFR_BFR_Msk                 (0xffUL)                  /*!< UARTn BFR: BFR (Bitfield-Mask: 0xff)                  */
/* =========================================================  IDTR  ========================================================== */
#define UARTn_IDTR_SMS_Pos                (7UL)                     /*!< UARTn IDTR: SMS (Bit 7)                               */
#define UARTn_IDTR_SMS_Msk                (0x80UL)                  /*!< UARTn IDTR: SMS (Bitfield-Mask: 0x01)                 */
#define UARTn_IDTR_DMS_Pos                (6UL)                     /*!< UARTn IDTR: DMS (Bit 6)                               */
#define UARTn_IDTR_DMS_Msk                (0x40UL)                  /*!< UARTn IDTR: DMS (Bitfield-Mask: 0x01)                 */
#define UARTn_IDTR_WAITVAL_Pos            (0UL)                     /*!< UARTn IDTR: WAITVAL (Bit 0)                           */
#define UARTn_IDTR_WAITVAL_Msk            (0x7UL)                   /*!< UARTn IDTR: WAITVAL (Bitfield-Mask: 0x07)             */


/* =========================================================================================================================== */
/* ================                                           UART0                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  RBR  ========================================================== */
#define UART0_RBR_RBR_Pos                 (0UL)                     /*!< UART0 RBR: RBR (Bit 0)                                */
#define UART0_RBR_RBR_Msk                 (0xffUL)                  /*!< UART0 RBR: RBR (Bitfield-Mask: 0xff)                  */
/* ==========================================================  THR  ========================================================== */
#define UART0_THR_THR_Pos                 (0UL)                     /*!< UART0 THR: THR (Bit 0)                                */
#define UART0_THR_THR_Msk                 (0xffUL)                  /*!< UART0 THR: THR (Bitfield-Mask: 0xff)                  */
/* ==========================================================  IER  ========================================================== */
#define UART0_IER_TXEIE_Pos               (3UL)                     /*!< UART0 IER: TXEIE (Bit 3)                              */
#define UART0_IER_TXEIE_Msk               (0x8UL)                   /*!< UART0 IER: TXEIE (Bitfield-Mask: 0x01)                */
#define UART0_IER_RLSIE_Pos               (2UL)                     /*!< UART0 IER: RLSIE (Bit 2)                              */
#define UART0_IER_RLSIE_Msk               (0x4UL)                   /*!< UART0 IER: RLSIE (Bitfield-Mask: 0x01)                */
#define UART0_IER_THREIE_Pos              (1UL)                     /*!< UART0 IER: THREIE (Bit 1)                             */
#define UART0_IER_THREIE_Msk              (0x2UL)                   /*!< UART0 IER: THREIE (Bitfield-Mask: 0x01)               */
#define UART0_IER_DRIE_Pos                (0UL)                     /*!< UART0 IER: DRIE (Bit 0)                               */
#define UART0_IER_DRIE_Msk                (0x1UL)                   /*!< UART0 IER: DRIE (Bitfield-Mask: 0x01)                 */
/* ==========================================================  IIR  ========================================================== */
#define UART0_IIR_TXE_Pos                 (4UL)                     /*!< UART0 IIR: TXE (Bit 4)                                */
#define UART0_IIR_TXE_Msk                 (0x10UL)                  /*!< UART0 IIR: TXE (Bitfield-Mask: 0x01)                  */
#define UART0_IIR_IID_Pos                 (1UL)                     /*!< UART0 IIR: IID (Bit 1)                                */
#define UART0_IIR_IID_Msk                 (0x6UL)                   /*!< UART0 IIR: IID (Bitfield-Mask: 0x03)                  */
#define UART0_IIR_IPEN_Pos                (0UL)                     /*!< UART0 IIR: IPEN (Bit 0)                               */
#define UART0_IIR_IPEN_Msk                (0x1UL)                   /*!< UART0 IIR: IPEN (Bitfield-Mask: 0x01)                 */
/* ==========================================================  LCR  ========================================================== */
#define UART0_LCR_BREAK_Pos               (6UL)                     /*!< UART0 LCR: BREAK (Bit 6)                              */
#define UART0_LCR_BREAK_Msk               (0x40UL)                  /*!< UART0 LCR: BREAK (Bitfield-Mask: 0x01)                */
#define UART0_LCR_STICKP_Pos              (5UL)                     /*!< UART0 LCR: STICKP (Bit 5)                             */
#define UART0_LCR_STICKP_Msk              (0x20UL)                  /*!< UART0 LCR: STICKP (Bitfield-Mask: 0x01)               */
#define UART0_LCR_PARITY_Pos              (4UL)                     /*!< UART0 LCR: PARITY (Bit 4)                             */
#define UART0_LCR_PARITY_Msk              (0x10UL)                  /*!< UART0 LCR: PARITY (Bitfield-Mask: 0x01)               */
#define UART0_LCR_PEN_Pos                 (3UL)                     /*!< UART0 LCR: PEN (Bit 3)                                */
#define UART0_LCR_PEN_Msk                 (0x8UL)                   /*!< UART0 LCR: PEN (Bitfield-Mask: 0x01)                  */
#define UART0_LCR_STOPBIT_Pos             (2UL)                     /*!< UART0 LCR: STOPBIT (Bit 2)                            */
#define UART0_LCR_STOPBIT_Msk             (0x4UL)                   /*!< UART0 LCR: STOPBIT (Bitfield-Mask: 0x01)              */
#define UART0_LCR_DLEN_Pos                (0UL)                     /*!< UART0 LCR: DLEN (Bit 0)                               */
#define UART0_LCR_DLEN_Msk                (0x3UL)                   /*!< UART0 LCR: DLEN (Bitfield-Mask: 0x03)                 */
/* ==========================================================  DCR  ========================================================== */
#define UART0_DCR_LBON_Pos                (4UL)                     /*!< UART0 DCR: LBON (Bit 4)                               */
#define UART0_DCR_LBON_Msk                (0x10UL)                  /*!< UART0 DCR: LBON (Bitfield-Mask: 0x01)                 */
#define UART0_DCR_RXINV_Pos               (3UL)                     /*!< UART0 DCR: RXINV (Bit 3)                              */
#define UART0_DCR_RXINV_Msk               (0x8UL)                   /*!< UART0 DCR: RXINV (Bitfield-Mask: 0x01)                */
#define UART0_DCR_TXINV_Pos               (2UL)                     /*!< UART0 DCR: TXINV (Bit 2)                              */
#define UART0_DCR_TXINV_Msk               (0x4UL)                   /*!< UART0 DCR: TXINV (Bitfield-Mask: 0x01)                */
/* ==========================================================  LSR  ========================================================== */
#define UART0_LSR_TEMT_Pos                (6UL)                     /*!< UART0 LSR: TEMT (Bit 6)                               */
#define UART0_LSR_TEMT_Msk                (0x40UL)                  /*!< UART0 LSR: TEMT (Bitfield-Mask: 0x01)                 */
#define UART0_LSR_THRE_Pos                (5UL)                     /*!< UART0 LSR: THRE (Bit 5)                               */
#define UART0_LSR_THRE_Msk                (0x20UL)                  /*!< UART0 LSR: THRE (Bitfield-Mask: 0x01)                 */
#define UART0_LSR_BI_Pos                  (4UL)                     /*!< UART0 LSR: BI (Bit 4)                                 */
#define UART0_LSR_BI_Msk                  (0x10UL)                  /*!< UART0 LSR: BI (Bitfield-Mask: 0x01)                   */
#define UART0_LSR_FE_Pos                  (3UL)                     /*!< UART0 LSR: FE (Bit 3)                                 */
#define UART0_LSR_FE_Msk                  (0x8UL)                   /*!< UART0 LSR: FE (Bitfield-Mask: 0x01)                   */
#define UART0_LSR_PE_Pos                  (2UL)                     /*!< UART0 LSR: PE (Bit 2)                                 */
#define UART0_LSR_PE_Msk                  (0x4UL)                   /*!< UART0 LSR: PE (Bitfield-Mask: 0x01)                   */
#define UART0_LSR_OE_Pos                  (1UL)                     /*!< UART0 LSR: OE (Bit 1)                                 */
#define UART0_LSR_OE_Msk                  (0x2UL)                   /*!< UART0 LSR: OE (Bitfield-Mask: 0x01)                   */
#define UART0_LSR_DR_Pos                  (0UL)                     /*!< UART0 LSR: DR (Bit 0)                                 */
#define UART0_LSR_DR_Msk                  (0x1UL)                   /*!< UART0 LSR: DR (Bitfield-Mask: 0x01)                   */
/* ==========================================================  BDR  ========================================================== */
#define UART0_BDR_BDR_Pos                 (0UL)                     /*!< UART0 BDR: BDR (Bit 0)                                */
#define UART0_BDR_BDR_Msk                 (0xffffUL)                /*!< UART0 BDR: BDR (Bitfield-Mask: 0xffff)                */
/* ==========================================================  BFR  ========================================================== */
#define UART0_BFR_BFR_Pos                 (0UL)                     /*!< UART0 BFR: BFR (Bit 0)                                */
#define UART0_BFR_BFR_Msk                 (0xffUL)                  /*!< UART0 BFR: BFR (Bitfield-Mask: 0xff)                  */
/* =========================================================  IDTR  ========================================================== */
#define UART0_IDTR_SMS_Pos                (7UL)                     /*!< UART0 IDTR: SMS (Bit 7)                               */
#define UART0_IDTR_SMS_Msk                (0x80UL)                  /*!< UART0 IDTR: SMS (Bitfield-Mask: 0x01)                 */
#define UART0_IDTR_DMS_Pos                (6UL)                     /*!< UART0 IDTR: DMS (Bit 6)                               */
#define UART0_IDTR_DMS_Msk                (0x40UL)                  /*!< UART0 IDTR: DMS (Bitfield-Mask: 0x01)                 */
#define UART0_IDTR_WAITVAL_Pos            (0UL)                     /*!< UART0 IDTR: WAITVAL (Bit 0)                           */
#define UART0_IDTR_WAITVAL_Msk            (0x7UL)                   /*!< UART0 IDTR: WAITVAL (Bitfield-Mask: 0x07)             */


/* =========================================================================================================================== */
/* ================                                           UART1                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  RBR  ========================================================== */
#define UART1_RBR_RBR_Pos                 (0UL)                     /*!< UART1 RBR: RBR (Bit 0)                                */
#define UART1_RBR_RBR_Msk                 (0xffUL)                  /*!< UART1 RBR: RBR (Bitfield-Mask: 0xff)                  */
/* ==========================================================  THR  ========================================================== */
#define UART1_THR_THR_Pos                 (0UL)                     /*!< UART1 THR: THR (Bit 0)                                */
#define UART1_THR_THR_Msk                 (0xffUL)                  /*!< UART1 THR: THR (Bitfield-Mask: 0xff)                  */
/* ==========================================================  IER  ========================================================== */
#define UART1_IER_TXEIE_Pos               (3UL)                     /*!< UART1 IER: TXEIE (Bit 3)                              */
#define UART1_IER_TXEIE_Msk               (0x8UL)                   /*!< UART1 IER: TXEIE (Bitfield-Mask: 0x01)                */
#define UART1_IER_RLSIE_Pos               (2UL)                     /*!< UART1 IER: RLSIE (Bit 2)                              */
#define UART1_IER_RLSIE_Msk               (0x4UL)                   /*!< UART1 IER: RLSIE (Bitfield-Mask: 0x01)                */
#define UART1_IER_THREIE_Pos              (1UL)                     /*!< UART1 IER: THREIE (Bit 1)                             */
#define UART1_IER_THREIE_Msk              (0x2UL)                   /*!< UART1 IER: THREIE (Bitfield-Mask: 0x01)               */
#define UART1_IER_DRIE_Pos                (0UL)                     /*!< UART1 IER: DRIE (Bit 0)                               */
#define UART1_IER_DRIE_Msk                (0x1UL)                   /*!< UART1 IER: DRIE (Bitfield-Mask: 0x01)                 */
/* ==========================================================  IIR  ========================================================== */
#define UART1_IIR_TXE_Pos                 (4UL)                     /*!< UART1 IIR: TXE (Bit 4)                                */
#define UART1_IIR_TXE_Msk                 (0x10UL)                  /*!< UART1 IIR: TXE (Bitfield-Mask: 0x01)                  */
#define UART1_IIR_IID_Pos                 (1UL)                     /*!< UART1 IIR: IID (Bit 1)                                */
#define UART1_IIR_IID_Msk                 (0x6UL)                   /*!< UART1 IIR: IID (Bitfield-Mask: 0x03)                  */
#define UART1_IIR_IPEN_Pos                (0UL)                     /*!< UART1 IIR: IPEN (Bit 0)                               */
#define UART1_IIR_IPEN_Msk                (0x1UL)                   /*!< UART1 IIR: IPEN (Bitfield-Mask: 0x01)                 */
/* ==========================================================  LCR  ========================================================== */
#define UART1_LCR_BREAK_Pos               (6UL)                     /*!< UART1 LCR: BREAK (Bit 6)                              */
#define UART1_LCR_BREAK_Msk               (0x40UL)                  /*!< UART1 LCR: BREAK (Bitfield-Mask: 0x01)                */
#define UART1_LCR_STICKP_Pos              (5UL)                     /*!< UART1 LCR: STICKP (Bit 5)                             */
#define UART1_LCR_STICKP_Msk              (0x20UL)                  /*!< UART1 LCR: STICKP (Bitfield-Mask: 0x01)               */
#define UART1_LCR_PARITY_Pos              (4UL)                     /*!< UART1 LCR: PARITY (Bit 4)                             */
#define UART1_LCR_PARITY_Msk              (0x10UL)                  /*!< UART1 LCR: PARITY (Bitfield-Mask: 0x01)               */
#define UART1_LCR_PEN_Pos                 (3UL)                     /*!< UART1 LCR: PEN (Bit 3)                                */
#define UART1_LCR_PEN_Msk                 (0x8UL)                   /*!< UART1 LCR: PEN (Bitfield-Mask: 0x01)                  */
#define UART1_LCR_STOPBIT_Pos             (2UL)                     /*!< UART1 LCR: STOPBIT (Bit 2)                            */
#define UART1_LCR_STOPBIT_Msk             (0x4UL)                   /*!< UART1 LCR: STOPBIT (Bitfield-Mask: 0x01)              */
#define UART1_LCR_DLEN_Pos                (0UL)                     /*!< UART1 LCR: DLEN (Bit 0)                               */
#define UART1_LCR_DLEN_Msk                (0x3UL)                   /*!< UART1 LCR: DLEN (Bitfield-Mask: 0x03)                 */
/* ==========================================================  DCR  ========================================================== */
#define UART1_DCR_LBON_Pos                (4UL)                     /*!< UART1 DCR: LBON (Bit 4)                               */
#define UART1_DCR_LBON_Msk                (0x10UL)                  /*!< UART1 DCR: LBON (Bitfield-Mask: 0x01)                 */
#define UART1_DCR_RXINV_Pos               (3UL)                     /*!< UART1 DCR: RXINV (Bit 3)                              */
#define UART1_DCR_RXINV_Msk               (0x8UL)                   /*!< UART1 DCR: RXINV (Bitfield-Mask: 0x01)                */
#define UART1_DCR_TXINV_Pos               (2UL)                     /*!< UART1 DCR: TXINV (Bit 2)                              */
#define UART1_DCR_TXINV_Msk               (0x4UL)                   /*!< UART1 DCR: TXINV (Bitfield-Mask: 0x01)                */
/* ==========================================================  LSR  ========================================================== */
#define UART1_LSR_TEMT_Pos                (6UL)                     /*!< UART1 LSR: TEMT (Bit 6)                               */
#define UART1_LSR_TEMT_Msk                (0x40UL)                  /*!< UART1 LSR: TEMT (Bitfield-Mask: 0x01)                 */
#define UART1_LSR_THRE_Pos                (5UL)                     /*!< UART1 LSR: THRE (Bit 5)                               */
#define UART1_LSR_THRE_Msk                (0x20UL)                  /*!< UART1 LSR: THRE (Bitfield-Mask: 0x01)                 */
#define UART1_LSR_BI_Pos                  (4UL)                     /*!< UART1 LSR: BI (Bit 4)                                 */
#define UART1_LSR_BI_Msk                  (0x10UL)                  /*!< UART1 LSR: BI (Bitfield-Mask: 0x01)                   */
#define UART1_LSR_FE_Pos                  (3UL)                     /*!< UART1 LSR: FE (Bit 3)                                 */
#define UART1_LSR_FE_Msk                  (0x8UL)                   /*!< UART1 LSR: FE (Bitfield-Mask: 0x01)                   */
#define UART1_LSR_PE_Pos                  (2UL)                     /*!< UART1 LSR: PE (Bit 2)                                 */
#define UART1_LSR_PE_Msk                  (0x4UL)                   /*!< UART1 LSR: PE (Bitfield-Mask: 0x01)                   */
#define UART1_LSR_OE_Pos                  (1UL)                     /*!< UART1 LSR: OE (Bit 1)                                 */
#define UART1_LSR_OE_Msk                  (0x2UL)                   /*!< UART1 LSR: OE (Bitfield-Mask: 0x01)                   */
#define UART1_LSR_DR_Pos                  (0UL)                     /*!< UART1 LSR: DR (Bit 0)                                 */
#define UART1_LSR_DR_Msk                  (0x1UL)                   /*!< UART1 LSR: DR (Bitfield-Mask: 0x01)                   */
/* ==========================================================  BDR  ========================================================== */
#define UART1_BDR_BDR_Pos                 (0UL)                     /*!< UART1 BDR: BDR (Bit 0)                                */
#define UART1_BDR_BDR_Msk                 (0xffffUL)                /*!< UART1 BDR: BDR (Bitfield-Mask: 0xffff)                */
/* ==========================================================  BFR  ========================================================== */
#define UART1_BFR_BFR_Pos                 (0UL)                     /*!< UART1 BFR: BFR (Bit 0)                                */
#define UART1_BFR_BFR_Msk                 (0xffUL)                  /*!< UART1 BFR: BFR (Bitfield-Mask: 0xff)                  */
/* =========================================================  IDTR  ========================================================== */
#define UART1_IDTR_SMS_Pos                (7UL)                     /*!< UART1 IDTR: SMS (Bit 7)                               */
#define UART1_IDTR_SMS_Msk                (0x80UL)                  /*!< UART1 IDTR: SMS (Bitfield-Mask: 0x01)                 */
#define UART1_IDTR_DMS_Pos                (6UL)                     /*!< UART1 IDTR: DMS (Bit 6)                               */
#define UART1_IDTR_DMS_Msk                (0x40UL)                  /*!< UART1 IDTR: DMS (Bitfield-Mask: 0x01)                 */
#define UART1_IDTR_WAITVAL_Pos            (0UL)                     /*!< UART1 IDTR: WAITVAL (Bit 0)                           */
#define UART1_IDTR_WAITVAL_Msk            (0x7UL)                   /*!< UART1 IDTR: WAITVAL (Bitfield-Mask: 0x07)             */


/* =========================================================================================================================== */
/* ================                                           I2Cn                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define I2Cn_CR_I2CnEN_Pos                (7UL)                     /*!< I2Cn CR: I2CnEN (Bit 7)                               */
#define I2Cn_CR_I2CnEN_Msk                (0x80UL)                  /*!< I2Cn CR: I2CnEN (Bitfield-Mask: 0x01)                 */
#define I2Cn_CR_TXDLYENBn_Pos             (6UL)                     /*!< I2Cn CR: TXDLYENBn (Bit 6)                            */
#define I2Cn_CR_TXDLYENBn_Msk             (0x40UL)                  /*!< I2Cn CR: TXDLYENBn (Bitfield-Mask: 0x01)              */
#define I2Cn_CR_I2CnIEN_Pos               (5UL)                     /*!< I2Cn CR: I2CnIEN (Bit 5)                              */
#define I2Cn_CR_I2CnIEN_Msk               (0x20UL)                  /*!< I2Cn CR: I2CnIEN (Bitfield-Mask: 0x01)                */
#define I2Cn_CR_I2CnIFLAG_Pos             (4UL)                     /*!< I2Cn CR: I2CnIFLAG (Bit 4)                            */
#define I2Cn_CR_I2CnIFLAG_Msk             (0x10UL)                  /*!< I2Cn CR: I2CnIFLAG (Bitfield-Mask: 0x01)              */
#define I2Cn_CR_ACKnEN_Pos                (3UL)                     /*!< I2Cn CR: ACKnEN (Bit 3)                               */
#define I2Cn_CR_ACKnEN_Msk                (0x8UL)                   /*!< I2Cn CR: ACKnEN (Bitfield-Mask: 0x01)                 */
#define I2Cn_CR_IMASTERn_Pos              (2UL)                     /*!< I2Cn CR: IMASTERn (Bit 2)                             */
#define I2Cn_CR_IMASTERn_Msk              (0x4UL)                   /*!< I2Cn CR: IMASTERn (Bitfield-Mask: 0x01)               */
#define I2Cn_CR_STOPCn_Pos                (1UL)                     /*!< I2Cn CR: STOPCn (Bit 1)                               */
#define I2Cn_CR_STOPCn_Msk                (0x2UL)                   /*!< I2Cn CR: STOPCn (Bitfield-Mask: 0x01)                 */
#define I2Cn_CR_STARTCn_Pos               (0UL)                     /*!< I2Cn CR: STARTCn (Bit 0)                              */
#define I2Cn_CR_STARTCn_Msk               (0x1UL)                   /*!< I2Cn CR: STARTCn (Bitfield-Mask: 0x01)                */
/* ==========================================================  ST  =========================================================== */
#define I2Cn_ST_GCALLn_Pos                (7UL)                     /*!< I2Cn ST: GCALLn (Bit 7)                               */
#define I2Cn_ST_GCALLn_Msk                (0x80UL)                  /*!< I2Cn ST: GCALLn (Bitfield-Mask: 0x01)                 */
#define I2Cn_ST_TENDn_Pos                 (6UL)                     /*!< I2Cn ST: TENDn (Bit 6)                                */
#define I2Cn_ST_TENDn_Msk                 (0x40UL)                  /*!< I2Cn ST: TENDn (Bitfield-Mask: 0x01)                  */
#define I2Cn_ST_STOPDn_Pos                (5UL)                     /*!< I2Cn ST: STOPDn (Bit 5)                               */
#define I2Cn_ST_STOPDn_Msk                (0x20UL)                  /*!< I2Cn ST: STOPDn (Bitfield-Mask: 0x01)                 */
#define I2Cn_ST_SSELn_Pos                 (4UL)                     /*!< I2Cn ST: SSELn (Bit 4)                                */
#define I2Cn_ST_SSELn_Msk                 (0x10UL)                  /*!< I2Cn ST: SSELn (Bitfield-Mask: 0x01)                  */
#define I2Cn_ST_MLOSTn_Pos                (3UL)                     /*!< I2Cn ST: MLOSTn (Bit 3)                               */
#define I2Cn_ST_MLOSTn_Msk                (0x8UL)                   /*!< I2Cn ST: MLOSTn (Bitfield-Mask: 0x01)                 */
#define I2Cn_ST_BUSYn_Pos                 (2UL)                     /*!< I2Cn ST: BUSYn (Bit 2)                                */
#define I2Cn_ST_BUSYn_Msk                 (0x4UL)                   /*!< I2Cn ST: BUSYn (Bitfield-Mask: 0x01)                  */
#define I2Cn_ST_TMODEn_Pos                (1UL)                     /*!< I2Cn ST: TMODEn (Bit 1)                               */
#define I2Cn_ST_TMODEn_Msk                (0x2UL)                   /*!< I2Cn ST: TMODEn (Bitfield-Mask: 0x01)                 */
#define I2Cn_ST_RXACKn_Pos                (0UL)                     /*!< I2Cn ST: RXACKn (Bit 0)                               */
#define I2Cn_ST_RXACKn_Msk                (0x1UL)                   /*!< I2Cn ST: RXACKn (Bitfield-Mask: 0x01)                 */
/* =========================================================  SAR1  ========================================================== */
#define I2Cn_SAR1_SLAn_Pos                (1UL)                     /*!< I2Cn SAR1: SLAn (Bit 1)                               */
#define I2Cn_SAR1_SLAn_Msk                (0xfeUL)                  /*!< I2Cn SAR1: SLAn (Bitfield-Mask: 0x7f)                 */
#define I2Cn_SAR1_GCALLnEN_Pos            (0UL)                     /*!< I2Cn SAR1: GCALLnEN (Bit 0)                           */
#define I2Cn_SAR1_GCALLnEN_Msk            (0x1UL)                   /*!< I2Cn SAR1: GCALLnEN (Bitfield-Mask: 0x01)             */
/* =========================================================  SAR2  ========================================================== */
#define I2Cn_SAR2_SLAn_Pos                (1UL)                     /*!< I2Cn SAR2: SLAn (Bit 1)                               */
#define I2Cn_SAR2_SLAn_Msk                (0xfeUL)                  /*!< I2Cn SAR2: SLAn (Bitfield-Mask: 0x7f)                 */
#define I2Cn_SAR2_GCALLnEN_Pos            (0UL)                     /*!< I2Cn SAR2: GCALLnEN (Bit 0)                           */
#define I2Cn_SAR2_GCALLnEN_Msk            (0x1UL)                   /*!< I2Cn SAR2: GCALLnEN (Bitfield-Mask: 0x01)             */
/* ==========================================================  DR  =========================================================== */
#define I2Cn_DR_DATA_Pos                  (0UL)                     /*!< I2Cn DR: DATA (Bit 0)                                 */
#define I2Cn_DR_DATA_Msk                  (0xffUL)                  /*!< I2Cn DR: DATA (Bitfield-Mask: 0xff)                   */
/* =========================================================  SDHR  ========================================================== */
#define I2Cn_SDHR_HLDT_Pos                (0UL)                     /*!< I2Cn SDHR: HLDT (Bit 0)                               */
#define I2Cn_SDHR_HLDT_Msk                (0xfffUL)                 /*!< I2Cn SDHR: HLDT (Bitfield-Mask: 0xfff)                */
/* =========================================================  SCLR  ========================================================== */
#define I2Cn_SCLR_SCLL_Pos                (0UL)                     /*!< I2Cn SCLR: SCLL (Bit 0)                               */
#define I2Cn_SCLR_SCLL_Msk                (0xfffUL)                 /*!< I2Cn SCLR: SCLL (Bitfield-Mask: 0xfff)                */
/* =========================================================  SCHR  ========================================================== */
#define I2Cn_SCHR_SCLH_Pos                (0UL)                     /*!< I2Cn SCHR: SCLH (Bit 0)                               */
#define I2Cn_SCHR_SCLH_Msk                (0xfffUL)                 /*!< I2Cn SCHR: SCLH (Bitfield-Mask: 0xfff)                */


/* =========================================================================================================================== */
/* ================                                           I2C0                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define I2C0_CR_I2CnEN_Pos                (7UL)                     /*!< I2C0 CR: I2CnEN (Bit 7)                               */
#define I2C0_CR_I2CnEN_Msk                (0x80UL)                  /*!< I2C0 CR: I2CnEN (Bitfield-Mask: 0x01)                 */
#define I2C0_CR_TXDLYENBn_Pos             (6UL)                     /*!< I2C0 CR: TXDLYENBn (Bit 6)                            */
#define I2C0_CR_TXDLYENBn_Msk             (0x40UL)                  /*!< I2C0 CR: TXDLYENBn (Bitfield-Mask: 0x01)              */
#define I2C0_CR_I2CnIEN_Pos               (5UL)                     /*!< I2C0 CR: I2CnIEN (Bit 5)                              */
#define I2C0_CR_I2CnIEN_Msk               (0x20UL)                  /*!< I2C0 CR: I2CnIEN (Bitfield-Mask: 0x01)                */
#define I2C0_CR_I2CnIFLAG_Pos             (4UL)                     /*!< I2C0 CR: I2CnIFLAG (Bit 4)                            */
#define I2C0_CR_I2CnIFLAG_Msk             (0x10UL)                  /*!< I2C0 CR: I2CnIFLAG (Bitfield-Mask: 0x01)              */
#define I2C0_CR_ACKnEN_Pos                (3UL)                     /*!< I2C0 CR: ACKnEN (Bit 3)                               */
#define I2C0_CR_ACKnEN_Msk                (0x8UL)                   /*!< I2C0 CR: ACKnEN (Bitfield-Mask: 0x01)                 */
#define I2C0_CR_IMASTERn_Pos              (2UL)                     /*!< I2C0 CR: IMASTERn (Bit 2)                             */
#define I2C0_CR_IMASTERn_Msk              (0x4UL)                   /*!< I2C0 CR: IMASTERn (Bitfield-Mask: 0x01)               */
#define I2C0_CR_STOPCn_Pos                (1UL)                     /*!< I2C0 CR: STOPCn (Bit 1)                               */
#define I2C0_CR_STOPCn_Msk                (0x2UL)                   /*!< I2C0 CR: STOPCn (Bitfield-Mask: 0x01)                 */
#define I2C0_CR_STARTCn_Pos               (0UL)                     /*!< I2C0 CR: STARTCn (Bit 0)                              */
#define I2C0_CR_STARTCn_Msk               (0x1UL)                   /*!< I2C0 CR: STARTCn (Bitfield-Mask: 0x01)                */
/* ==========================================================  ST  =========================================================== */
#define I2C0_ST_GCALLn_Pos                (7UL)                     /*!< I2C0 ST: GCALLn (Bit 7)                               */
#define I2C0_ST_GCALLn_Msk                (0x80UL)                  /*!< I2C0 ST: GCALLn (Bitfield-Mask: 0x01)                 */
#define I2C0_ST_TENDn_Pos                 (6UL)                     /*!< I2C0 ST: TENDn (Bit 6)                                */
#define I2C0_ST_TENDn_Msk                 (0x40UL)                  /*!< I2C0 ST: TENDn (Bitfield-Mask: 0x01)                  */
#define I2C0_ST_STOPDn_Pos                (5UL)                     /*!< I2C0 ST: STOPDn (Bit 5)                               */
#define I2C0_ST_STOPDn_Msk                (0x20UL)                  /*!< I2C0 ST: STOPDn (Bitfield-Mask: 0x01)                 */
#define I2C0_ST_SSELn_Pos                 (4UL)                     /*!< I2C0 ST: SSELn (Bit 4)                                */
#define I2C0_ST_SSELn_Msk                 (0x10UL)                  /*!< I2C0 ST: SSELn (Bitfield-Mask: 0x01)                  */
#define I2C0_ST_MLOSTn_Pos                (3UL)                     /*!< I2C0 ST: MLOSTn (Bit 3)                               */
#define I2C0_ST_MLOSTn_Msk                (0x8UL)                   /*!< I2C0 ST: MLOSTn (Bitfield-Mask: 0x01)                 */
#define I2C0_ST_BUSYn_Pos                 (2UL)                     /*!< I2C0 ST: BUSYn (Bit 2)                                */
#define I2C0_ST_BUSYn_Msk                 (0x4UL)                   /*!< I2C0 ST: BUSYn (Bitfield-Mask: 0x01)                  */
#define I2C0_ST_TMODEn_Pos                (1UL)                     /*!< I2C0 ST: TMODEn (Bit 1)                               */
#define I2C0_ST_TMODEn_Msk                (0x2UL)                   /*!< I2C0 ST: TMODEn (Bitfield-Mask: 0x01)                 */
#define I2C0_ST_RXACKn_Pos                (0UL)                     /*!< I2C0 ST: RXACKn (Bit 0)                               */
#define I2C0_ST_RXACKn_Msk                (0x1UL)                   /*!< I2C0 ST: RXACKn (Bitfield-Mask: 0x01)                 */
/* =========================================================  SAR1  ========================================================== */
#define I2C0_SAR1_SLAn_Pos                (1UL)                     /*!< I2C0 SAR1: SLAn (Bit 1)                               */
#define I2C0_SAR1_SLAn_Msk                (0xfeUL)                  /*!< I2C0 SAR1: SLAn (Bitfield-Mask: 0x7f)                 */
#define I2C0_SAR1_GCALLnEN_Pos            (0UL)                     /*!< I2C0 SAR1: GCALLnEN (Bit 0)                           */
#define I2C0_SAR1_GCALLnEN_Msk            (0x1UL)                   /*!< I2C0 SAR1: GCALLnEN (Bitfield-Mask: 0x01)             */
/* =========================================================  SAR2  ========================================================== */
#define I2C0_SAR2_SLAn_Pos                (1UL)                     /*!< I2C0 SAR2: SLAn (Bit 1)                               */
#define I2C0_SAR2_SLAn_Msk                (0xfeUL)                  /*!< I2C0 SAR2: SLAn (Bitfield-Mask: 0x7f)                 */
#define I2C0_SAR2_GCALLnEN_Pos            (0UL)                     /*!< I2C0 SAR2: GCALLnEN (Bit 0)                           */
#define I2C0_SAR2_GCALLnEN_Msk            (0x1UL)                   /*!< I2C0 SAR2: GCALLnEN (Bitfield-Mask: 0x01)             */
/* ==========================================================  DR  =========================================================== */
#define I2C0_DR_DATA_Pos                  (0UL)                     /*!< I2C0 DR: DATA (Bit 0)                                 */
#define I2C0_DR_DATA_Msk                  (0xffUL)                  /*!< I2C0 DR: DATA (Bitfield-Mask: 0xff)                   */
/* =========================================================  SDHR  ========================================================== */
#define I2C0_SDHR_HLDT_Pos                (0UL)                     /*!< I2C0 SDHR: HLDT (Bit 0)                               */
#define I2C0_SDHR_HLDT_Msk                (0xfffUL)                 /*!< I2C0 SDHR: HLDT (Bitfield-Mask: 0xfff)                */
/* =========================================================  SCLR  ========================================================== */
#define I2C0_SCLR_SCLL_Pos                (0UL)                     /*!< I2C0 SCLR: SCLL (Bit 0)                               */
#define I2C0_SCLR_SCLL_Msk                (0xfffUL)                 /*!< I2C0 SCLR: SCLL (Bitfield-Mask: 0xfff)                */
/* =========================================================  SCHR  ========================================================== */
#define I2C0_SCHR_SCLH_Pos                (0UL)                     /*!< I2C0 SCHR: SCLH (Bit 0)                               */
#define I2C0_SCHR_SCLH_Msk                (0xfffUL)                 /*!< I2C0 SCHR: SCLH (Bitfield-Mask: 0xfff)                */


/* =========================================================================================================================== */
/* ================                                           I2C1                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define I2C1_CR_I2CnEN_Pos                (7UL)                     /*!< I2C1 CR: I2CnEN (Bit 7)                               */
#define I2C1_CR_I2CnEN_Msk                (0x80UL)                  /*!< I2C1 CR: I2CnEN (Bitfield-Mask: 0x01)                 */
#define I2C1_CR_TXDLYENBn_Pos             (6UL)                     /*!< I2C1 CR: TXDLYENBn (Bit 6)                            */
#define I2C1_CR_TXDLYENBn_Msk             (0x40UL)                  /*!< I2C1 CR: TXDLYENBn (Bitfield-Mask: 0x01)              */
#define I2C1_CR_I2CnIEN_Pos               (5UL)                     /*!< I2C1 CR: I2CnIEN (Bit 5)                              */
#define I2C1_CR_I2CnIEN_Msk               (0x20UL)                  /*!< I2C1 CR: I2CnIEN (Bitfield-Mask: 0x01)                */
#define I2C1_CR_I2CnIFLAG_Pos             (4UL)                     /*!< I2C1 CR: I2CnIFLAG (Bit 4)                            */
#define I2C1_CR_I2CnIFLAG_Msk             (0x10UL)                  /*!< I2C1 CR: I2CnIFLAG (Bitfield-Mask: 0x01)              */
#define I2C1_CR_ACKnEN_Pos                (3UL)                     /*!< I2C1 CR: ACKnEN (Bit 3)                               */
#define I2C1_CR_ACKnEN_Msk                (0x8UL)                   /*!< I2C1 CR: ACKnEN (Bitfield-Mask: 0x01)                 */
#define I2C1_CR_IMASTERn_Pos              (2UL)                     /*!< I2C1 CR: IMASTERn (Bit 2)                             */
#define I2C1_CR_IMASTERn_Msk              (0x4UL)                   /*!< I2C1 CR: IMASTERn (Bitfield-Mask: 0x01)               */
#define I2C1_CR_STOPCn_Pos                (1UL)                     /*!< I2C1 CR: STOPCn (Bit 1)                               */
#define I2C1_CR_STOPCn_Msk                (0x2UL)                   /*!< I2C1 CR: STOPCn (Bitfield-Mask: 0x01)                 */
#define I2C1_CR_STARTCn_Pos               (0UL)                     /*!< I2C1 CR: STARTCn (Bit 0)                              */
#define I2C1_CR_STARTCn_Msk               (0x1UL)                   /*!< I2C1 CR: STARTCn (Bitfield-Mask: 0x01)                */
/* ==========================================================  ST  =========================================================== */
#define I2C1_ST_GCALLn_Pos                (7UL)                     /*!< I2C1 ST: GCALLn (Bit 7)                               */
#define I2C1_ST_GCALLn_Msk                (0x80UL)                  /*!< I2C1 ST: GCALLn (Bitfield-Mask: 0x01)                 */
#define I2C1_ST_TENDn_Pos                 (6UL)                     /*!< I2C1 ST: TENDn (Bit 6)                                */
#define I2C1_ST_TENDn_Msk                 (0x40UL)                  /*!< I2C1 ST: TENDn (Bitfield-Mask: 0x01)                  */
#define I2C1_ST_STOPDn_Pos                (5UL)                     /*!< I2C1 ST: STOPDn (Bit 5)                               */
#define I2C1_ST_STOPDn_Msk                (0x20UL)                  /*!< I2C1 ST: STOPDn (Bitfield-Mask: 0x01)                 */
#define I2C1_ST_SSELn_Pos                 (4UL)                     /*!< I2C1 ST: SSELn (Bit 4)                                */
#define I2C1_ST_SSELn_Msk                 (0x10UL)                  /*!< I2C1 ST: SSELn (Bitfield-Mask: 0x01)                  */
#define I2C1_ST_MLOSTn_Pos                (3UL)                     /*!< I2C1 ST: MLOSTn (Bit 3)                               */
#define I2C1_ST_MLOSTn_Msk                (0x8UL)                   /*!< I2C1 ST: MLOSTn (Bitfield-Mask: 0x01)                 */
#define I2C1_ST_BUSYn_Pos                 (2UL)                     /*!< I2C1 ST: BUSYn (Bit 2)                                */
#define I2C1_ST_BUSYn_Msk                 (0x4UL)                   /*!< I2C1 ST: BUSYn (Bitfield-Mask: 0x01)                  */
#define I2C1_ST_TMODEn_Pos                (1UL)                     /*!< I2C1 ST: TMODEn (Bit 1)                               */
#define I2C1_ST_TMODEn_Msk                (0x2UL)                   /*!< I2C1 ST: TMODEn (Bitfield-Mask: 0x01)                 */
#define I2C1_ST_RXACKn_Pos                (0UL)                     /*!< I2C1 ST: RXACKn (Bit 0)                               */
#define I2C1_ST_RXACKn_Msk                (0x1UL)                   /*!< I2C1 ST: RXACKn (Bitfield-Mask: 0x01)                 */
/* =========================================================  SAR1  ========================================================== */
#define I2C1_SAR1_SLAn_Pos                (1UL)                     /*!< I2C1 SAR1: SLAn (Bit 1)                               */
#define I2C1_SAR1_SLAn_Msk                (0xfeUL)                  /*!< I2C1 SAR1: SLAn (Bitfield-Mask: 0x7f)                 */
#define I2C1_SAR1_GCALLnEN_Pos            (0UL)                     /*!< I2C1 SAR1: GCALLnEN (Bit 0)                           */
#define I2C1_SAR1_GCALLnEN_Msk            (0x1UL)                   /*!< I2C1 SAR1: GCALLnEN (Bitfield-Mask: 0x01)             */
/* =========================================================  SAR2  ========================================================== */
#define I2C1_SAR2_SLAn_Pos                (1UL)                     /*!< I2C1 SAR2: SLAn (Bit 1)                               */
#define I2C1_SAR2_SLAn_Msk                (0xfeUL)                  /*!< I2C1 SAR2: SLAn (Bitfield-Mask: 0x7f)                 */
#define I2C1_SAR2_GCALLnEN_Pos            (0UL)                     /*!< I2C1 SAR2: GCALLnEN (Bit 0)                           */
#define I2C1_SAR2_GCALLnEN_Msk            (0x1UL)                   /*!< I2C1 SAR2: GCALLnEN (Bitfield-Mask: 0x01)             */
/* ==========================================================  DR  =========================================================== */
#define I2C1_DR_DATA_Pos                  (0UL)                     /*!< I2C1 DR: DATA (Bit 0)                                 */
#define I2C1_DR_DATA_Msk                  (0xffUL)                  /*!< I2C1 DR: DATA (Bitfield-Mask: 0xff)                   */
/* =========================================================  SDHR  ========================================================== */
#define I2C1_SDHR_HLDT_Pos                (0UL)                     /*!< I2C1 SDHR: HLDT (Bit 0)                               */
#define I2C1_SDHR_HLDT_Msk                (0xfffUL)                 /*!< I2C1 SDHR: HLDT (Bitfield-Mask: 0xfff)                */
/* =========================================================  SCLR  ========================================================== */
#define I2C1_SCLR_SCLL_Pos                (0UL)                     /*!< I2C1 SCLR: SCLL (Bit 0)                               */
#define I2C1_SCLR_SCLL_Msk                (0xfffUL)                 /*!< I2C1 SCLR: SCLL (Bitfield-Mask: 0xfff)                */
/* =========================================================  SCHR  ========================================================== */
#define I2C1_SCHR_SCLH_Pos                (0UL)                     /*!< I2C1 SCHR: SCLH (Bit 0)                               */
#define I2C1_SCHR_SCLH_Msk                (0xfffUL)                 /*!< I2C1 SCHR: SCLH (Bitfield-Mask: 0xfff)                */


/* =========================================================================================================================== */
/* ================                                           I2C2                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define I2C2_CR_I2CnEN_Pos                (7UL)                     /*!< I2C2 CR: I2CnEN (Bit 7)                               */
#define I2C2_CR_I2CnEN_Msk                (0x80UL)                  /*!< I2C2 CR: I2CnEN (Bitfield-Mask: 0x01)                 */
#define I2C2_CR_TXDLYENBn_Pos             (6UL)                     /*!< I2C2 CR: TXDLYENBn (Bit 6)                            */
#define I2C2_CR_TXDLYENBn_Msk             (0x40UL)                  /*!< I2C2 CR: TXDLYENBn (Bitfield-Mask: 0x01)              */
#define I2C2_CR_I2CnIEN_Pos               (5UL)                     /*!< I2C2 CR: I2CnIEN (Bit 5)                              */
#define I2C2_CR_I2CnIEN_Msk               (0x20UL)                  /*!< I2C2 CR: I2CnIEN (Bitfield-Mask: 0x01)                */
#define I2C2_CR_I2CnIFLAG_Pos             (4UL)                     /*!< I2C2 CR: I2CnIFLAG (Bit 4)                            */
#define I2C2_CR_I2CnIFLAG_Msk             (0x10UL)                  /*!< I2C2 CR: I2CnIFLAG (Bitfield-Mask: 0x01)              */
#define I2C2_CR_ACKnEN_Pos                (3UL)                     /*!< I2C2 CR: ACKnEN (Bit 3)                               */
#define I2C2_CR_ACKnEN_Msk                (0x8UL)                   /*!< I2C2 CR: ACKnEN (Bitfield-Mask: 0x01)                 */
#define I2C2_CR_IMASTERn_Pos              (2UL)                     /*!< I2C2 CR: IMASTERn (Bit 2)                             */
#define I2C2_CR_IMASTERn_Msk              (0x4UL)                   /*!< I2C2 CR: IMASTERn (Bitfield-Mask: 0x01)               */
#define I2C2_CR_STOPCn_Pos                (1UL)                     /*!< I2C2 CR: STOPCn (Bit 1)                               */
#define I2C2_CR_STOPCn_Msk                (0x2UL)                   /*!< I2C2 CR: STOPCn (Bitfield-Mask: 0x01)                 */
#define I2C2_CR_STARTCn_Pos               (0UL)                     /*!< I2C2 CR: STARTCn (Bit 0)                              */
#define I2C2_CR_STARTCn_Msk               (0x1UL)                   /*!< I2C2 CR: STARTCn (Bitfield-Mask: 0x01)                */
/* ==========================================================  ST  =========================================================== */
#define I2C2_ST_GCALLn_Pos                (7UL)                     /*!< I2C2 ST: GCALLn (Bit 7)                               */
#define I2C2_ST_GCALLn_Msk                (0x80UL)                  /*!< I2C2 ST: GCALLn (Bitfield-Mask: 0x01)                 */
#define I2C2_ST_TENDn_Pos                 (6UL)                     /*!< I2C2 ST: TENDn (Bit 6)                                */
#define I2C2_ST_TENDn_Msk                 (0x40UL)                  /*!< I2C2 ST: TENDn (Bitfield-Mask: 0x01)                  */
#define I2C2_ST_STOPDn_Pos                (5UL)                     /*!< I2C2 ST: STOPDn (Bit 5)                               */
#define I2C2_ST_STOPDn_Msk                (0x20UL)                  /*!< I2C2 ST: STOPDn (Bitfield-Mask: 0x01)                 */
#define I2C2_ST_SSELn_Pos                 (4UL)                     /*!< I2C2 ST: SSELn (Bit 4)                                */
#define I2C2_ST_SSELn_Msk                 (0x10UL)                  /*!< I2C2 ST: SSELn (Bitfield-Mask: 0x01)                  */
#define I2C2_ST_MLOSTn_Pos                (3UL)                     /*!< I2C2 ST: MLOSTn (Bit 3)                               */
#define I2C2_ST_MLOSTn_Msk                (0x8UL)                   /*!< I2C2 ST: MLOSTn (Bitfield-Mask: 0x01)                 */
#define I2C2_ST_BUSYn_Pos                 (2UL)                     /*!< I2C2 ST: BUSYn (Bit 2)                                */
#define I2C2_ST_BUSYn_Msk                 (0x4UL)                   /*!< I2C2 ST: BUSYn (Bitfield-Mask: 0x01)                  */
#define I2C2_ST_TMODEn_Pos                (1UL)                     /*!< I2C2 ST: TMODEn (Bit 1)                               */
#define I2C2_ST_TMODEn_Msk                (0x2UL)                   /*!< I2C2 ST: TMODEn (Bitfield-Mask: 0x01)                 */
#define I2C2_ST_RXACKn_Pos                (0UL)                     /*!< I2C2 ST: RXACKn (Bit 0)                               */
#define I2C2_ST_RXACKn_Msk                (0x1UL)                   /*!< I2C2 ST: RXACKn (Bitfield-Mask: 0x01)                 */
/* =========================================================  SAR1  ========================================================== */
#define I2C2_SAR1_SLAn_Pos                (1UL)                     /*!< I2C2 SAR1: SLAn (Bit 1)                               */
#define I2C2_SAR1_SLAn_Msk                (0xfeUL)                  /*!< I2C2 SAR1: SLAn (Bitfield-Mask: 0x7f)                 */
#define I2C2_SAR1_GCALLnEN_Pos            (0UL)                     /*!< I2C2 SAR1: GCALLnEN (Bit 0)                           */
#define I2C2_SAR1_GCALLnEN_Msk            (0x1UL)                   /*!< I2C2 SAR1: GCALLnEN (Bitfield-Mask: 0x01)             */
/* =========================================================  SAR2  ========================================================== */
#define I2C2_SAR2_SLAn_Pos                (1UL)                     /*!< I2C2 SAR2: SLAn (Bit 1)                               */
#define I2C2_SAR2_SLAn_Msk                (0xfeUL)                  /*!< I2C2 SAR2: SLAn (Bitfield-Mask: 0x7f)                 */
#define I2C2_SAR2_GCALLnEN_Pos            (0UL)                     /*!< I2C2 SAR2: GCALLnEN (Bit 0)                           */
#define I2C2_SAR2_GCALLnEN_Msk            (0x1UL)                   /*!< I2C2 SAR2: GCALLnEN (Bitfield-Mask: 0x01)             */
/* ==========================================================  DR  =========================================================== */
#define I2C2_DR_DATA_Pos                  (0UL)                     /*!< I2C2 DR: DATA (Bit 0)                                 */
#define I2C2_DR_DATA_Msk                  (0xffUL)                  /*!< I2C2 DR: DATA (Bitfield-Mask: 0xff)                   */
/* =========================================================  SDHR  ========================================================== */
#define I2C2_SDHR_HLDT_Pos                (0UL)                     /*!< I2C2 SDHR: HLDT (Bit 0)                               */
#define I2C2_SDHR_HLDT_Msk                (0xfffUL)                 /*!< I2C2 SDHR: HLDT (Bitfield-Mask: 0xfff)                */
/* =========================================================  SCLR  ========================================================== */
#define I2C2_SCLR_SCLL_Pos                (0UL)                     /*!< I2C2 SCLR: SCLL (Bit 0)                               */
#define I2C2_SCLR_SCLL_Msk                (0xfffUL)                 /*!< I2C2 SCLR: SCLL (Bitfield-Mask: 0xfff)                */
/* =========================================================  SCHR  ========================================================== */
#define I2C2_SCHR_SCLH_Pos                (0UL)                     /*!< I2C2 SCHR: SCLH (Bit 0)                               */
#define I2C2_SCHR_SCLH_Msk                (0xfffUL)                 /*!< I2C2 SCHR: SCLH (Bitfield-Mask: 0xfff)                */


/* =========================================================================================================================== */
/* ================                                            LCD                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define LCD_CR_IRSEL_Pos                  (6UL)                     /*!< LCD CR: IRSEL (Bit 6)                                 */
#define LCD_CR_IRSEL_Msk                  (0xc0UL)                  /*!< LCD CR: IRSEL (Bitfield-Mask: 0x03)                   */
#define LCD_CR_DBS_Pos                    (3UL)                     /*!< LCD CR: DBS (Bit 3)                                   */
#define LCD_CR_DBS_Msk                    (0x38UL)                  /*!< LCD CR: DBS (Bitfield-Mask: 0x07)                     */
#define LCD_CR_LCLK_Pos                   (1UL)                     /*!< LCD CR: LCLK (Bit 1)                                  */
#define LCD_CR_LCLK_Msk                   (0x6UL)                   /*!< LCD CR: LCLK (Bitfield-Mask: 0x03)                    */
#define LCD_CR_DISP_Pos                   (0UL)                     /*!< LCD CR: DISP (Bit 0)                                  */
#define LCD_CR_DISP_Msk                   (0x1UL)                   /*!< LCD CR: DISP (Bitfield-Mask: 0x01)                    */
/* =========================================================  BCCR  ========================================================== */
#define LCD_BCCR_LCDABC_Pos               (12UL)                    /*!< LCD BCCR: LCDABC (Bit 12)                             */
#define LCD_BCCR_LCDABC_Msk               (0x1000UL)                /*!< LCD BCCR: LCDABC (Bitfield-Mask: 0x01)                */
#define LCD_BCCR_BMSEL_Pos                (8UL)                     /*!< LCD BCCR: BMSEL (Bit 8)                               */
#define LCD_BCCR_BMSEL_Msk                (0x700UL)                 /*!< LCD BCCR: BMSEL (Bitfield-Mask: 0x07)                 */
#define LCD_BCCR_LCTEN_Pos                (5UL)                     /*!< LCD BCCR: LCTEN (Bit 5)                               */
#define LCD_BCCR_LCTEN_Msk                (0x20UL)                  /*!< LCD BCCR: LCTEN (Bitfield-Mask: 0x01)                 */
#define LCD_BCCR_VLCD_Pos                 (0UL)                     /*!< LCD BCCR: VLCD (Bit 0)                                */
#define LCD_BCCR_VLCD_Msk                 (0xfUL)                   /*!< LCD BCCR: VLCD (Bitfield-Mask: 0x0f)                  */
/* ==========================================================  DR0  ========================================================== */
/* ==========================================================  DR1  ========================================================== */
/* ==========================================================  DR2  ========================================================== */
/* ==========================================================  DR3  ========================================================== */
/* ==========================================================  DR4  ========================================================== */
/* ==========================================================  DR5  ========================================================== */
/* ==========================================================  DR6  ========================================================== */
/* ==========================================================  DR7  ========================================================== */
/* ==========================================================  DR8  ========================================================== */
/* ==========================================================  DR9  ========================================================== */
/* =========================================================  DR10  ========================================================== */
/* =========================================================  DR11  ========================================================== */
/* =========================================================  DR12  ========================================================== */
/* =========================================================  DR13  ========================================================== */
/* =========================================================  DR14  ========================================================== */
/* =========================================================  DR15  ========================================================== */
/* =========================================================  DR16  ========================================================== */
/* =========================================================  DR17  ========================================================== */
/* =========================================================  DR18  ========================================================== */
/* =========================================================  DR19  ========================================================== */
/* =========================================================  DR20  ========================================================== */
/* =========================================================  DR21  ========================================================== */
/* =========================================================  DR22  ========================================================== */
/* =========================================================  DR23  ========================================================== */
/* =========================================================  DR24  ========================================================== */
/* =========================================================  DR25  ========================================================== */
/* =========================================================  DR26  ========================================================== */
/* =========================================================  DR27  ========================================================== */
/* =========================================================  DR28  ========================================================== */
/* =========================================================  DR29  ========================================================== */
/* =========================================================  DR30  ========================================================== */
/* =========================================================  DR31  ========================================================== */
/* =========================================================  DR32  ========================================================== */
/* =========================================================  DR33  ========================================================== */
/* =========================================================  DR34  ========================================================== */
/* =========================================================  DR35  ========================================================== */
/* =========================================================  DR36  ========================================================== */
/* =========================================================  DR37  ========================================================== */
/* =========================================================  DR38  ========================================================== */
/* =========================================================  DR39  ========================================================== */
/* =========================================================  DR40  ========================================================== */
/* =========================================================  DR41  ========================================================== */
/* =========================================================  DR42  ========================================================== */
/* =========================================================  DR43  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define CRC_CR_MODS_Pos                   (7UL)                     /*!< CRC CR: MODS (Bit 7)                                  */
#define CRC_CR_MODS_Msk                   (0x80UL)                  /*!< CRC CR: MODS (Bitfield-Mask: 0x01)                    */
#define CRC_CR_RLTCLR_Pos                 (6UL)                     /*!< CRC CR: RLTCLR (Bit 6)                                */
#define CRC_CR_RLTCLR_Msk                 (0x40UL)                  /*!< CRC CR: RLTCLR (Bitfield-Mask: 0x01)                  */
#define CRC_CR_MDSEL_Pos                  (5UL)                     /*!< CRC CR: MDSEL (Bit 5)                                 */
#define CRC_CR_MDSEL_Msk                  (0x20UL)                  /*!< CRC CR: MDSEL (Bitfield-Mask: 0x01)                   */
#define CRC_CR_POLYS_Pos                  (4UL)                     /*!< CRC CR: POLYS (Bit 4)                                 */
#define CRC_CR_POLYS_Msk                  (0x10UL)                  /*!< CRC CR: POLYS (Bitfield-Mask: 0x01)                   */
#define CRC_CR_SARINC_Pos                 (3UL)                     /*!< CRC CR: SARINC (Bit 3)                                */
#define CRC_CR_SARINC_Msk                 (0x8UL)                   /*!< CRC CR: SARINC (Bitfield-Mask: 0x01)                  */
#define CRC_CR_FIRSTBS_Pos                (1UL)                     /*!< CRC CR: FIRSTBS (Bit 1)                               */
#define CRC_CR_FIRSTBS_Msk                (0x2UL)                   /*!< CRC CR: FIRSTBS (Bitfield-Mask: 0x01)                 */
#define CRC_CR_CRCRUN_Pos                 (0UL)                     /*!< CRC CR: CRCRUN (Bit 0)                                */
#define CRC_CR_CRCRUN_Msk                 (0x1UL)                   /*!< CRC CR: CRCRUN (Bitfield-Mask: 0x01)                  */
/* ==========================================================  IN  =========================================================== */
#define CRC_IN_INDATA_Pos                 (0UL)                     /*!< CRC IN: INDATA (Bit 0)                                */
#define CRC_IN_INDATA_Msk                 (0xffffffffUL)            /*!< CRC IN: INDATA (Bitfield-Mask: 0xffffffff)            */
/* ==========================================================  RLT  ========================================================== */
#define CRC_RLT_RLTDATA_Pos               (0UL)                     /*!< CRC RLT: RLTDATA (Bit 0)                              */
#define CRC_RLT_RLTDATA_Msk               (0xffffUL)                /*!< CRC RLT: RLTDATA (Bitfield-Mask: 0xffff)              */
/* =========================================================  INIT  ========================================================== */
#define CRC_INIT_INIDATA_Pos              (0UL)                     /*!< CRC INIT: INIDATA (Bit 0)                             */
#define CRC_INIT_INIDATA_Msk              (0xffffUL)                /*!< CRC INIT: INIDATA (Bitfield-Mask: 0xffff)             */
/* =========================================================  SADR  ========================================================== */
#define CRC_SADR_SADR_Pos                 (2UL)                     /*!< CRC SADR: SADR (Bit 2)                                */
#define CRC_SADR_SADR_Msk                 (0xfffffffcUL)            /*!< CRC SADR: SADR (Bitfield-Mask: 0x3fffffff)            */
/* =========================================================  EADR  ========================================================== */
#define CRC_EADR_EADR_Pos                 (2UL)                     /*!< CRC EADR: EADR (Bit 2)                                */
#define CRC_EADR_EADR_Msk                 (0xfffffffcUL)            /*!< CRC EADR: EADR (Bitfield-Mask: 0x3fffffff)            */


/* =========================================================================================================================== */
/* ================                                           COA0                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  TRIM00  ========================================================= */
/* ========================================================  TRIM01  ========================================================= */
/* ========================================================  TRIM02  ========================================================= */
/* ========================================================  TRIM03  ========================================================= */
/* ========================================================  TRIM04  ========================================================= */
/* ========================================================  TRIM05  ========================================================= */
/* ========================================================  TRIM06  ========================================================= */
/* ========================================================  TRIM07  ========================================================= */
/* ========================================================  TRIM08  ========================================================= */
/* ========================================================  TRIM09  ========================================================= */
/* ========================================================  TRIM10  ========================================================= */
/* ========================================================  TRIM11  ========================================================= */
/* ========================================================  TRIM12  ========================================================= */
/* ========================================================  TRIM13  ========================================================= */
/* ========================================================  TRIM14  ========================================================= */
/* ========================================================  TRIM15  ========================================================= */
/* ========================================================  TRIM16  ========================================================= */
/* ========================================================  TRIM17  ========================================================= */
/* ========================================================  TRIM18  ========================================================= */
/* ========================================================  TRIM19  ========================================================= */
/* =====================================================  CONF_MF1CNFIG  ===================================================== */
#define COA0_CONF_MF1CNFIG_XYCDN_Pos      (0UL)                     /*!< COA0 CONF_MF1CNFIG: XYCDN (Bit 0)                     */
#define COA0_CONF_MF1CNFIG_XYCDN_Msk      (0xffffffffUL)            /*!< COA0 CONF_MF1CNFIG: XYCDN (Bitfield-Mask: 0xffffffff) */
/* =====================================================  CONF_MF2CNFIG  ===================================================== */
#define COA0_CONF_MF2CNFIG_LOTNO_Pos      (8UL)                     /*!< COA0 CONF_MF2CNFIG: LOTNO (Bit 8)                     */
#define COA0_CONF_MF2CNFIG_LOTNO_Msk      (0xffffff00UL)            /*!< COA0 CONF_MF2CNFIG: LOTNO (Bitfield-Mask: 0xffffff)   */
#define COA0_CONF_MF2CNFIG_WAFNO_Pos      (0UL)                     /*!< COA0 CONF_MF2CNFIG: WAFNO (Bit 0)                     */
#define COA0_CONF_MF2CNFIG_WAFNO_Msk      (0xffUL)                  /*!< COA0 CONF_MF2CNFIG: WAFNO (Bitfield-Mask: 0xff)       */
/* =====================================================  CONF_MF3CNFIG  ===================================================== */
#define COA0_CONF_MF3CNFIG_LOTNO_Pos      (0UL)                     /*!< COA0 CONF_MF3CNFIG: LOTNO (Bit 0)                     */
#define COA0_CONF_MF3CNFIG_LOTNO_Msk      (0xffffffffUL)            /*!< COA0 CONF_MF3CNFIG: LOTNO (Bitfield-Mask: 0xffffffff) */
/* =====================================================  CONF_MF4CNFIG  ===================================================== */
#define COA0_CONF_MF4CNFIG_LOTNO_Pos      (0UL)                     /*!< COA0 CONF_MF4CNFIG: LOTNO (Bit 0)                     */
#define COA0_CONF_MF4CNFIG_LOTNO_Msk      (0xffffffffUL)            /*!< COA0 CONF_MF4CNFIG: LOTNO (Bitfield-Mask: 0xffffffff) */
/* ========================================================  TRIM24  ========================================================= */
/* ========================================================  TRIM25  ========================================================= */
/* ========================================================  TRIM26  ========================================================= */
/* ========================================================  TRIM27  ========================================================= */
/* ========================================================  TRIM28  ========================================================= */
/* ========================================================  TRIM29  ========================================================= */
/* ========================================================  TRIM30  ========================================================= */
/* ========================================================  TRIM31  ========================================================= */


/* =========================================================================================================================== */
/* ================                                           COA1                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  RPCNFIG  ======================================================== */
#define COA1_RPCNFIG_WTIDKY_Pos           (4UL)                     /*!< COA1 RPCNFIG: WTIDKY (Bit 4)                          */
#define COA1_RPCNFIG_WTIDKY_Msk           (0xfffffff0UL)            /*!< COA1 RPCNFIG: WTIDKY (Bitfield-Mask: 0xfffffff)       */
#define COA1_RPCNFIG_READP_Pos            (0UL)                     /*!< COA1 RPCNFIG: READP (Bit 0)                           */
#define COA1_RPCNFIG_READP_Msk            (0x3UL)                   /*!< COA1 RPCNFIG: READP (Bitfield-Mask: 0x03)             */
/* =======================================================  WDTCNFIG  ======================================================== */
#define COA1_WDTCNFIG_WRCMF_Pos           (4UL)                     /*!< COA1 WDTCNFIG: WRCMF (Bit 4)                          */
#define COA1_WDTCNFIG_WRCMF_Msk           (0xfff0UL)                /*!< COA1 WDTCNFIG: WRCMF (Bitfield-Mask: 0xfff)           */
#define COA1_WDTCNFIG_WCLKMF_Pos          (2UL)                     /*!< COA1 WDTCNFIG: WCLKMF (Bit 2)                         */
#define COA1_WDTCNFIG_WCLKMF_Msk          (0x4UL)                   /*!< COA1 WDTCNFIG: WCLKMF (Bitfield-Mask: 0x01)           */
#define COA1_WDTCNFIG_WRSTMF_Pos          (1UL)                     /*!< COA1 WDTCNFIG: WRSTMF (Bit 1)                         */
#define COA1_WDTCNFIG_WRSTMF_Msk          (0x2UL)                   /*!< COA1 WDTCNFIG: WRSTMF (Bitfield-Mask: 0x01)           */
#define COA1_WDTCNFIG_WCNTMF_Pos          (0UL)                     /*!< COA1 WDTCNFIG: WCNTMF (Bit 0)                         */
#define COA1_WDTCNFIG_WCNTMF_Msk          (0x1UL)                   /*!< COA1 WDTCNFIG: WCNTMF (Bitfield-Mask: 0x01)           */
/* =======================================================  LVRCNFIG  ======================================================== */
#define COA1_LVRCNFIG_LVRENM_Pos          (8UL)                     /*!< COA1 LVRCNFIG: LVRENM (Bit 8)                         */
#define COA1_LVRCNFIG_LVRENM_Msk          (0xff00UL)                /*!< COA1 LVRCNFIG: LVRENM (Bitfield-Mask: 0xff)           */
#define COA1_LVRCNFIG_LVRVS_Pos           (0UL)                     /*!< COA1 LVRCNFIG: LVRVS (Bit 0)                          */
#define COA1_LVRCNFIG_LVRVS_Msk           (0xfUL)                   /*!< COA1 LVRCNFIG: LVRVS (Bitfield-Mask: 0x0f)            */
/* =======================================================  CNFIGWTP1  ======================================================= */
#define COA1_CNFIGWTP1_CP3WP_Pos          (2UL)                     /*!< COA1 CNFIGWTP1: CP3WP (Bit 2)                         */
#define COA1_CNFIGWTP1_CP3WP_Msk          (0x4UL)                   /*!< COA1 CNFIGWTP1: CP3WP (Bitfield-Mask: 0x01)           */
#define COA1_CNFIGWTP1_CP2WP_Pos          (1UL)                     /*!< COA1 CNFIGWTP1: CP2WP (Bit 1)                         */
#define COA1_CNFIGWTP1_CP2WP_Msk          (0x2UL)                   /*!< COA1 CNFIGWTP1: CP2WP (Bitfield-Mask: 0x01)           */
#define COA1_CNFIGWTP1_CP1WP_Pos          (0UL)                     /*!< COA1 CNFIGWTP1: CP1WP (Bit 0)                         */
#define COA1_CNFIGWTP1_CP1WP_Msk          (0x1UL)                   /*!< COA1 CNFIGWTP1: CP1WP (Bitfield-Mask: 0x01)           */
/* ========================================================  FMWTP1  ========================================================= */
#define COA1_FMWTP1_SWTP31_Pos            (31UL)                    /*!< COA1 FMWTP1: SWTP31 (Bit 31)                          */
#define COA1_FMWTP1_SWTP31_Msk            (0x80000000UL)            /*!< COA1 FMWTP1: SWTP31 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP30_Pos            (30UL)                    /*!< COA1 FMWTP1: SWTP30 (Bit 30)                          */
#define COA1_FMWTP1_SWTP30_Msk            (0x40000000UL)            /*!< COA1 FMWTP1: SWTP30 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP29_Pos            (29UL)                    /*!< COA1 FMWTP1: SWTP29 (Bit 29)                          */
#define COA1_FMWTP1_SWTP29_Msk            (0x20000000UL)            /*!< COA1 FMWTP1: SWTP29 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP28_Pos            (28UL)                    /*!< COA1 FMWTP1: SWTP28 (Bit 28)                          */
#define COA1_FMWTP1_SWTP28_Msk            (0x10000000UL)            /*!< COA1 FMWTP1: SWTP28 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP27_Pos            (27UL)                    /*!< COA1 FMWTP1: SWTP27 (Bit 27)                          */
#define COA1_FMWTP1_SWTP27_Msk            (0x8000000UL)             /*!< COA1 FMWTP1: SWTP27 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP26_Pos            (26UL)                    /*!< COA1 FMWTP1: SWTP26 (Bit 26)                          */
#define COA1_FMWTP1_SWTP26_Msk            (0x4000000UL)             /*!< COA1 FMWTP1: SWTP26 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP25_Pos            (25UL)                    /*!< COA1 FMWTP1: SWTP25 (Bit 25)                          */
#define COA1_FMWTP1_SWTP25_Msk            (0x2000000UL)             /*!< COA1 FMWTP1: SWTP25 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP24_Pos            (24UL)                    /*!< COA1 FMWTP1: SWTP24 (Bit 24)                          */
#define COA1_FMWTP1_SWTP24_Msk            (0x1000000UL)             /*!< COA1 FMWTP1: SWTP24 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP23_Pos            (23UL)                    /*!< COA1 FMWTP1: SWTP23 (Bit 23)                          */
#define COA1_FMWTP1_SWTP23_Msk            (0x800000UL)              /*!< COA1 FMWTP1: SWTP23 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP22_Pos            (22UL)                    /*!< COA1 FMWTP1: SWTP22 (Bit 22)                          */
#define COA1_FMWTP1_SWTP22_Msk            (0x400000UL)              /*!< COA1 FMWTP1: SWTP22 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP21_Pos            (21UL)                    /*!< COA1 FMWTP1: SWTP21 (Bit 21)                          */
#define COA1_FMWTP1_SWTP21_Msk            (0x200000UL)              /*!< COA1 FMWTP1: SWTP21 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP20_Pos            (20UL)                    /*!< COA1 FMWTP1: SWTP20 (Bit 20)                          */
#define COA1_FMWTP1_SWTP20_Msk            (0x100000UL)              /*!< COA1 FMWTP1: SWTP20 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP19_Pos            (19UL)                    /*!< COA1 FMWTP1: SWTP19 (Bit 19)                          */
#define COA1_FMWTP1_SWTP19_Msk            (0x80000UL)               /*!< COA1 FMWTP1: SWTP19 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP18_Pos            (18UL)                    /*!< COA1 FMWTP1: SWTP18 (Bit 18)                          */
#define COA1_FMWTP1_SWTP18_Msk            (0x40000UL)               /*!< COA1 FMWTP1: SWTP18 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP17_Pos            (17UL)                    /*!< COA1 FMWTP1: SWTP17 (Bit 17)                          */
#define COA1_FMWTP1_SWTP17_Msk            (0x20000UL)               /*!< COA1 FMWTP1: SWTP17 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP16_Pos            (16UL)                    /*!< COA1 FMWTP1: SWTP16 (Bit 16)                          */
#define COA1_FMWTP1_SWTP16_Msk            (0x10000UL)               /*!< COA1 FMWTP1: SWTP16 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP15_Pos            (15UL)                    /*!< COA1 FMWTP1: SWTP15 (Bit 15)                          */
#define COA1_FMWTP1_SWTP15_Msk            (0x8000UL)                /*!< COA1 FMWTP1: SWTP15 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP14_Pos            (14UL)                    /*!< COA1 FMWTP1: SWTP14 (Bit 14)                          */
#define COA1_FMWTP1_SWTP14_Msk            (0x4000UL)                /*!< COA1 FMWTP1: SWTP14 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP13_Pos            (13UL)                    /*!< COA1 FMWTP1: SWTP13 (Bit 13)                          */
#define COA1_FMWTP1_SWTP13_Msk            (0x2000UL)                /*!< COA1 FMWTP1: SWTP13 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP12_Pos            (12UL)                    /*!< COA1 FMWTP1: SWTP12 (Bit 12)                          */
#define COA1_FMWTP1_SWTP12_Msk            (0x1000UL)                /*!< COA1 FMWTP1: SWTP12 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP11_Pos            (11UL)                    /*!< COA1 FMWTP1: SWTP11 (Bit 11)                          */
#define COA1_FMWTP1_SWTP11_Msk            (0x800UL)                 /*!< COA1 FMWTP1: SWTP11 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP10_Pos            (10UL)                    /*!< COA1 FMWTP1: SWTP10 (Bit 10)                          */
#define COA1_FMWTP1_SWTP10_Msk            (0x400UL)                 /*!< COA1 FMWTP1: SWTP10 (Bitfield-Mask: 0x01)             */
#define COA1_FMWTP1_SWTP9_Pos             (9UL)                     /*!< COA1 FMWTP1: SWTP9 (Bit 9)                            */
#define COA1_FMWTP1_SWTP9_Msk             (0x200UL)                 /*!< COA1 FMWTP1: SWTP9 (Bitfield-Mask: 0x01)              */
#define COA1_FMWTP1_SWTP8_Pos             (8UL)                     /*!< COA1 FMWTP1: SWTP8 (Bit 8)                            */
#define COA1_FMWTP1_SWTP8_Msk             (0x100UL)                 /*!< COA1 FMWTP1: SWTP8 (Bitfield-Mask: 0x01)              */
#define COA1_FMWTP1_SWTP7_Pos             (7UL)                     /*!< COA1 FMWTP1: SWTP7 (Bit 7)                            */
#define COA1_FMWTP1_SWTP7_Msk             (0x80UL)                  /*!< COA1 FMWTP1: SWTP7 (Bitfield-Mask: 0x01)              */
#define COA1_FMWTP1_SWTP6_Pos             (6UL)                     /*!< COA1 FMWTP1: SWTP6 (Bit 6)                            */
#define COA1_FMWTP1_SWTP6_Msk             (0x40UL)                  /*!< COA1 FMWTP1: SWTP6 (Bitfield-Mask: 0x01)              */
#define COA1_FMWTP1_SWTP5_Pos             (5UL)                     /*!< COA1 FMWTP1: SWTP5 (Bit 5)                            */
#define COA1_FMWTP1_SWTP5_Msk             (0x20UL)                  /*!< COA1 FMWTP1: SWTP5 (Bitfield-Mask: 0x01)              */
#define COA1_FMWTP1_SWTP4_Pos             (4UL)                     /*!< COA1 FMWTP1: SWTP4 (Bit 4)                            */
#define COA1_FMWTP1_SWTP4_Msk             (0x10UL)                  /*!< COA1 FMWTP1: SWTP4 (Bitfield-Mask: 0x01)              */
#define COA1_FMWTP1_SWTP3_Pos             (3UL)                     /*!< COA1 FMWTP1: SWTP3 (Bit 3)                            */
#define COA1_FMWTP1_SWTP3_Msk             (0x8UL)                   /*!< COA1 FMWTP1: SWTP3 (Bitfield-Mask: 0x01)              */
#define COA1_FMWTP1_SWTP2_Pos             (2UL)                     /*!< COA1 FMWTP1: SWTP2 (Bit 2)                            */
#define COA1_FMWTP1_SWTP2_Msk             (0x4UL)                   /*!< COA1 FMWTP1: SWTP2 (Bitfield-Mask: 0x01)              */
#define COA1_FMWTP1_SWTP1_Pos             (1UL)                     /*!< COA1 FMWTP1: SWTP1 (Bit 1)                            */
#define COA1_FMWTP1_SWTP1_Msk             (0x2UL)                   /*!< COA1 FMWTP1: SWTP1 (Bitfield-Mask: 0x01)              */
#define COA1_FMWTP1_SWTP0_Pos             (0UL)                     /*!< COA1 FMWTP1: SWTP0 (Bit 0)                            */
#define COA1_FMWTP1_SWTP0_Msk             (0x1UL)                   /*!< COA1 FMWTP1: SWTP0 (Bitfield-Mask: 0x01)              */


/* =========================================================================================================================== */
/* ================                                           COA2                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  UDATA00  ======================================================== */
/* ========================================================  UDATA01  ======================================================== */
/* ========================================================  UDATA02  ======================================================== */
/* ========================================================  UDATA03  ======================================================== */
/* ========================================================  UDATA04  ======================================================== */
/* ========================================================  UDATA05  ======================================================== */
/* ========================================================  UDATA06  ======================================================== */
/* ========================================================  UDATA07  ======================================================== */
/* ========================================================  UDATA08  ======================================================== */
/* ========================================================  UDATA09  ======================================================== */
/* ========================================================  UDATA10  ======================================================== */
/* ========================================================  UDATA11  ======================================================== */
/* ========================================================  UDATA12  ======================================================== */
/* ========================================================  UDATA13  ======================================================== */
/* ========================================================  UDATA14  ======================================================== */
/* ========================================================  UDATA15  ======================================================== */
/* ========================================================  UDATA16  ======================================================== */
/* ========================================================  UDATA17  ======================================================== */
/* ========================================================  UDATA18  ======================================================== */
/* ========================================================  UDATA19  ======================================================== */
/* ========================================================  UDATA20  ======================================================== */
/* ========================================================  UDATA21  ======================================================== */
/* ========================================================  UDATA22  ======================================================== */
/* ========================================================  UDATA23  ======================================================== */
/* ========================================================  UDATA24  ======================================================== */
/* ========================================================  UDATA25  ======================================================== */
/* ========================================================  UDATA26  ======================================================== */
/* ========================================================  UDATA27  ======================================================== */
/* ========================================================  UDATA28  ======================================================== */
/* ========================================================  UDATA29  ======================================================== */
/* ========================================================  UDATA30  ======================================================== */
/* ========================================================  UDATA31  ======================================================== */


/* =========================================================================================================================== */
/* ================                                           COA3                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  UDATA00  ======================================================== */
/* ========================================================  UDATA01  ======================================================== */
/* ========================================================  UDATA02  ======================================================== */
/* ========================================================  UDATA03  ======================================================== */
/* ========================================================  UDATA04  ======================================================== */
/* ========================================================  UDATA05  ======================================================== */
/* ========================================================  UDATA06  ======================================================== */
/* ========================================================  UDATA07  ======================================================== */
/* ========================================================  UDATA08  ======================================================== */
/* ========================================================  UDATA09  ======================================================== */
/* ========================================================  UDATA10  ======================================================== */
/* ========================================================  UDATA11  ======================================================== */
/* ========================================================  UDATA12  ======================================================== */
/* ========================================================  UDATA13  ======================================================== */
/* ========================================================  UDATA14  ======================================================== */
/* ========================================================  UDATA15  ======================================================== */
/* ========================================================  UDATA16  ======================================================== */
/* ========================================================  UDATA17  ======================================================== */
/* ========================================================  UDATA18  ======================================================== */
/* ========================================================  UDATA19  ======================================================== */
/* ========================================================  UDATA20  ======================================================== */
/* ========================================================  UDATA21  ======================================================== */
/* ========================================================  UDATA22  ======================================================== */
/* ========================================================  UDATA23  ======================================================== */
/* ========================================================  UDATA24  ======================================================== */
/* ========================================================  UDATA25  ======================================================== */
/* ========================================================  UDATA26  ======================================================== */
/* ========================================================  UDATA27  ======================================================== */
/* ========================================================  UDATA28  ======================================================== */
/* ========================================================  UDATA29  ======================================================== */
/* ========================================================  UDATA30  ======================================================== */
/* ========================================================  UDATA31  ======================================================== */

/** @} */ /* End of group PosMask_peripherals */


/* =========================================================================================================================== */
/* ================                           Enumerated Values Peripheral Section                            ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           INTC                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  PBTRIG  ========================================================= */
/* =============================================  INTC PBTRIG ITRIG11 [11..11]  ============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG11                                                       */
  INTC_PBTRIG_ITRIG11_Edge             = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG11_Level            = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG11_Enum;

/* =============================================  INTC PBTRIG ITRIG10 [10..10]  ============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG10                                                       */
  INTC_PBTRIG_ITRIG10_Edge             = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG10_Level            = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG10_Enum;

/* ===============================================  INTC PBTRIG ITRIG9 [9..9]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG9                                                        */
  INTC_PBTRIG_ITRIG9_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG9_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG9_Enum;

/* ===============================================  INTC PBTRIG ITRIG8 [8..8]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG8                                                        */
  INTC_PBTRIG_ITRIG8_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG8_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG8_Enum;

/* ===============================================  INTC PBTRIG ITRIG7 [7..7]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG7                                                        */
  INTC_PBTRIG_ITRIG7_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG7_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG7_Enum;

/* ===============================================  INTC PBTRIG ITRIG6 [6..6]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG6                                                        */
  INTC_PBTRIG_ITRIG6_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG6_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG6_Enum;

/* ===============================================  INTC PBTRIG ITRIG5 [5..5]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG5                                                        */
  INTC_PBTRIG_ITRIG5_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG5_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG5_Enum;

/* ===============================================  INTC PBTRIG ITRIG4 [4..4]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG4                                                        */
  INTC_PBTRIG_ITRIG4_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG4_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG4_Enum;

/* ===============================================  INTC PBTRIG ITRIG3 [3..3]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG3                                                        */
  INTC_PBTRIG_ITRIG3_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG3_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG3_Enum;

/* ===============================================  INTC PBTRIG ITRIG2 [2..2]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG2                                                        */
  INTC_PBTRIG_ITRIG2_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG2_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG2_Enum;

/* ===============================================  INTC PBTRIG ITRIG1 [1..1]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG1                                                        */
  INTC_PBTRIG_ITRIG1_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG1_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG1_Enum;

/* ===============================================  INTC PBTRIG ITRIG0 [0..0]  =============================================== */
typedef enum {                                  /*!< INTC_PBTRIG_ITRIG0                                                        */
  INTC_PBTRIG_ITRIG0_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PBTRIG_ITRIG0_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PBTRIG_ITRIG0_Enum;

/* ========================================================  PCTRIG  ========================================================= */
/* ===============================================  INTC PCTRIG ITRIG3 [3..3]  =============================================== */
typedef enum {                                  /*!< INTC_PCTRIG_ITRIG3                                                        */
  INTC_PCTRIG_ITRIG3_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PCTRIG_ITRIG3_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PCTRIG_ITRIG3_Enum;

/* ===============================================  INTC PCTRIG ITRIG2 [2..2]  =============================================== */
typedef enum {                                  /*!< INTC_PCTRIG_ITRIG2                                                        */
  INTC_PCTRIG_ITRIG2_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PCTRIG_ITRIG2_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PCTRIG_ITRIG2_Enum;

/* ===============================================  INTC PCTRIG ITRIG1 [1..1]  =============================================== */
typedef enum {                                  /*!< INTC_PCTRIG_ITRIG1                                                        */
  INTC_PCTRIG_ITRIG1_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PCTRIG_ITRIG1_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PCTRIG_ITRIG1_Enum;

/* ===============================================  INTC PCTRIG ITRIG0 [0..0]  =============================================== */
typedef enum {                                  /*!< INTC_PCTRIG_ITRIG0                                                        */
  INTC_PCTRIG_ITRIG0_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PCTRIG_ITRIG0_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PCTRIG_ITRIG0_Enum;

/* ========================================================  PETRIG  ========================================================= */
/* ===============================================  INTC PETRIG ITRIG3 [3..3]  =============================================== */
typedef enum {                                  /*!< INTC_PETRIG_ITRIG3                                                        */
  INTC_PETRIG_ITRIG3_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PETRIG_ITRIG3_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PETRIG_ITRIG3_Enum;

/* ===============================================  INTC PETRIG ITRIG2 [2..2]  =============================================== */
typedef enum {                                  /*!< INTC_PETRIG_ITRIG2                                                        */
  INTC_PETRIG_ITRIG2_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PETRIG_ITRIG2_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PETRIG_ITRIG2_Enum;

/* ===============================================  INTC PETRIG ITRIG1 [1..1]  =============================================== */
typedef enum {                                  /*!< INTC_PETRIG_ITRIG1                                                        */
  INTC_PETRIG_ITRIG1_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PETRIG_ITRIG1_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PETRIG_ITRIG1_Enum;

/* ===============================================  INTC PETRIG ITRIG0 [0..0]  =============================================== */
typedef enum {                                  /*!< INTC_PETRIG_ITRIG0                                                        */
  INTC_PETRIG_ITRIG0_Edge              = 0,     /*!< Edge : Edge trigger interrupt                                             */
  INTC_PETRIG_ITRIG0_Level             = 1,     /*!< Level : Level trigger interrupt                                           */
} INTC_PETRIG_ITRIG0_Enum;

/* =========================================================  PBCR  ========================================================== */
/* ==============================================  INTC PBCR INTCTL11 [22..23]  ============================================== */
typedef enum {                                  /*!< INTC_PBCR_INTCTL11                                                        */
  INTC_PBCR_INTCTL11_Disable           = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL11_FallingEdgeLowLevel = 1,   /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL11_RisingEdgeHighLevel = 2,   /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL11_BothEdgeNoLevel   = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                                    No level interrupt                                         */
} INTC_PBCR_INTCTL11_Enum;

/* ==============================================  INTC PBCR INTCTL10 [20..21]  ============================================== */
typedef enum {                                  /*!< INTC_PBCR_INTCTL10                                                        */
  INTC_PBCR_INTCTL10_Disable           = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL10_FallingEdgeLowLevel = 1,   /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL10_RisingEdgeHighLevel = 2,   /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL10_BothEdgeNoLevel   = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL10_Enum;

/* ==============================================  INTC PBCR INTCTL9 [18..19]  =============================================== */
typedef enum {                                  /*!< INTC_PBCR_INTCTL9                                                         */
  INTC_PBCR_INTCTL9_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL9_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL9_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL9_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL9_Enum;

/* ==============================================  INTC PBCR INTCTL8 [16..17]  =============================================== */
typedef enum {                                  /*!< INTC_PBCR_INTCTL8                                                         */
  INTC_PBCR_INTCTL8_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL8_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL8_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL8_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL8_Enum;

/* ==============================================  INTC PBCR INTCTL7 [14..15]  =============================================== */
typedef enum {                                  /*!< INTC_PBCR_INTCTL7                                                         */
  INTC_PBCR_INTCTL7_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL7_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL7_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL7_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL7_Enum;

/* ==============================================  INTC PBCR INTCTL6 [12..13]  =============================================== */
typedef enum {                                  /*!< INTC_PBCR_INTCTL6                                                         */
  INTC_PBCR_INTCTL6_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL6_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL6_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL6_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL6_Enum;

/* ==============================================  INTC PBCR INTCTL5 [10..11]  =============================================== */
typedef enum {                                  /*!< INTC_PBCR_INTCTL5                                                         */
  INTC_PBCR_INTCTL5_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL5_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL5_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL5_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL5_Enum;

/* ===============================================  INTC PBCR INTCTL4 [8..9]  ================================================ */
typedef enum {                                  /*!< INTC_PBCR_INTCTL4                                                         */
  INTC_PBCR_INTCTL4_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL4_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL4_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL4_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL4_Enum;

/* ===============================================  INTC PBCR INTCTL3 [6..7]  ================================================ */
typedef enum {                                  /*!< INTC_PBCR_INTCTL3                                                         */
  INTC_PBCR_INTCTL3_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL3_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL3_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL3_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL3_Enum;

/* ===============================================  INTC PBCR INTCTL2 [4..5]  ================================================ */
typedef enum {                                  /*!< INTC_PBCR_INTCTL2                                                         */
  INTC_PBCR_INTCTL2_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL2_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL2_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL2_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL2_Enum;

/* ===============================================  INTC PBCR INTCTL1 [2..3]  ================================================ */
typedef enum {                                  /*!< INTC_PBCR_INTCTL1                                                         */
  INTC_PBCR_INTCTL1_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL1_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL1_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL1_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL1_Enum;

/* ===============================================  INTC PBCR INTCTL0 [0..1]  ================================================ */
typedef enum {                                  /*!< INTC_PBCR_INTCTL0                                                         */
  INTC_PBCR_INTCTL0_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PBCR_INTCTL0_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PBCR_INTCTL0_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PBCR_INTCTL0_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PBCR_INTCTL0_Enum;

/* =========================================================  PCCR  ========================================================== */
/* ===============================================  INTC PCCR INTCTL3 [6..7]  ================================================ */
typedef enum {                                  /*!< INTC_PCCR_INTCTL3                                                         */
  INTC_PCCR_INTCTL3_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PCCR_INTCTL3_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PCCR_INTCTL3_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PCCR_INTCTL3_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PCCR_INTCTL3_Enum;

/* ===============================================  INTC PCCR INTCTL2 [4..5]  ================================================ */
typedef enum {                                  /*!< INTC_PCCR_INTCTL2                                                         */
  INTC_PCCR_INTCTL2_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PCCR_INTCTL2_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PCCR_INTCTL2_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PCCR_INTCTL2_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PCCR_INTCTL2_Enum;

/* ===============================================  INTC PCCR INTCTL1 [2..3]  ================================================ */
typedef enum {                                  /*!< INTC_PCCR_INTCTL1                                                         */
  INTC_PCCR_INTCTL1_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PCCR_INTCTL1_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PCCR_INTCTL1_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PCCR_INTCTL1_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PCCR_INTCTL1_Enum;

/* ===============================================  INTC PCCR INTCTL0 [0..1]  ================================================ */
typedef enum {                                  /*!< INTC_PCCR_INTCTL0                                                         */
  INTC_PCCR_INTCTL0_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PCCR_INTCTL0_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PCCR_INTCTL0_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PCCR_INTCTL0_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PCCR_INTCTL0_Enum;

/* =========================================================  PECR  ========================================================== */
/* ===============================================  INTC PECR INTCTL3 [6..7]  ================================================ */
typedef enum {                                  /*!< INTC_PECR_INTCTL3                                                         */
  INTC_PECR_INTCTL3_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PECR_INTCTL3_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PECR_INTCTL3_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PECR_INTCTL3_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PECR_INTCTL3_Enum;

/* ===============================================  INTC PECR INTCTL2 [4..5]  ================================================ */
typedef enum {                                  /*!< INTC_PECR_INTCTL2                                                         */
  INTC_PECR_INTCTL2_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PECR_INTCTL2_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PECR_INTCTL2_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PECR_INTCTL2_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PECR_INTCTL2_Enum;

/* ===============================================  INTC PECR INTCTL1 [2..3]  ================================================ */
typedef enum {                                  /*!< INTC_PECR_INTCTL1                                                         */
  INTC_PECR_INTCTL1_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PECR_INTCTL1_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PECR_INTCTL1_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PECR_INTCTL1_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PECR_INTCTL1_Enum;

/* ===============================================  INTC PECR INTCTL0 [0..1]  ================================================ */
typedef enum {                                  /*!< INTC_PECR_INTCTL0                                                         */
  INTC_PECR_INTCTL0_Disable            = 0,     /*!< Disable : Disable external interrupt.                                     */
  INTC_PECR_INTCTL0_FallingEdgeLowLevel = 1,    /*!< FallingEdgeLowLevel : Interrupt on falling edge or on low level           */
  INTC_PECR_INTCTL0_RisingEdgeHighLevel = 2,    /*!< RisingEdgeHighLevel : Interrupt on rising edge or on high level           */
  INTC_PECR_INTCTL0_BothEdgeNoLevel    = 3,     /*!< BothEdgeNoLevel : Interrupt on both falling and rising edge,
                                                     No level interrupt                                                        */
} INTC_PECR_INTCTL0_Enum;

/* ========================================================  PBFLAG  ========================================================= */
/* ==============================================  INTC PBFLAG FLAG11 [11..11]  ============================================== */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG11                                                        */
  INTC_PBFLAG_FLAG11_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG11_Request           = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG11_Enum;

/* ==============================================  INTC PBFLAG FLAG10 [10..10]  ============================================== */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG10                                                        */
  INTC_PBFLAG_FLAG10_NoRequest         = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG10_Request           = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG10_Enum;

/* ===============================================  INTC PBFLAG FLAG9 [9..9]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG9                                                         */
  INTC_PBFLAG_FLAG9_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG9_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG9_Enum;

/* ===============================================  INTC PBFLAG FLAG8 [8..8]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG8                                                         */
  INTC_PBFLAG_FLAG8_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG8_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG8_Enum;

/* ===============================================  INTC PBFLAG FLAG7 [7..7]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG7                                                         */
  INTC_PBFLAG_FLAG7_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG7_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG7_Enum;

/* ===============================================  INTC PBFLAG FLAG6 [6..6]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG6                                                         */
  INTC_PBFLAG_FLAG6_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG6_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG6_Enum;

/* ===============================================  INTC PBFLAG FLAG5 [5..5]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG5                                                         */
  INTC_PBFLAG_FLAG5_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG5_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG5_Enum;

/* ===============================================  INTC PBFLAG FLAG4 [4..4]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG4                                                         */
  INTC_PBFLAG_FLAG4_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG4_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG4_Enum;

/* ===============================================  INTC PBFLAG FLAG3 [3..3]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG3                                                         */
  INTC_PBFLAG_FLAG3_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG3_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG3_Enum;

/* ===============================================  INTC PBFLAG FLAG2 [2..2]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG2                                                         */
  INTC_PBFLAG_FLAG2_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG2_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG2_Enum;

/* ===============================================  INTC PBFLAG FLAG1 [1..1]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG1                                                         */
  INTC_PBFLAG_FLAG1_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG1_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG1_Enum;

/* ===============================================  INTC PBFLAG FLAG0 [0..0]  ================================================ */
typedef enum {                                  /*!< INTC_PBFLAG_FLAG0                                                         */
  INTC_PBFLAG_FLAG0_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PBFLAG_FLAG0_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PBFLAG_FLAG0_Enum;

/* ========================================================  PCFLAG  ========================================================= */
/* ===============================================  INTC PCFLAG FLAG3 [3..3]  ================================================ */
typedef enum {                                  /*!< INTC_PCFLAG_FLAG3                                                         */
  INTC_PCFLAG_FLAG3_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PCFLAG_FLAG3_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PCFLAG_FLAG3_Enum;

/* ===============================================  INTC PCFLAG FLAG2 [2..2]  ================================================ */
typedef enum {                                  /*!< INTC_PCFLAG_FLAG2                                                         */
  INTC_PCFLAG_FLAG2_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PCFLAG_FLAG2_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PCFLAG_FLAG2_Enum;

/* ===============================================  INTC PCFLAG FLAG1 [1..1]  ================================================ */
typedef enum {                                  /*!< INTC_PCFLAG_FLAG1                                                         */
  INTC_PCFLAG_FLAG1_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PCFLAG_FLAG1_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PCFLAG_FLAG1_Enum;

/* ===============================================  INTC PCFLAG FLAG0 [0..0]  ================================================ */
typedef enum {                                  /*!< INTC_PCFLAG_FLAG0                                                         */
  INTC_PCFLAG_FLAG0_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PCFLAG_FLAG0_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PCFLAG_FLAG0_Enum;

/* ========================================================  PEFLAG  ========================================================= */
/* ===============================================  INTC PEFLAG FLAG3 [3..3]  ================================================ */
typedef enum {                                  /*!< INTC_PEFLAG_FLAG3                                                         */
  INTC_PEFLAG_FLAG3_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PEFLAG_FLAG3_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PEFLAG_FLAG3_Enum;

/* ===============================================  INTC PEFLAG FLAG2 [2..2]  ================================================ */
typedef enum {                                  /*!< INTC_PEFLAG_FLAG2                                                         */
  INTC_PEFLAG_FLAG2_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PEFLAG_FLAG2_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PEFLAG_FLAG2_Enum;

/* ===============================================  INTC PEFLAG FLAG1 [1..1]  ================================================ */
typedef enum {                                  /*!< INTC_PEFLAG_FLAG1                                                         */
  INTC_PEFLAG_FLAG1_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PEFLAG_FLAG1_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PEFLAG_FLAG1_Enum;

/* ===============================================  INTC PEFLAG FLAG0 [0..0]  ================================================ */
typedef enum {                                  /*!< INTC_PEFLAG_FLAG0                                                         */
  INTC_PEFLAG_FLAG0_NoRequest          = 0,     /*!< NoRequest : No request occurred.                                          */
  INTC_PEFLAG_FLAG0_Request            = 1,     /*!< Request : Request occurred.                                               */
} INTC_PEFLAG_FLAG0_Enum;

/* ======================================================  EINT0CONF1  ======================================================= */
/* ============================================  INTC EINT0CONF1 CONF7 [28..31]  ============================================= */
typedef enum {                                  /*!< INTC_EINT0CONF1_CONF7                                                     */
  INTC_EINT0CONF1_CONF7_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF1_CONF7_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF1_CONF7_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF1_CONF7_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF1_CONF7_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF1_CONF7_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF1_CONF7_Enum;

/* ============================================  INTC EINT0CONF1 CONF6 [24..27]  ============================================= */
typedef enum {                                  /*!< INTC_EINT0CONF1_CONF6                                                     */
  INTC_EINT0CONF1_CONF6_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF1_CONF6_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF1_CONF6_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF1_CONF6_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF1_CONF6_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF1_CONF6_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF1_CONF6_Enum;

/* ============================================  INTC EINT0CONF1 CONF5 [20..23]  ============================================= */
typedef enum {                                  /*!< INTC_EINT0CONF1_CONF5                                                     */
  INTC_EINT0CONF1_CONF5_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF1_CONF5_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF1_CONF5_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF1_CONF5_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF1_CONF5_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF1_CONF5_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF1_CONF5_Enum;

/* ============================================  INTC EINT0CONF1 CONF4 [16..19]  ============================================= */
typedef enum {                                  /*!< INTC_EINT0CONF1_CONF4                                                     */
  INTC_EINT0CONF1_CONF4_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF1_CONF4_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF1_CONF4_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF1_CONF4_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF1_CONF4_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF1_CONF4_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF1_CONF4_Enum;

/* ============================================  INTC EINT0CONF1 CONF3 [12..15]  ============================================= */
typedef enum {                                  /*!< INTC_EINT0CONF1_CONF3                                                     */
  INTC_EINT0CONF1_CONF3_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF1_CONF3_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF1_CONF3_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF1_CONF3_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF1_CONF3_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF1_CONF3_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF1_CONF3_Enum;

/* =============================================  INTC EINT0CONF1 CONF2 [8..11]  ============================================= */
typedef enum {                                  /*!< INTC_EINT0CONF1_CONF2                                                     */
  INTC_EINT0CONF1_CONF2_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF1_CONF2_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF1_CONF2_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF1_CONF2_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF1_CONF2_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF1_CONF2_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF1_CONF2_Enum;

/* =============================================  INTC EINT0CONF1 CONF1 [4..7]  ============================================== */
typedef enum {                                  /*!< INTC_EINT0CONF1_CONF1                                                     */
  INTC_EINT0CONF1_CONF1_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF1_CONF1_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF1_CONF1_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF1_CONF1_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF1_CONF1_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF1_CONF1_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF1_CONF1_Enum;

/* =============================================  INTC EINT0CONF1 CONF0 [0..3]  ============================================== */
typedef enum {                                  /*!< INTC_EINT0CONF1_CONF0                                                     */
  INTC_EINT0CONF1_CONF0_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF1_CONF0_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF1_CONF0_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF1_CONF0_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF1_CONF0_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF1_CONF0_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF1_CONF0_Enum;

/* ======================================================  EINT1CONF1  ======================================================= */
/* ============================================  INTC EINT1CONF1 CONF7 [28..31]  ============================================= */
typedef enum {                                  /*!< INTC_EINT1CONF1_CONF7                                                     */
  INTC_EINT1CONF1_CONF7_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF1_CONF7_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF1_CONF7_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF1_CONF7_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF1_CONF7_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF1_CONF7_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF1_CONF7_Enum;

/* ============================================  INTC EINT1CONF1 CONF6 [24..27]  ============================================= */
typedef enum {                                  /*!< INTC_EINT1CONF1_CONF6                                                     */
  INTC_EINT1CONF1_CONF6_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF1_CONF6_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF1_CONF6_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF1_CONF6_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF1_CONF6_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF1_CONF6_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF1_CONF6_Enum;

/* ============================================  INTC EINT1CONF1 CONF5 [20..23]  ============================================= */
typedef enum {                                  /*!< INTC_EINT1CONF1_CONF5                                                     */
  INTC_EINT1CONF1_CONF5_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF1_CONF5_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF1_CONF5_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF1_CONF5_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF1_CONF5_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF1_CONF5_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF1_CONF5_Enum;

/* ============================================  INTC EINT1CONF1 CONF4 [16..19]  ============================================= */
typedef enum {                                  /*!< INTC_EINT1CONF1_CONF4                                                     */
  INTC_EINT1CONF1_CONF4_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF1_CONF4_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF1_CONF4_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF1_CONF4_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF1_CONF4_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF1_CONF4_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF1_CONF4_Enum;

/* ============================================  INTC EINT1CONF1 CONF3 [12..15]  ============================================= */
typedef enum {                                  /*!< INTC_EINT1CONF1_CONF3                                                     */
  INTC_EINT1CONF1_CONF3_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF1_CONF3_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF1_CONF3_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF1_CONF3_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF1_CONF3_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF1_CONF3_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF1_CONF3_Enum;

/* =============================================  INTC EINT1CONF1 CONF2 [8..11]  ============================================= */
typedef enum {                                  /*!< INTC_EINT1CONF1_CONF2                                                     */
  INTC_EINT1CONF1_CONF2_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF1_CONF2_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF1_CONF2_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF1_CONF2_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF1_CONF2_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF1_CONF2_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF1_CONF2_Enum;

/* =============================================  INTC EINT1CONF1 CONF1 [4..7]  ============================================== */
typedef enum {                                  /*!< INTC_EINT1CONF1_CONF1                                                     */
  INTC_EINT1CONF1_CONF1_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF1_CONF1_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF1_CONF1_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF1_CONF1_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF1_CONF1_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF1_CONF1_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF1_CONF1_Enum;

/* =============================================  INTC EINT1CONF1 CONF0 [0..3]  ============================================== */
typedef enum {                                  /*!< INTC_EINT1CONF1_CONF0                                                     */
  INTC_EINT1CONF1_CONF0_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF1_CONF0_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF1_CONF0_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF1_CONF0_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF1_CONF0_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF1_CONF0_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF1_CONF0_Enum;

/* ======================================================  EINT2CONF1  ======================================================= */
/* ============================================  INTC EINT2CONF1 CONF7 [28..31]  ============================================= */
typedef enum {                                  /*!< INTC_EINT2CONF1_CONF7                                                     */
  INTC_EINT2CONF1_CONF7_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF1_CONF7_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF1_CONF7_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF1_CONF7_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF1_CONF7_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF1_CONF7_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF1_CONF7_Enum;

/* ============================================  INTC EINT2CONF1 CONF6 [24..27]  ============================================= */
typedef enum {                                  /*!< INTC_EINT2CONF1_CONF6                                                     */
  INTC_EINT2CONF1_CONF6_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF1_CONF6_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF1_CONF6_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF1_CONF6_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF1_CONF6_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF1_CONF6_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF1_CONF6_Enum;

/* ============================================  INTC EINT2CONF1 CONF5 [20..23]  ============================================= */
typedef enum {                                  /*!< INTC_EINT2CONF1_CONF5                                                     */
  INTC_EINT2CONF1_CONF5_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF1_CONF5_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF1_CONF5_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF1_CONF5_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF1_CONF5_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF1_CONF5_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF1_CONF5_Enum;

/* ============================================  INTC EINT2CONF1 CONF4 [16..19]  ============================================= */
typedef enum {                                  /*!< INTC_EINT2CONF1_CONF4                                                     */
  INTC_EINT2CONF1_CONF4_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF1_CONF4_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF1_CONF4_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF1_CONF4_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF1_CONF4_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF1_CONF4_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF1_CONF4_Enum;

/* ============================================  INTC EINT2CONF1 CONF3 [12..15]  ============================================= */
typedef enum {                                  /*!< INTC_EINT2CONF1_CONF3                                                     */
  INTC_EINT2CONF1_CONF3_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF1_CONF3_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF1_CONF3_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF1_CONF3_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF1_CONF3_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF1_CONF3_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF1_CONF3_Enum;

/* =============================================  INTC EINT2CONF1 CONF2 [8..11]  ============================================= */
typedef enum {                                  /*!< INTC_EINT2CONF1_CONF2                                                     */
  INTC_EINT2CONF1_CONF2_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF1_CONF2_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF1_CONF2_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF1_CONF2_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF1_CONF2_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF1_CONF2_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF1_CONF2_Enum;

/* =============================================  INTC EINT2CONF1 CONF1 [4..7]  ============================================== */
typedef enum {                                  /*!< INTC_EINT2CONF1_CONF1                                                     */
  INTC_EINT2CONF1_CONF1_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF1_CONF1_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF1_CONF1_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF1_CONF1_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF1_CONF1_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF1_CONF1_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF1_CONF1_Enum;

/* =============================================  INTC EINT2CONF1 CONF0 [0..3]  ============================================== */
typedef enum {                                  /*!< INTC_EINT2CONF1_CONF0                                                     */
  INTC_EINT2CONF1_CONF0_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF1_CONF0_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF1_CONF0_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF1_CONF0_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF1_CONF0_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF1_CONF0_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF1_CONF0_Enum;

/* ======================================================  EINT3CONF1  ======================================================= */
/* ============================================  INTC EINT3CONF1 CONF7 [28..31]  ============================================= */
typedef enum {                                  /*!< INTC_EINT3CONF1_CONF7                                                     */
  INTC_EINT3CONF1_CONF7_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF1_CONF7_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF1_CONF7_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF1_CONF7_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF1_CONF7_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF1_CONF7_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF1_CONF7_Enum;

/* ============================================  INTC EINT3CONF1 CONF6 [24..27]  ============================================= */
typedef enum {                                  /*!< INTC_EINT3CONF1_CONF6                                                     */
  INTC_EINT3CONF1_CONF6_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF1_CONF6_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF1_CONF6_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF1_CONF6_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF1_CONF6_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF1_CONF6_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF1_CONF6_Enum;

/* ============================================  INTC EINT3CONF1 CONF5 [20..23]  ============================================= */
typedef enum {                                  /*!< INTC_EINT3CONF1_CONF5                                                     */
  INTC_EINT3CONF1_CONF5_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF1_CONF5_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF1_CONF5_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF1_CONF5_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF1_CONF5_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF1_CONF5_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF1_CONF5_Enum;

/* ============================================  INTC EINT3CONF1 CONF4 [16..19]  ============================================= */
typedef enum {                                  /*!< INTC_EINT3CONF1_CONF4                                                     */
  INTC_EINT3CONF1_CONF4_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF1_CONF4_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF1_CONF4_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF1_CONF4_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF1_CONF4_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF1_CONF4_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF1_CONF4_Enum;

/* ============================================  INTC EINT3CONF1 CONF3 [12..15]  ============================================= */
typedef enum {                                  /*!< INTC_EINT3CONF1_CONF3                                                     */
  INTC_EINT3CONF1_CONF3_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF1_CONF3_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF1_CONF3_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF1_CONF3_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF1_CONF3_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF1_CONF3_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF1_CONF3_Enum;

/* =============================================  INTC EINT3CONF1 CONF2 [8..11]  ============================================= */
typedef enum {                                  /*!< INTC_EINT3CONF1_CONF2                                                     */
  INTC_EINT3CONF1_CONF2_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF1_CONF2_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF1_CONF2_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF1_CONF2_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF1_CONF2_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF1_CONF2_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF1_CONF2_Enum;

/* =============================================  INTC EINT3CONF1 CONF1 [4..7]  ============================================== */
typedef enum {                                  /*!< INTC_EINT3CONF1_CONF1                                                     */
  INTC_EINT3CONF1_CONF1_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF1_CONF1_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF1_CONF1_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF1_CONF1_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF1_CONF1_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF1_CONF1_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF1_CONF1_Enum;

/* =============================================  INTC EINT3CONF1 CONF0 [0..3]  ============================================== */
typedef enum {                                  /*!< INTC_EINT3CONF1_CONF0                                                     */
  INTC_EINT3CONF1_CONF0_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF1_CONF0_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF1_CONF0_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF1_CONF0_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF1_CONF0_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF1_CONF0_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF1_CONF0_Enum;

/* ======================================================  EINT0CONF2  ======================================================= */
/* ============================================  INTC EINT0CONF2 CONF11 [12..15]  ============================================ */
typedef enum {                                  /*!< INTC_EINT0CONF2_CONF11                                                    */
  INTC_EINT0CONF2_CONF11_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF2_CONF11_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF2_CONF11_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF2_CONF11_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF2_CONF11_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF2_CONF11_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF2_CONF11_Enum;

/* ============================================  INTC EINT0CONF2 CONF10 [8..11]  ============================================= */
typedef enum {                                  /*!< INTC_EINT0CONF2_CONF10                                                    */
  INTC_EINT0CONF2_CONF10_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF2_CONF10_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF2_CONF10_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF2_CONF10_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF2_CONF10_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF2_CONF10_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF2_CONF10_Enum;

/* =============================================  INTC EINT0CONF2 CONF9 [4..7]  ============================================== */
typedef enum {                                  /*!< INTC_EINT0CONF2_CONF9                                                     */
  INTC_EINT0CONF2_CONF9_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF2_CONF9_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF2_CONF9_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF2_CONF9_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF2_CONF9_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF2_CONF9_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF2_CONF9_Enum;

/* =============================================  INTC EINT0CONF2 CONF8 [0..3]  ============================================== */
typedef enum {                                  /*!< INTC_EINT0CONF2_CONF8                                                     */
  INTC_EINT0CONF2_CONF8_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT0CONF2_CONF8_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT0CONF2_CONF8_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT0CONF2_CONF8_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT0CONF2_CONF8_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT0CONF2_CONF8_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT0CONF2_CONF8_Enum;

/* ======================================================  EINT1CONF2  ======================================================= */
/* ============================================  INTC EINT1CONF2 CONF11 [12..15]  ============================================ */
typedef enum {                                  /*!< INTC_EINT1CONF2_CONF11                                                    */
  INTC_EINT1CONF2_CONF11_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF2_CONF11_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF2_CONF11_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF2_CONF11_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF2_CONF11_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF2_CONF11_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF2_CONF11_Enum;

/* ============================================  INTC EINT1CONF2 CONF10 [8..11]  ============================================= */
typedef enum {                                  /*!< INTC_EINT1CONF2_CONF10                                                    */
  INTC_EINT1CONF2_CONF10_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF2_CONF10_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF2_CONF10_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF2_CONF10_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF2_CONF10_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF2_CONF10_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF2_CONF10_Enum;

/* =============================================  INTC EINT1CONF2 CONF9 [4..7]  ============================================== */
typedef enum {                                  /*!< INTC_EINT1CONF2_CONF9                                                     */
  INTC_EINT1CONF2_CONF9_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF2_CONF9_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF2_CONF9_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF2_CONF9_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF2_CONF9_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF2_CONF9_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF2_CONF9_Enum;

/* =============================================  INTC EINT1CONF2 CONF8 [0..3]  ============================================== */
typedef enum {                                  /*!< INTC_EINT1CONF2_CONF8                                                     */
  INTC_EINT1CONF2_CONF8_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT1CONF2_CONF8_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT1CONF2_CONF8_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT1CONF2_CONF8_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT1CONF2_CONF8_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT1CONF2_CONF8_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT1CONF2_CONF8_Enum;

/* ======================================================  EINT2CONF2  ======================================================= */
/* ============================================  INTC EINT2CONF2 CONF11 [12..15]  ============================================ */
typedef enum {                                  /*!< INTC_EINT2CONF2_CONF11                                                    */
  INTC_EINT2CONF2_CONF11_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF2_CONF11_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF2_CONF11_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF2_CONF11_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF2_CONF11_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF2_CONF11_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF2_CONF11_Enum;

/* ============================================  INTC EINT2CONF2 CONF10 [8..11]  ============================================= */
typedef enum {                                  /*!< INTC_EINT2CONF2_CONF10                                                    */
  INTC_EINT2CONF2_CONF10_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF2_CONF10_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF2_CONF10_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF2_CONF10_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF2_CONF10_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF2_CONF10_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF2_CONF10_Enum;

/* =============================================  INTC EINT2CONF2 CONF9 [4..7]  ============================================== */
typedef enum {                                  /*!< INTC_EINT2CONF2_CONF9                                                     */
  INTC_EINT2CONF2_CONF9_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF2_CONF9_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF2_CONF9_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF2_CONF9_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF2_CONF9_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF2_CONF9_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF2_CONF9_Enum;

/* =============================================  INTC EINT2CONF2 CONF8 [0..3]  ============================================== */
typedef enum {                                  /*!< INTC_EINT2CONF2_CONF8                                                     */
  INTC_EINT2CONF2_CONF8_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT2CONF2_CONF8_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT2CONF2_CONF8_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT2CONF2_CONF8_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT2CONF2_CONF8_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT2CONF2_CONF8_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT2CONF2_CONF8_Enum;

/* ======================================================  EINT3CONF2  ======================================================= */
/* ============================================  INTC EINT3CONF2 CONF11 [12..15]  ============================================ */
typedef enum {                                  /*!< INTC_EINT3CONF2_CONF11                                                    */
  INTC_EINT3CONF2_CONF11_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF2_CONF11_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF2_CONF11_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF2_CONF11_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF2_CONF11_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF2_CONF11_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF2_CONF11_Enum;

/* ============================================  INTC EINT3CONF2 CONF10 [8..11]  ============================================= */
typedef enum {                                  /*!< INTC_EINT3CONF2_CONF10                                                    */
  INTC_EINT3CONF2_CONF10_PA            = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF2_CONF10_PB            = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF2_CONF10_PC            = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF2_CONF10_PD            = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF2_CONF10_PE            = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF2_CONF10_PF            = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF2_CONF10_Enum;

/* =============================================  INTC EINT3CONF2 CONF9 [4..7]  ============================================== */
typedef enum {                                  /*!< INTC_EINT3CONF2_CONF9                                                     */
  INTC_EINT3CONF2_CONF9_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF2_CONF9_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF2_CONF9_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF2_CONF9_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF2_CONF9_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF2_CONF9_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF2_CONF9_Enum;

/* =============================================  INTC EINT3CONF2 CONF8 [0..3]  ============================================== */
typedef enum {                                  /*!< INTC_EINT3CONF2_CONF8                                                     */
  INTC_EINT3CONF2_CONF8_PA             = 0,     /*!< PA : Select PA.                                                           */
  INTC_EINT3CONF2_CONF8_PB             = 1,     /*!< PB : Select PB.                                                           */
  INTC_EINT3CONF2_CONF8_PC             = 2,     /*!< PC : Select PC.                                                           */
  INTC_EINT3CONF2_CONF8_PD             = 3,     /*!< PD : Select PD.                                                           */
  INTC_EINT3CONF2_CONF8_PE             = 4,     /*!< PE : Select PE.                                                           */
  INTC_EINT3CONF2_CONF8_PF             = 5,     /*!< PF : Select PF.                                                           */
} INTC_EINT3CONF2_CONF8_Enum;

/* ==========================================================  MSK  ========================================================== */
/* =============================================  INTC MSK IMSK31_NULL [31..31]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK31_NULL                                                      */
  INTC_MSK_IMSK31_NULL_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK31_NULL_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK31_NULL_Enum;

/* =============================================  INTC MSK IMSK30_NULL [30..30]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK30_NULL                                                      */
  INTC_MSK_IMSK30_NULL_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK30_NULL_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK30_NULL_Enum;

/* =============================================  INTC MSK IMSK29_NULL [29..29]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK29_NULL                                                      */
  INTC_MSK_IMSK29_NULL_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK29_NULL_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK29_NULL_Enum;

/* =============================================  INTC MSK IMSK28_NULL [28..28]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK28_NULL                                                      */
  INTC_MSK_IMSK28_NULL_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK28_NULL_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK28_NULL_Enum;

/* ===========================================  INTC MSK IMSK27_USART13 [27..27]  ============================================ */
typedef enum {                                  /*!< INTC_MSK_IMSK27_USART13                                                   */
  INTC_MSK_IMSK27_USART13_Mask         = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK27_USART13_Unmask       = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK27_USART13_Enum;

/* ===========================================  INTC MSK IMSK26_USART12 [26..26]  ============================================ */
typedef enum {                                  /*!< INTC_MSK_IMSK26_USART12                                                   */
  INTC_MSK_IMSK26_USART12_Mask         = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK26_USART12_Unmask       = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK26_USART12_Enum;

/* =============================================  INTC MSK IMSK25_I2C2 [25..25]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK25_I2C2                                                      */
  INTC_MSK_IMSK25_I2C2_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK25_I2C2_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK25_I2C2_Enum;

/* ===========================================  INTC MSK IMSK24_TIMER16 [24..24]  ============================================ */
typedef enum {                                  /*!< INTC_MSK_IMSK24_TIMER16                                                   */
  INTC_MSK_IMSK24_TIMER16_Mask         = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK24_TIMER16_Unmask       = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK24_TIMER16_Enum;

/* ===========================================  INTC MSK IMSK23_TIMER15 [23..23]  ============================================ */
typedef enum {                                  /*!< INTC_MSK_IMSK23_TIMER15                                                   */
  INTC_MSK_IMSK23_TIMER15_Mask         = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK23_TIMER15_Unmask       = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK23_TIMER15_Enum;

/* ===========================================  INTC MSK IMSK22_TIMER14 [22..22]  ============================================ */
typedef enum {                                  /*!< INTC_MSK_IMSK22_TIMER14                                                   */
  INTC_MSK_IMSK22_TIMER14_Mask         = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK22_TIMER14_Unmask       = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK22_TIMER14_Enum;

/* ===========================================  INTC MSK IMSK21_TIMER13 [21..21]  ============================================ */
typedef enum {                                  /*!< INTC_MSK_IMSK21_TIMER13                                                   */
  INTC_MSK_IMSK21_TIMER13_Mask         = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK21_TIMER13_Unmask       = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK21_TIMER13_Enum;

/* ============================================  INTC MSK IMSK20_UART1 [20..20]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK20_UART1                                                     */
  INTC_MSK_IMSK20_UART1_Mask           = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK20_UART1_Unmask         = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK20_UART1_Enum;

/* ============================================  INTC MSK IMSK19_UART0 [19..19]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK19_UART0                                                     */
  INTC_MSK_IMSK19_UART0_Mask           = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK19_UART0_Unmask         = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK19_UART0_Enum;

/* =============================================  INTC MSK IMSK18_ADC [18..18]  ============================================== */
typedef enum {                                  /*!< INTC_MSK_IMSK18_ADC                                                       */
  INTC_MSK_IMSK18_ADC_Mask             = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK18_ADC_Unmask           = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK18_ADC_Enum;

/* ===========================================  INTC MSK IMSK17_USART11 [17..17]  ============================================ */
typedef enum {                                  /*!< INTC_MSK_IMSK17_USART11                                                   */
  INTC_MSK_IMSK17_USART11_Mask         = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK17_USART11_Unmask       = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK17_USART11_Enum;

/* ===========================================  INTC MSK IMSK16_TIMER21 [16..16]  ============================================ */
typedef enum {                                  /*!< INTC_MSK_IMSK16_TIMER21                                                   */
  INTC_MSK_IMSK16_TIMER21_Mask         = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK16_TIMER21_Unmask       = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK16_TIMER21_Enum;

/* ===========================================  INTC MSK IMSK15_TIMER20 [15..15]  ============================================ */
typedef enum {                                  /*!< INTC_MSK_IMSK15_TIMER20                                                   */
  INTC_MSK_IMSK15_TIMER20_Mask         = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK15_TIMER20_Unmask       = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK15_TIMER20_Enum;

/* =============================================  INTC MSK IMSK14_I2C1 [14..14]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK14_I2C1                                                      */
  INTC_MSK_IMSK14_I2C1_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK14_I2C1_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK14_I2C1_Enum;

/* ===========================================  INTC MSK IMSK13_TIMER30 [13..13]  ============================================ */
typedef enum {                                  /*!< INTC_MSK_IMSK13_TIMER30                                                   */
  INTC_MSK_IMSK13_TIMER30_Mask         = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK13_TIMER30_Unmask       = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK13_TIMER30_Enum;

/* ==============================================  INTC MSK IMSK12_WT [12..12]  ============================================== */
typedef enum {                                  /*!< INTC_MSK_IMSK12_WT                                                        */
  INTC_MSK_IMSK12_WT_Mask              = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK12_WT_Unmask            = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK12_WT_Enum;

/* ===========================================  INTC MSK IMSK11_USART10 [11..11]  ============================================ */
typedef enum {                                  /*!< INTC_MSK_IMSK11_USART10                                                   */
  INTC_MSK_IMSK11_USART10_Mask         = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK11_USART10_Unmask       = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK11_USART10_Enum;

/* =============================================  INTC MSK IMSK10_I2C0 [10..10]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK10_I2C0                                                      */
  INTC_MSK_IMSK10_I2C0_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK10_I2C0_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK10_I2C0_Enum;

/* =============================================  INTC MSK IMSK9_TIMER12 [9..9]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK9_TIMER12                                                    */
  INTC_MSK_IMSK9_TIMER12_Mask          = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK9_TIMER12_Unmask        = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK9_TIMER12_Enum;

/* =============================================  INTC MSK IMSK8_TIMER11 [8..8]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK8_TIMER11                                                    */
  INTC_MSK_IMSK8_TIMER11_Mask          = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK8_TIMER11_Unmask        = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK8_TIMER11_Enum;

/* =============================================  INTC MSK IMSK7_TIMER10 [7..7]  ============================================= */
typedef enum {                                  /*!< INTC_MSK_IMSK7_TIMER10                                                    */
  INTC_MSK_IMSK7_TIMER10_Mask          = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK7_TIMER10_Unmask        = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK7_TIMER10_Enum;

/* ==============================================  INTC MSK IMSK6_EINT3 [6..6]  ============================================== */
typedef enum {                                  /*!< INTC_MSK_IMSK6_EINT3                                                      */
  INTC_MSK_IMSK6_EINT3_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK6_EINT3_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK6_EINT3_Enum;

/* ==============================================  INTC MSK IMSK5_EINT2 [5..5]  ============================================== */
typedef enum {                                  /*!< INTC_MSK_IMSK5_EINT2                                                      */
  INTC_MSK_IMSK5_EINT2_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK5_EINT2_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK5_EINT2_Enum;

/* ==============================================  INTC MSK IMSK4_EINT1 [4..4]  ============================================== */
typedef enum {                                  /*!< INTC_MSK_IMSK4_EINT1                                                      */
  INTC_MSK_IMSK4_EINT1_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK4_EINT1_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK4_EINT1_Enum;

/* ==============================================  INTC MSK IMSK3_EINT0 [3..3]  ============================================== */
typedef enum {                                  /*!< INTC_MSK_IMSK3_EINT0                                                      */
  INTC_MSK_IMSK3_EINT0_Mask            = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK3_EINT0_Unmask          = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK3_EINT0_Enum;

/* ===============================================  INTC MSK IMSK2_WDT [2..2]  =============================================== */
typedef enum {                                  /*!< INTC_MSK_IMSK2_WDT                                                        */
  INTC_MSK_IMSK2_WDT_Mask              = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK2_WDT_Unmask            = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK2_WDT_Enum;

/* ===============================================  INTC MSK IMSK1_WUT [1..1]  =============================================== */
typedef enum {                                  /*!< INTC_MSK_IMSK1_WUT                                                        */
  INTC_MSK_IMSK1_WUT_Mask              = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK1_WUT_Unmask            = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK1_WUT_Enum;

/* ===============================================  INTC MSK IMSK0_LVI [0..0]  =============================================== */
typedef enum {                                  /*!< INTC_MSK_IMSK0_LVI                                                        */
  INTC_MSK_IMSK0_LVI_Mask              = 0,     /*!< Mask : Mask Interrupt Source                                              */
  INTC_MSK_IMSK0_LVI_Unmask            = 1,     /*!< Unmask : Unmask Interrupt Source                                          */
} INTC_MSK_IMSK0_LVI_Enum;



/* =========================================================================================================================== */
/* ================                                           SCUCC                                           ================ */
/* =========================================================================================================================== */

/* =======================================================  VENDORID  ======================================================== */
/* ========================================================  CHIPID  ========================================================= */
/* =========================================================  REVNR  ========================================================= */
/* ========================================================  PMREMAP  ======================================================== */
/* =============================================  SCUCC PMREMAP WTIDKY [16..31]  ============================================= */
typedef enum {                                  /*!< SCUCC_PMREMAP_WTIDKY                                                      */
  SCUCC_PMREMAP_WTIDKY_Value           = 58097, /*!< Value : Key Value (0xe2f1)                                                */
} SCUCC_PMREMAP_WTIDKY_Enum;

/* =============================================  SCUCC PMREMAP nPMREM [8..15]  ============================================== */
typedef enum {                                  /*!< SCUCC_PMREMAP_nPMREM                                                      */
  SCUCC_PMREMAP_nPMREM_BootROM         = 150,   /*!< BootROM : Boot ROM is re-mapped to address 0x0. (0x96)                    */
  SCUCC_PMREMAP_nPMREM_FlashMemory     = 0,     /*!< FlashMemory : Flash Memory is re-mapped to address 0x0.                   */
} SCUCC_PMREMAP_nPMREM_Enum;

/* ==============================================  SCUCC PMREMAP PMREM [0..7]  =============================================== */
typedef enum {                                  /*!< SCUCC_PMREMAP_PMREM                                                       */
  SCUCC_PMREMAP_PMREM_BootROM          = 105,   /*!< BootROM : Boot ROM is re-mapped to address 0x0. (0x69)                    */
  SCUCC_PMREMAP_PMREM_FlashMemory      = 0,     /*!< FlashMemory : Flash Memory is re-mapped to address 0x0.                   */
} SCUCC_PMREMAP_PMREM_Enum;

/* ========================================================  BTPSCR  ========================================================= */
/* ===============================================  SCUCC BTPSCR BFIND [5..6]  =============================================== */
typedef enum {                                  /*!< SCUCC_BTPSCR_BFIND                                                        */
  SCUCC_BTPSCR_BFIND_PORorEXTR         = 2,     /*!< PORorEXTR : Check the BOOT pin when a system reset occurs by
                                                     nRESET including POR.                                                     */
  SCUCC_BTPSCR_BFIND_POR               = 3,     /*!< POR : Check the BOOT pin when a system reset occurs only by
                                                     POR.                                                                      */
} SCUCC_BTPSCR_BFIND_Enum;

/* ==============================================  SCUCC BTPSCR BTPSTA [0..0]  =============================================== */
typedef enum {                                  /*!< SCUCC_BTPSCR_BTPSTA                                                       */
  SCUCC_BTPSCR_BTPSTA_Low              = 0,     /*!< Low : The BOOT pin is low level.                                          */
  SCUCC_BTPSCR_BTPSTA_High             = 1,     /*!< High : The BOOT pin is high level.                                        */
} SCUCC_BTPSCR_BTPSTA_Enum;

/* ========================================================  RSTSSR  ========================================================= */
/* ==============================================  SCUCC RSTSSR MONSTA [5..5]  =============================================== */
typedef enum {                                  /*!< SCUCC_RSTSSR_MONSTA                                                       */
  SCUCC_RSTSSR_MONSTA_NotDetected      = 0,     /*!< NotDetected : Not detected.                                               */
  SCUCC_RSTSSR_MONSTA_Detected         = 1,     /*!< Detected : CMR was detected.                                              */
} SCUCC_RSTSSR_MONSTA_Enum;

/* ===============================================  SCUCC RSTSSR SWSTA [4..4]  =============================================== */
typedef enum {                                  /*!< SCUCC_RSTSSR_SWSTA                                                        */
  SCUCC_RSTSSR_SWSTA_NotDetected       = 0,     /*!< NotDetected : Not detected.                                               */
  SCUCC_RSTSSR_SWSTA_Detected          = 1,     /*!< Detected : SWR was detected.                                              */
} SCUCC_RSTSSR_SWSTA_Enum;

/* ==============================================  SCUCC RSTSSR EXTSTA [3..3]  =============================================== */
typedef enum {                                  /*!< SCUCC_RSTSSR_EXTSTA                                                       */
  SCUCC_RSTSSR_EXTSTA_NotDetected      = 0,     /*!< NotDetected : Not detected.                                               */
  SCUCC_RSTSSR_EXTSTA_Detected         = 1,     /*!< Detected : EXTR was detected.                                             */
} SCUCC_RSTSSR_EXTSTA_Enum;

/* ==============================================  SCUCC RSTSSR WDTSTA [2..2]  =============================================== */
typedef enum {                                  /*!< SCUCC_RSTSSR_WDTSTA                                                       */
  SCUCC_RSTSSR_WDTSTA_NotDetected      = 0,     /*!< NotDetected : Not detected.                                               */
  SCUCC_RSTSSR_WDTSTA_Detected         = 1,     /*!< Detected : WDTR was detected.                                             */
} SCUCC_RSTSSR_WDTSTA_Enum;

/* ==============================================  SCUCC RSTSSR LVRSTA [1..1]  =============================================== */
typedef enum {                                  /*!< SCUCC_RSTSSR_LVRSTA                                                       */
  SCUCC_RSTSSR_LVRSTA_NotDetected      = 0,     /*!< NotDetected : Not detected.                                               */
  SCUCC_RSTSSR_LVRSTA_Detected         = 1,     /*!< Detected : LVR was detected.                                              */
} SCUCC_RSTSSR_LVRSTA_Enum;

/* ==============================================  SCUCC RSTSSR PORSTA [0..0]  =============================================== */
typedef enum {                                  /*!< SCUCC_RSTSSR_PORSTA                                                       */
  SCUCC_RSTSSR_PORSTA_NotDetected      = 0,     /*!< NotDetected : Not detected.                                               */
  SCUCC_RSTSSR_PORSTA_Detected         = 1,     /*!< Detected : POR was detected.                                              */
} SCUCC_RSTSSR_PORSTA_Enum;

/* ========================================================  NMISRCR  ======================================================== */
/* ==============================================  SCUCC NMISRCR NMICON [7..7]  ============================================== */
typedef enum {                                  /*!< SCUCC_NMISRCR_NMICON                                                      */
  SCUCC_NMISRCR_NMICON_Disable         = 0,     /*!< Disable : Disable NMI.                                                    */
  SCUCC_NMISRCR_NMICON_Enable          = 1,     /*!< Enable : Enable NMI.                                                      */
} SCUCC_NMISRCR_NMICON_Enum;

/* ==============================================  SCUCC NMISRCR MONINT [6..6]  ============================================== */
typedef enum {                                  /*!< SCUCC_NMISRCR_MONINT                                                      */
  SCUCC_NMISRCR_MONINT_NotSelect       = 0,     /*!< NotSelect : Non-select clock monitoring interrupt for NMI source.         */
  SCUCC_NMISRCR_MONINT_Select          = 1,     /*!< Select : Select clock monitoring interrupt for NMI source.                */
} SCUCC_NMISRCR_MONINT_Enum;

/* ========================================================  SWRSTR  ========================================================= */
/* =============================================  SCUCC SWRSTR WTIDKY [16..31]  ============================================== */
typedef enum {                                  /*!< SCUCC_SWRSTR_WTIDKY                                                       */
  SCUCC_SWRSTR_WTIDKY_Value            = 40627, /*!< Value : Key Value (0x9eb3)                                                */
} SCUCC_SWRSTR_WTIDKY_Enum;

/* ===============================================  SCUCC SWRSTR SWRST [0..7]  =============================================== */
typedef enum {                                  /*!< SCUCC_SWRSTR_SWRST                                                        */
  SCUCC_SWRSTR_SWRST_Generate          = 45,    /*!< Generate : A software reset will be generated for all peripheral
                                                     and core. (0x2d)                                                          */
  SCUCC_SWRSTR_SWRST_NoEffect          = 0,     /*!< NoEffect : No effect.                                                     */
} SCUCC_SWRSTR_SWRST_Enum;

/* ========================================================  SRSTVR  ========================================================= */
/* =========================================================  WUTCR  ========================================================= */
/* ===============================================  SCUCC WUTCR WUTIEN [7..7]  =============================================== */
typedef enum {                                  /*!< SCUCC_WUTCR_WUTIEN                                                        */
  SCUCC_WUTCR_WUTIEN_Disable           = 0,     /*!< Disable : Disable Wake-Up Timer interrupt.                                */
  SCUCC_WUTCR_WUTIEN_Enable            = 1,     /*!< Enable : Enable Wake-Up Timer interrupt.                                  */
} SCUCC_WUTCR_WUTIEN_Enum;

/* ===============================================  SCUCC WUTCR CNTRLD [1..1]  =============================================== */
typedef enum {                                  /*!< SCUCC_WUTCR_CNTRLD                                                        */
  SCUCC_WUTCR_CNTRLD_NoEffect          = 0,     /*!< NoEffect : No effect.                                                     */
  SCUCC_WUTCR_CNTRLD_Reload            = 1,     /*!< Reload : Reload data to counter.                                          */
} SCUCC_WUTCR_CNTRLD_Enum;

/* ==============================================  SCUCC WUTCR WUTIFLAG [0..0]  ============================================== */
typedef enum {                                  /*!< SCUCC_WUTCR_WUTIFLAG                                                      */
  SCUCC_WUTCR_WUTIFLAG_NoRequest       = 0,     /*!< NoRequest : No request occurred.                                          */
  SCUCC_WUTCR_WUTIFLAG_Request         = 1,     /*!< Request : Request occurred.                                               */
} SCUCC_WUTCR_WUTIFLAG_Enum;

/* =========================================================  WUTDR  ========================================================= */
/* ========================================================  HIRCTRM  ======================================================== */
/* =============================================  SCUCC HIRCTRM WTIDKY [16..31]  ============================================= */
typedef enum {                                  /*!< SCUCC_HIRCTRM_WTIDKY                                                      */
  SCUCC_HIRCTRM_WTIDKY_Value           = 42677, /*!< Value : Key Value (0xa6b5)                                                */
} SCUCC_HIRCTRM_WTIDKY_Enum;

/* =======================================================  WDTRCTRM  ======================================================== */
/* ============================================  SCUCC WDTRCTRM WTIDKY [16..31]  ============================================= */
typedef enum {                                  /*!< SCUCC_WDTRCTRM_WTIDKY                                                     */
  SCUCC_WDTRCTRM_WTIDKY_Value          = 19517, /*!< Value : Key Value (0x4c3d)                                                */
} SCUCC_WDTRCTRM_WTIDKY_Enum;



/* =========================================================================================================================== */
/* ================                                           SCUCG                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  SCCR  ========================================================== */
/* ==============================================  SCUCG SCCR WTIDKY [16..31]  =============================================== */
typedef enum {                                  /*!< SCUCG_SCCR_WTIDKY                                                         */
  SCUCG_SCCR_WTIDKY_Value              = 22282, /*!< Value : Key Value (0x570a)                                                */
} SCUCG_SCCR_WTIDKY_Enum;

/* ===============================================  SCUCG SCCR MCLKSEL [0..1]  =============================================== */
typedef enum {                                  /*!< SCUCG_SCCR_MCLKSEL                                                        */
  SCUCG_SCCR_MCLKSEL_HIRC              = 0,     /*!< HIRC : High Frequency Internal RC Oscillator (40MHz), HIRC                */
  SCUCG_SCCR_MCLKSEL_XMOSC             = 1,     /*!< XMOSC : External Main Oscillator (2 - 40MHz), XMOSC                       */
  SCUCG_SCCR_MCLKSEL_XSOSC             = 2,     /*!< XSOSC : External Sub Oscillator (32.768kHz), XSOSC                        */
  SCUCG_SCCR_MCLKSEL_WDTRC             = 3,     /*!< WDTRC : Internal Watch-Dog Timer RC Oscillator (40kHz), WDTRC             */
} SCUCG_SCCR_MCLKSEL_Enum;

/* ========================================================  CLKSRCR  ======================================================== */
/* =============================================  SCUCG CLKSRCR WTIDKY [16..31]  ============================================= */
typedef enum {                                  /*!< SCUCG_CLKSRCR_WTIDKY                                                      */
  SCUCG_CLKSRCR_WTIDKY_Value           = 42247, /*!< Value : Key Value (0xa507)                                                */
} SCUCG_CLKSRCR_WTIDKY_Enum;

/* ============================================  SCUCG CLKSRCR HIRCSEL [12..13]  ============================================= */
typedef enum {                                  /*!< SCUCG_CLKSRCR_HIRCSEL                                                     */
  SCUCG_CLKSRCR_HIRCSEL_HIRC1          = 0,     /*!< HIRC1 : 40MHz HIRC                                                        */
  SCUCG_CLKSRCR_HIRCSEL_HIRC2          = 1,     /*!< HIRC2 : 20MHz HIRC                                                        */
  SCUCG_CLKSRCR_HIRCSEL_HIRC4          = 2,     /*!< HIRC4 : 10MHz HIRC                                                        */
  SCUCG_CLKSRCR_HIRCSEL_HIRC8          = 3,     /*!< HIRC8 : 5MHz HIRC                                                         */
} SCUCG_CLKSRCR_HIRCSEL_Enum;

/* ==============================================  SCUCG CLKSRCR XMFRNG [8..8]  ============================================== */
typedef enum {                                  /*!< SCUCG_CLKSRCR_XMFRNG                                                      */
  SCUCG_CLKSRCR_XMFRNG_Xtal            = 0,     /*!< Xtal : X-tal for XMOSC, 2 to 16MHz                                        */
  SCUCG_CLKSRCR_XMFRNG_Clock           = 1,     /*!< Clock : External Clock for XMOSC, 2MHz to 40MHz                           */
} SCUCG_CLKSRCR_XMFRNG_Enum;

/* =============================================  SCUCG CLKSRCR WDTRCEN [3..3]  ============================================== */
typedef enum {                                  /*!< SCUCG_CLKSRCR_WDTRCEN                                                     */
  SCUCG_CLKSRCR_WDTRCEN_Disable        = 0,     /*!< Disable : Disable WDTRC.                                                  */
  SCUCG_CLKSRCR_WDTRCEN_Enable         = 1,     /*!< Enable : Enable WDTRC.                                                    */
} SCUCG_CLKSRCR_WDTRCEN_Enum;

/* ==============================================  SCUCG CLKSRCR HIRCEN [2..2]  ============================================== */
typedef enum {                                  /*!< SCUCG_CLKSRCR_HIRCEN                                                      */
  SCUCG_CLKSRCR_HIRCEN_Disable         = 0,     /*!< Disable : Disable HIRC.                                                   */
  SCUCG_CLKSRCR_HIRCEN_Enable          = 1,     /*!< Enable : Enable HIRC.                                                     */
} SCUCG_CLKSRCR_HIRCEN_Enum;

/* =============================================  SCUCG CLKSRCR XMOSCEN [1..1]  ============================================== */
typedef enum {                                  /*!< SCUCG_CLKSRCR_XMOSCEN                                                     */
  SCUCG_CLKSRCR_XMOSCEN_Disable        = 0,     /*!< Disable : Disable XMOSC.                                                  */
  SCUCG_CLKSRCR_XMOSCEN_Enable         = 1,     /*!< Enable : Enable XMOSC.                                                    */
} SCUCG_CLKSRCR_XMOSCEN_Enum;

/* =============================================  SCUCG CLKSRCR XSOSCEN [0..0]  ============================================== */
typedef enum {                                  /*!< SCUCG_CLKSRCR_XSOSCEN                                                     */
  SCUCG_CLKSRCR_XSOSCEN_Disable        = 0,     /*!< Disable : Disable XSOSC.                                                  */
  SCUCG_CLKSRCR_XSOSCEN_Enable         = 1,     /*!< Enable : Enable XSOSC.                                                    */
} SCUCG_CLKSRCR_XSOSCEN_Enum;

/* ========================================================  SCDIVR1  ======================================================== */
/* ==============================================  SCUCG SCDIVR1 WLDIV [4..6]  =============================================== */
typedef enum {                                  /*!< SCUCG_SCDIVR1_WLDIV                                                       */
  SCUCG_SCDIVR1_WLDIV_MCLK64           = 0,     /*!< MCLK64 : MCLK/64                                                          */
  SCUCG_SCDIVR1_WLDIV_MCLK128          = 1,     /*!< MCLK128 : MCLK/128                                                        */
  SCUCG_SCDIVR1_WLDIV_MCLK256          = 2,     /*!< MCLK256 : MCLK/256                                                        */
  SCUCG_SCDIVR1_WLDIV_MCLK512          = 3,     /*!< MCLK512 : MCLK/512                                                        */
  SCUCG_SCDIVR1_WLDIV_MCLK1024         = 4,     /*!< MCLK1024 : MCLK/1024                                                      */
} SCUCG_SCDIVR1_WLDIV_Enum;

/* ===============================================  SCUCG SCDIVR1 HDIV [0..2]  =============================================== */
typedef enum {                                  /*!< SCUCG_SCDIVR1_HDIV                                                        */
  SCUCG_SCDIVR1_HDIV_MCLK16            = 0,     /*!< MCLK16 : MCLK/16                                                          */
  SCUCG_SCDIVR1_HDIV_MCLK8             = 1,     /*!< MCLK8 : MCLK/8                                                            */
  SCUCG_SCDIVR1_HDIV_MCLK4             = 2,     /*!< MCLK4 : MCLK/4                                                            */
  SCUCG_SCDIVR1_HDIV_MCLK2             = 3,     /*!< MCLK2 : MCLK/2                                                            */
  SCUCG_SCDIVR1_HDIV_MCLK1             = 4,     /*!< MCLK1 : MCLK/1                                                            */
} SCUCG_SCDIVR1_HDIV_Enum;

/* ========================================================  SCDIVR2  ======================================================== */
/* =============================================  SCUCG SCDIVR2 SYSTDIV [4..5]  ============================================== */
typedef enum {                                  /*!< SCUCG_SCDIVR2_SYSTDIV                                                     */
  SCUCG_SCDIVR2_SYSTDIV_HCLK1          = 0,     /*!< HCLK1 : HCLK/1                                                            */
  SCUCG_SCDIVR2_SYSTDIV_HCLK2          = 1,     /*!< HCLK2 : HCLK/2                                                            */
  SCUCG_SCDIVR2_SYSTDIV_HCLK4          = 2,     /*!< HCLK4 : HCLK/4                                                            */
  SCUCG_SCDIVR2_SYSTDIV_HCLK8          = 3,     /*!< HCLK8 : HCLK/8                                                            */
} SCUCG_SCDIVR2_SYSTDIV_Enum;

/* ===============================================  SCUCG SCDIVR2 PDIV [0..1]  =============================================== */
typedef enum {                                  /*!< SCUCG_SCDIVR2_PDIV                                                        */
  SCUCG_SCDIVR2_PDIV_HCLK1             = 0,     /*!< HCLK1 : HCLK/1                                                            */
  SCUCG_SCDIVR2_PDIV_HCLK2             = 1,     /*!< HCLK2 : HCLK/2                                                            */
  SCUCG_SCDIVR2_PDIV_HCLK4             = 2,     /*!< HCLK4 : HCLK/4                                                            */
  SCUCG_SCDIVR2_PDIV_HCLK8             = 3,     /*!< HCLK8 : HCLK/8                                                            */
} SCUCG_SCDIVR2_PDIV_Enum;

/* ========================================================  CLKOCR  ========================================================= */
/* ==============================================  SCUCG CLKOCR CLKOEN [7..7]  =============================================== */
typedef enum {                                  /*!< SCUCG_CLKOCR_CLKOEN                                                       */
  SCUCG_CLKOCR_CLKOEN_Disable          = 0,     /*!< Disable : Disable clock output.                                           */
  SCUCG_CLKOCR_CLKOEN_Enable           = 1,     /*!< Enable : Enable clock output.                                             */
} SCUCG_CLKOCR_CLKOEN_Enum;

/* ==============================================  SCUCG CLKOCR POLSEL [6..6]  =============================================== */
typedef enum {                                  /*!< SCUCG_CLKOCR_POLSEL                                                       */
  SCUCG_CLKOCR_POLSEL_Low              = 0,     /*!< Low : Low level during disable                                            */
  SCUCG_CLKOCR_POLSEL_High             = 1,     /*!< High : High level during disable                                          */
} SCUCG_CLKOCR_POLSEL_Enum;

/* ==============================================  SCUCG CLKOCR CLKODIV [3..5]  ============================================== */
typedef enum {                                  /*!< SCUCG_CLKOCR_CLKODIV                                                      */
  SCUCG_CLKOCR_CLKODIV_SelectedClock1  = 0,     /*!< SelectedClock1 : Selected Clock/1                                         */
  SCUCG_CLKOCR_CLKODIV_SelectedClock2  = 1,     /*!< SelectedClock2 : Selected Clock/2                                         */
  SCUCG_CLKOCR_CLKODIV_SelectedClock4  = 2,     /*!< SelectedClock4 : Selected Clock/4                                         */
  SCUCG_CLKOCR_CLKODIV_SelectedClock8  = 3,     /*!< SelectedClock8 : Selected Clock/8                                         */
  SCUCG_CLKOCR_CLKODIV_SelectedClock16 = 4,     /*!< SelectedClock16 : Selected Clock/16                                       */
  SCUCG_CLKOCR_CLKODIV_SelectedClock32 = 5,     /*!< SelectedClock32 : Selected Clock/32                                       */
  SCUCG_CLKOCR_CLKODIV_SelectedClock64 = 6,     /*!< SelectedClock64 : Selected Clock/64                                       */
  SCUCG_CLKOCR_CLKODIV_SelectedClock128 = 7,    /*!< SelectedClock128 : Selected Clock/128                                     */
} SCUCG_CLKOCR_CLKODIV_Enum;

/* ===============================================  SCUCG CLKOCR CLKOS [0..2]  =============================================== */
typedef enum {                                  /*!< SCUCG_CLKOCR_CLKOS                                                        */
  SCUCG_CLKOCR_CLKOS_MCLK              = 0,     /*!< MCLK : Select MCLK.                                                       */
  SCUCG_CLKOCR_CLKOS_WDTRC             = 1,     /*!< WDTRC : Select WDTRC.                                                     */
  SCUCG_CLKOCR_CLKOS_HIRC              = 2,     /*!< HIRC : Select HIRC.                                                       */
  SCUCG_CLKOCR_CLKOS_HCLK              = 3,     /*!< HCLK : Select HCLK.                                                       */
  SCUCG_CLKOCR_CLKOS_PCLK              = 4,     /*!< PCLK : Select PCLK.                                                       */
} SCUCG_CLKOCR_CLKOS_Enum;

/* ========================================================  CMONCR  ========================================================= */
/* ===============================================  SCUCG CMONCR MONEN [7..7]  =============================================== */
typedef enum {                                  /*!< SCUCG_CMONCR_MONEN                                                        */
  SCUCG_CMONCR_MONEN_Disable           = 0,     /*!< Disable : Disable clock monitoring.                                       */
  SCUCG_CMONCR_MONEN_Enable            = 1,     /*!< Enable : Enable clock monitoring.                                         */
} SCUCG_CMONCR_MONEN_Enum;

/* ===============================================  SCUCG CMONCR MACTS [5..6]  =============================================== */
typedef enum {                                  /*!< SCUCG_CMONCR_MACTS                                                        */
  SCUCG_CMONCR_MACTS_FlagChk           = 0,     /*!< FlagChk : No action by clock monitoring, but flags will be set/cleared
                                                     on condition                                                              */
  SCUCG_CMONCR_MACTS_RstGen            = 1,     /*!< RstGen : Reset generation by clock monitoring                             */
  SCUCG_CMONCR_MACTS_SysClkChg         = 2,     /*!< SysClkChg : The system clock will be changed to the WDTRC regardless
                                                     of MCLKSEL[1:0] bits of system clock control register (SCU_SCCR)
                                                     only when the MCLK is selected for monitoring                             */
} SCUCG_CMONCR_MACTS_Enum;

/* ==============================================  SCUCG CMONCR MONFLAG [3..3]  ============================================== */
typedef enum {                                  /*!< SCUCG_CMONCR_MONFLAG                                                      */
  SCUCG_CMONCR_MONFLAG_NotReady        = 0,     /*!< NotReady : The clock to be monitored is not ready                         */
  SCUCG_CMONCR_MONFLAG_Ready           = 1,     /*!< Ready : The clock to be monitored is ready                                */
} SCUCG_CMONCR_MONFLAG_Enum;

/* ==============================================  SCUCG CMONCR NMINTFG [2..2]  ============================================== */
typedef enum {                                  /*!< SCUCG_CMONCR_NMINTFG                                                      */
  SCUCG_CMONCR_NMINTFG_NoRequest       = 0,     /*!< NoRequest : No request occurred.                                          */
  SCUCG_CMONCR_NMINTFG_Request         = 1,     /*!< Request : Request occurred.                                               */
} SCUCG_CMONCR_NMINTFG_Enum;

/* ===============================================  SCUCG CMONCR MONCS [0..1]  =============================================== */
typedef enum {                                  /*!< SCUCG_CMONCR_MONCS                                                        */
  SCUCG_CMONCR_MONCS_MCLK              = 0,     /*!< MCLK : Select MCLK.                                                       */
  SCUCG_CMONCR_MONCS_HIRC              = 1,     /*!< HIRC : Select HIRC.                                                       */
  SCUCG_CMONCR_MONCS_XMOSC             = 2,     /*!< XMOSC : Select XMOSC.                                                     */
  SCUCG_CMONCR_MONCS_XSOSC             = 3,     /*!< XSOSC : Select XSOSC.                                                     */
} SCUCG_CMONCR_MONCS_Enum;

/* =======================================================  PPCLKEN1  ======================================================== */
/* ============================================  SCUCG PPCLKEN1 T21CLKE [21..21]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_T21CLKE                                                    */
  SCUCG_PPCLKEN1_T21CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_T21CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_T21CLKE_Enum;

/* ============================================  SCUCG PPCLKEN1 T20CLKE [20..20]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_T20CLKE                                                    */
  SCUCG_PPCLKEN1_T20CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_T20CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_T20CLKE_Enum;

/* ============================================  SCUCG PPCLKEN1 T30CLKE [19..19]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_T30CLKE                                                    */
  SCUCG_PPCLKEN1_T30CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_T30CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_T30CLKE_Enum;

/* ============================================  SCUCG PPCLKEN1 T12CLKE [18..18]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_T12CLKE                                                    */
  SCUCG_PPCLKEN1_T12CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_T12CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_T12CLKE_Enum;

/* ============================================  SCUCG PPCLKEN1 T11CLKE [17..17]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_T11CLKE                                                    */
  SCUCG_PPCLKEN1_T11CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_T11CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_T11CLKE_Enum;

/* ============================================  SCUCG PPCLKEN1 T10CLKE [16..16]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_T10CLKE                                                    */
  SCUCG_PPCLKEN1_T10CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_T10CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_T10CLKE_Enum;

/* ============================================  SCUCG PPCLKEN1 T16CLKE [11..11]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_T16CLKE                                                    */
  SCUCG_PPCLKEN1_T16CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_T16CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_T16CLKE_Enum;

/* ============================================  SCUCG PPCLKEN1 T15CLKE [10..10]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_T15CLKE                                                    */
  SCUCG_PPCLKEN1_T15CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_T15CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_T15CLKE_Enum;

/* =============================================  SCUCG PPCLKEN1 T14CLKE [9..9]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_T14CLKE                                                    */
  SCUCG_PPCLKEN1_T14CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_T14CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_T14CLKE_Enum;

/* =============================================  SCUCG PPCLKEN1 T13CLKE [8..8]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_T13CLKE                                                    */
  SCUCG_PPCLKEN1_T13CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_T13CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_T13CLKE_Enum;

/* =============================================  SCUCG PPCLKEN1 PFCLKE [5..5]  ============================================== */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_PFCLKE                                                     */
  SCUCG_PPCLKEN1_PFCLKE_Disable        = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_PFCLKE_Enable         = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_PFCLKE_Enum;

/* =============================================  SCUCG PPCLKEN1 PECLKE [4..4]  ============================================== */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_PECLKE                                                     */
  SCUCG_PPCLKEN1_PECLKE_Disable        = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_PECLKE_Enable         = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_PECLKE_Enum;

/* =============================================  SCUCG PPCLKEN1 PDCLKE [3..3]  ============================================== */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_PDCLKE                                                     */
  SCUCG_PPCLKEN1_PDCLKE_Disable        = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_PDCLKE_Enable         = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_PDCLKE_Enum;

/* =============================================  SCUCG PPCLKEN1 PCCLKE [2..2]  ============================================== */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_PCCLKE                                                     */
  SCUCG_PPCLKEN1_PCCLKE_Disable        = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_PCCLKE_Enable         = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_PCCLKE_Enum;

/* =============================================  SCUCG PPCLKEN1 PBCLKE [1..1]  ============================================== */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_PBCLKE                                                     */
  SCUCG_PPCLKEN1_PBCLKE_Disable        = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_PBCLKE_Enable         = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_PBCLKE_Enum;

/* =============================================  SCUCG PPCLKEN1 PACLKE [0..0]  ============================================== */
typedef enum {                                  /*!< SCUCG_PPCLKEN1_PACLKE                                                     */
  SCUCG_PPCLKEN1_PACLKE_Disable        = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN1_PACLKE_Enable         = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN1_PACLKE_Enum;

/* =======================================================  PPCLKEN2  ======================================================== */
/* ============================================  SCUCG PPCLKEN2 FMCLKE [19..19]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_FMCLKE                                                     */
  SCUCG_PPCLKEN2_FMCLKE_Disable        = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_FMCLKE_Enable         = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_FMCLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 LVICLKE [18..18]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_LVICLKE                                                    */
  SCUCG_PPCLKEN2_LVICLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_LVICLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_LVICLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 WDTCLKE [17..17]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_WDTCLKE                                                    */
  SCUCG_PPCLKEN2_WDTCLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_WDTCLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_WDTCLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 WTCLKE [16..16]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_WTCLKE                                                     */
  SCUCG_PPCLKEN2_WTCLKE_Disable        = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_WTCLKE_Enable         = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_WTCLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 LCDCLKE [13..13]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_LCDCLKE                                                    */
  SCUCG_PPCLKEN2_LCDCLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_LCDCLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_LCDCLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 CRCLKE [12..12]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_CRCLKE                                                     */
  SCUCG_PPCLKEN2_CRCLKE_Disable        = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_CRCLKE_Enable         = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_CRCLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 ADCLKE [10..10]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_ADCLKE                                                     */
  SCUCG_PPCLKEN2_ADCLKE_Disable        = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_ADCLKE_Enable         = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_ADCLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 I2C2CLKE [8..8]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_I2C2CLKE                                                   */
  SCUCG_PPCLKEN2_I2C2CLKE_Disable      = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_I2C2CLKE_Enable       = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_I2C2CLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 I2C1CLKE [7..7]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_I2C1CLKE                                                   */
  SCUCG_PPCLKEN2_I2C1CLKE_Disable      = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_I2C1CLKE_Enable       = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_I2C1CLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 I2C0CLKE [6..6]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_I2C0CLKE                                                   */
  SCUCG_PPCLKEN2_I2C0CLKE_Disable      = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_I2C0CLKE_Enable       = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_I2C0CLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 UST13CLKE [5..5]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_UST13CLKE                                                  */
  SCUCG_PPCLKEN2_UST13CLKE_Disable     = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_UST13CLKE_Enable      = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_UST13CLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 UST12CLKE [4..4]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_UST12CLKE                                                  */
  SCUCG_PPCLKEN2_UST12CLKE_Disable     = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_UST12CLKE_Enable      = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_UST12CLKE_Enum;

/* =============================================  SCUCG PPCLKEN2 UT1CLKE [3..3]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_UT1CLKE                                                    */
  SCUCG_PPCLKEN2_UT1CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_UT1CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_UT1CLKE_Enum;

/* =============================================  SCUCG PPCLKEN2 UT0CLKE [2..2]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_UT0CLKE                                                    */
  SCUCG_PPCLKEN2_UT0CLKE_Disable       = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_UT0CLKE_Enable        = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_UT0CLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 UST11CLKE [1..1]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_UST11CLKE                                                  */
  SCUCG_PPCLKEN2_UST11CLKE_Disable     = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_UST11CLKE_Enable      = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_UST11CLKE_Enum;

/* ============================================  SCUCG PPCLKEN2 UST10CLKE [0..0]  ============================================ */
typedef enum {                                  /*!< SCUCG_PPCLKEN2_UST10CLKE                                                  */
  SCUCG_PPCLKEN2_UST10CLKE_Disable     = 0,     /*!< Disable : Disable clock.                                                  */
  SCUCG_PPCLKEN2_UST10CLKE_Enable      = 1,     /*!< Enable : Enable clock.                                                    */
} SCUCG_PPCLKEN2_UST10CLKE_Enum;

/* ========================================================  PPCLKSR  ======================================================== */
/* =============================================  SCUCG PPCLKSR T20CLK [20..20]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKSR_T20CLK                                                      */
  SCUCG_PPCLKSR_T20CLK_XSOSC           = 0,     /*!< XSOSC : XSOSC clock                                                       */
  SCUCG_PPCLKSR_T20CLK_PCLK            = 1,     /*!< PCLK : PCLK clock                                                         */
} SCUCG_PPCLKSR_T20CLK_Enum;

/* =============================================  SCUCG PPCLKSR T30CLK [17..17]  ============================================= */
typedef enum {                                  /*!< SCUCG_PPCLKSR_T30CLK                                                      */
  SCUCG_PPCLKSR_T30CLK_MCLK            = 0,     /*!< MCLK : MCLK clock                                                         */
  SCUCG_PPCLKSR_T30CLK_PCLK            = 1,     /*!< PCLK : PCLK clock                                                         */
} SCUCG_PPCLKSR_T30CLK_Enum;

/* ==============================================  SCUCG PPCLKSR LCDCLK [6..7]  ============================================== */
typedef enum {                                  /*!< SCUCG_PPCLKSR_LCDCLK                                                      */
  SCUCG_PPCLKSR_LCDCLK_DividedMCLK     = 0,     /*!< DividedMCLK : A clock of the MCLK which is divided by divider
                                                     2                                                                         */
  SCUCG_PPCLKSR_LCDCLK_XSOSC           = 1,     /*!< XSOSC : XSOSC clock                                                       */
  SCUCG_PPCLKSR_LCDCLK_WDTRC           = 2,     /*!< WDTRC : WDTRC clock                                                       */
} SCUCG_PPCLKSR_LCDCLK_Enum;

/* ==============================================  SCUCG PPCLKSR WTCLK [3..4]  =============================================== */
typedef enum {                                  /*!< SCUCG_PPCLKSR_WTCLK                                                       */
  SCUCG_PPCLKSR_WTCLK_DividedMCLK      = 0,     /*!< DividedMCLK : A clock of the MCLK which is divided by divider
                                                     2                                                                         */
  SCUCG_PPCLKSR_WTCLK_XSOSC            = 1,     /*!< XSOSC : XSOSC clock                                                       */
  SCUCG_PPCLKSR_WTCLK_WDTRC            = 2,     /*!< WDTRC : WDTRC clock                                                       */
} SCUCG_PPCLKSR_WTCLK_Enum;

/* ==============================================  SCUCG PPCLKSR WDTCLK [0..0]  ============================================== */
typedef enum {                                  /*!< SCUCG_PPCLKSR_WDTCLK                                                      */
  SCUCG_PPCLKSR_WDTCLK_WDTRC           = 0,     /*!< WDTRC : WDTRC clock                                                       */
  SCUCG_PPCLKSR_WDTCLK_PCLK            = 1,     /*!< PCLK : PCLK clock                                                         */
} SCUCG_PPCLKSR_WDTCLK_Enum;

/* ========================================================  PPRST1  ========================================================= */
/* ========================================================  PPRST2  ========================================================= */
/* ========================================================  XTFLSR  ========================================================= */
/* =============================================  SCUCG XTFLSR WTIDKY [16..31]  ============================================== */
typedef enum {                                  /*!< SCUCG_XTFLSR_WTIDKY                                                       */
  SCUCG_XTFLSR_WTIDKY_Value            = 39735, /*!< Value : Key Value (0x9b37)                                                */
} SCUCG_XTFLSR_WTIDKY_Enum;

/* ===============================================  SCUCG XTFLSR XRNS [0..2]  ================================================ */
typedef enum {                                  /*!< SCUCG_XTFLSR_XRNS                                                         */
  SCUCG_XTFLSR_XRNS_LE4p5MHz           = 0,     /*!< LE4p5MHz : x-tal LE 4.5MHz                                                */
  SCUCG_XTFLSR_XRNS_LE6p5MHz           = 1,     /*!< LE6p5MHz : 4.5MHz GT x-tal LE 6.5MHz                                      */
  SCUCG_XTFLSR_XRNS_LE8p5MHz           = 2,     /*!< LE8p5MHz : 6.5MHz GT x-tal LE 8.5MHz                                      */
  SCUCG_XTFLSR_XRNS_LE10p5MHz          = 3,     /*!< LE10p5MHz : 8.5MHz GT x-tal LE 10.5MHz                                    */
  SCUCG_XTFLSR_XRNS_LE12p5MHz          = 4,     /*!< LE12p5MHz : 10.5MHz GT x-tal LE 12.5MHz                                   */
  SCUCG_XTFLSR_XRNS_LE16p5MHz          = 5,     /*!< LE16p5MHz : 12.5MHz GT x-tal LE 16.5MHz                                   */
} SCUCG_XTFLSR_XRNS_Enum;



/* =========================================================================================================================== */
/* ================                                           SCULV                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  LVICR  ========================================================= */
/* ===============================================  SCULV LVICR LVIEN [7..7]  ================================================ */
typedef enum {                                  /*!< SCULV_LVICR_LVIEN                                                         */
  SCULV_LVICR_LVIEN_Disable            = 0,     /*!< Disable : Disable low voltage indicator.                                  */
  SCULV_LVICR_LVIEN_Enable             = 1,     /*!< Enable : Enable low voltage indicator.                                    */
} SCULV_LVICR_LVIEN_Enum;

/* ==============================================  SCULV LVICR LVINTEN [5..5]  =============================================== */
typedef enum {                                  /*!< SCULV_LVICR_LVINTEN                                                       */
  SCULV_LVICR_LVINTEN_Disable          = 0,     /*!< Disable : Disable low voltage indicator interrupt.                        */
  SCULV_LVICR_LVINTEN_Enable           = 1,     /*!< Enable : Enable low voltage indicator interrupt.                          */
} SCULV_LVICR_LVINTEN_Enum;

/* ==============================================  SCULV LVICR LVIFLAG [4..4]  =============================================== */
typedef enum {                                  /*!< SCULV_LVICR_LVIFLAG                                                       */
  SCULV_LVICR_LVIFLAG_NoRequest        = 0,     /*!< NoRequest : No request occurred.                                          */
  SCULV_LVICR_LVIFLAG_Request          = 1,     /*!< Request : Request occurred.                                               */
} SCULV_LVICR_LVIFLAG_Enum;

/* ===============================================  SCULV LVICR LVIVS [0..3]  ================================================ */
typedef enum {                                  /*!< SCULV_LVICR_LVIVS                                                         */
  SCULV_LVICR_LVIVS_DNW3               = 3,     /*!< DNW3 : Do not write.                                                      */
  SCULV_LVICR_LVIVS_2p00V              = 4,     /*!< 2p00V : 2.00V                                                             */
  SCULV_LVICR_LVIVS_2p13V              = 5,     /*!< 2p13V : 2.13V                                                             */
  SCULV_LVICR_LVIVS_2p28V              = 6,     /*!< 2p28V : 2.28V                                                             */
  SCULV_LVICR_LVIVS_2p46V              = 7,     /*!< 2p46V : 2.46V                                                             */
  SCULV_LVICR_LVIVS_2p67V              = 8,     /*!< 2p67V : 2.67V                                                             */
  SCULV_LVICR_LVIVS_3p04V              = 9,     /*!< 3p04V : 3.04V                                                             */
  SCULV_LVICR_LVIVS_3p20V              = 10,    /*!< 3p20V : 3.20V                                                             */
  SCULV_LVICR_LVIVS_3p55V              = 11,    /*!< 3p55V : 3.55V                                                             */
  SCULV_LVICR_LVIVS_3p75V              = 12,    /*!< 3p75V : 3.75V                                                             */
  SCULV_LVICR_LVIVS_3p99V              = 13,    /*!< 3p99V : 3.99V                                                             */
  SCULV_LVICR_LVIVS_4p25V              = 14,    /*!< 4p25V : 4.25V                                                             */
  SCULV_LVICR_LVIVS_4p55V              = 15,    /*!< 4p55V : 4.55V                                                             */
} SCULV_LVICR_LVIVS_Enum;

/* =========================================================  LVRCR  ========================================================= */
/* ===============================================  SCULV LVRCR LVREN [0..7]  ================================================ */
typedef enum {                                  /*!< SCULV_LVRCR_LVREN                                                         */
  SCULV_LVRCR_LVREN_Disable            = 85,    /*!< Disable : Disable low voltage reset. (0x55)                               */
  SCULV_LVRCR_LVREN_Enable             = 0,     /*!< Enable : Enable low voltage reset.                                        */
} SCULV_LVRCR_LVREN_Enum;



/* =========================================================================================================================== */
/* ================                                            Pn                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
/* ================================================  Pn MOD MODE15 [30..31]  ================================================= */
typedef enum {                                  /*!< Pn_MOD_MODE15                                                             */
  Pn_MOD_MODE15_Input                  = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE15_Output                 = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE15_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE15_Enum;

/* ================================================  Pn MOD MODE14 [28..29]  ================================================= */
typedef enum {                                  /*!< Pn_MOD_MODE14                                                             */
  Pn_MOD_MODE14_Input                  = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE14_Output                 = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE14_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE14_Enum;

/* ================================================  Pn MOD MODE13 [26..27]  ================================================= */
typedef enum {                                  /*!< Pn_MOD_MODE13                                                             */
  Pn_MOD_MODE13_Input                  = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE13_Output                 = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE13_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE13_Enum;

/* ================================================  Pn MOD MODE12 [24..25]  ================================================= */
typedef enum {                                  /*!< Pn_MOD_MODE12                                                             */
  Pn_MOD_MODE12_Input                  = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE12_Output                 = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE12_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE12_Enum;

/* ================================================  Pn MOD MODE11 [22..23]  ================================================= */
typedef enum {                                  /*!< Pn_MOD_MODE11                                                             */
  Pn_MOD_MODE11_Input                  = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE11_Output                 = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE11_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE11_Enum;

/* ================================================  Pn MOD MODE10 [20..21]  ================================================= */
typedef enum {                                  /*!< Pn_MOD_MODE10                                                             */
  Pn_MOD_MODE10_Input                  = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE10_Output                 = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE10_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE10_Enum;

/* =================================================  Pn MOD MODE9 [18..19]  ================================================= */
typedef enum {                                  /*!< Pn_MOD_MODE9                                                              */
  Pn_MOD_MODE9_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE9_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE9_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE9_Enum;

/* =================================================  Pn MOD MODE8 [16..17]  ================================================= */
typedef enum {                                  /*!< Pn_MOD_MODE8                                                              */
  Pn_MOD_MODE8_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE8_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE8_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE8_Enum;

/* =================================================  Pn MOD MODE7 [14..15]  ================================================= */
typedef enum {                                  /*!< Pn_MOD_MODE7                                                              */
  Pn_MOD_MODE7_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE7_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE7_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE7_Enum;

/* =================================================  Pn MOD MODE6 [12..13]  ================================================= */
typedef enum {                                  /*!< Pn_MOD_MODE6                                                              */
  Pn_MOD_MODE6_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE6_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE6_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE6_Enum;

/* =================================================  Pn MOD MODE5 [10..11]  ================================================= */
typedef enum {                                  /*!< Pn_MOD_MODE5                                                              */
  Pn_MOD_MODE5_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE5_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE5_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE5_Enum;

/* ==================================================  Pn MOD MODE4 [8..9]  ================================================== */
typedef enum {                                  /*!< Pn_MOD_MODE4                                                              */
  Pn_MOD_MODE4_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE4_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE4_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE4_Enum;

/* ==================================================  Pn MOD MODE3 [6..7]  ================================================== */
typedef enum {                                  /*!< Pn_MOD_MODE3                                                              */
  Pn_MOD_MODE3_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE3_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE3_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE3_Enum;

/* ==================================================  Pn MOD MODE2 [4..5]  ================================================== */
typedef enum {                                  /*!< Pn_MOD_MODE2                                                              */
  Pn_MOD_MODE2_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE2_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE2_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE2_Enum;

/* ==================================================  Pn MOD MODE1 [2..3]  ================================================== */
typedef enum {                                  /*!< Pn_MOD_MODE1                                                              */
  Pn_MOD_MODE1_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE1_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE1_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE1_Enum;

/* ==================================================  Pn MOD MODE0 [0..1]  ================================================== */
typedef enum {                                  /*!< Pn_MOD_MODE0                                                              */
  Pn_MOD_MODE0_Input                   = 0,     /*!< Input : Input Mode                                                        */
  Pn_MOD_MODE0_Output                  = 1,     /*!< Output : Output Mode                                                      */
  Pn_MOD_MODE0_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} Pn_MOD_MODE0_Enum;

/* ==========================================================  TYP  ========================================================== */
/* =================================================  Pn TYP TYP15 [15..15]  ================================================= */
typedef enum {                                  /*!< Pn_TYP_TYP15                                                              */
  Pn_TYP_TYP15_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP15_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP15_Enum;

/* =================================================  Pn TYP TYP14 [14..14]  ================================================= */
typedef enum {                                  /*!< Pn_TYP_TYP14                                                              */
  Pn_TYP_TYP14_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP14_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP14_Enum;

/* =================================================  Pn TYP TYP13 [13..13]  ================================================= */
typedef enum {                                  /*!< Pn_TYP_TYP13                                                              */
  Pn_TYP_TYP13_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP13_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP13_Enum;

/* =================================================  Pn TYP TYP12 [12..12]  ================================================= */
typedef enum {                                  /*!< Pn_TYP_TYP12                                                              */
  Pn_TYP_TYP12_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP12_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP12_Enum;

/* =================================================  Pn TYP TYP11 [11..11]  ================================================= */
typedef enum {                                  /*!< Pn_TYP_TYP11                                                              */
  Pn_TYP_TYP11_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP11_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP11_Enum;

/* =================================================  Pn TYP TYP10 [10..10]  ================================================= */
typedef enum {                                  /*!< Pn_TYP_TYP10                                                              */
  Pn_TYP_TYP10_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP10_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP10_Enum;

/* ==================================================  Pn TYP TYP9 [9..9]  =================================================== */
typedef enum {                                  /*!< Pn_TYP_TYP9                                                               */
  Pn_TYP_TYP9_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP9_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP9_Enum;

/* ==================================================  Pn TYP TYP8 [8..8]  =================================================== */
typedef enum {                                  /*!< Pn_TYP_TYP8                                                               */
  Pn_TYP_TYP8_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP8_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP8_Enum;

/* ==================================================  Pn TYP TYP7 [7..7]  =================================================== */
typedef enum {                                  /*!< Pn_TYP_TYP7                                                               */
  Pn_TYP_TYP7_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP7_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP7_Enum;

/* ==================================================  Pn TYP TYP6 [6..6]  =================================================== */
typedef enum {                                  /*!< Pn_TYP_TYP6                                                               */
  Pn_TYP_TYP6_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP6_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP6_Enum;

/* ==================================================  Pn TYP TYP5 [5..5]  =================================================== */
typedef enum {                                  /*!< Pn_TYP_TYP5                                                               */
  Pn_TYP_TYP5_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP5_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP5_Enum;

/* ==================================================  Pn TYP TYP4 [4..4]  =================================================== */
typedef enum {                                  /*!< Pn_TYP_TYP4                                                               */
  Pn_TYP_TYP4_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP4_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP4_Enum;

/* ==================================================  Pn TYP TYP3 [3..3]  =================================================== */
typedef enum {                                  /*!< Pn_TYP_TYP3                                                               */
  Pn_TYP_TYP3_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP3_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP3_Enum;

/* ==================================================  Pn TYP TYP2 [2..2]  =================================================== */
typedef enum {                                  /*!< Pn_TYP_TYP2                                                               */
  Pn_TYP_TYP2_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP2_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP2_Enum;

/* ==================================================  Pn TYP TYP1 [1..1]  =================================================== */
typedef enum {                                  /*!< Pn_TYP_TYP1                                                               */
  Pn_TYP_TYP1_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP1_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP1_Enum;

/* ==================================================  Pn TYP TYP0 [0..0]  =================================================== */
typedef enum {                                  /*!< Pn_TYP_TYP0                                                               */
  Pn_TYP_TYP0_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  Pn_TYP_TYP0_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} Pn_TYP_TYP0_Enum;

/* =========================================================  AFSR1  ========================================================= */
/* ================================================  Pn AFSR1 AFSR7 [28..31]  ================================================ */
typedef enum {                                  /*!< Pn_AFSR1_AFSR7                                                            */
  Pn_AFSR1_AFSR7_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR1_AFSR7_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR1_AFSR7_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR1_AFSR7_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR1_AFSR7_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} Pn_AFSR1_AFSR7_Enum;

/* ================================================  Pn AFSR1 AFSR6 [24..27]  ================================================ */
typedef enum {                                  /*!< Pn_AFSR1_AFSR6                                                            */
  Pn_AFSR1_AFSR6_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR1_AFSR6_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR1_AFSR6_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR1_AFSR6_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR1_AFSR6_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} Pn_AFSR1_AFSR6_Enum;

/* ================================================  Pn AFSR1 AFSR5 [20..23]  ================================================ */
typedef enum {                                  /*!< Pn_AFSR1_AFSR5                                                            */
  Pn_AFSR1_AFSR5_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR1_AFSR5_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR1_AFSR5_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR1_AFSR5_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR1_AFSR5_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} Pn_AFSR1_AFSR5_Enum;

/* ================================================  Pn AFSR1 AFSR4 [16..19]  ================================================ */
typedef enum {                                  /*!< Pn_AFSR1_AFSR4                                                            */
  Pn_AFSR1_AFSR4_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR1_AFSR4_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR1_AFSR4_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR1_AFSR4_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR1_AFSR4_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} Pn_AFSR1_AFSR4_Enum;

/* ================================================  Pn AFSR1 AFSR3 [12..15]  ================================================ */
typedef enum {                                  /*!< Pn_AFSR1_AFSR3                                                            */
  Pn_AFSR1_AFSR3_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR1_AFSR3_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR1_AFSR3_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR1_AFSR3_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR1_AFSR3_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} Pn_AFSR1_AFSR3_Enum;

/* ================================================  Pn AFSR1 AFSR2 [8..11]  ================================================= */
typedef enum {                                  /*!< Pn_AFSR1_AFSR2                                                            */
  Pn_AFSR1_AFSR2_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR1_AFSR2_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR1_AFSR2_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR1_AFSR2_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR1_AFSR2_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} Pn_AFSR1_AFSR2_Enum;

/* =================================================  Pn AFSR1 AFSR1 [4..7]  ================================================= */
typedef enum {                                  /*!< Pn_AFSR1_AFSR1                                                            */
  Pn_AFSR1_AFSR1_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR1_AFSR1_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR1_AFSR1_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR1_AFSR1_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR1_AFSR1_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} Pn_AFSR1_AFSR1_Enum;

/* =================================================  Pn AFSR1 AFSR0 [0..3]  ================================================= */
typedef enum {                                  /*!< Pn_AFSR1_AFSR0                                                            */
  Pn_AFSR1_AFSR0_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR1_AFSR0_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR1_AFSR0_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR1_AFSR0_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR1_AFSR0_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} Pn_AFSR1_AFSR0_Enum;

/* =========================================================  AFSR2  ========================================================= */
/* ===============================================  Pn AFSR2 AFSR15 [28..31]  ================================================ */
typedef enum {                                  /*!< Pn_AFSR2_AFSR15                                                           */
  Pn_AFSR2_AFSR15_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR2_AFSR15_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR2_AFSR15_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR2_AFSR15_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR2_AFSR15_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} Pn_AFSR2_AFSR15_Enum;

/* ===============================================  Pn AFSR2 AFSR14 [24..27]  ================================================ */
typedef enum {                                  /*!< Pn_AFSR2_AFSR14                                                           */
  Pn_AFSR2_AFSR14_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR2_AFSR14_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR2_AFSR14_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR2_AFSR14_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR2_AFSR14_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} Pn_AFSR2_AFSR14_Enum;

/* ===============================================  Pn AFSR2 AFSR13 [20..23]  ================================================ */
typedef enum {                                  /*!< Pn_AFSR2_AFSR13                                                           */
  Pn_AFSR2_AFSR13_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR2_AFSR13_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR2_AFSR13_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR2_AFSR13_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR2_AFSR13_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} Pn_AFSR2_AFSR13_Enum;

/* ===============================================  Pn AFSR2 AFSR12 [16..19]  ================================================ */
typedef enum {                                  /*!< Pn_AFSR2_AFSR12                                                           */
  Pn_AFSR2_AFSR12_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR2_AFSR12_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR2_AFSR12_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR2_AFSR12_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR2_AFSR12_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} Pn_AFSR2_AFSR12_Enum;

/* ===============================================  Pn AFSR2 AFSR11 [12..15]  ================================================ */
typedef enum {                                  /*!< Pn_AFSR2_AFSR11                                                           */
  Pn_AFSR2_AFSR11_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR2_AFSR11_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR2_AFSR11_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR2_AFSR11_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR2_AFSR11_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} Pn_AFSR2_AFSR11_Enum;

/* ================================================  Pn AFSR2 AFSR10 [8..11]  ================================================ */
typedef enum {                                  /*!< Pn_AFSR2_AFSR10                                                           */
  Pn_AFSR2_AFSR10_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR2_AFSR10_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR2_AFSR10_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR2_AFSR10_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR2_AFSR10_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} Pn_AFSR2_AFSR10_Enum;

/* =================================================  Pn AFSR2 AFSR9 [4..7]  ================================================= */
typedef enum {                                  /*!< Pn_AFSR2_AFSR9                                                            */
  Pn_AFSR2_AFSR9_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR2_AFSR9_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR2_AFSR9_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR2_AFSR9_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR2_AFSR9_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} Pn_AFSR2_AFSR9_Enum;

/* =================================================  Pn AFSR2 AFSR8 [0..3]  ================================================= */
typedef enum {                                  /*!< Pn_AFSR2_AFSR8                                                            */
  Pn_AFSR2_AFSR8_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  Pn_AFSR2_AFSR8_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  Pn_AFSR2_AFSR8_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  Pn_AFSR2_AFSR8_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  Pn_AFSR2_AFSR8_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} Pn_AFSR2_AFSR8_Enum;

/* =========================================================  PUPD  ========================================================== */
/* ================================================  Pn PUPD PUPD15 [30..31]  ================================================ */
typedef enum {                                  /*!< Pn_PUPD_PUPD15                                                            */
  Pn_PUPD_PUPD15_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD15_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD15_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD15_Enum;

/* ================================================  Pn PUPD PUPD14 [28..29]  ================================================ */
typedef enum {                                  /*!< Pn_PUPD_PUPD14                                                            */
  Pn_PUPD_PUPD14_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD14_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD14_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD14_Enum;

/* ================================================  Pn PUPD PUPD13 [26..27]  ================================================ */
typedef enum {                                  /*!< Pn_PUPD_PUPD13                                                            */
  Pn_PUPD_PUPD13_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD13_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD13_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD13_Enum;

/* ================================================  Pn PUPD PUPD12 [24..25]  ================================================ */
typedef enum {                                  /*!< Pn_PUPD_PUPD12                                                            */
  Pn_PUPD_PUPD12_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD12_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD12_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD12_Enum;

/* ================================================  Pn PUPD PUPD11 [22..23]  ================================================ */
typedef enum {                                  /*!< Pn_PUPD_PUPD11                                                            */
  Pn_PUPD_PUPD11_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD11_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD11_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD11_Enum;

/* ================================================  Pn PUPD PUPD10 [20..21]  ================================================ */
typedef enum {                                  /*!< Pn_PUPD_PUPD10                                                            */
  Pn_PUPD_PUPD10_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD10_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD10_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD10_Enum;

/* ================================================  Pn PUPD PUPD9 [18..19]  ================================================= */
typedef enum {                                  /*!< Pn_PUPD_PUPD9                                                             */
  Pn_PUPD_PUPD9_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD9_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD9_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD9_Enum;

/* ================================================  Pn PUPD PUPD8 [16..17]  ================================================= */
typedef enum {                                  /*!< Pn_PUPD_PUPD8                                                             */
  Pn_PUPD_PUPD8_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD8_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD8_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD8_Enum;

/* ================================================  Pn PUPD PUPD7 [14..15]  ================================================= */
typedef enum {                                  /*!< Pn_PUPD_PUPD7                                                             */
  Pn_PUPD_PUPD7_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD7_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD7_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD7_Enum;

/* ================================================  Pn PUPD PUPD6 [12..13]  ================================================= */
typedef enum {                                  /*!< Pn_PUPD_PUPD6                                                             */
  Pn_PUPD_PUPD6_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD6_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD6_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD6_Enum;

/* ================================================  Pn PUPD PUPD5 [10..11]  ================================================= */
typedef enum {                                  /*!< Pn_PUPD_PUPD5                                                             */
  Pn_PUPD_PUPD5_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD5_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD5_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD5_Enum;

/* =================================================  Pn PUPD PUPD4 [8..9]  ================================================== */
typedef enum {                                  /*!< Pn_PUPD_PUPD4                                                             */
  Pn_PUPD_PUPD4_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD4_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD4_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD4_Enum;

/* =================================================  Pn PUPD PUPD3 [6..7]  ================================================== */
typedef enum {                                  /*!< Pn_PUPD_PUPD3                                                             */
  Pn_PUPD_PUPD3_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD3_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD3_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD3_Enum;

/* =================================================  Pn PUPD PUPD2 [4..5]  ================================================== */
typedef enum {                                  /*!< Pn_PUPD_PUPD2                                                             */
  Pn_PUPD_PUPD2_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD2_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD2_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD2_Enum;

/* =================================================  Pn PUPD PUPD1 [2..3]  ================================================== */
typedef enum {                                  /*!< Pn_PUPD_PUPD1                                                             */
  Pn_PUPD_PUPD1_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD1_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD1_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD1_Enum;

/* =================================================  Pn PUPD PUPD0 [0..1]  ================================================== */
typedef enum {                                  /*!< Pn_PUPD_PUPD0                                                             */
  Pn_PUPD_PUPD0_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  Pn_PUPD_PUPD0_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  Pn_PUPD_PUPD0_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} Pn_PUPD_PUPD0_Enum;

/* =========================================================  INDR  ========================================================== */
/* =========================================================  OUTDR  ========================================================= */
/* ==========================================================  BSR  ========================================================== */
/* =================================================  Pn BSR BSR15 [15..15]  ================================================= */
typedef enum {                                  /*!< Pn_BSR_BSR15                                                              */
  Pn_BSR_BSR15_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR15_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR15_Enum;

/* =================================================  Pn BSR BSR14 [14..14]  ================================================= */
typedef enum {                                  /*!< Pn_BSR_BSR14                                                              */
  Pn_BSR_BSR14_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR14_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR14_Enum;

/* =================================================  Pn BSR BSR13 [13..13]  ================================================= */
typedef enum {                                  /*!< Pn_BSR_BSR13                                                              */
  Pn_BSR_BSR13_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR13_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR13_Enum;

/* =================================================  Pn BSR BSR12 [12..12]  ================================================= */
typedef enum {                                  /*!< Pn_BSR_BSR12                                                              */
  Pn_BSR_BSR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR12_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR12_Enum;

/* =================================================  Pn BSR BSR11 [11..11]  ================================================= */
typedef enum {                                  /*!< Pn_BSR_BSR11                                                              */
  Pn_BSR_BSR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR11_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR11_Enum;

/* =================================================  Pn BSR BSR10 [10..10]  ================================================= */
typedef enum {                                  /*!< Pn_BSR_BSR10                                                              */
  Pn_BSR_BSR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR10_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR10_Enum;

/* ==================================================  Pn BSR BSR9 [9..9]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR9                                                               */
  Pn_BSR_BSR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR9_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR9_Enum;

/* ==================================================  Pn BSR BSR8 [8..8]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR8                                                               */
  Pn_BSR_BSR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR8_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR8_Enum;

/* ==================================================  Pn BSR BSR7 [7..7]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR7                                                               */
  Pn_BSR_BSR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR7_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR7_Enum;

/* ==================================================  Pn BSR BSR6 [6..6]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR6                                                               */
  Pn_BSR_BSR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR6_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR6_Enum;

/* ==================================================  Pn BSR BSR5 [5..5]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR5                                                               */
  Pn_BSR_BSR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR5_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR5_Enum;

/* ==================================================  Pn BSR BSR4 [4..4]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR4                                                               */
  Pn_BSR_BSR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR4_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR4_Enum;

/* ==================================================  Pn BSR BSR3 [3..3]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR3                                                               */
  Pn_BSR_BSR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR3_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR3_Enum;

/* ==================================================  Pn BSR BSR2 [2..2]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR2                                                               */
  Pn_BSR_BSR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR2_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR2_Enum;

/* ==================================================  Pn BSR BSR1 [1..1]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR1                                                               */
  Pn_BSR_BSR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR1_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR1_Enum;

/* ==================================================  Pn BSR BSR0 [0..0]  =================================================== */
typedef enum {                                  /*!< Pn_BSR_BSR0                                                               */
  Pn_BSR_BSR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BSR_BSR0_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BSR_BSR0_Enum;

/* ==========================================================  BCR  ========================================================== */
/* =================================================  Pn BCR BCR15 [15..15]  ================================================= */
typedef enum {                                  /*!< Pn_BCR_BCR15                                                              */
  Pn_BCR_BCR15_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR15_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR15_Enum;

/* =================================================  Pn BCR BCR14 [14..14]  ================================================= */
typedef enum {                                  /*!< Pn_BCR_BCR14                                                              */
  Pn_BCR_BCR14_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR14_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR14_Enum;

/* =================================================  Pn BCR BCR13 [13..13]  ================================================= */
typedef enum {                                  /*!< Pn_BCR_BCR13                                                              */
  Pn_BCR_BCR13_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR13_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR13_Enum;

/* =================================================  Pn BCR BCR12 [12..12]  ================================================= */
typedef enum {                                  /*!< Pn_BCR_BCR12                                                              */
  Pn_BCR_BCR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR12_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR12_Enum;

/* =================================================  Pn BCR BCR11 [11..11]  ================================================= */
typedef enum {                                  /*!< Pn_BCR_BCR11                                                              */
  Pn_BCR_BCR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR11_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR11_Enum;

/* =================================================  Pn BCR BCR10 [10..10]  ================================================= */
typedef enum {                                  /*!< Pn_BCR_BCR10                                                              */
  Pn_BCR_BCR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR10_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR10_Enum;

/* ==================================================  Pn BCR BCR9 [9..9]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR9                                                               */
  Pn_BCR_BCR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR9_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR9_Enum;

/* ==================================================  Pn BCR BCR8 [8..8]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR8                                                               */
  Pn_BCR_BCR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR8_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR8_Enum;

/* ==================================================  Pn BCR BCR7 [7..7]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR7                                                               */
  Pn_BCR_BCR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR7_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR7_Enum;

/* ==================================================  Pn BCR BCR6 [6..6]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR6                                                               */
  Pn_BCR_BCR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR6_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR6_Enum;

/* ==================================================  Pn BCR BCR5 [5..5]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR5                                                               */
  Pn_BCR_BCR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR5_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR5_Enum;

/* ==================================================  Pn BCR BCR4 [4..4]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR4                                                               */
  Pn_BCR_BCR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR4_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR4_Enum;

/* ==================================================  Pn BCR BCR3 [3..3]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR3                                                               */
  Pn_BCR_BCR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR3_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR3_Enum;

/* ==================================================  Pn BCR BCR2 [2..2]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR2                                                               */
  Pn_BCR_BCR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR2_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR2_Enum;

/* ==================================================  Pn BCR BCR1 [1..1]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR1                                                               */
  Pn_BCR_BCR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR1_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR1_Enum;

/* ==================================================  Pn BCR BCR0 [0..0]  =================================================== */
typedef enum {                                  /*!< Pn_BCR_BCR0                                                               */
  Pn_BCR_BCR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  Pn_BCR_BCR0_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} Pn_BCR_BCR0_Enum;

/* ========================================================  OUTDMSK  ======================================================== */
/* =============================================  Pn OUTDMSK OUTDMSK15 [15..15]  ============================================= */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK15                                                      */
  Pn_OUTDMSK_OUTDMSK15_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK15_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK15_Enum;

/* =============================================  Pn OUTDMSK OUTDMSK14 [14..14]  ============================================= */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK14                                                      */
  Pn_OUTDMSK_OUTDMSK14_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK14_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK14_Enum;

/* =============================================  Pn OUTDMSK OUTDMSK13 [13..13]  ============================================= */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK13                                                      */
  Pn_OUTDMSK_OUTDMSK13_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK13_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK13_Enum;

/* =============================================  Pn OUTDMSK OUTDMSK12 [12..12]  ============================================= */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK12                                                      */
  Pn_OUTDMSK_OUTDMSK12_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK12_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK12_Enum;

/* =============================================  Pn OUTDMSK OUTDMSK11 [11..11]  ============================================= */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK11                                                      */
  Pn_OUTDMSK_OUTDMSK11_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK11_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK11_Enum;

/* =============================================  Pn OUTDMSK OUTDMSK10 [10..10]  ============================================= */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK10                                                      */
  Pn_OUTDMSK_OUTDMSK10_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK10_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK10_Enum;

/* ==============================================  Pn OUTDMSK OUTDMSK9 [9..9]  =============================================== */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK9                                                       */
  Pn_OUTDMSK_OUTDMSK9_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK9_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK9_Enum;

/* ==============================================  Pn OUTDMSK OUTDMSK8 [8..8]  =============================================== */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK8                                                       */
  Pn_OUTDMSK_OUTDMSK8_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK8_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK8_Enum;

/* ==============================================  Pn OUTDMSK OUTDMSK7 [7..7]  =============================================== */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK7                                                       */
  Pn_OUTDMSK_OUTDMSK7_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK7_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK7_Enum;

/* ==============================================  Pn OUTDMSK OUTDMSK6 [6..6]  =============================================== */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK6                                                       */
  Pn_OUTDMSK_OUTDMSK6_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK6_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK6_Enum;

/* ==============================================  Pn OUTDMSK OUTDMSK5 [5..5]  =============================================== */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK5                                                       */
  Pn_OUTDMSK_OUTDMSK5_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK5_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK5_Enum;

/* ==============================================  Pn OUTDMSK OUTDMSK4 [4..4]  =============================================== */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK4                                                       */
  Pn_OUTDMSK_OUTDMSK4_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK4_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK4_Enum;

/* ==============================================  Pn OUTDMSK OUTDMSK3 [3..3]  =============================================== */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK3                                                       */
  Pn_OUTDMSK_OUTDMSK3_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK3_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK3_Enum;

/* ==============================================  Pn OUTDMSK OUTDMSK2 [2..2]  =============================================== */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK2                                                       */
  Pn_OUTDMSK_OUTDMSK2_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK2_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK2_Enum;

/* ==============================================  Pn OUTDMSK OUTDMSK1 [1..1]  =============================================== */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK1                                                       */
  Pn_OUTDMSK_OUTDMSK1_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK1_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK1_Enum;

/* ==============================================  Pn OUTDMSK OUTDMSK0 [0..0]  =============================================== */
typedef enum {                                  /*!< Pn_OUTDMSK_OUTDMSK0                                                       */
  Pn_OUTDMSK_OUTDMSK0_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  Pn_OUTDMSK_OUTDMSK0_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} Pn_OUTDMSK_OUTDMSK0_Enum;

/* =========================================================  DBCR  ========================================================== */
/* ================================================  Pn DBCR DBCLK [16..18]  ================================================= */
typedef enum {                                  /*!< Pn_DBCR_DBCLK                                                             */
  Pn_DBCR_DBCLK_HCLK1                  = 0,     /*!< HCLK1 : HCLK/1                                                            */
  Pn_DBCR_DBCLK_HCLK4                  = 1,     /*!< HCLK4 : HCLK/4                                                            */
  Pn_DBCR_DBCLK_HCLK16                 = 2,     /*!< HCLK16 : HCLK/16                                                          */
  Pn_DBCR_DBCLK_HCLK64                 = 3,     /*!< HCLK64 : HCLK/64                                                          */
  Pn_DBCR_DBCLK_HCLK256                = 4,     /*!< HCLK256 : HCLK/256                                                        */
  Pn_DBCR_DBCLK_HCLK1024               = 5,     /*!< HCLK1024 : HCLK/1024                                                      */
} Pn_DBCR_DBCLK_Enum;

/* ================================================  Pn DBCR DBEN11 [11..11]  ================================================ */
typedef enum {                                  /*!< Pn_DBCR_DBEN11                                                            */
  Pn_DBCR_DBEN11_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN11_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN11_Enum;

/* ================================================  Pn DBCR DBEN10 [10..10]  ================================================ */
typedef enum {                                  /*!< Pn_DBCR_DBEN10                                                            */
  Pn_DBCR_DBEN10_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN10_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN10_Enum;

/* =================================================  Pn DBCR DBEN9 [9..9]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN9                                                             */
  Pn_DBCR_DBEN9_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN9_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN9_Enum;

/* =================================================  Pn DBCR DBEN8 [8..8]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN8                                                             */
  Pn_DBCR_DBEN8_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN8_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN8_Enum;

/* =================================================  Pn DBCR DBEN7 [7..7]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN7                                                             */
  Pn_DBCR_DBEN7_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN7_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN7_Enum;

/* =================================================  Pn DBCR DBEN6 [6..6]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN6                                                             */
  Pn_DBCR_DBEN6_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN6_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN6_Enum;

/* =================================================  Pn DBCR DBEN5 [5..5]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN5                                                             */
  Pn_DBCR_DBEN5_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN5_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN5_Enum;

/* =================================================  Pn DBCR DBEN4 [4..4]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN4                                                             */
  Pn_DBCR_DBEN4_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN4_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN4_Enum;

/* =================================================  Pn DBCR DBEN3 [3..3]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN3                                                             */
  Pn_DBCR_DBEN3_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN3_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN3_Enum;

/* =================================================  Pn DBCR DBEN2 [2..2]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN2                                                             */
  Pn_DBCR_DBEN2_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN2_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN2_Enum;

/* =================================================  Pn DBCR DBEN1 [1..1]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN1                                                             */
  Pn_DBCR_DBEN1_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN1_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN1_Enum;

/* =================================================  Pn DBCR DBEN0 [0..0]  ================================================== */
typedef enum {                                  /*!< Pn_DBCR_DBEN0                                                             */
  Pn_DBCR_DBEN0_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  Pn_DBCR_DBEN0_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} Pn_DBCR_DBEN0_Enum;



/* =========================================================================================================================== */
/* ================                                            PA                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
/* ================================================  PA MOD MODE15 [30..31]  ================================================= */
typedef enum {                                  /*!< PA_MOD_MODE15                                                             */
  PA_MOD_MODE15_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE15_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE15_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE15_Enum;

/* ================================================  PA MOD MODE14 [28..29]  ================================================= */
typedef enum {                                  /*!< PA_MOD_MODE14                                                             */
  PA_MOD_MODE14_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE14_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE14_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE14_Enum;

/* ================================================  PA MOD MODE13 [26..27]  ================================================= */
typedef enum {                                  /*!< PA_MOD_MODE13                                                             */
  PA_MOD_MODE13_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE13_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE13_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE13_Enum;

/* ================================================  PA MOD MODE12 [24..25]  ================================================= */
typedef enum {                                  /*!< PA_MOD_MODE12                                                             */
  PA_MOD_MODE12_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE12_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE12_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE12_Enum;

/* ================================================  PA MOD MODE11 [22..23]  ================================================= */
typedef enum {                                  /*!< PA_MOD_MODE11                                                             */
  PA_MOD_MODE11_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE11_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE11_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE11_Enum;

/* ================================================  PA MOD MODE10 [20..21]  ================================================= */
typedef enum {                                  /*!< PA_MOD_MODE10                                                             */
  PA_MOD_MODE10_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE10_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE10_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE10_Enum;

/* =================================================  PA MOD MODE9 [18..19]  ================================================= */
typedef enum {                                  /*!< PA_MOD_MODE9                                                              */
  PA_MOD_MODE9_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE9_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE9_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE9_Enum;

/* =================================================  PA MOD MODE8 [16..17]  ================================================= */
typedef enum {                                  /*!< PA_MOD_MODE8                                                              */
  PA_MOD_MODE8_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE8_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE8_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE8_Enum;

/* =================================================  PA MOD MODE7 [14..15]  ================================================= */
typedef enum {                                  /*!< PA_MOD_MODE7                                                              */
  PA_MOD_MODE7_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE7_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE7_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE7_Enum;

/* =================================================  PA MOD MODE6 [12..13]  ================================================= */
typedef enum {                                  /*!< PA_MOD_MODE6                                                              */
  PA_MOD_MODE6_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE6_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE6_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE6_Enum;

/* =================================================  PA MOD MODE5 [10..11]  ================================================= */
typedef enum {                                  /*!< PA_MOD_MODE5                                                              */
  PA_MOD_MODE5_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE5_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE5_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE5_Enum;

/* ==================================================  PA MOD MODE4 [8..9]  ================================================== */
typedef enum {                                  /*!< PA_MOD_MODE4                                                              */
  PA_MOD_MODE4_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE4_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE4_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE4_Enum;

/* ==================================================  PA MOD MODE3 [6..7]  ================================================== */
typedef enum {                                  /*!< PA_MOD_MODE3                                                              */
  PA_MOD_MODE3_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE3_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE3_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE3_Enum;

/* ==================================================  PA MOD MODE2 [4..5]  ================================================== */
typedef enum {                                  /*!< PA_MOD_MODE2                                                              */
  PA_MOD_MODE2_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE2_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE2_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE2_Enum;

/* ==================================================  PA MOD MODE1 [2..3]  ================================================== */
typedef enum {                                  /*!< PA_MOD_MODE1                                                              */
  PA_MOD_MODE1_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE1_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE1_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE1_Enum;

/* ==================================================  PA MOD MODE0 [0..1]  ================================================== */
typedef enum {                                  /*!< PA_MOD_MODE0                                                              */
  PA_MOD_MODE0_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PA_MOD_MODE0_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PA_MOD_MODE0_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PA_MOD_MODE0_Enum;

/* ==========================================================  TYP  ========================================================== */
/* =================================================  PA TYP TYP15 [15..15]  ================================================= */
typedef enum {                                  /*!< PA_TYP_TYP15                                                              */
  PA_TYP_TYP15_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP15_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP15_Enum;

/* =================================================  PA TYP TYP14 [14..14]  ================================================= */
typedef enum {                                  /*!< PA_TYP_TYP14                                                              */
  PA_TYP_TYP14_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP14_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP14_Enum;

/* =================================================  PA TYP TYP13 [13..13]  ================================================= */
typedef enum {                                  /*!< PA_TYP_TYP13                                                              */
  PA_TYP_TYP13_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP13_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP13_Enum;

/* =================================================  PA TYP TYP12 [12..12]  ================================================= */
typedef enum {                                  /*!< PA_TYP_TYP12                                                              */
  PA_TYP_TYP12_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP12_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP12_Enum;

/* =================================================  PA TYP TYP11 [11..11]  ================================================= */
typedef enum {                                  /*!< PA_TYP_TYP11                                                              */
  PA_TYP_TYP11_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP11_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP11_Enum;

/* =================================================  PA TYP TYP10 [10..10]  ================================================= */
typedef enum {                                  /*!< PA_TYP_TYP10                                                              */
  PA_TYP_TYP10_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP10_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP10_Enum;

/* ==================================================  PA TYP TYP9 [9..9]  =================================================== */
typedef enum {                                  /*!< PA_TYP_TYP9                                                               */
  PA_TYP_TYP9_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP9_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP9_Enum;

/* ==================================================  PA TYP TYP8 [8..8]  =================================================== */
typedef enum {                                  /*!< PA_TYP_TYP8                                                               */
  PA_TYP_TYP8_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP8_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP8_Enum;

/* ==================================================  PA TYP TYP7 [7..7]  =================================================== */
typedef enum {                                  /*!< PA_TYP_TYP7                                                               */
  PA_TYP_TYP7_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP7_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP7_Enum;

/* ==================================================  PA TYP TYP6 [6..6]  =================================================== */
typedef enum {                                  /*!< PA_TYP_TYP6                                                               */
  PA_TYP_TYP6_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP6_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP6_Enum;

/* ==================================================  PA TYP TYP5 [5..5]  =================================================== */
typedef enum {                                  /*!< PA_TYP_TYP5                                                               */
  PA_TYP_TYP5_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP5_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP5_Enum;

/* ==================================================  PA TYP TYP4 [4..4]  =================================================== */
typedef enum {                                  /*!< PA_TYP_TYP4                                                               */
  PA_TYP_TYP4_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP4_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP4_Enum;

/* ==================================================  PA TYP TYP3 [3..3]  =================================================== */
typedef enum {                                  /*!< PA_TYP_TYP3                                                               */
  PA_TYP_TYP3_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP3_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP3_Enum;

/* ==================================================  PA TYP TYP2 [2..2]  =================================================== */
typedef enum {                                  /*!< PA_TYP_TYP2                                                               */
  PA_TYP_TYP2_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP2_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP2_Enum;

/* ==================================================  PA TYP TYP1 [1..1]  =================================================== */
typedef enum {                                  /*!< PA_TYP_TYP1                                                               */
  PA_TYP_TYP1_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP1_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP1_Enum;

/* ==================================================  PA TYP TYP0 [0..0]  =================================================== */
typedef enum {                                  /*!< PA_TYP_TYP0                                                               */
  PA_TYP_TYP0_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PA_TYP_TYP0_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PA_TYP_TYP0_Enum;

/* =========================================================  AFSR1  ========================================================= */
/* ================================================  PA AFSR1 AFSR7 [28..31]  ================================================ */
typedef enum {                                  /*!< PA_AFSR1_AFSR7                                                            */
  PA_AFSR1_AFSR7_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR1_AFSR7_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR1_AFSR7_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR1_AFSR7_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR1_AFSR7_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PA_AFSR1_AFSR7_Enum;

/* ================================================  PA AFSR1 AFSR6 [24..27]  ================================================ */
typedef enum {                                  /*!< PA_AFSR1_AFSR6                                                            */
  PA_AFSR1_AFSR6_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR1_AFSR6_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR1_AFSR6_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR1_AFSR6_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR1_AFSR6_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PA_AFSR1_AFSR6_Enum;

/* ================================================  PA AFSR1 AFSR5 [20..23]  ================================================ */
typedef enum {                                  /*!< PA_AFSR1_AFSR5                                                            */
  PA_AFSR1_AFSR5_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR1_AFSR5_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR1_AFSR5_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR1_AFSR5_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR1_AFSR5_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PA_AFSR1_AFSR5_Enum;

/* ================================================  PA AFSR1 AFSR4 [16..19]  ================================================ */
typedef enum {                                  /*!< PA_AFSR1_AFSR4                                                            */
  PA_AFSR1_AFSR4_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR1_AFSR4_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR1_AFSR4_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR1_AFSR4_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR1_AFSR4_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PA_AFSR1_AFSR4_Enum;

/* ================================================  PA AFSR1 AFSR3 [12..15]  ================================================ */
typedef enum {                                  /*!< PA_AFSR1_AFSR3                                                            */
  PA_AFSR1_AFSR3_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR1_AFSR3_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR1_AFSR3_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR1_AFSR3_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR1_AFSR3_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PA_AFSR1_AFSR3_Enum;

/* ================================================  PA AFSR1 AFSR2 [8..11]  ================================================= */
typedef enum {                                  /*!< PA_AFSR1_AFSR2                                                            */
  PA_AFSR1_AFSR2_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR1_AFSR2_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR1_AFSR2_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR1_AFSR2_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR1_AFSR2_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PA_AFSR1_AFSR2_Enum;

/* =================================================  PA AFSR1 AFSR1 [4..7]  ================================================= */
typedef enum {                                  /*!< PA_AFSR1_AFSR1                                                            */
  PA_AFSR1_AFSR1_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR1_AFSR1_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR1_AFSR1_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR1_AFSR1_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR1_AFSR1_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PA_AFSR1_AFSR1_Enum;

/* =================================================  PA AFSR1 AFSR0 [0..3]  ================================================= */
typedef enum {                                  /*!< PA_AFSR1_AFSR0                                                            */
  PA_AFSR1_AFSR0_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR1_AFSR0_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR1_AFSR0_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR1_AFSR0_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR1_AFSR0_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PA_AFSR1_AFSR0_Enum;

/* =========================================================  AFSR2  ========================================================= */
/* ===============================================  PA AFSR2 AFSR15 [28..31]  ================================================ */
typedef enum {                                  /*!< PA_AFSR2_AFSR15                                                           */
  PA_AFSR2_AFSR15_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR2_AFSR15_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR2_AFSR15_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR2_AFSR15_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR2_AFSR15_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PA_AFSR2_AFSR15_Enum;

/* ===============================================  PA AFSR2 AFSR14 [24..27]  ================================================ */
typedef enum {                                  /*!< PA_AFSR2_AFSR14                                                           */
  PA_AFSR2_AFSR14_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR2_AFSR14_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR2_AFSR14_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR2_AFSR14_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR2_AFSR14_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PA_AFSR2_AFSR14_Enum;

/* ===============================================  PA AFSR2 AFSR13 [20..23]  ================================================ */
typedef enum {                                  /*!< PA_AFSR2_AFSR13                                                           */
  PA_AFSR2_AFSR13_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR2_AFSR13_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR2_AFSR13_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR2_AFSR13_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR2_AFSR13_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PA_AFSR2_AFSR13_Enum;

/* ===============================================  PA AFSR2 AFSR12 [16..19]  ================================================ */
typedef enum {                                  /*!< PA_AFSR2_AFSR12                                                           */
  PA_AFSR2_AFSR12_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR2_AFSR12_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR2_AFSR12_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR2_AFSR12_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR2_AFSR12_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PA_AFSR2_AFSR12_Enum;

/* ===============================================  PA AFSR2 AFSR11 [12..15]  ================================================ */
typedef enum {                                  /*!< PA_AFSR2_AFSR11                                                           */
  PA_AFSR2_AFSR11_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR2_AFSR11_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR2_AFSR11_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR2_AFSR11_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR2_AFSR11_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PA_AFSR2_AFSR11_Enum;

/* ================================================  PA AFSR2 AFSR10 [8..11]  ================================================ */
typedef enum {                                  /*!< PA_AFSR2_AFSR10                                                           */
  PA_AFSR2_AFSR10_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR2_AFSR10_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR2_AFSR10_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR2_AFSR10_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR2_AFSR10_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PA_AFSR2_AFSR10_Enum;

/* =================================================  PA AFSR2 AFSR9 [4..7]  ================================================= */
typedef enum {                                  /*!< PA_AFSR2_AFSR9                                                            */
  PA_AFSR2_AFSR9_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR2_AFSR9_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR2_AFSR9_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR2_AFSR9_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR2_AFSR9_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PA_AFSR2_AFSR9_Enum;

/* =================================================  PA AFSR2 AFSR8 [0..3]  ================================================= */
typedef enum {                                  /*!< PA_AFSR2_AFSR8                                                            */
  PA_AFSR2_AFSR8_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PA_AFSR2_AFSR8_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PA_AFSR2_AFSR8_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PA_AFSR2_AFSR8_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PA_AFSR2_AFSR8_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PA_AFSR2_AFSR8_Enum;

/* =========================================================  PUPD  ========================================================== */
/* ================================================  PA PUPD PUPD15 [30..31]  ================================================ */
typedef enum {                                  /*!< PA_PUPD_PUPD15                                                            */
  PA_PUPD_PUPD15_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD15_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD15_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD15_Enum;

/* ================================================  PA PUPD PUPD14 [28..29]  ================================================ */
typedef enum {                                  /*!< PA_PUPD_PUPD14                                                            */
  PA_PUPD_PUPD14_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD14_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD14_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD14_Enum;

/* ================================================  PA PUPD PUPD13 [26..27]  ================================================ */
typedef enum {                                  /*!< PA_PUPD_PUPD13                                                            */
  PA_PUPD_PUPD13_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD13_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD13_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD13_Enum;

/* ================================================  PA PUPD PUPD12 [24..25]  ================================================ */
typedef enum {                                  /*!< PA_PUPD_PUPD12                                                            */
  PA_PUPD_PUPD12_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD12_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD12_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD12_Enum;

/* ================================================  PA PUPD PUPD11 [22..23]  ================================================ */
typedef enum {                                  /*!< PA_PUPD_PUPD11                                                            */
  PA_PUPD_PUPD11_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD11_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD11_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD11_Enum;

/* ================================================  PA PUPD PUPD10 [20..21]  ================================================ */
typedef enum {                                  /*!< PA_PUPD_PUPD10                                                            */
  PA_PUPD_PUPD10_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD10_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD10_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD10_Enum;

/* ================================================  PA PUPD PUPD9 [18..19]  ================================================= */
typedef enum {                                  /*!< PA_PUPD_PUPD9                                                             */
  PA_PUPD_PUPD9_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD9_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD9_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD9_Enum;

/* ================================================  PA PUPD PUPD8 [16..17]  ================================================= */
typedef enum {                                  /*!< PA_PUPD_PUPD8                                                             */
  PA_PUPD_PUPD8_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD8_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD8_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD8_Enum;

/* ================================================  PA PUPD PUPD7 [14..15]  ================================================= */
typedef enum {                                  /*!< PA_PUPD_PUPD7                                                             */
  PA_PUPD_PUPD7_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD7_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD7_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD7_Enum;

/* ================================================  PA PUPD PUPD6 [12..13]  ================================================= */
typedef enum {                                  /*!< PA_PUPD_PUPD6                                                             */
  PA_PUPD_PUPD6_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD6_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD6_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD6_Enum;

/* ================================================  PA PUPD PUPD5 [10..11]  ================================================= */
typedef enum {                                  /*!< PA_PUPD_PUPD5                                                             */
  PA_PUPD_PUPD5_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD5_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD5_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD5_Enum;

/* =================================================  PA PUPD PUPD4 [8..9]  ================================================== */
typedef enum {                                  /*!< PA_PUPD_PUPD4                                                             */
  PA_PUPD_PUPD4_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD4_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD4_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD4_Enum;

/* =================================================  PA PUPD PUPD3 [6..7]  ================================================== */
typedef enum {                                  /*!< PA_PUPD_PUPD3                                                             */
  PA_PUPD_PUPD3_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD3_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD3_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD3_Enum;

/* =================================================  PA PUPD PUPD2 [4..5]  ================================================== */
typedef enum {                                  /*!< PA_PUPD_PUPD2                                                             */
  PA_PUPD_PUPD2_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD2_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD2_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD2_Enum;

/* =================================================  PA PUPD PUPD1 [2..3]  ================================================== */
typedef enum {                                  /*!< PA_PUPD_PUPD1                                                             */
  PA_PUPD_PUPD1_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD1_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD1_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD1_Enum;

/* =================================================  PA PUPD PUPD0 [0..1]  ================================================== */
typedef enum {                                  /*!< PA_PUPD_PUPD0                                                             */
  PA_PUPD_PUPD0_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PA_PUPD_PUPD0_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PA_PUPD_PUPD0_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PA_PUPD_PUPD0_Enum;

/* =========================================================  INDR  ========================================================== */
/* =========================================================  OUTDR  ========================================================= */
/* ==========================================================  BSR  ========================================================== */
/* =================================================  PA BSR BSR15 [15..15]  ================================================= */
typedef enum {                                  /*!< PA_BSR_BSR15                                                              */
  PA_BSR_BSR15_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR15_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR15_Enum;

/* =================================================  PA BSR BSR14 [14..14]  ================================================= */
typedef enum {                                  /*!< PA_BSR_BSR14                                                              */
  PA_BSR_BSR14_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR14_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR14_Enum;

/* =================================================  PA BSR BSR13 [13..13]  ================================================= */
typedef enum {                                  /*!< PA_BSR_BSR13                                                              */
  PA_BSR_BSR13_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR13_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR13_Enum;

/* =================================================  PA BSR BSR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PA_BSR_BSR12                                                              */
  PA_BSR_BSR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR12_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR12_Enum;

/* =================================================  PA BSR BSR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PA_BSR_BSR11                                                              */
  PA_BSR_BSR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR11_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR11_Enum;

/* =================================================  PA BSR BSR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PA_BSR_BSR10                                                              */
  PA_BSR_BSR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR10_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR10_Enum;

/* ==================================================  PA BSR BSR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR9                                                               */
  PA_BSR_BSR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR9_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR9_Enum;

/* ==================================================  PA BSR BSR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR8                                                               */
  PA_BSR_BSR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR8_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR8_Enum;

/* ==================================================  PA BSR BSR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR7                                                               */
  PA_BSR_BSR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR7_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR7_Enum;

/* ==================================================  PA BSR BSR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR6                                                               */
  PA_BSR_BSR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR6_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR6_Enum;

/* ==================================================  PA BSR BSR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR5                                                               */
  PA_BSR_BSR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR5_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR5_Enum;

/* ==================================================  PA BSR BSR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR4                                                               */
  PA_BSR_BSR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR4_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR4_Enum;

/* ==================================================  PA BSR BSR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR3                                                               */
  PA_BSR_BSR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR3_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR3_Enum;

/* ==================================================  PA BSR BSR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR2                                                               */
  PA_BSR_BSR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR2_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR2_Enum;

/* ==================================================  PA BSR BSR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR1                                                               */
  PA_BSR_BSR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR1_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR1_Enum;

/* ==================================================  PA BSR BSR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PA_BSR_BSR0                                                               */
  PA_BSR_BSR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BSR_BSR0_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BSR_BSR0_Enum;

/* ==========================================================  BCR  ========================================================== */
/* =================================================  PA BCR BCR15 [15..15]  ================================================= */
typedef enum {                                  /*!< PA_BCR_BCR15                                                              */
  PA_BCR_BCR15_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR15_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR15_Enum;

/* =================================================  PA BCR BCR14 [14..14]  ================================================= */
typedef enum {                                  /*!< PA_BCR_BCR14                                                              */
  PA_BCR_BCR14_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR14_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR14_Enum;

/* =================================================  PA BCR BCR13 [13..13]  ================================================= */
typedef enum {                                  /*!< PA_BCR_BCR13                                                              */
  PA_BCR_BCR13_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR13_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR13_Enum;

/* =================================================  PA BCR BCR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PA_BCR_BCR12                                                              */
  PA_BCR_BCR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR12_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR12_Enum;

/* =================================================  PA BCR BCR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PA_BCR_BCR11                                                              */
  PA_BCR_BCR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR11_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR11_Enum;

/* =================================================  PA BCR BCR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PA_BCR_BCR10                                                              */
  PA_BCR_BCR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR10_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR10_Enum;

/* ==================================================  PA BCR BCR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR9                                                               */
  PA_BCR_BCR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR9_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR9_Enum;

/* ==================================================  PA BCR BCR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR8                                                               */
  PA_BCR_BCR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR8_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR8_Enum;

/* ==================================================  PA BCR BCR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR7                                                               */
  PA_BCR_BCR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR7_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR7_Enum;

/* ==================================================  PA BCR BCR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR6                                                               */
  PA_BCR_BCR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR6_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR6_Enum;

/* ==================================================  PA BCR BCR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR5                                                               */
  PA_BCR_BCR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR5_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR5_Enum;

/* ==================================================  PA BCR BCR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR4                                                               */
  PA_BCR_BCR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR4_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR4_Enum;

/* ==================================================  PA BCR BCR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR3                                                               */
  PA_BCR_BCR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR3_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR3_Enum;

/* ==================================================  PA BCR BCR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR2                                                               */
  PA_BCR_BCR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR2_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR2_Enum;

/* ==================================================  PA BCR BCR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR1                                                               */
  PA_BCR_BCR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR1_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR1_Enum;

/* ==================================================  PA BCR BCR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PA_BCR_BCR0                                                               */
  PA_BCR_BCR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PA_BCR_BCR0_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PA_BCR_BCR0_Enum;

/* ========================================================  OUTDMSK  ======================================================== */
/* =============================================  PA OUTDMSK OUTDMSK15 [15..15]  ============================================= */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK15                                                      */
  PA_OUTDMSK_OUTDMSK15_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK15_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK15_Enum;

/* =============================================  PA OUTDMSK OUTDMSK14 [14..14]  ============================================= */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK14                                                      */
  PA_OUTDMSK_OUTDMSK14_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK14_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK14_Enum;

/* =============================================  PA OUTDMSK OUTDMSK13 [13..13]  ============================================= */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK13                                                      */
  PA_OUTDMSK_OUTDMSK13_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK13_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK13_Enum;

/* =============================================  PA OUTDMSK OUTDMSK12 [12..12]  ============================================= */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK12                                                      */
  PA_OUTDMSK_OUTDMSK12_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK12_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK12_Enum;

/* =============================================  PA OUTDMSK OUTDMSK11 [11..11]  ============================================= */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK11                                                      */
  PA_OUTDMSK_OUTDMSK11_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK11_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK11_Enum;

/* =============================================  PA OUTDMSK OUTDMSK10 [10..10]  ============================================= */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK10                                                      */
  PA_OUTDMSK_OUTDMSK10_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK10_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK10_Enum;

/* ==============================================  PA OUTDMSK OUTDMSK9 [9..9]  =============================================== */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK9                                                       */
  PA_OUTDMSK_OUTDMSK9_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK9_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK9_Enum;

/* ==============================================  PA OUTDMSK OUTDMSK8 [8..8]  =============================================== */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK8                                                       */
  PA_OUTDMSK_OUTDMSK8_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK8_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK8_Enum;

/* ==============================================  PA OUTDMSK OUTDMSK7 [7..7]  =============================================== */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK7                                                       */
  PA_OUTDMSK_OUTDMSK7_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK7_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK7_Enum;

/* ==============================================  PA OUTDMSK OUTDMSK6 [6..6]  =============================================== */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK6                                                       */
  PA_OUTDMSK_OUTDMSK6_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK6_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK6_Enum;

/* ==============================================  PA OUTDMSK OUTDMSK5 [5..5]  =============================================== */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK5                                                       */
  PA_OUTDMSK_OUTDMSK5_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK5_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK5_Enum;

/* ==============================================  PA OUTDMSK OUTDMSK4 [4..4]  =============================================== */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK4                                                       */
  PA_OUTDMSK_OUTDMSK4_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK4_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK4_Enum;

/* ==============================================  PA OUTDMSK OUTDMSK3 [3..3]  =============================================== */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK3                                                       */
  PA_OUTDMSK_OUTDMSK3_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK3_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK3_Enum;

/* ==============================================  PA OUTDMSK OUTDMSK2 [2..2]  =============================================== */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK2                                                       */
  PA_OUTDMSK_OUTDMSK2_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK2_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK2_Enum;

/* ==============================================  PA OUTDMSK OUTDMSK1 [1..1]  =============================================== */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK1                                                       */
  PA_OUTDMSK_OUTDMSK1_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK1_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK1_Enum;

/* ==============================================  PA OUTDMSK OUTDMSK0 [0..0]  =============================================== */
typedef enum {                                  /*!< PA_OUTDMSK_OUTDMSK0                                                       */
  PA_OUTDMSK_OUTDMSK0_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PA_OUTDMSK_OUTDMSK0_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PA_OUTDMSK_OUTDMSK0_Enum;

/* =========================================================  DBCR  ========================================================== */
/* ================================================  PA DBCR DBCLK [16..18]  ================================================= */
typedef enum {                                  /*!< PA_DBCR_DBCLK                                                             */
  PA_DBCR_DBCLK_HCLK1                  = 0,     /*!< HCLK1 : HCLK/1                                                            */
  PA_DBCR_DBCLK_HCLK4                  = 1,     /*!< HCLK4 : HCLK/4                                                            */
  PA_DBCR_DBCLK_HCLK16                 = 2,     /*!< HCLK16 : HCLK/16                                                          */
  PA_DBCR_DBCLK_HCLK64                 = 3,     /*!< HCLK64 : HCLK/64                                                          */
  PA_DBCR_DBCLK_HCLK256                = 4,     /*!< HCLK256 : HCLK/256                                                        */
  PA_DBCR_DBCLK_HCLK1024               = 5,     /*!< HCLK1024 : HCLK/1024                                                      */
} PA_DBCR_DBCLK_Enum;

/* ================================================  PA DBCR DBEN11 [11..11]  ================================================ */
typedef enum {                                  /*!< PA_DBCR_DBEN11                                                            */
  PA_DBCR_DBEN11_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN11_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN11_Enum;

/* ================================================  PA DBCR DBEN10 [10..10]  ================================================ */
typedef enum {                                  /*!< PA_DBCR_DBEN10                                                            */
  PA_DBCR_DBEN10_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN10_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN10_Enum;

/* =================================================  PA DBCR DBEN9 [9..9]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN9                                                             */
  PA_DBCR_DBEN9_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN9_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN9_Enum;

/* =================================================  PA DBCR DBEN8 [8..8]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN8                                                             */
  PA_DBCR_DBEN8_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN8_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN8_Enum;

/* =================================================  PA DBCR DBEN7 [7..7]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN7                                                             */
  PA_DBCR_DBEN7_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN7_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN7_Enum;

/* =================================================  PA DBCR DBEN6 [6..6]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN6                                                             */
  PA_DBCR_DBEN6_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN6_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN6_Enum;

/* =================================================  PA DBCR DBEN5 [5..5]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN5                                                             */
  PA_DBCR_DBEN5_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN5_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN5_Enum;

/* =================================================  PA DBCR DBEN4 [4..4]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN4                                                             */
  PA_DBCR_DBEN4_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN4_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN4_Enum;

/* =================================================  PA DBCR DBEN3 [3..3]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN3                                                             */
  PA_DBCR_DBEN3_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN3_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN3_Enum;

/* =================================================  PA DBCR DBEN2 [2..2]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN2                                                             */
  PA_DBCR_DBEN2_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN2_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN2_Enum;

/* =================================================  PA DBCR DBEN1 [1..1]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN1                                                             */
  PA_DBCR_DBEN1_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN1_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN1_Enum;

/* =================================================  PA DBCR DBEN0 [0..0]  ================================================== */
typedef enum {                                  /*!< PA_DBCR_DBEN0                                                             */
  PA_DBCR_DBEN0_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PA_DBCR_DBEN0_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PA_DBCR_DBEN0_Enum;

/* ========================================================  PA_MOD  ========================================================= */
/* ========================================================  PA_TYP  ========================================================= */
/* =======================================================  PA_AFSR1  ======================================================== */
/* =======================================================  PA_AFSR2  ======================================================== */
/* ========================================================  PA_PUPD  ======================================================== */
/* ========================================================  PA_INDR  ======================================================== */
/* =======================================================  PA_OUTDR  ======================================================== */
/* ========================================================  PA_BSR  ========================================================= */
/* ========================================================  PA_BCR  ========================================================= */
/* ======================================================  PA_OUTDMSK  ======================================================= */


/* =========================================================================================================================== */
/* ================                                            PB                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
/* ================================================  PB MOD MODE15 [30..31]  ================================================= */
typedef enum {                                  /*!< PB_MOD_MODE15                                                             */
  PB_MOD_MODE15_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE15_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE15_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE15_Enum;

/* ================================================  PB MOD MODE14 [28..29]  ================================================= */
typedef enum {                                  /*!< PB_MOD_MODE14                                                             */
  PB_MOD_MODE14_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE14_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE14_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE14_Enum;

/* ================================================  PB MOD MODE13 [26..27]  ================================================= */
typedef enum {                                  /*!< PB_MOD_MODE13                                                             */
  PB_MOD_MODE13_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE13_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE13_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE13_Enum;

/* ================================================  PB MOD MODE12 [24..25]  ================================================= */
typedef enum {                                  /*!< PB_MOD_MODE12                                                             */
  PB_MOD_MODE12_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE12_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE12_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE12_Enum;

/* ================================================  PB MOD MODE11 [22..23]  ================================================= */
typedef enum {                                  /*!< PB_MOD_MODE11                                                             */
  PB_MOD_MODE11_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE11_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE11_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE11_Enum;

/* ================================================  PB MOD MODE10 [20..21]  ================================================= */
typedef enum {                                  /*!< PB_MOD_MODE10                                                             */
  PB_MOD_MODE10_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE10_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE10_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE10_Enum;

/* =================================================  PB MOD MODE9 [18..19]  ================================================= */
typedef enum {                                  /*!< PB_MOD_MODE9                                                              */
  PB_MOD_MODE9_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE9_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE9_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE9_Enum;

/* =================================================  PB MOD MODE8 [16..17]  ================================================= */
typedef enum {                                  /*!< PB_MOD_MODE8                                                              */
  PB_MOD_MODE8_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE8_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE8_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE8_Enum;

/* =================================================  PB MOD MODE7 [14..15]  ================================================= */
typedef enum {                                  /*!< PB_MOD_MODE7                                                              */
  PB_MOD_MODE7_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE7_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE7_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE7_Enum;

/* =================================================  PB MOD MODE6 [12..13]  ================================================= */
typedef enum {                                  /*!< PB_MOD_MODE6                                                              */
  PB_MOD_MODE6_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE6_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE6_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE6_Enum;

/* =================================================  PB MOD MODE5 [10..11]  ================================================= */
typedef enum {                                  /*!< PB_MOD_MODE5                                                              */
  PB_MOD_MODE5_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE5_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE5_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE5_Enum;

/* ==================================================  PB MOD MODE4 [8..9]  ================================================== */
typedef enum {                                  /*!< PB_MOD_MODE4                                                              */
  PB_MOD_MODE4_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE4_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE4_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE4_Enum;

/* ==================================================  PB MOD MODE3 [6..7]  ================================================== */
typedef enum {                                  /*!< PB_MOD_MODE3                                                              */
  PB_MOD_MODE3_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE3_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE3_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE3_Enum;

/* ==================================================  PB MOD MODE2 [4..5]  ================================================== */
typedef enum {                                  /*!< PB_MOD_MODE2                                                              */
  PB_MOD_MODE2_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE2_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE2_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE2_Enum;

/* ==================================================  PB MOD MODE1 [2..3]  ================================================== */
typedef enum {                                  /*!< PB_MOD_MODE1                                                              */
  PB_MOD_MODE1_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE1_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE1_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE1_Enum;

/* ==================================================  PB MOD MODE0 [0..1]  ================================================== */
typedef enum {                                  /*!< PB_MOD_MODE0                                                              */
  PB_MOD_MODE0_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PB_MOD_MODE0_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PB_MOD_MODE0_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PB_MOD_MODE0_Enum;

/* ==========================================================  TYP  ========================================================== */
/* =================================================  PB TYP TYP15 [15..15]  ================================================= */
typedef enum {                                  /*!< PB_TYP_TYP15                                                              */
  PB_TYP_TYP15_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP15_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP15_Enum;

/* =================================================  PB TYP TYP14 [14..14]  ================================================= */
typedef enum {                                  /*!< PB_TYP_TYP14                                                              */
  PB_TYP_TYP14_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP14_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP14_Enum;

/* =================================================  PB TYP TYP13 [13..13]  ================================================= */
typedef enum {                                  /*!< PB_TYP_TYP13                                                              */
  PB_TYP_TYP13_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP13_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP13_Enum;

/* =================================================  PB TYP TYP12 [12..12]  ================================================= */
typedef enum {                                  /*!< PB_TYP_TYP12                                                              */
  PB_TYP_TYP12_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP12_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP12_Enum;

/* =================================================  PB TYP TYP11 [11..11]  ================================================= */
typedef enum {                                  /*!< PB_TYP_TYP11                                                              */
  PB_TYP_TYP11_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP11_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP11_Enum;

/* =================================================  PB TYP TYP10 [10..10]  ================================================= */
typedef enum {                                  /*!< PB_TYP_TYP10                                                              */
  PB_TYP_TYP10_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP10_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP10_Enum;

/* ==================================================  PB TYP TYP9 [9..9]  =================================================== */
typedef enum {                                  /*!< PB_TYP_TYP9                                                               */
  PB_TYP_TYP9_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP9_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP9_Enum;

/* ==================================================  PB TYP TYP8 [8..8]  =================================================== */
typedef enum {                                  /*!< PB_TYP_TYP8                                                               */
  PB_TYP_TYP8_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP8_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP8_Enum;

/* ==================================================  PB TYP TYP7 [7..7]  =================================================== */
typedef enum {                                  /*!< PB_TYP_TYP7                                                               */
  PB_TYP_TYP7_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP7_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP7_Enum;

/* ==================================================  PB TYP TYP6 [6..6]  =================================================== */
typedef enum {                                  /*!< PB_TYP_TYP6                                                               */
  PB_TYP_TYP6_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP6_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP6_Enum;

/* ==================================================  PB TYP TYP5 [5..5]  =================================================== */
typedef enum {                                  /*!< PB_TYP_TYP5                                                               */
  PB_TYP_TYP5_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP5_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP5_Enum;

/* ==================================================  PB TYP TYP4 [4..4]  =================================================== */
typedef enum {                                  /*!< PB_TYP_TYP4                                                               */
  PB_TYP_TYP4_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP4_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP4_Enum;

/* ==================================================  PB TYP TYP3 [3..3]  =================================================== */
typedef enum {                                  /*!< PB_TYP_TYP3                                                               */
  PB_TYP_TYP3_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP3_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP3_Enum;

/* ==================================================  PB TYP TYP2 [2..2]  =================================================== */
typedef enum {                                  /*!< PB_TYP_TYP2                                                               */
  PB_TYP_TYP2_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP2_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP2_Enum;

/* ==================================================  PB TYP TYP1 [1..1]  =================================================== */
typedef enum {                                  /*!< PB_TYP_TYP1                                                               */
  PB_TYP_TYP1_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP1_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP1_Enum;

/* ==================================================  PB TYP TYP0 [0..0]  =================================================== */
typedef enum {                                  /*!< PB_TYP_TYP0                                                               */
  PB_TYP_TYP0_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PB_TYP_TYP0_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PB_TYP_TYP0_Enum;

/* =========================================================  AFSR1  ========================================================= */
/* ================================================  PB AFSR1 AFSR7 [28..31]  ================================================ */
typedef enum {                                  /*!< PB_AFSR1_AFSR7                                                            */
  PB_AFSR1_AFSR7_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR1_AFSR7_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR1_AFSR7_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR1_AFSR7_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR1_AFSR7_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PB_AFSR1_AFSR7_Enum;

/* ================================================  PB AFSR1 AFSR6 [24..27]  ================================================ */
typedef enum {                                  /*!< PB_AFSR1_AFSR6                                                            */
  PB_AFSR1_AFSR6_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR1_AFSR6_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR1_AFSR6_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR1_AFSR6_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR1_AFSR6_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PB_AFSR1_AFSR6_Enum;

/* ================================================  PB AFSR1 AFSR5 [20..23]  ================================================ */
typedef enum {                                  /*!< PB_AFSR1_AFSR5                                                            */
  PB_AFSR1_AFSR5_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR1_AFSR5_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR1_AFSR5_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR1_AFSR5_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR1_AFSR5_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PB_AFSR1_AFSR5_Enum;

/* ================================================  PB AFSR1 AFSR4 [16..19]  ================================================ */
typedef enum {                                  /*!< PB_AFSR1_AFSR4                                                            */
  PB_AFSR1_AFSR4_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR1_AFSR4_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR1_AFSR4_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR1_AFSR4_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR1_AFSR4_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PB_AFSR1_AFSR4_Enum;

/* ================================================  PB AFSR1 AFSR3 [12..15]  ================================================ */
typedef enum {                                  /*!< PB_AFSR1_AFSR3                                                            */
  PB_AFSR1_AFSR3_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR1_AFSR3_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR1_AFSR3_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR1_AFSR3_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR1_AFSR3_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PB_AFSR1_AFSR3_Enum;

/* ================================================  PB AFSR1 AFSR2 [8..11]  ================================================= */
typedef enum {                                  /*!< PB_AFSR1_AFSR2                                                            */
  PB_AFSR1_AFSR2_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR1_AFSR2_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR1_AFSR2_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR1_AFSR2_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR1_AFSR2_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PB_AFSR1_AFSR2_Enum;

/* =================================================  PB AFSR1 AFSR1 [4..7]  ================================================= */
typedef enum {                                  /*!< PB_AFSR1_AFSR1                                                            */
  PB_AFSR1_AFSR1_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR1_AFSR1_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR1_AFSR1_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR1_AFSR1_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR1_AFSR1_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PB_AFSR1_AFSR1_Enum;

/* =================================================  PB AFSR1 AFSR0 [0..3]  ================================================= */
typedef enum {                                  /*!< PB_AFSR1_AFSR0                                                            */
  PB_AFSR1_AFSR0_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR1_AFSR0_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR1_AFSR0_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR1_AFSR0_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR1_AFSR0_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PB_AFSR1_AFSR0_Enum;

/* =========================================================  AFSR2  ========================================================= */
/* ===============================================  PB AFSR2 AFSR15 [28..31]  ================================================ */
typedef enum {                                  /*!< PB_AFSR2_AFSR15                                                           */
  PB_AFSR2_AFSR15_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR2_AFSR15_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR2_AFSR15_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR2_AFSR15_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR2_AFSR15_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PB_AFSR2_AFSR15_Enum;

/* ===============================================  PB AFSR2 AFSR14 [24..27]  ================================================ */
typedef enum {                                  /*!< PB_AFSR2_AFSR14                                                           */
  PB_AFSR2_AFSR14_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR2_AFSR14_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR2_AFSR14_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR2_AFSR14_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR2_AFSR14_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PB_AFSR2_AFSR14_Enum;

/* ===============================================  PB AFSR2 AFSR13 [20..23]  ================================================ */
typedef enum {                                  /*!< PB_AFSR2_AFSR13                                                           */
  PB_AFSR2_AFSR13_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR2_AFSR13_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR2_AFSR13_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR2_AFSR13_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR2_AFSR13_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PB_AFSR2_AFSR13_Enum;

/* ===============================================  PB AFSR2 AFSR12 [16..19]  ================================================ */
typedef enum {                                  /*!< PB_AFSR2_AFSR12                                                           */
  PB_AFSR2_AFSR12_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR2_AFSR12_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR2_AFSR12_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR2_AFSR12_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR2_AFSR12_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PB_AFSR2_AFSR12_Enum;

/* ===============================================  PB AFSR2 AFSR11 [12..15]  ================================================ */
typedef enum {                                  /*!< PB_AFSR2_AFSR11                                                           */
  PB_AFSR2_AFSR11_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR2_AFSR11_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR2_AFSR11_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR2_AFSR11_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR2_AFSR11_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PB_AFSR2_AFSR11_Enum;

/* ================================================  PB AFSR2 AFSR10 [8..11]  ================================================ */
typedef enum {                                  /*!< PB_AFSR2_AFSR10                                                           */
  PB_AFSR2_AFSR10_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR2_AFSR10_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR2_AFSR10_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR2_AFSR10_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR2_AFSR10_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PB_AFSR2_AFSR10_Enum;

/* =================================================  PB AFSR2 AFSR9 [4..7]  ================================================= */
typedef enum {                                  /*!< PB_AFSR2_AFSR9                                                            */
  PB_AFSR2_AFSR9_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR2_AFSR9_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR2_AFSR9_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR2_AFSR9_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR2_AFSR9_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PB_AFSR2_AFSR9_Enum;

/* =================================================  PB AFSR2 AFSR8 [0..3]  ================================================= */
typedef enum {                                  /*!< PB_AFSR2_AFSR8                                                            */
  PB_AFSR2_AFSR8_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PB_AFSR2_AFSR8_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PB_AFSR2_AFSR8_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PB_AFSR2_AFSR8_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PB_AFSR2_AFSR8_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PB_AFSR2_AFSR8_Enum;

/* =========================================================  PUPD  ========================================================== */
/* ================================================  PB PUPD PUPD15 [30..31]  ================================================ */
typedef enum {                                  /*!< PB_PUPD_PUPD15                                                            */
  PB_PUPD_PUPD15_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD15_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD15_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD15_Enum;

/* ================================================  PB PUPD PUPD14 [28..29]  ================================================ */
typedef enum {                                  /*!< PB_PUPD_PUPD14                                                            */
  PB_PUPD_PUPD14_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD14_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD14_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD14_Enum;

/* ================================================  PB PUPD PUPD13 [26..27]  ================================================ */
typedef enum {                                  /*!< PB_PUPD_PUPD13                                                            */
  PB_PUPD_PUPD13_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD13_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD13_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD13_Enum;

/* ================================================  PB PUPD PUPD12 [24..25]  ================================================ */
typedef enum {                                  /*!< PB_PUPD_PUPD12                                                            */
  PB_PUPD_PUPD12_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD12_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD12_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD12_Enum;

/* ================================================  PB PUPD PUPD11 [22..23]  ================================================ */
typedef enum {                                  /*!< PB_PUPD_PUPD11                                                            */
  PB_PUPD_PUPD11_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD11_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD11_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD11_Enum;

/* ================================================  PB PUPD PUPD10 [20..21]  ================================================ */
typedef enum {                                  /*!< PB_PUPD_PUPD10                                                            */
  PB_PUPD_PUPD10_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD10_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD10_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD10_Enum;

/* ================================================  PB PUPD PUPD9 [18..19]  ================================================= */
typedef enum {                                  /*!< PB_PUPD_PUPD9                                                             */
  PB_PUPD_PUPD9_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD9_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD9_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD9_Enum;

/* ================================================  PB PUPD PUPD8 [16..17]  ================================================= */
typedef enum {                                  /*!< PB_PUPD_PUPD8                                                             */
  PB_PUPD_PUPD8_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD8_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD8_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD8_Enum;

/* ================================================  PB PUPD PUPD7 [14..15]  ================================================= */
typedef enum {                                  /*!< PB_PUPD_PUPD7                                                             */
  PB_PUPD_PUPD7_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD7_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD7_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD7_Enum;

/* ================================================  PB PUPD PUPD6 [12..13]  ================================================= */
typedef enum {                                  /*!< PB_PUPD_PUPD6                                                             */
  PB_PUPD_PUPD6_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD6_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD6_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD6_Enum;

/* ================================================  PB PUPD PUPD5 [10..11]  ================================================= */
typedef enum {                                  /*!< PB_PUPD_PUPD5                                                             */
  PB_PUPD_PUPD5_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD5_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD5_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD5_Enum;

/* =================================================  PB PUPD PUPD4 [8..9]  ================================================== */
typedef enum {                                  /*!< PB_PUPD_PUPD4                                                             */
  PB_PUPD_PUPD4_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD4_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD4_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD4_Enum;

/* =================================================  PB PUPD PUPD3 [6..7]  ================================================== */
typedef enum {                                  /*!< PB_PUPD_PUPD3                                                             */
  PB_PUPD_PUPD3_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD3_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD3_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD3_Enum;

/* =================================================  PB PUPD PUPD2 [4..5]  ================================================== */
typedef enum {                                  /*!< PB_PUPD_PUPD2                                                             */
  PB_PUPD_PUPD2_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD2_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD2_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD2_Enum;

/* =================================================  PB PUPD PUPD1 [2..3]  ================================================== */
typedef enum {                                  /*!< PB_PUPD_PUPD1                                                             */
  PB_PUPD_PUPD1_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD1_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD1_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD1_Enum;

/* =================================================  PB PUPD PUPD0 [0..1]  ================================================== */
typedef enum {                                  /*!< PB_PUPD_PUPD0                                                             */
  PB_PUPD_PUPD0_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PB_PUPD_PUPD0_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PB_PUPD_PUPD0_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PB_PUPD_PUPD0_Enum;

/* =========================================================  INDR  ========================================================== */
/* =========================================================  OUTDR  ========================================================= */
/* ==========================================================  BSR  ========================================================== */
/* =================================================  PB BSR BSR15 [15..15]  ================================================= */
typedef enum {                                  /*!< PB_BSR_BSR15                                                              */
  PB_BSR_BSR15_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR15_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR15_Enum;

/* =================================================  PB BSR BSR14 [14..14]  ================================================= */
typedef enum {                                  /*!< PB_BSR_BSR14                                                              */
  PB_BSR_BSR14_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR14_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR14_Enum;

/* =================================================  PB BSR BSR13 [13..13]  ================================================= */
typedef enum {                                  /*!< PB_BSR_BSR13                                                              */
  PB_BSR_BSR13_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR13_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR13_Enum;

/* =================================================  PB BSR BSR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PB_BSR_BSR12                                                              */
  PB_BSR_BSR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR12_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR12_Enum;

/* =================================================  PB BSR BSR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PB_BSR_BSR11                                                              */
  PB_BSR_BSR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR11_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR11_Enum;

/* =================================================  PB BSR BSR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PB_BSR_BSR10                                                              */
  PB_BSR_BSR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR10_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR10_Enum;

/* ==================================================  PB BSR BSR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR9                                                               */
  PB_BSR_BSR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR9_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR9_Enum;

/* ==================================================  PB BSR BSR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR8                                                               */
  PB_BSR_BSR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR8_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR8_Enum;

/* ==================================================  PB BSR BSR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR7                                                               */
  PB_BSR_BSR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR7_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR7_Enum;

/* ==================================================  PB BSR BSR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR6                                                               */
  PB_BSR_BSR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR6_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR6_Enum;

/* ==================================================  PB BSR BSR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR5                                                               */
  PB_BSR_BSR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR5_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR5_Enum;

/* ==================================================  PB BSR BSR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR4                                                               */
  PB_BSR_BSR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR4_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR4_Enum;

/* ==================================================  PB BSR BSR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR3                                                               */
  PB_BSR_BSR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR3_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR3_Enum;

/* ==================================================  PB BSR BSR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR2                                                               */
  PB_BSR_BSR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR2_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR2_Enum;

/* ==================================================  PB BSR BSR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR1                                                               */
  PB_BSR_BSR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR1_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR1_Enum;

/* ==================================================  PB BSR BSR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PB_BSR_BSR0                                                               */
  PB_BSR_BSR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BSR_BSR0_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BSR_BSR0_Enum;

/* ==========================================================  BCR  ========================================================== */
/* =================================================  PB BCR BCR15 [15..15]  ================================================= */
typedef enum {                                  /*!< PB_BCR_BCR15                                                              */
  PB_BCR_BCR15_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR15_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR15_Enum;

/* =================================================  PB BCR BCR14 [14..14]  ================================================= */
typedef enum {                                  /*!< PB_BCR_BCR14                                                              */
  PB_BCR_BCR14_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR14_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR14_Enum;

/* =================================================  PB BCR BCR13 [13..13]  ================================================= */
typedef enum {                                  /*!< PB_BCR_BCR13                                                              */
  PB_BCR_BCR13_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR13_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR13_Enum;

/* =================================================  PB BCR BCR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PB_BCR_BCR12                                                              */
  PB_BCR_BCR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR12_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR12_Enum;

/* =================================================  PB BCR BCR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PB_BCR_BCR11                                                              */
  PB_BCR_BCR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR11_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR11_Enum;

/* =================================================  PB BCR BCR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PB_BCR_BCR10                                                              */
  PB_BCR_BCR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR10_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR10_Enum;

/* ==================================================  PB BCR BCR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR9                                                               */
  PB_BCR_BCR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR9_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR9_Enum;

/* ==================================================  PB BCR BCR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR8                                                               */
  PB_BCR_BCR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR8_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR8_Enum;

/* ==================================================  PB BCR BCR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR7                                                               */
  PB_BCR_BCR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR7_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR7_Enum;

/* ==================================================  PB BCR BCR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR6                                                               */
  PB_BCR_BCR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR6_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR6_Enum;

/* ==================================================  PB BCR BCR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR5                                                               */
  PB_BCR_BCR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR5_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR5_Enum;

/* ==================================================  PB BCR BCR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR4                                                               */
  PB_BCR_BCR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR4_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR4_Enum;

/* ==================================================  PB BCR BCR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR3                                                               */
  PB_BCR_BCR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR3_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR3_Enum;

/* ==================================================  PB BCR BCR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR2                                                               */
  PB_BCR_BCR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR2_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR2_Enum;

/* ==================================================  PB BCR BCR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR1                                                               */
  PB_BCR_BCR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR1_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR1_Enum;

/* ==================================================  PB BCR BCR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PB_BCR_BCR0                                                               */
  PB_BCR_BCR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PB_BCR_BCR0_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PB_BCR_BCR0_Enum;

/* ========================================================  OUTDMSK  ======================================================== */
/* =============================================  PB OUTDMSK OUTDMSK15 [15..15]  ============================================= */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK15                                                      */
  PB_OUTDMSK_OUTDMSK15_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK15_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK15_Enum;

/* =============================================  PB OUTDMSK OUTDMSK14 [14..14]  ============================================= */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK14                                                      */
  PB_OUTDMSK_OUTDMSK14_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK14_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK14_Enum;

/* =============================================  PB OUTDMSK OUTDMSK13 [13..13]  ============================================= */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK13                                                      */
  PB_OUTDMSK_OUTDMSK13_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK13_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK13_Enum;

/* =============================================  PB OUTDMSK OUTDMSK12 [12..12]  ============================================= */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK12                                                      */
  PB_OUTDMSK_OUTDMSK12_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK12_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK12_Enum;

/* =============================================  PB OUTDMSK OUTDMSK11 [11..11]  ============================================= */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK11                                                      */
  PB_OUTDMSK_OUTDMSK11_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK11_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK11_Enum;

/* =============================================  PB OUTDMSK OUTDMSK10 [10..10]  ============================================= */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK10                                                      */
  PB_OUTDMSK_OUTDMSK10_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK10_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK10_Enum;

/* ==============================================  PB OUTDMSK OUTDMSK9 [9..9]  =============================================== */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK9                                                       */
  PB_OUTDMSK_OUTDMSK9_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK9_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK9_Enum;

/* ==============================================  PB OUTDMSK OUTDMSK8 [8..8]  =============================================== */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK8                                                       */
  PB_OUTDMSK_OUTDMSK8_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK8_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK8_Enum;

/* ==============================================  PB OUTDMSK OUTDMSK7 [7..7]  =============================================== */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK7                                                       */
  PB_OUTDMSK_OUTDMSK7_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK7_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK7_Enum;

/* ==============================================  PB OUTDMSK OUTDMSK6 [6..6]  =============================================== */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK6                                                       */
  PB_OUTDMSK_OUTDMSK6_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK6_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK6_Enum;

/* ==============================================  PB OUTDMSK OUTDMSK5 [5..5]  =============================================== */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK5                                                       */
  PB_OUTDMSK_OUTDMSK5_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK5_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK5_Enum;

/* ==============================================  PB OUTDMSK OUTDMSK4 [4..4]  =============================================== */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK4                                                       */
  PB_OUTDMSK_OUTDMSK4_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK4_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK4_Enum;

/* ==============================================  PB OUTDMSK OUTDMSK3 [3..3]  =============================================== */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK3                                                       */
  PB_OUTDMSK_OUTDMSK3_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK3_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK3_Enum;

/* ==============================================  PB OUTDMSK OUTDMSK2 [2..2]  =============================================== */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK2                                                       */
  PB_OUTDMSK_OUTDMSK2_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK2_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK2_Enum;

/* ==============================================  PB OUTDMSK OUTDMSK1 [1..1]  =============================================== */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK1                                                       */
  PB_OUTDMSK_OUTDMSK1_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK1_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK1_Enum;

/* ==============================================  PB OUTDMSK OUTDMSK0 [0..0]  =============================================== */
typedef enum {                                  /*!< PB_OUTDMSK_OUTDMSK0                                                       */
  PB_OUTDMSK_OUTDMSK0_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PB_OUTDMSK_OUTDMSK0_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PB_OUTDMSK_OUTDMSK0_Enum;

/* =========================================================  DBCR  ========================================================== */
/* ================================================  PB DBCR DBCLK [16..18]  ================================================= */
typedef enum {                                  /*!< PB_DBCR_DBCLK                                                             */
  PB_DBCR_DBCLK_HCLK1                  = 0,     /*!< HCLK1 : HCLK/1                                                            */
  PB_DBCR_DBCLK_HCLK4                  = 1,     /*!< HCLK4 : HCLK/4                                                            */
  PB_DBCR_DBCLK_HCLK16                 = 2,     /*!< HCLK16 : HCLK/16                                                          */
  PB_DBCR_DBCLK_HCLK64                 = 3,     /*!< HCLK64 : HCLK/64                                                          */
  PB_DBCR_DBCLK_HCLK256                = 4,     /*!< HCLK256 : HCLK/256                                                        */
  PB_DBCR_DBCLK_HCLK1024               = 5,     /*!< HCLK1024 : HCLK/1024                                                      */
} PB_DBCR_DBCLK_Enum;

/* ================================================  PB DBCR DBEN11 [11..11]  ================================================ */
typedef enum {                                  /*!< PB_DBCR_DBEN11                                                            */
  PB_DBCR_DBEN11_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN11_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN11_Enum;

/* ================================================  PB DBCR DBEN10 [10..10]  ================================================ */
typedef enum {                                  /*!< PB_DBCR_DBEN10                                                            */
  PB_DBCR_DBEN10_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN10_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN10_Enum;

/* =================================================  PB DBCR DBEN9 [9..9]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN9                                                             */
  PB_DBCR_DBEN9_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN9_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN9_Enum;

/* =================================================  PB DBCR DBEN8 [8..8]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN8                                                             */
  PB_DBCR_DBEN8_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN8_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN8_Enum;

/* =================================================  PB DBCR DBEN7 [7..7]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN7                                                             */
  PB_DBCR_DBEN7_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN7_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN7_Enum;

/* =================================================  PB DBCR DBEN6 [6..6]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN6                                                             */
  PB_DBCR_DBEN6_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN6_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN6_Enum;

/* =================================================  PB DBCR DBEN5 [5..5]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN5                                                             */
  PB_DBCR_DBEN5_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN5_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN5_Enum;

/* =================================================  PB DBCR DBEN4 [4..4]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN4                                                             */
  PB_DBCR_DBEN4_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN4_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN4_Enum;

/* =================================================  PB DBCR DBEN3 [3..3]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN3                                                             */
  PB_DBCR_DBEN3_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN3_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN3_Enum;

/* =================================================  PB DBCR DBEN2 [2..2]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN2                                                             */
  PB_DBCR_DBEN2_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN2_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN2_Enum;

/* =================================================  PB DBCR DBEN1 [1..1]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN1                                                             */
  PB_DBCR_DBEN1_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN1_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN1_Enum;

/* =================================================  PB DBCR DBEN0 [0..0]  ================================================== */
typedef enum {                                  /*!< PB_DBCR_DBEN0                                                             */
  PB_DBCR_DBEN0_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PB_DBCR_DBEN0_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PB_DBCR_DBEN0_Enum;

/* ========================================================  PB_MOD  ========================================================= */
/* ========================================================  PB_TYP  ========================================================= */
/* =======================================================  PB_AFSR1  ======================================================== */
/* =======================================================  PB_AFSR2  ======================================================== */
/* ========================================================  PB_PUPD  ======================================================== */
/* ========================================================  PB_INDR  ======================================================== */
/* =======================================================  PB_OUTDR  ======================================================== */
/* ========================================================  PB_BSR  ========================================================= */
/* ========================================================  PB_BCR  ========================================================= */
/* ======================================================  PB_OUTDMSK  ======================================================= */
/* ========================================================  PB_DBCR  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            PC                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
/* ================================================  PC MOD MODE15 [30..31]  ================================================= */
typedef enum {                                  /*!< PC_MOD_MODE15                                                             */
  PC_MOD_MODE15_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE15_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE15_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE15_Enum;

/* ================================================  PC MOD MODE14 [28..29]  ================================================= */
typedef enum {                                  /*!< PC_MOD_MODE14                                                             */
  PC_MOD_MODE14_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE14_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE14_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE14_Enum;

/* ================================================  PC MOD MODE13 [26..27]  ================================================= */
typedef enum {                                  /*!< PC_MOD_MODE13                                                             */
  PC_MOD_MODE13_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE13_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE13_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE13_Enum;

/* ================================================  PC MOD MODE12 [24..25]  ================================================= */
typedef enum {                                  /*!< PC_MOD_MODE12                                                             */
  PC_MOD_MODE12_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE12_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE12_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE12_Enum;

/* ================================================  PC MOD MODE11 [22..23]  ================================================= */
typedef enum {                                  /*!< PC_MOD_MODE11                                                             */
  PC_MOD_MODE11_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE11_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE11_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE11_Enum;

/* ================================================  PC MOD MODE10 [20..21]  ================================================= */
typedef enum {                                  /*!< PC_MOD_MODE10                                                             */
  PC_MOD_MODE10_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE10_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE10_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE10_Enum;

/* =================================================  PC MOD MODE9 [18..19]  ================================================= */
typedef enum {                                  /*!< PC_MOD_MODE9                                                              */
  PC_MOD_MODE9_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE9_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE9_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE9_Enum;

/* =================================================  PC MOD MODE8 [16..17]  ================================================= */
typedef enum {                                  /*!< PC_MOD_MODE8                                                              */
  PC_MOD_MODE8_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE8_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE8_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE8_Enum;

/* =================================================  PC MOD MODE7 [14..15]  ================================================= */
typedef enum {                                  /*!< PC_MOD_MODE7                                                              */
  PC_MOD_MODE7_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE7_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE7_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE7_Enum;

/* =================================================  PC MOD MODE6 [12..13]  ================================================= */
typedef enum {                                  /*!< PC_MOD_MODE6                                                              */
  PC_MOD_MODE6_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE6_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE6_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE6_Enum;

/* =================================================  PC MOD MODE5 [10..11]  ================================================= */
typedef enum {                                  /*!< PC_MOD_MODE5                                                              */
  PC_MOD_MODE5_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE5_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE5_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE5_Enum;

/* ==================================================  PC MOD MODE4 [8..9]  ================================================== */
typedef enum {                                  /*!< PC_MOD_MODE4                                                              */
  PC_MOD_MODE4_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE4_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE4_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE4_Enum;

/* ==================================================  PC MOD MODE3 [6..7]  ================================================== */
typedef enum {                                  /*!< PC_MOD_MODE3                                                              */
  PC_MOD_MODE3_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE3_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE3_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE3_Enum;

/* ==================================================  PC MOD MODE2 [4..5]  ================================================== */
typedef enum {                                  /*!< PC_MOD_MODE2                                                              */
  PC_MOD_MODE2_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE2_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE2_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE2_Enum;

/* ==================================================  PC MOD MODE1 [2..3]  ================================================== */
typedef enum {                                  /*!< PC_MOD_MODE1                                                              */
  PC_MOD_MODE1_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE1_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE1_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE1_Enum;

/* ==================================================  PC MOD MODE0 [0..1]  ================================================== */
typedef enum {                                  /*!< PC_MOD_MODE0                                                              */
  PC_MOD_MODE0_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PC_MOD_MODE0_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PC_MOD_MODE0_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PC_MOD_MODE0_Enum;

/* ==========================================================  TYP  ========================================================== */
/* =================================================  PC TYP TYP15 [15..15]  ================================================= */
typedef enum {                                  /*!< PC_TYP_TYP15                                                              */
  PC_TYP_TYP15_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP15_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP15_Enum;

/* =================================================  PC TYP TYP14 [14..14]  ================================================= */
typedef enum {                                  /*!< PC_TYP_TYP14                                                              */
  PC_TYP_TYP14_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP14_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP14_Enum;

/* =================================================  PC TYP TYP13 [13..13]  ================================================= */
typedef enum {                                  /*!< PC_TYP_TYP13                                                              */
  PC_TYP_TYP13_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP13_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP13_Enum;

/* =================================================  PC TYP TYP12 [12..12]  ================================================= */
typedef enum {                                  /*!< PC_TYP_TYP12                                                              */
  PC_TYP_TYP12_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP12_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP12_Enum;

/* =================================================  PC TYP TYP11 [11..11]  ================================================= */
typedef enum {                                  /*!< PC_TYP_TYP11                                                              */
  PC_TYP_TYP11_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP11_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP11_Enum;

/* =================================================  PC TYP TYP10 [10..10]  ================================================= */
typedef enum {                                  /*!< PC_TYP_TYP10                                                              */
  PC_TYP_TYP10_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP10_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP10_Enum;

/* ==================================================  PC TYP TYP9 [9..9]  =================================================== */
typedef enum {                                  /*!< PC_TYP_TYP9                                                               */
  PC_TYP_TYP9_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP9_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP9_Enum;

/* ==================================================  PC TYP TYP8 [8..8]  =================================================== */
typedef enum {                                  /*!< PC_TYP_TYP8                                                               */
  PC_TYP_TYP8_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP8_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP8_Enum;

/* ==================================================  PC TYP TYP7 [7..7]  =================================================== */
typedef enum {                                  /*!< PC_TYP_TYP7                                                               */
  PC_TYP_TYP7_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP7_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP7_Enum;

/* ==================================================  PC TYP TYP6 [6..6]  =================================================== */
typedef enum {                                  /*!< PC_TYP_TYP6                                                               */
  PC_TYP_TYP6_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP6_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP6_Enum;

/* ==================================================  PC TYP TYP5 [5..5]  =================================================== */
typedef enum {                                  /*!< PC_TYP_TYP5                                                               */
  PC_TYP_TYP5_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP5_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP5_Enum;

/* ==================================================  PC TYP TYP4 [4..4]  =================================================== */
typedef enum {                                  /*!< PC_TYP_TYP4                                                               */
  PC_TYP_TYP4_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP4_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP4_Enum;

/* ==================================================  PC TYP TYP3 [3..3]  =================================================== */
typedef enum {                                  /*!< PC_TYP_TYP3                                                               */
  PC_TYP_TYP3_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP3_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP3_Enum;

/* ==================================================  PC TYP TYP2 [2..2]  =================================================== */
typedef enum {                                  /*!< PC_TYP_TYP2                                                               */
  PC_TYP_TYP2_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP2_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP2_Enum;

/* ==================================================  PC TYP TYP1 [1..1]  =================================================== */
typedef enum {                                  /*!< PC_TYP_TYP1                                                               */
  PC_TYP_TYP1_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP1_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP1_Enum;

/* ==================================================  PC TYP TYP0 [0..0]  =================================================== */
typedef enum {                                  /*!< PC_TYP_TYP0                                                               */
  PC_TYP_TYP0_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PC_TYP_TYP0_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PC_TYP_TYP0_Enum;

/* =========================================================  AFSR1  ========================================================= */
/* ================================================  PC AFSR1 AFSR7 [28..31]  ================================================ */
typedef enum {                                  /*!< PC_AFSR1_AFSR7                                                            */
  PC_AFSR1_AFSR7_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR1_AFSR7_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR1_AFSR7_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR1_AFSR7_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR1_AFSR7_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PC_AFSR1_AFSR7_Enum;

/* ================================================  PC AFSR1 AFSR6 [24..27]  ================================================ */
typedef enum {                                  /*!< PC_AFSR1_AFSR6                                                            */
  PC_AFSR1_AFSR6_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR1_AFSR6_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR1_AFSR6_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR1_AFSR6_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR1_AFSR6_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PC_AFSR1_AFSR6_Enum;

/* ================================================  PC AFSR1 AFSR5 [20..23]  ================================================ */
typedef enum {                                  /*!< PC_AFSR1_AFSR5                                                            */
  PC_AFSR1_AFSR5_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR1_AFSR5_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR1_AFSR5_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR1_AFSR5_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR1_AFSR5_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PC_AFSR1_AFSR5_Enum;

/* ================================================  PC AFSR1 AFSR4 [16..19]  ================================================ */
typedef enum {                                  /*!< PC_AFSR1_AFSR4                                                            */
  PC_AFSR1_AFSR4_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR1_AFSR4_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR1_AFSR4_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR1_AFSR4_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR1_AFSR4_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PC_AFSR1_AFSR4_Enum;

/* ================================================  PC AFSR1 AFSR3 [12..15]  ================================================ */
typedef enum {                                  /*!< PC_AFSR1_AFSR3                                                            */
  PC_AFSR1_AFSR3_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR1_AFSR3_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR1_AFSR3_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR1_AFSR3_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR1_AFSR3_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PC_AFSR1_AFSR3_Enum;

/* ================================================  PC AFSR1 AFSR2 [8..11]  ================================================= */
typedef enum {                                  /*!< PC_AFSR1_AFSR2                                                            */
  PC_AFSR1_AFSR2_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR1_AFSR2_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR1_AFSR2_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR1_AFSR2_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR1_AFSR2_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PC_AFSR1_AFSR2_Enum;

/* =================================================  PC AFSR1 AFSR1 [4..7]  ================================================= */
typedef enum {                                  /*!< PC_AFSR1_AFSR1                                                            */
  PC_AFSR1_AFSR1_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR1_AFSR1_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR1_AFSR1_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR1_AFSR1_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR1_AFSR1_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PC_AFSR1_AFSR1_Enum;

/* =================================================  PC AFSR1 AFSR0 [0..3]  ================================================= */
typedef enum {                                  /*!< PC_AFSR1_AFSR0                                                            */
  PC_AFSR1_AFSR0_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR1_AFSR0_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR1_AFSR0_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR1_AFSR0_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR1_AFSR0_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PC_AFSR1_AFSR0_Enum;

/* =========================================================  AFSR2  ========================================================= */
/* ===============================================  PC AFSR2 AFSR15 [28..31]  ================================================ */
typedef enum {                                  /*!< PC_AFSR2_AFSR15                                                           */
  PC_AFSR2_AFSR15_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR2_AFSR15_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR2_AFSR15_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR2_AFSR15_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR2_AFSR15_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PC_AFSR2_AFSR15_Enum;

/* ===============================================  PC AFSR2 AFSR14 [24..27]  ================================================ */
typedef enum {                                  /*!< PC_AFSR2_AFSR14                                                           */
  PC_AFSR2_AFSR14_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR2_AFSR14_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR2_AFSR14_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR2_AFSR14_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR2_AFSR14_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PC_AFSR2_AFSR14_Enum;

/* ===============================================  PC AFSR2 AFSR13 [20..23]  ================================================ */
typedef enum {                                  /*!< PC_AFSR2_AFSR13                                                           */
  PC_AFSR2_AFSR13_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR2_AFSR13_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR2_AFSR13_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR2_AFSR13_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR2_AFSR13_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PC_AFSR2_AFSR13_Enum;

/* ===============================================  PC AFSR2 AFSR12 [16..19]  ================================================ */
typedef enum {                                  /*!< PC_AFSR2_AFSR12                                                           */
  PC_AFSR2_AFSR12_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR2_AFSR12_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR2_AFSR12_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR2_AFSR12_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR2_AFSR12_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PC_AFSR2_AFSR12_Enum;

/* ===============================================  PC AFSR2 AFSR11 [12..15]  ================================================ */
typedef enum {                                  /*!< PC_AFSR2_AFSR11                                                           */
  PC_AFSR2_AFSR11_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR2_AFSR11_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR2_AFSR11_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR2_AFSR11_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR2_AFSR11_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PC_AFSR2_AFSR11_Enum;

/* ================================================  PC AFSR2 AFSR10 [8..11]  ================================================ */
typedef enum {                                  /*!< PC_AFSR2_AFSR10                                                           */
  PC_AFSR2_AFSR10_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR2_AFSR10_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR2_AFSR10_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR2_AFSR10_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR2_AFSR10_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PC_AFSR2_AFSR10_Enum;

/* =================================================  PC AFSR2 AFSR9 [4..7]  ================================================= */
typedef enum {                                  /*!< PC_AFSR2_AFSR9                                                            */
  PC_AFSR2_AFSR9_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR2_AFSR9_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR2_AFSR9_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR2_AFSR9_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR2_AFSR9_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PC_AFSR2_AFSR9_Enum;

/* =================================================  PC AFSR2 AFSR8 [0..3]  ================================================= */
typedef enum {                                  /*!< PC_AFSR2_AFSR8                                                            */
  PC_AFSR2_AFSR8_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PC_AFSR2_AFSR8_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PC_AFSR2_AFSR8_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PC_AFSR2_AFSR8_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PC_AFSR2_AFSR8_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PC_AFSR2_AFSR8_Enum;

/* =========================================================  PUPD  ========================================================== */
/* ================================================  PC PUPD PUPD15 [30..31]  ================================================ */
typedef enum {                                  /*!< PC_PUPD_PUPD15                                                            */
  PC_PUPD_PUPD15_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD15_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD15_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD15_Enum;

/* ================================================  PC PUPD PUPD14 [28..29]  ================================================ */
typedef enum {                                  /*!< PC_PUPD_PUPD14                                                            */
  PC_PUPD_PUPD14_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD14_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD14_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD14_Enum;

/* ================================================  PC PUPD PUPD13 [26..27]  ================================================ */
typedef enum {                                  /*!< PC_PUPD_PUPD13                                                            */
  PC_PUPD_PUPD13_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD13_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD13_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD13_Enum;

/* ================================================  PC PUPD PUPD12 [24..25]  ================================================ */
typedef enum {                                  /*!< PC_PUPD_PUPD12                                                            */
  PC_PUPD_PUPD12_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD12_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD12_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD12_Enum;

/* ================================================  PC PUPD PUPD11 [22..23]  ================================================ */
typedef enum {                                  /*!< PC_PUPD_PUPD11                                                            */
  PC_PUPD_PUPD11_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD11_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD11_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD11_Enum;

/* ================================================  PC PUPD PUPD10 [20..21]  ================================================ */
typedef enum {                                  /*!< PC_PUPD_PUPD10                                                            */
  PC_PUPD_PUPD10_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD10_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD10_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD10_Enum;

/* ================================================  PC PUPD PUPD9 [18..19]  ================================================= */
typedef enum {                                  /*!< PC_PUPD_PUPD9                                                             */
  PC_PUPD_PUPD9_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD9_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD9_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD9_Enum;

/* ================================================  PC PUPD PUPD8 [16..17]  ================================================= */
typedef enum {                                  /*!< PC_PUPD_PUPD8                                                             */
  PC_PUPD_PUPD8_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD8_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD8_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD8_Enum;

/* ================================================  PC PUPD PUPD7 [14..15]  ================================================= */
typedef enum {                                  /*!< PC_PUPD_PUPD7                                                             */
  PC_PUPD_PUPD7_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD7_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD7_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD7_Enum;

/* ================================================  PC PUPD PUPD6 [12..13]  ================================================= */
typedef enum {                                  /*!< PC_PUPD_PUPD6                                                             */
  PC_PUPD_PUPD6_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD6_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD6_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD6_Enum;

/* ================================================  PC PUPD PUPD5 [10..11]  ================================================= */
typedef enum {                                  /*!< PC_PUPD_PUPD5                                                             */
  PC_PUPD_PUPD5_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD5_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD5_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD5_Enum;

/* =================================================  PC PUPD PUPD4 [8..9]  ================================================== */
typedef enum {                                  /*!< PC_PUPD_PUPD4                                                             */
  PC_PUPD_PUPD4_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD4_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD4_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD4_Enum;

/* =================================================  PC PUPD PUPD3 [6..7]  ================================================== */
typedef enum {                                  /*!< PC_PUPD_PUPD3                                                             */
  PC_PUPD_PUPD3_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD3_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD3_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD3_Enum;

/* =================================================  PC PUPD PUPD2 [4..5]  ================================================== */
typedef enum {                                  /*!< PC_PUPD_PUPD2                                                             */
  PC_PUPD_PUPD2_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD2_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD2_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD2_Enum;

/* =================================================  PC PUPD PUPD1 [2..3]  ================================================== */
typedef enum {                                  /*!< PC_PUPD_PUPD1                                                             */
  PC_PUPD_PUPD1_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD1_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD1_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD1_Enum;

/* =================================================  PC PUPD PUPD0 [0..1]  ================================================== */
typedef enum {                                  /*!< PC_PUPD_PUPD0                                                             */
  PC_PUPD_PUPD0_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PC_PUPD_PUPD0_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PC_PUPD_PUPD0_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PC_PUPD_PUPD0_Enum;

/* =========================================================  INDR  ========================================================== */
/* =========================================================  OUTDR  ========================================================= */
/* ==========================================================  BSR  ========================================================== */
/* =================================================  PC BSR BSR15 [15..15]  ================================================= */
typedef enum {                                  /*!< PC_BSR_BSR15                                                              */
  PC_BSR_BSR15_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR15_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR15_Enum;

/* =================================================  PC BSR BSR14 [14..14]  ================================================= */
typedef enum {                                  /*!< PC_BSR_BSR14                                                              */
  PC_BSR_BSR14_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR14_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR14_Enum;

/* =================================================  PC BSR BSR13 [13..13]  ================================================= */
typedef enum {                                  /*!< PC_BSR_BSR13                                                              */
  PC_BSR_BSR13_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR13_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR13_Enum;

/* =================================================  PC BSR BSR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PC_BSR_BSR12                                                              */
  PC_BSR_BSR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR12_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR12_Enum;

/* =================================================  PC BSR BSR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PC_BSR_BSR11                                                              */
  PC_BSR_BSR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR11_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR11_Enum;

/* =================================================  PC BSR BSR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PC_BSR_BSR10                                                              */
  PC_BSR_BSR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR10_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR10_Enum;

/* ==================================================  PC BSR BSR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR9                                                               */
  PC_BSR_BSR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR9_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR9_Enum;

/* ==================================================  PC BSR BSR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR8                                                               */
  PC_BSR_BSR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR8_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR8_Enum;

/* ==================================================  PC BSR BSR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR7                                                               */
  PC_BSR_BSR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR7_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR7_Enum;

/* ==================================================  PC BSR BSR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR6                                                               */
  PC_BSR_BSR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR6_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR6_Enum;

/* ==================================================  PC BSR BSR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR5                                                               */
  PC_BSR_BSR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR5_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR5_Enum;

/* ==================================================  PC BSR BSR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR4                                                               */
  PC_BSR_BSR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR4_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR4_Enum;

/* ==================================================  PC BSR BSR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR3                                                               */
  PC_BSR_BSR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR3_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR3_Enum;

/* ==================================================  PC BSR BSR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR2                                                               */
  PC_BSR_BSR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR2_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR2_Enum;

/* ==================================================  PC BSR BSR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR1                                                               */
  PC_BSR_BSR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR1_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR1_Enum;

/* ==================================================  PC BSR BSR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PC_BSR_BSR0                                                               */
  PC_BSR_BSR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BSR_BSR0_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BSR_BSR0_Enum;

/* ==========================================================  BCR  ========================================================== */
/* =================================================  PC BCR BCR15 [15..15]  ================================================= */
typedef enum {                                  /*!< PC_BCR_BCR15                                                              */
  PC_BCR_BCR15_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR15_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR15_Enum;

/* =================================================  PC BCR BCR14 [14..14]  ================================================= */
typedef enum {                                  /*!< PC_BCR_BCR14                                                              */
  PC_BCR_BCR14_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR14_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR14_Enum;

/* =================================================  PC BCR BCR13 [13..13]  ================================================= */
typedef enum {                                  /*!< PC_BCR_BCR13                                                              */
  PC_BCR_BCR13_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR13_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR13_Enum;

/* =================================================  PC BCR BCR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PC_BCR_BCR12                                                              */
  PC_BCR_BCR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR12_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR12_Enum;

/* =================================================  PC BCR BCR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PC_BCR_BCR11                                                              */
  PC_BCR_BCR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR11_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR11_Enum;

/* =================================================  PC BCR BCR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PC_BCR_BCR10                                                              */
  PC_BCR_BCR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR10_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR10_Enum;

/* ==================================================  PC BCR BCR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR9                                                               */
  PC_BCR_BCR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR9_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR9_Enum;

/* ==================================================  PC BCR BCR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR8                                                               */
  PC_BCR_BCR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR8_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR8_Enum;

/* ==================================================  PC BCR BCR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR7                                                               */
  PC_BCR_BCR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR7_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR7_Enum;

/* ==================================================  PC BCR BCR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR6                                                               */
  PC_BCR_BCR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR6_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR6_Enum;

/* ==================================================  PC BCR BCR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR5                                                               */
  PC_BCR_BCR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR5_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR5_Enum;

/* ==================================================  PC BCR BCR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR4                                                               */
  PC_BCR_BCR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR4_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR4_Enum;

/* ==================================================  PC BCR BCR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR3                                                               */
  PC_BCR_BCR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR3_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR3_Enum;

/* ==================================================  PC BCR BCR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR2                                                               */
  PC_BCR_BCR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR2_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR2_Enum;

/* ==================================================  PC BCR BCR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR1                                                               */
  PC_BCR_BCR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR1_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR1_Enum;

/* ==================================================  PC BCR BCR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PC_BCR_BCR0                                                               */
  PC_BCR_BCR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PC_BCR_BCR0_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PC_BCR_BCR0_Enum;

/* ========================================================  OUTDMSK  ======================================================== */
/* =============================================  PC OUTDMSK OUTDMSK15 [15..15]  ============================================= */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK15                                                      */
  PC_OUTDMSK_OUTDMSK15_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK15_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK15_Enum;

/* =============================================  PC OUTDMSK OUTDMSK14 [14..14]  ============================================= */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK14                                                      */
  PC_OUTDMSK_OUTDMSK14_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK14_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK14_Enum;

/* =============================================  PC OUTDMSK OUTDMSK13 [13..13]  ============================================= */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK13                                                      */
  PC_OUTDMSK_OUTDMSK13_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK13_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK13_Enum;

/* =============================================  PC OUTDMSK OUTDMSK12 [12..12]  ============================================= */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK12                                                      */
  PC_OUTDMSK_OUTDMSK12_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK12_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK12_Enum;

/* =============================================  PC OUTDMSK OUTDMSK11 [11..11]  ============================================= */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK11                                                      */
  PC_OUTDMSK_OUTDMSK11_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK11_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK11_Enum;

/* =============================================  PC OUTDMSK OUTDMSK10 [10..10]  ============================================= */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK10                                                      */
  PC_OUTDMSK_OUTDMSK10_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK10_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK10_Enum;

/* ==============================================  PC OUTDMSK OUTDMSK9 [9..9]  =============================================== */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK9                                                       */
  PC_OUTDMSK_OUTDMSK9_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK9_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK9_Enum;

/* ==============================================  PC OUTDMSK OUTDMSK8 [8..8]  =============================================== */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK8                                                       */
  PC_OUTDMSK_OUTDMSK8_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK8_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK8_Enum;

/* ==============================================  PC OUTDMSK OUTDMSK7 [7..7]  =============================================== */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK7                                                       */
  PC_OUTDMSK_OUTDMSK7_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK7_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK7_Enum;

/* ==============================================  PC OUTDMSK OUTDMSK6 [6..6]  =============================================== */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK6                                                       */
  PC_OUTDMSK_OUTDMSK6_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK6_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK6_Enum;

/* ==============================================  PC OUTDMSK OUTDMSK5 [5..5]  =============================================== */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK5                                                       */
  PC_OUTDMSK_OUTDMSK5_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK5_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK5_Enum;

/* ==============================================  PC OUTDMSK OUTDMSK4 [4..4]  =============================================== */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK4                                                       */
  PC_OUTDMSK_OUTDMSK4_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK4_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK4_Enum;

/* ==============================================  PC OUTDMSK OUTDMSK3 [3..3]  =============================================== */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK3                                                       */
  PC_OUTDMSK_OUTDMSK3_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK3_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK3_Enum;

/* ==============================================  PC OUTDMSK OUTDMSK2 [2..2]  =============================================== */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK2                                                       */
  PC_OUTDMSK_OUTDMSK2_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK2_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK2_Enum;

/* ==============================================  PC OUTDMSK OUTDMSK1 [1..1]  =============================================== */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK1                                                       */
  PC_OUTDMSK_OUTDMSK1_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK1_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK1_Enum;

/* ==============================================  PC OUTDMSK OUTDMSK0 [0..0]  =============================================== */
typedef enum {                                  /*!< PC_OUTDMSK_OUTDMSK0                                                       */
  PC_OUTDMSK_OUTDMSK0_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PC_OUTDMSK_OUTDMSK0_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PC_OUTDMSK_OUTDMSK0_Enum;

/* =========================================================  DBCR  ========================================================== */
/* ================================================  PC DBCR DBCLK [16..18]  ================================================= */
typedef enum {                                  /*!< PC_DBCR_DBCLK                                                             */
  PC_DBCR_DBCLK_HCLK1                  = 0,     /*!< HCLK1 : HCLK/1                                                            */
  PC_DBCR_DBCLK_HCLK4                  = 1,     /*!< HCLK4 : HCLK/4                                                            */
  PC_DBCR_DBCLK_HCLK16                 = 2,     /*!< HCLK16 : HCLK/16                                                          */
  PC_DBCR_DBCLK_HCLK64                 = 3,     /*!< HCLK64 : HCLK/64                                                          */
  PC_DBCR_DBCLK_HCLK256                = 4,     /*!< HCLK256 : HCLK/256                                                        */
  PC_DBCR_DBCLK_HCLK1024               = 5,     /*!< HCLK1024 : HCLK/1024                                                      */
} PC_DBCR_DBCLK_Enum;

/* ================================================  PC DBCR DBEN11 [11..11]  ================================================ */
typedef enum {                                  /*!< PC_DBCR_DBEN11                                                            */
  PC_DBCR_DBEN11_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN11_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN11_Enum;

/* ================================================  PC DBCR DBEN10 [10..10]  ================================================ */
typedef enum {                                  /*!< PC_DBCR_DBEN10                                                            */
  PC_DBCR_DBEN10_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN10_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN10_Enum;

/* =================================================  PC DBCR DBEN9 [9..9]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN9                                                             */
  PC_DBCR_DBEN9_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN9_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN9_Enum;

/* =================================================  PC DBCR DBEN8 [8..8]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN8                                                             */
  PC_DBCR_DBEN8_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN8_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN8_Enum;

/* =================================================  PC DBCR DBEN7 [7..7]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN7                                                             */
  PC_DBCR_DBEN7_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN7_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN7_Enum;

/* =================================================  PC DBCR DBEN6 [6..6]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN6                                                             */
  PC_DBCR_DBEN6_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN6_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN6_Enum;

/* =================================================  PC DBCR DBEN5 [5..5]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN5                                                             */
  PC_DBCR_DBEN5_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN5_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN5_Enum;

/* =================================================  PC DBCR DBEN4 [4..4]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN4                                                             */
  PC_DBCR_DBEN4_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN4_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN4_Enum;

/* =================================================  PC DBCR DBEN3 [3..3]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN3                                                             */
  PC_DBCR_DBEN3_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN3_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN3_Enum;

/* =================================================  PC DBCR DBEN2 [2..2]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN2                                                             */
  PC_DBCR_DBEN2_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN2_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN2_Enum;

/* =================================================  PC DBCR DBEN1 [1..1]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN1                                                             */
  PC_DBCR_DBEN1_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN1_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN1_Enum;

/* =================================================  PC DBCR DBEN0 [0..0]  ================================================== */
typedef enum {                                  /*!< PC_DBCR_DBEN0                                                             */
  PC_DBCR_DBEN0_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PC_DBCR_DBEN0_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PC_DBCR_DBEN0_Enum;

/* ========================================================  PC_MOD  ========================================================= */
/* ========================================================  PC_TYP  ========================================================= */
/* =======================================================  PC_AFSR1  ======================================================== */
/* =======================================================  PC_AFSR2  ======================================================== */
/* ========================================================  PC_PUPD  ======================================================== */
/* ========================================================  PC_INDR  ======================================================== */
/* =======================================================  PC_OUTDR  ======================================================== */
/* ========================================================  PC_BSR  ========================================================= */
/* ========================================================  PC_BCR  ========================================================= */
/* ======================================================  PC_OUTDMSK  ======================================================= */
/* ========================================================  PC_DBCR  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            PD                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
/* ================================================  PD MOD MODE15 [30..31]  ================================================= */
typedef enum {                                  /*!< PD_MOD_MODE15                                                             */
  PD_MOD_MODE15_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE15_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE15_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE15_Enum;

/* ================================================  PD MOD MODE14 [28..29]  ================================================= */
typedef enum {                                  /*!< PD_MOD_MODE14                                                             */
  PD_MOD_MODE14_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE14_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE14_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE14_Enum;

/* ================================================  PD MOD MODE13 [26..27]  ================================================= */
typedef enum {                                  /*!< PD_MOD_MODE13                                                             */
  PD_MOD_MODE13_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE13_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE13_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE13_Enum;

/* ================================================  PD MOD MODE12 [24..25]  ================================================= */
typedef enum {                                  /*!< PD_MOD_MODE12                                                             */
  PD_MOD_MODE12_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE12_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE12_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE12_Enum;

/* ================================================  PD MOD MODE11 [22..23]  ================================================= */
typedef enum {                                  /*!< PD_MOD_MODE11                                                             */
  PD_MOD_MODE11_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE11_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE11_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE11_Enum;

/* ================================================  PD MOD MODE10 [20..21]  ================================================= */
typedef enum {                                  /*!< PD_MOD_MODE10                                                             */
  PD_MOD_MODE10_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE10_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE10_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE10_Enum;

/* =================================================  PD MOD MODE9 [18..19]  ================================================= */
typedef enum {                                  /*!< PD_MOD_MODE9                                                              */
  PD_MOD_MODE9_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE9_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE9_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE9_Enum;

/* =================================================  PD MOD MODE8 [16..17]  ================================================= */
typedef enum {                                  /*!< PD_MOD_MODE8                                                              */
  PD_MOD_MODE8_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE8_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE8_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE8_Enum;

/* =================================================  PD MOD MODE7 [14..15]  ================================================= */
typedef enum {                                  /*!< PD_MOD_MODE7                                                              */
  PD_MOD_MODE7_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE7_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE7_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE7_Enum;

/* =================================================  PD MOD MODE6 [12..13]  ================================================= */
typedef enum {                                  /*!< PD_MOD_MODE6                                                              */
  PD_MOD_MODE6_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE6_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE6_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE6_Enum;

/* =================================================  PD MOD MODE5 [10..11]  ================================================= */
typedef enum {                                  /*!< PD_MOD_MODE5                                                              */
  PD_MOD_MODE5_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE5_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE5_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE5_Enum;

/* ==================================================  PD MOD MODE4 [8..9]  ================================================== */
typedef enum {                                  /*!< PD_MOD_MODE4                                                              */
  PD_MOD_MODE4_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE4_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE4_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE4_Enum;

/* ==================================================  PD MOD MODE3 [6..7]  ================================================== */
typedef enum {                                  /*!< PD_MOD_MODE3                                                              */
  PD_MOD_MODE3_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE3_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE3_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE3_Enum;

/* ==================================================  PD MOD MODE2 [4..5]  ================================================== */
typedef enum {                                  /*!< PD_MOD_MODE2                                                              */
  PD_MOD_MODE2_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE2_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE2_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE2_Enum;

/* ==================================================  PD MOD MODE1 [2..3]  ================================================== */
typedef enum {                                  /*!< PD_MOD_MODE1                                                              */
  PD_MOD_MODE1_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE1_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE1_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE1_Enum;

/* ==================================================  PD MOD MODE0 [0..1]  ================================================== */
typedef enum {                                  /*!< PD_MOD_MODE0                                                              */
  PD_MOD_MODE0_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PD_MOD_MODE0_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PD_MOD_MODE0_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PD_MOD_MODE0_Enum;

/* ==========================================================  TYP  ========================================================== */
/* =================================================  PD TYP TYP15 [15..15]  ================================================= */
typedef enum {                                  /*!< PD_TYP_TYP15                                                              */
  PD_TYP_TYP15_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP15_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP15_Enum;

/* =================================================  PD TYP TYP14 [14..14]  ================================================= */
typedef enum {                                  /*!< PD_TYP_TYP14                                                              */
  PD_TYP_TYP14_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP14_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP14_Enum;

/* =================================================  PD TYP TYP13 [13..13]  ================================================= */
typedef enum {                                  /*!< PD_TYP_TYP13                                                              */
  PD_TYP_TYP13_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP13_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP13_Enum;

/* =================================================  PD TYP TYP12 [12..12]  ================================================= */
typedef enum {                                  /*!< PD_TYP_TYP12                                                              */
  PD_TYP_TYP12_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP12_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP12_Enum;

/* =================================================  PD TYP TYP11 [11..11]  ================================================= */
typedef enum {                                  /*!< PD_TYP_TYP11                                                              */
  PD_TYP_TYP11_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP11_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP11_Enum;

/* =================================================  PD TYP TYP10 [10..10]  ================================================= */
typedef enum {                                  /*!< PD_TYP_TYP10                                                              */
  PD_TYP_TYP10_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP10_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP10_Enum;

/* ==================================================  PD TYP TYP9 [9..9]  =================================================== */
typedef enum {                                  /*!< PD_TYP_TYP9                                                               */
  PD_TYP_TYP9_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP9_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP9_Enum;

/* ==================================================  PD TYP TYP8 [8..8]  =================================================== */
typedef enum {                                  /*!< PD_TYP_TYP8                                                               */
  PD_TYP_TYP8_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP8_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP8_Enum;

/* ==================================================  PD TYP TYP7 [7..7]  =================================================== */
typedef enum {                                  /*!< PD_TYP_TYP7                                                               */
  PD_TYP_TYP7_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP7_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP7_Enum;

/* ==================================================  PD TYP TYP6 [6..6]  =================================================== */
typedef enum {                                  /*!< PD_TYP_TYP6                                                               */
  PD_TYP_TYP6_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP6_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP6_Enum;

/* ==================================================  PD TYP TYP5 [5..5]  =================================================== */
typedef enum {                                  /*!< PD_TYP_TYP5                                                               */
  PD_TYP_TYP5_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP5_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP5_Enum;

/* ==================================================  PD TYP TYP4 [4..4]  =================================================== */
typedef enum {                                  /*!< PD_TYP_TYP4                                                               */
  PD_TYP_TYP4_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP4_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP4_Enum;

/* ==================================================  PD TYP TYP3 [3..3]  =================================================== */
typedef enum {                                  /*!< PD_TYP_TYP3                                                               */
  PD_TYP_TYP3_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP3_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP3_Enum;

/* ==================================================  PD TYP TYP2 [2..2]  =================================================== */
typedef enum {                                  /*!< PD_TYP_TYP2                                                               */
  PD_TYP_TYP2_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP2_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP2_Enum;

/* ==================================================  PD TYP TYP1 [1..1]  =================================================== */
typedef enum {                                  /*!< PD_TYP_TYP1                                                               */
  PD_TYP_TYP1_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP1_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP1_Enum;

/* ==================================================  PD TYP TYP0 [0..0]  =================================================== */
typedef enum {                                  /*!< PD_TYP_TYP0                                                               */
  PD_TYP_TYP0_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PD_TYP_TYP0_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PD_TYP_TYP0_Enum;

/* =========================================================  AFSR1  ========================================================= */
/* ================================================  PD AFSR1 AFSR7 [28..31]  ================================================ */
typedef enum {                                  /*!< PD_AFSR1_AFSR7                                                            */
  PD_AFSR1_AFSR7_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR1_AFSR7_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR1_AFSR7_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR1_AFSR7_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR1_AFSR7_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PD_AFSR1_AFSR7_Enum;

/* ================================================  PD AFSR1 AFSR6 [24..27]  ================================================ */
typedef enum {                                  /*!< PD_AFSR1_AFSR6                                                            */
  PD_AFSR1_AFSR6_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR1_AFSR6_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR1_AFSR6_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR1_AFSR6_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR1_AFSR6_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PD_AFSR1_AFSR6_Enum;

/* ================================================  PD AFSR1 AFSR5 [20..23]  ================================================ */
typedef enum {                                  /*!< PD_AFSR1_AFSR5                                                            */
  PD_AFSR1_AFSR5_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR1_AFSR5_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR1_AFSR5_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR1_AFSR5_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR1_AFSR5_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PD_AFSR1_AFSR5_Enum;

/* ================================================  PD AFSR1 AFSR4 [16..19]  ================================================ */
typedef enum {                                  /*!< PD_AFSR1_AFSR4                                                            */
  PD_AFSR1_AFSR4_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR1_AFSR4_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR1_AFSR4_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR1_AFSR4_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR1_AFSR4_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PD_AFSR1_AFSR4_Enum;

/* ================================================  PD AFSR1 AFSR3 [12..15]  ================================================ */
typedef enum {                                  /*!< PD_AFSR1_AFSR3                                                            */
  PD_AFSR1_AFSR3_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR1_AFSR3_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR1_AFSR3_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR1_AFSR3_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR1_AFSR3_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PD_AFSR1_AFSR3_Enum;

/* ================================================  PD AFSR1 AFSR2 [8..11]  ================================================= */
typedef enum {                                  /*!< PD_AFSR1_AFSR2                                                            */
  PD_AFSR1_AFSR2_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR1_AFSR2_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR1_AFSR2_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR1_AFSR2_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR1_AFSR2_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PD_AFSR1_AFSR2_Enum;

/* =================================================  PD AFSR1 AFSR1 [4..7]  ================================================= */
typedef enum {                                  /*!< PD_AFSR1_AFSR1                                                            */
  PD_AFSR1_AFSR1_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR1_AFSR1_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR1_AFSR1_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR1_AFSR1_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR1_AFSR1_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PD_AFSR1_AFSR1_Enum;

/* =================================================  PD AFSR1 AFSR0 [0..3]  ================================================= */
typedef enum {                                  /*!< PD_AFSR1_AFSR0                                                            */
  PD_AFSR1_AFSR0_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR1_AFSR0_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR1_AFSR0_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR1_AFSR0_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR1_AFSR0_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PD_AFSR1_AFSR0_Enum;

/* =========================================================  AFSR2  ========================================================= */
/* ===============================================  PD AFSR2 AFSR15 [28..31]  ================================================ */
typedef enum {                                  /*!< PD_AFSR2_AFSR15                                                           */
  PD_AFSR2_AFSR15_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR2_AFSR15_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR2_AFSR15_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR2_AFSR15_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR2_AFSR15_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PD_AFSR2_AFSR15_Enum;

/* ===============================================  PD AFSR2 AFSR14 [24..27]  ================================================ */
typedef enum {                                  /*!< PD_AFSR2_AFSR14                                                           */
  PD_AFSR2_AFSR14_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR2_AFSR14_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR2_AFSR14_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR2_AFSR14_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR2_AFSR14_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PD_AFSR2_AFSR14_Enum;

/* ===============================================  PD AFSR2 AFSR13 [20..23]  ================================================ */
typedef enum {                                  /*!< PD_AFSR2_AFSR13                                                           */
  PD_AFSR2_AFSR13_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR2_AFSR13_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR2_AFSR13_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR2_AFSR13_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR2_AFSR13_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PD_AFSR2_AFSR13_Enum;

/* ===============================================  PD AFSR2 AFSR12 [16..19]  ================================================ */
typedef enum {                                  /*!< PD_AFSR2_AFSR12                                                           */
  PD_AFSR2_AFSR12_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR2_AFSR12_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR2_AFSR12_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR2_AFSR12_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR2_AFSR12_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PD_AFSR2_AFSR12_Enum;

/* ===============================================  PD AFSR2 AFSR11 [12..15]  ================================================ */
typedef enum {                                  /*!< PD_AFSR2_AFSR11                                                           */
  PD_AFSR2_AFSR11_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR2_AFSR11_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR2_AFSR11_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR2_AFSR11_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR2_AFSR11_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PD_AFSR2_AFSR11_Enum;

/* ================================================  PD AFSR2 AFSR10 [8..11]  ================================================ */
typedef enum {                                  /*!< PD_AFSR2_AFSR10                                                           */
  PD_AFSR2_AFSR10_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR2_AFSR10_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR2_AFSR10_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR2_AFSR10_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR2_AFSR10_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PD_AFSR2_AFSR10_Enum;

/* =================================================  PD AFSR2 AFSR9 [4..7]  ================================================= */
typedef enum {                                  /*!< PD_AFSR2_AFSR9                                                            */
  PD_AFSR2_AFSR9_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR2_AFSR9_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR2_AFSR9_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR2_AFSR9_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR2_AFSR9_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PD_AFSR2_AFSR9_Enum;

/* =================================================  PD AFSR2 AFSR8 [0..3]  ================================================= */
typedef enum {                                  /*!< PD_AFSR2_AFSR8                                                            */
  PD_AFSR2_AFSR8_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PD_AFSR2_AFSR8_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PD_AFSR2_AFSR8_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PD_AFSR2_AFSR8_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PD_AFSR2_AFSR8_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PD_AFSR2_AFSR8_Enum;

/* =========================================================  PUPD  ========================================================== */
/* ================================================  PD PUPD PUPD15 [30..31]  ================================================ */
typedef enum {                                  /*!< PD_PUPD_PUPD15                                                            */
  PD_PUPD_PUPD15_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD15_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD15_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD15_Enum;

/* ================================================  PD PUPD PUPD14 [28..29]  ================================================ */
typedef enum {                                  /*!< PD_PUPD_PUPD14                                                            */
  PD_PUPD_PUPD14_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD14_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD14_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD14_Enum;

/* ================================================  PD PUPD PUPD13 [26..27]  ================================================ */
typedef enum {                                  /*!< PD_PUPD_PUPD13                                                            */
  PD_PUPD_PUPD13_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD13_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD13_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD13_Enum;

/* ================================================  PD PUPD PUPD12 [24..25]  ================================================ */
typedef enum {                                  /*!< PD_PUPD_PUPD12                                                            */
  PD_PUPD_PUPD12_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD12_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD12_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD12_Enum;

/* ================================================  PD PUPD PUPD11 [22..23]  ================================================ */
typedef enum {                                  /*!< PD_PUPD_PUPD11                                                            */
  PD_PUPD_PUPD11_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD11_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD11_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD11_Enum;

/* ================================================  PD PUPD PUPD10 [20..21]  ================================================ */
typedef enum {                                  /*!< PD_PUPD_PUPD10                                                            */
  PD_PUPD_PUPD10_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD10_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD10_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD10_Enum;

/* ================================================  PD PUPD PUPD9 [18..19]  ================================================= */
typedef enum {                                  /*!< PD_PUPD_PUPD9                                                             */
  PD_PUPD_PUPD9_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD9_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD9_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD9_Enum;

/* ================================================  PD PUPD PUPD8 [16..17]  ================================================= */
typedef enum {                                  /*!< PD_PUPD_PUPD8                                                             */
  PD_PUPD_PUPD8_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD8_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD8_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD8_Enum;

/* ================================================  PD PUPD PUPD7 [14..15]  ================================================= */
typedef enum {                                  /*!< PD_PUPD_PUPD7                                                             */
  PD_PUPD_PUPD7_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD7_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD7_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD7_Enum;

/* ================================================  PD PUPD PUPD6 [12..13]  ================================================= */
typedef enum {                                  /*!< PD_PUPD_PUPD6                                                             */
  PD_PUPD_PUPD6_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD6_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD6_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD6_Enum;

/* ================================================  PD PUPD PUPD5 [10..11]  ================================================= */
typedef enum {                                  /*!< PD_PUPD_PUPD5                                                             */
  PD_PUPD_PUPD5_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD5_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD5_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD5_Enum;

/* =================================================  PD PUPD PUPD4 [8..9]  ================================================== */
typedef enum {                                  /*!< PD_PUPD_PUPD4                                                             */
  PD_PUPD_PUPD4_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD4_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD4_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD4_Enum;

/* =================================================  PD PUPD PUPD3 [6..7]  ================================================== */
typedef enum {                                  /*!< PD_PUPD_PUPD3                                                             */
  PD_PUPD_PUPD3_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD3_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD3_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD3_Enum;

/* =================================================  PD PUPD PUPD2 [4..5]  ================================================== */
typedef enum {                                  /*!< PD_PUPD_PUPD2                                                             */
  PD_PUPD_PUPD2_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD2_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD2_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD2_Enum;

/* =================================================  PD PUPD PUPD1 [2..3]  ================================================== */
typedef enum {                                  /*!< PD_PUPD_PUPD1                                                             */
  PD_PUPD_PUPD1_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD1_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD1_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD1_Enum;

/* =================================================  PD PUPD PUPD0 [0..1]  ================================================== */
typedef enum {                                  /*!< PD_PUPD_PUPD0                                                             */
  PD_PUPD_PUPD0_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PD_PUPD_PUPD0_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PD_PUPD_PUPD0_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PD_PUPD_PUPD0_Enum;

/* =========================================================  INDR  ========================================================== */
/* =========================================================  OUTDR  ========================================================= */
/* ==========================================================  BSR  ========================================================== */
/* =================================================  PD BSR BSR15 [15..15]  ================================================= */
typedef enum {                                  /*!< PD_BSR_BSR15                                                              */
  PD_BSR_BSR15_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR15_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR15_Enum;

/* =================================================  PD BSR BSR14 [14..14]  ================================================= */
typedef enum {                                  /*!< PD_BSR_BSR14                                                              */
  PD_BSR_BSR14_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR14_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR14_Enum;

/* =================================================  PD BSR BSR13 [13..13]  ================================================= */
typedef enum {                                  /*!< PD_BSR_BSR13                                                              */
  PD_BSR_BSR13_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR13_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR13_Enum;

/* =================================================  PD BSR BSR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PD_BSR_BSR12                                                              */
  PD_BSR_BSR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR12_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR12_Enum;

/* =================================================  PD BSR BSR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PD_BSR_BSR11                                                              */
  PD_BSR_BSR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR11_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR11_Enum;

/* =================================================  PD BSR BSR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PD_BSR_BSR10                                                              */
  PD_BSR_BSR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR10_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR10_Enum;

/* ==================================================  PD BSR BSR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR9                                                               */
  PD_BSR_BSR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR9_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR9_Enum;

/* ==================================================  PD BSR BSR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR8                                                               */
  PD_BSR_BSR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR8_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR8_Enum;

/* ==================================================  PD BSR BSR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR7                                                               */
  PD_BSR_BSR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR7_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR7_Enum;

/* ==================================================  PD BSR BSR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR6                                                               */
  PD_BSR_BSR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR6_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR6_Enum;

/* ==================================================  PD BSR BSR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR5                                                               */
  PD_BSR_BSR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR5_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR5_Enum;

/* ==================================================  PD BSR BSR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR4                                                               */
  PD_BSR_BSR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR4_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR4_Enum;

/* ==================================================  PD BSR BSR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR3                                                               */
  PD_BSR_BSR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR3_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR3_Enum;

/* ==================================================  PD BSR BSR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR2                                                               */
  PD_BSR_BSR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR2_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR2_Enum;

/* ==================================================  PD BSR BSR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR1                                                               */
  PD_BSR_BSR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR1_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR1_Enum;

/* ==================================================  PD BSR BSR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PD_BSR_BSR0                                                               */
  PD_BSR_BSR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BSR_BSR0_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BSR_BSR0_Enum;

/* ==========================================================  BCR  ========================================================== */
/* =================================================  PD BCR BCR15 [15..15]  ================================================= */
typedef enum {                                  /*!< PD_BCR_BCR15                                                              */
  PD_BCR_BCR15_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR15_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR15_Enum;

/* =================================================  PD BCR BCR14 [14..14]  ================================================= */
typedef enum {                                  /*!< PD_BCR_BCR14                                                              */
  PD_BCR_BCR14_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR14_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR14_Enum;

/* =================================================  PD BCR BCR13 [13..13]  ================================================= */
typedef enum {                                  /*!< PD_BCR_BCR13                                                              */
  PD_BCR_BCR13_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR13_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR13_Enum;

/* =================================================  PD BCR BCR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PD_BCR_BCR12                                                              */
  PD_BCR_BCR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR12_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR12_Enum;

/* =================================================  PD BCR BCR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PD_BCR_BCR11                                                              */
  PD_BCR_BCR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR11_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR11_Enum;

/* =================================================  PD BCR BCR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PD_BCR_BCR10                                                              */
  PD_BCR_BCR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR10_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR10_Enum;

/* ==================================================  PD BCR BCR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR9                                                               */
  PD_BCR_BCR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR9_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR9_Enum;

/* ==================================================  PD BCR BCR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR8                                                               */
  PD_BCR_BCR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR8_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR8_Enum;

/* ==================================================  PD BCR BCR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR7                                                               */
  PD_BCR_BCR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR7_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR7_Enum;

/* ==================================================  PD BCR BCR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR6                                                               */
  PD_BCR_BCR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR6_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR6_Enum;

/* ==================================================  PD BCR BCR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR5                                                               */
  PD_BCR_BCR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR5_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR5_Enum;

/* ==================================================  PD BCR BCR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR4                                                               */
  PD_BCR_BCR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR4_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR4_Enum;

/* ==================================================  PD BCR BCR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR3                                                               */
  PD_BCR_BCR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR3_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR3_Enum;

/* ==================================================  PD BCR BCR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR2                                                               */
  PD_BCR_BCR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR2_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR2_Enum;

/* ==================================================  PD BCR BCR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR1                                                               */
  PD_BCR_BCR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR1_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR1_Enum;

/* ==================================================  PD BCR BCR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PD_BCR_BCR0                                                               */
  PD_BCR_BCR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PD_BCR_BCR0_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PD_BCR_BCR0_Enum;

/* ========================================================  OUTDMSK  ======================================================== */
/* =============================================  PD OUTDMSK OUTDMSK15 [15..15]  ============================================= */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK15                                                      */
  PD_OUTDMSK_OUTDMSK15_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK15_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK15_Enum;

/* =============================================  PD OUTDMSK OUTDMSK14 [14..14]  ============================================= */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK14                                                      */
  PD_OUTDMSK_OUTDMSK14_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK14_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK14_Enum;

/* =============================================  PD OUTDMSK OUTDMSK13 [13..13]  ============================================= */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK13                                                      */
  PD_OUTDMSK_OUTDMSK13_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK13_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK13_Enum;

/* =============================================  PD OUTDMSK OUTDMSK12 [12..12]  ============================================= */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK12                                                      */
  PD_OUTDMSK_OUTDMSK12_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK12_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK12_Enum;

/* =============================================  PD OUTDMSK OUTDMSK11 [11..11]  ============================================= */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK11                                                      */
  PD_OUTDMSK_OUTDMSK11_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK11_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK11_Enum;

/* =============================================  PD OUTDMSK OUTDMSK10 [10..10]  ============================================= */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK10                                                      */
  PD_OUTDMSK_OUTDMSK10_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK10_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK10_Enum;

/* ==============================================  PD OUTDMSK OUTDMSK9 [9..9]  =============================================== */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK9                                                       */
  PD_OUTDMSK_OUTDMSK9_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK9_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK9_Enum;

/* ==============================================  PD OUTDMSK OUTDMSK8 [8..8]  =============================================== */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK8                                                       */
  PD_OUTDMSK_OUTDMSK8_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK8_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK8_Enum;

/* ==============================================  PD OUTDMSK OUTDMSK7 [7..7]  =============================================== */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK7                                                       */
  PD_OUTDMSK_OUTDMSK7_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK7_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK7_Enum;

/* ==============================================  PD OUTDMSK OUTDMSK6 [6..6]  =============================================== */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK6                                                       */
  PD_OUTDMSK_OUTDMSK6_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK6_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK6_Enum;

/* ==============================================  PD OUTDMSK OUTDMSK5 [5..5]  =============================================== */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK5                                                       */
  PD_OUTDMSK_OUTDMSK5_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK5_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK5_Enum;

/* ==============================================  PD OUTDMSK OUTDMSK4 [4..4]  =============================================== */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK4                                                       */
  PD_OUTDMSK_OUTDMSK4_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK4_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK4_Enum;

/* ==============================================  PD OUTDMSK OUTDMSK3 [3..3]  =============================================== */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK3                                                       */
  PD_OUTDMSK_OUTDMSK3_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK3_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK3_Enum;

/* ==============================================  PD OUTDMSK OUTDMSK2 [2..2]  =============================================== */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK2                                                       */
  PD_OUTDMSK_OUTDMSK2_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK2_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK2_Enum;

/* ==============================================  PD OUTDMSK OUTDMSK1 [1..1]  =============================================== */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK1                                                       */
  PD_OUTDMSK_OUTDMSK1_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK1_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK1_Enum;

/* ==============================================  PD OUTDMSK OUTDMSK0 [0..0]  =============================================== */
typedef enum {                                  /*!< PD_OUTDMSK_OUTDMSK0                                                       */
  PD_OUTDMSK_OUTDMSK0_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PD_OUTDMSK_OUTDMSK0_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PD_OUTDMSK_OUTDMSK0_Enum;

/* =========================================================  DBCR  ========================================================== */
/* ================================================  PD DBCR DBCLK [16..18]  ================================================= */
typedef enum {                                  /*!< PD_DBCR_DBCLK                                                             */
  PD_DBCR_DBCLK_HCLK1                  = 0,     /*!< HCLK1 : HCLK/1                                                            */
  PD_DBCR_DBCLK_HCLK4                  = 1,     /*!< HCLK4 : HCLK/4                                                            */
  PD_DBCR_DBCLK_HCLK16                 = 2,     /*!< HCLK16 : HCLK/16                                                          */
  PD_DBCR_DBCLK_HCLK64                 = 3,     /*!< HCLK64 : HCLK/64                                                          */
  PD_DBCR_DBCLK_HCLK256                = 4,     /*!< HCLK256 : HCLK/256                                                        */
  PD_DBCR_DBCLK_HCLK1024               = 5,     /*!< HCLK1024 : HCLK/1024                                                      */
} PD_DBCR_DBCLK_Enum;

/* ================================================  PD DBCR DBEN11 [11..11]  ================================================ */
typedef enum {                                  /*!< PD_DBCR_DBEN11                                                            */
  PD_DBCR_DBEN11_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN11_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN11_Enum;

/* ================================================  PD DBCR DBEN10 [10..10]  ================================================ */
typedef enum {                                  /*!< PD_DBCR_DBEN10                                                            */
  PD_DBCR_DBEN10_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN10_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN10_Enum;

/* =================================================  PD DBCR DBEN9 [9..9]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN9                                                             */
  PD_DBCR_DBEN9_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN9_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN9_Enum;

/* =================================================  PD DBCR DBEN8 [8..8]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN8                                                             */
  PD_DBCR_DBEN8_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN8_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN8_Enum;

/* =================================================  PD DBCR DBEN7 [7..7]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN7                                                             */
  PD_DBCR_DBEN7_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN7_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN7_Enum;

/* =================================================  PD DBCR DBEN6 [6..6]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN6                                                             */
  PD_DBCR_DBEN6_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN6_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN6_Enum;

/* =================================================  PD DBCR DBEN5 [5..5]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN5                                                             */
  PD_DBCR_DBEN5_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN5_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN5_Enum;

/* =================================================  PD DBCR DBEN4 [4..4]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN4                                                             */
  PD_DBCR_DBEN4_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN4_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN4_Enum;

/* =================================================  PD DBCR DBEN3 [3..3]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN3                                                             */
  PD_DBCR_DBEN3_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN3_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN3_Enum;

/* =================================================  PD DBCR DBEN2 [2..2]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN2                                                             */
  PD_DBCR_DBEN2_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN2_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN2_Enum;

/* =================================================  PD DBCR DBEN1 [1..1]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN1                                                             */
  PD_DBCR_DBEN1_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN1_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN1_Enum;

/* =================================================  PD DBCR DBEN0 [0..0]  ================================================== */
typedef enum {                                  /*!< PD_DBCR_DBEN0                                                             */
  PD_DBCR_DBEN0_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PD_DBCR_DBEN0_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PD_DBCR_DBEN0_Enum;

/* ========================================================  PD_MOD  ========================================================= */
/* ========================================================  PD_TYP  ========================================================= */
/* =======================================================  PD_AFSR1  ======================================================== */
/* =======================================================  PD_AFSR2  ======================================================== */
/* ========================================================  PD_PUPD  ======================================================== */
/* ========================================================  PD_INDR  ======================================================== */
/* =======================================================  PD_OUTDR  ======================================================== */
/* ========================================================  PD_BSR  ========================================================= */
/* ========================================================  PD_BCR  ========================================================= */
/* ======================================================  PD_OUTDMSK  ======================================================= */


/* =========================================================================================================================== */
/* ================                                            PE                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
/* ================================================  PE MOD MODE15 [30..31]  ================================================= */
typedef enum {                                  /*!< PE_MOD_MODE15                                                             */
  PE_MOD_MODE15_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE15_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE15_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE15_Enum;

/* ================================================  PE MOD MODE14 [28..29]  ================================================= */
typedef enum {                                  /*!< PE_MOD_MODE14                                                             */
  PE_MOD_MODE14_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE14_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE14_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE14_Enum;

/* ================================================  PE MOD MODE13 [26..27]  ================================================= */
typedef enum {                                  /*!< PE_MOD_MODE13                                                             */
  PE_MOD_MODE13_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE13_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE13_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE13_Enum;

/* ================================================  PE MOD MODE12 [24..25]  ================================================= */
typedef enum {                                  /*!< PE_MOD_MODE12                                                             */
  PE_MOD_MODE12_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE12_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE12_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE12_Enum;

/* ================================================  PE MOD MODE11 [22..23]  ================================================= */
typedef enum {                                  /*!< PE_MOD_MODE11                                                             */
  PE_MOD_MODE11_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE11_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE11_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE11_Enum;

/* ================================================  PE MOD MODE10 [20..21]  ================================================= */
typedef enum {                                  /*!< PE_MOD_MODE10                                                             */
  PE_MOD_MODE10_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE10_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE10_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE10_Enum;

/* =================================================  PE MOD MODE9 [18..19]  ================================================= */
typedef enum {                                  /*!< PE_MOD_MODE9                                                              */
  PE_MOD_MODE9_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE9_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE9_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE9_Enum;

/* =================================================  PE MOD MODE8 [16..17]  ================================================= */
typedef enum {                                  /*!< PE_MOD_MODE8                                                              */
  PE_MOD_MODE8_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE8_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE8_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE8_Enum;

/* =================================================  PE MOD MODE7 [14..15]  ================================================= */
typedef enum {                                  /*!< PE_MOD_MODE7                                                              */
  PE_MOD_MODE7_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE7_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE7_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE7_Enum;

/* =================================================  PE MOD MODE6 [12..13]  ================================================= */
typedef enum {                                  /*!< PE_MOD_MODE6                                                              */
  PE_MOD_MODE6_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE6_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE6_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE6_Enum;

/* =================================================  PE MOD MODE5 [10..11]  ================================================= */
typedef enum {                                  /*!< PE_MOD_MODE5                                                              */
  PE_MOD_MODE5_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE5_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE5_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE5_Enum;

/* ==================================================  PE MOD MODE4 [8..9]  ================================================== */
typedef enum {                                  /*!< PE_MOD_MODE4                                                              */
  PE_MOD_MODE4_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE4_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE4_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE4_Enum;

/* ==================================================  PE MOD MODE3 [6..7]  ================================================== */
typedef enum {                                  /*!< PE_MOD_MODE3                                                              */
  PE_MOD_MODE3_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE3_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE3_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE3_Enum;

/* ==================================================  PE MOD MODE2 [4..5]  ================================================== */
typedef enum {                                  /*!< PE_MOD_MODE2                                                              */
  PE_MOD_MODE2_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE2_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE2_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE2_Enum;

/* ==================================================  PE MOD MODE1 [2..3]  ================================================== */
typedef enum {                                  /*!< PE_MOD_MODE1                                                              */
  PE_MOD_MODE1_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE1_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE1_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE1_Enum;

/* ==================================================  PE MOD MODE0 [0..1]  ================================================== */
typedef enum {                                  /*!< PE_MOD_MODE0                                                              */
  PE_MOD_MODE0_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PE_MOD_MODE0_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PE_MOD_MODE0_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PE_MOD_MODE0_Enum;

/* ==========================================================  TYP  ========================================================== */
/* =================================================  PE TYP TYP15 [15..15]  ================================================= */
typedef enum {                                  /*!< PE_TYP_TYP15                                                              */
  PE_TYP_TYP15_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP15_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP15_Enum;

/* =================================================  PE TYP TYP14 [14..14]  ================================================= */
typedef enum {                                  /*!< PE_TYP_TYP14                                                              */
  PE_TYP_TYP14_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP14_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP14_Enum;

/* =================================================  PE TYP TYP13 [13..13]  ================================================= */
typedef enum {                                  /*!< PE_TYP_TYP13                                                              */
  PE_TYP_TYP13_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP13_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP13_Enum;

/* =================================================  PE TYP TYP12 [12..12]  ================================================= */
typedef enum {                                  /*!< PE_TYP_TYP12                                                              */
  PE_TYP_TYP12_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP12_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP12_Enum;

/* =================================================  PE TYP TYP11 [11..11]  ================================================= */
typedef enum {                                  /*!< PE_TYP_TYP11                                                              */
  PE_TYP_TYP11_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP11_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP11_Enum;

/* =================================================  PE TYP TYP10 [10..10]  ================================================= */
typedef enum {                                  /*!< PE_TYP_TYP10                                                              */
  PE_TYP_TYP10_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP10_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP10_Enum;

/* ==================================================  PE TYP TYP9 [9..9]  =================================================== */
typedef enum {                                  /*!< PE_TYP_TYP9                                                               */
  PE_TYP_TYP9_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP9_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP9_Enum;

/* ==================================================  PE TYP TYP8 [8..8]  =================================================== */
typedef enum {                                  /*!< PE_TYP_TYP8                                                               */
  PE_TYP_TYP8_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP8_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP8_Enum;

/* ==================================================  PE TYP TYP7 [7..7]  =================================================== */
typedef enum {                                  /*!< PE_TYP_TYP7                                                               */
  PE_TYP_TYP7_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP7_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP7_Enum;

/* ==================================================  PE TYP TYP6 [6..6]  =================================================== */
typedef enum {                                  /*!< PE_TYP_TYP6                                                               */
  PE_TYP_TYP6_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP6_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP6_Enum;

/* ==================================================  PE TYP TYP5 [5..5]  =================================================== */
typedef enum {                                  /*!< PE_TYP_TYP5                                                               */
  PE_TYP_TYP5_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP5_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP5_Enum;

/* ==================================================  PE TYP TYP4 [4..4]  =================================================== */
typedef enum {                                  /*!< PE_TYP_TYP4                                                               */
  PE_TYP_TYP4_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP4_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP4_Enum;

/* ==================================================  PE TYP TYP3 [3..3]  =================================================== */
typedef enum {                                  /*!< PE_TYP_TYP3                                                               */
  PE_TYP_TYP3_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP3_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP3_Enum;

/* ==================================================  PE TYP TYP2 [2..2]  =================================================== */
typedef enum {                                  /*!< PE_TYP_TYP2                                                               */
  PE_TYP_TYP2_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP2_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP2_Enum;

/* ==================================================  PE TYP TYP1 [1..1]  =================================================== */
typedef enum {                                  /*!< PE_TYP_TYP1                                                               */
  PE_TYP_TYP1_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP1_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP1_Enum;

/* ==================================================  PE TYP TYP0 [0..0]  =================================================== */
typedef enum {                                  /*!< PE_TYP_TYP0                                                               */
  PE_TYP_TYP0_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PE_TYP_TYP0_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PE_TYP_TYP0_Enum;

/* =========================================================  AFSR1  ========================================================= */
/* ================================================  PE AFSR1 AFSR7 [28..31]  ================================================ */
typedef enum {                                  /*!< PE_AFSR1_AFSR7                                                            */
  PE_AFSR1_AFSR7_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR1_AFSR7_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR1_AFSR7_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR1_AFSR7_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR1_AFSR7_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PE_AFSR1_AFSR7_Enum;

/* ================================================  PE AFSR1 AFSR6 [24..27]  ================================================ */
typedef enum {                                  /*!< PE_AFSR1_AFSR6                                                            */
  PE_AFSR1_AFSR6_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR1_AFSR6_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR1_AFSR6_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR1_AFSR6_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR1_AFSR6_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PE_AFSR1_AFSR6_Enum;

/* ================================================  PE AFSR1 AFSR5 [20..23]  ================================================ */
typedef enum {                                  /*!< PE_AFSR1_AFSR5                                                            */
  PE_AFSR1_AFSR5_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR1_AFSR5_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR1_AFSR5_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR1_AFSR5_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR1_AFSR5_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PE_AFSR1_AFSR5_Enum;

/* ================================================  PE AFSR1 AFSR4 [16..19]  ================================================ */
typedef enum {                                  /*!< PE_AFSR1_AFSR4                                                            */
  PE_AFSR1_AFSR4_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR1_AFSR4_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR1_AFSR4_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR1_AFSR4_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR1_AFSR4_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PE_AFSR1_AFSR4_Enum;

/* ================================================  PE AFSR1 AFSR3 [12..15]  ================================================ */
typedef enum {                                  /*!< PE_AFSR1_AFSR3                                                            */
  PE_AFSR1_AFSR3_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR1_AFSR3_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR1_AFSR3_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR1_AFSR3_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR1_AFSR3_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PE_AFSR1_AFSR3_Enum;

/* ================================================  PE AFSR1 AFSR2 [8..11]  ================================================= */
typedef enum {                                  /*!< PE_AFSR1_AFSR2                                                            */
  PE_AFSR1_AFSR2_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR1_AFSR2_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR1_AFSR2_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR1_AFSR2_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR1_AFSR2_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PE_AFSR1_AFSR2_Enum;

/* =================================================  PE AFSR1 AFSR1 [4..7]  ================================================= */
typedef enum {                                  /*!< PE_AFSR1_AFSR1                                                            */
  PE_AFSR1_AFSR1_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR1_AFSR1_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR1_AFSR1_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR1_AFSR1_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR1_AFSR1_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PE_AFSR1_AFSR1_Enum;

/* =================================================  PE AFSR1 AFSR0 [0..3]  ================================================= */
typedef enum {                                  /*!< PE_AFSR1_AFSR0                                                            */
  PE_AFSR1_AFSR0_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR1_AFSR0_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR1_AFSR0_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR1_AFSR0_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR1_AFSR0_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PE_AFSR1_AFSR0_Enum;

/* =========================================================  AFSR2  ========================================================= */
/* ===============================================  PE AFSR2 AFSR15 [28..31]  ================================================ */
typedef enum {                                  /*!< PE_AFSR2_AFSR15                                                           */
  PE_AFSR2_AFSR15_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR2_AFSR15_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR2_AFSR15_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR2_AFSR15_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR2_AFSR15_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PE_AFSR2_AFSR15_Enum;

/* ===============================================  PE AFSR2 AFSR14 [24..27]  ================================================ */
typedef enum {                                  /*!< PE_AFSR2_AFSR14                                                           */
  PE_AFSR2_AFSR14_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR2_AFSR14_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR2_AFSR14_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR2_AFSR14_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR2_AFSR14_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PE_AFSR2_AFSR14_Enum;

/* ===============================================  PE AFSR2 AFSR13 [20..23]  ================================================ */
typedef enum {                                  /*!< PE_AFSR2_AFSR13                                                           */
  PE_AFSR2_AFSR13_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR2_AFSR13_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR2_AFSR13_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR2_AFSR13_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR2_AFSR13_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PE_AFSR2_AFSR13_Enum;

/* ===============================================  PE AFSR2 AFSR12 [16..19]  ================================================ */
typedef enum {                                  /*!< PE_AFSR2_AFSR12                                                           */
  PE_AFSR2_AFSR12_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR2_AFSR12_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR2_AFSR12_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR2_AFSR12_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR2_AFSR12_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PE_AFSR2_AFSR12_Enum;

/* ===============================================  PE AFSR2 AFSR11 [12..15]  ================================================ */
typedef enum {                                  /*!< PE_AFSR2_AFSR11                                                           */
  PE_AFSR2_AFSR11_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR2_AFSR11_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR2_AFSR11_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR2_AFSR11_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR2_AFSR11_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PE_AFSR2_AFSR11_Enum;

/* ================================================  PE AFSR2 AFSR10 [8..11]  ================================================ */
typedef enum {                                  /*!< PE_AFSR2_AFSR10                                                           */
  PE_AFSR2_AFSR10_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR2_AFSR10_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR2_AFSR10_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR2_AFSR10_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR2_AFSR10_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PE_AFSR2_AFSR10_Enum;

/* =================================================  PE AFSR2 AFSR9 [4..7]  ================================================= */
typedef enum {                                  /*!< PE_AFSR2_AFSR9                                                            */
  PE_AFSR2_AFSR9_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR2_AFSR9_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR2_AFSR9_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR2_AFSR9_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR2_AFSR9_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PE_AFSR2_AFSR9_Enum;

/* =================================================  PE AFSR2 AFSR8 [0..3]  ================================================= */
typedef enum {                                  /*!< PE_AFSR2_AFSR8                                                            */
  PE_AFSR2_AFSR8_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PE_AFSR2_AFSR8_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PE_AFSR2_AFSR8_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PE_AFSR2_AFSR8_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PE_AFSR2_AFSR8_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PE_AFSR2_AFSR8_Enum;

/* =========================================================  PUPD  ========================================================== */
/* ================================================  PE PUPD PUPD15 [30..31]  ================================================ */
typedef enum {                                  /*!< PE_PUPD_PUPD15                                                            */
  PE_PUPD_PUPD15_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD15_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD15_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD15_Enum;

/* ================================================  PE PUPD PUPD14 [28..29]  ================================================ */
typedef enum {                                  /*!< PE_PUPD_PUPD14                                                            */
  PE_PUPD_PUPD14_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD14_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD14_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD14_Enum;

/* ================================================  PE PUPD PUPD13 [26..27]  ================================================ */
typedef enum {                                  /*!< PE_PUPD_PUPD13                                                            */
  PE_PUPD_PUPD13_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD13_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD13_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD13_Enum;

/* ================================================  PE PUPD PUPD12 [24..25]  ================================================ */
typedef enum {                                  /*!< PE_PUPD_PUPD12                                                            */
  PE_PUPD_PUPD12_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD12_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD12_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD12_Enum;

/* ================================================  PE PUPD PUPD11 [22..23]  ================================================ */
typedef enum {                                  /*!< PE_PUPD_PUPD11                                                            */
  PE_PUPD_PUPD11_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD11_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD11_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD11_Enum;

/* ================================================  PE PUPD PUPD10 [20..21]  ================================================ */
typedef enum {                                  /*!< PE_PUPD_PUPD10                                                            */
  PE_PUPD_PUPD10_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD10_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD10_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD10_Enum;

/* ================================================  PE PUPD PUPD9 [18..19]  ================================================= */
typedef enum {                                  /*!< PE_PUPD_PUPD9                                                             */
  PE_PUPD_PUPD9_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD9_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD9_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD9_Enum;

/* ================================================  PE PUPD PUPD8 [16..17]  ================================================= */
typedef enum {                                  /*!< PE_PUPD_PUPD8                                                             */
  PE_PUPD_PUPD8_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD8_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD8_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD8_Enum;

/* ================================================  PE PUPD PUPD7 [14..15]  ================================================= */
typedef enum {                                  /*!< PE_PUPD_PUPD7                                                             */
  PE_PUPD_PUPD7_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD7_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD7_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD7_Enum;

/* ================================================  PE PUPD PUPD6 [12..13]  ================================================= */
typedef enum {                                  /*!< PE_PUPD_PUPD6                                                             */
  PE_PUPD_PUPD6_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD6_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD6_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD6_Enum;

/* ================================================  PE PUPD PUPD5 [10..11]  ================================================= */
typedef enum {                                  /*!< PE_PUPD_PUPD5                                                             */
  PE_PUPD_PUPD5_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD5_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD5_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD5_Enum;

/* =================================================  PE PUPD PUPD4 [8..9]  ================================================== */
typedef enum {                                  /*!< PE_PUPD_PUPD4                                                             */
  PE_PUPD_PUPD4_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD4_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD4_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD4_Enum;

/* =================================================  PE PUPD PUPD3 [6..7]  ================================================== */
typedef enum {                                  /*!< PE_PUPD_PUPD3                                                             */
  PE_PUPD_PUPD3_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD3_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD3_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD3_Enum;

/* =================================================  PE PUPD PUPD2 [4..5]  ================================================== */
typedef enum {                                  /*!< PE_PUPD_PUPD2                                                             */
  PE_PUPD_PUPD2_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD2_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD2_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD2_Enum;

/* =================================================  PE PUPD PUPD1 [2..3]  ================================================== */
typedef enum {                                  /*!< PE_PUPD_PUPD1                                                             */
  PE_PUPD_PUPD1_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD1_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD1_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD1_Enum;

/* =================================================  PE PUPD PUPD0 [0..1]  ================================================== */
typedef enum {                                  /*!< PE_PUPD_PUPD0                                                             */
  PE_PUPD_PUPD0_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PE_PUPD_PUPD0_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PE_PUPD_PUPD0_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PE_PUPD_PUPD0_Enum;

/* =========================================================  INDR  ========================================================== */
/* =========================================================  OUTDR  ========================================================= */
/* ==========================================================  BSR  ========================================================== */
/* =================================================  PE BSR BSR15 [15..15]  ================================================= */
typedef enum {                                  /*!< PE_BSR_BSR15                                                              */
  PE_BSR_BSR15_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR15_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR15_Enum;

/* =================================================  PE BSR BSR14 [14..14]  ================================================= */
typedef enum {                                  /*!< PE_BSR_BSR14                                                              */
  PE_BSR_BSR14_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR14_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR14_Enum;

/* =================================================  PE BSR BSR13 [13..13]  ================================================= */
typedef enum {                                  /*!< PE_BSR_BSR13                                                              */
  PE_BSR_BSR13_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR13_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR13_Enum;

/* =================================================  PE BSR BSR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PE_BSR_BSR12                                                              */
  PE_BSR_BSR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR12_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR12_Enum;

/* =================================================  PE BSR BSR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PE_BSR_BSR11                                                              */
  PE_BSR_BSR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR11_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR11_Enum;

/* =================================================  PE BSR BSR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PE_BSR_BSR10                                                              */
  PE_BSR_BSR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR10_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR10_Enum;

/* ==================================================  PE BSR BSR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR9                                                               */
  PE_BSR_BSR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR9_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR9_Enum;

/* ==================================================  PE BSR BSR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR8                                                               */
  PE_BSR_BSR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR8_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR8_Enum;

/* ==================================================  PE BSR BSR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR7                                                               */
  PE_BSR_BSR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR7_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR7_Enum;

/* ==================================================  PE BSR BSR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR6                                                               */
  PE_BSR_BSR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR6_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR6_Enum;

/* ==================================================  PE BSR BSR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR5                                                               */
  PE_BSR_BSR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR5_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR5_Enum;

/* ==================================================  PE BSR BSR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR4                                                               */
  PE_BSR_BSR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR4_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR4_Enum;

/* ==================================================  PE BSR BSR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR3                                                               */
  PE_BSR_BSR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR3_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR3_Enum;

/* ==================================================  PE BSR BSR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR2                                                               */
  PE_BSR_BSR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR2_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR2_Enum;

/* ==================================================  PE BSR BSR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR1                                                               */
  PE_BSR_BSR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR1_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR1_Enum;

/* ==================================================  PE BSR BSR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PE_BSR_BSR0                                                               */
  PE_BSR_BSR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BSR_BSR0_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BSR_BSR0_Enum;

/* ==========================================================  BCR  ========================================================== */
/* =================================================  PE BCR BCR15 [15..15]  ================================================= */
typedef enum {                                  /*!< PE_BCR_BCR15                                                              */
  PE_BCR_BCR15_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR15_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR15_Enum;

/* =================================================  PE BCR BCR14 [14..14]  ================================================= */
typedef enum {                                  /*!< PE_BCR_BCR14                                                              */
  PE_BCR_BCR14_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR14_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR14_Enum;

/* =================================================  PE BCR BCR13 [13..13]  ================================================= */
typedef enum {                                  /*!< PE_BCR_BCR13                                                              */
  PE_BCR_BCR13_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR13_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR13_Enum;

/* =================================================  PE BCR BCR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PE_BCR_BCR12                                                              */
  PE_BCR_BCR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR12_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR12_Enum;

/* =================================================  PE BCR BCR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PE_BCR_BCR11                                                              */
  PE_BCR_BCR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR11_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR11_Enum;

/* =================================================  PE BCR BCR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PE_BCR_BCR10                                                              */
  PE_BCR_BCR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR10_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR10_Enum;

/* ==================================================  PE BCR BCR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR9                                                               */
  PE_BCR_BCR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR9_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR9_Enum;

/* ==================================================  PE BCR BCR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR8                                                               */
  PE_BCR_BCR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR8_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR8_Enum;

/* ==================================================  PE BCR BCR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR7                                                               */
  PE_BCR_BCR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR7_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR7_Enum;

/* ==================================================  PE BCR BCR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR6                                                               */
  PE_BCR_BCR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR6_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR6_Enum;

/* ==================================================  PE BCR BCR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR5                                                               */
  PE_BCR_BCR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR5_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR5_Enum;

/* ==================================================  PE BCR BCR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR4                                                               */
  PE_BCR_BCR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR4_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR4_Enum;

/* ==================================================  PE BCR BCR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR3                                                               */
  PE_BCR_BCR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR3_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR3_Enum;

/* ==================================================  PE BCR BCR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR2                                                               */
  PE_BCR_BCR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR2_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR2_Enum;

/* ==================================================  PE BCR BCR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR1                                                               */
  PE_BCR_BCR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR1_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR1_Enum;

/* ==================================================  PE BCR BCR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PE_BCR_BCR0                                                               */
  PE_BCR_BCR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PE_BCR_BCR0_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PE_BCR_BCR0_Enum;

/* ========================================================  OUTDMSK  ======================================================== */
/* =============================================  PE OUTDMSK OUTDMSK15 [15..15]  ============================================= */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK15                                                      */
  PE_OUTDMSK_OUTDMSK15_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK15_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK15_Enum;

/* =============================================  PE OUTDMSK OUTDMSK14 [14..14]  ============================================= */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK14                                                      */
  PE_OUTDMSK_OUTDMSK14_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK14_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK14_Enum;

/* =============================================  PE OUTDMSK OUTDMSK13 [13..13]  ============================================= */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK13                                                      */
  PE_OUTDMSK_OUTDMSK13_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK13_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK13_Enum;

/* =============================================  PE OUTDMSK OUTDMSK12 [12..12]  ============================================= */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK12                                                      */
  PE_OUTDMSK_OUTDMSK12_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK12_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK12_Enum;

/* =============================================  PE OUTDMSK OUTDMSK11 [11..11]  ============================================= */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK11                                                      */
  PE_OUTDMSK_OUTDMSK11_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK11_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK11_Enum;

/* =============================================  PE OUTDMSK OUTDMSK10 [10..10]  ============================================= */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK10                                                      */
  PE_OUTDMSK_OUTDMSK10_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK10_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK10_Enum;

/* ==============================================  PE OUTDMSK OUTDMSK9 [9..9]  =============================================== */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK9                                                       */
  PE_OUTDMSK_OUTDMSK9_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK9_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK9_Enum;

/* ==============================================  PE OUTDMSK OUTDMSK8 [8..8]  =============================================== */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK8                                                       */
  PE_OUTDMSK_OUTDMSK8_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK8_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK8_Enum;

/* ==============================================  PE OUTDMSK OUTDMSK7 [7..7]  =============================================== */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK7                                                       */
  PE_OUTDMSK_OUTDMSK7_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK7_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK7_Enum;

/* ==============================================  PE OUTDMSK OUTDMSK6 [6..6]  =============================================== */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK6                                                       */
  PE_OUTDMSK_OUTDMSK6_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK6_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK6_Enum;

/* ==============================================  PE OUTDMSK OUTDMSK5 [5..5]  =============================================== */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK5                                                       */
  PE_OUTDMSK_OUTDMSK5_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK5_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK5_Enum;

/* ==============================================  PE OUTDMSK OUTDMSK4 [4..4]  =============================================== */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK4                                                       */
  PE_OUTDMSK_OUTDMSK4_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK4_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK4_Enum;

/* ==============================================  PE OUTDMSK OUTDMSK3 [3..3]  =============================================== */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK3                                                       */
  PE_OUTDMSK_OUTDMSK3_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK3_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK3_Enum;

/* ==============================================  PE OUTDMSK OUTDMSK2 [2..2]  =============================================== */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK2                                                       */
  PE_OUTDMSK_OUTDMSK2_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK2_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK2_Enum;

/* ==============================================  PE OUTDMSK OUTDMSK1 [1..1]  =============================================== */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK1                                                       */
  PE_OUTDMSK_OUTDMSK1_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK1_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK1_Enum;

/* ==============================================  PE OUTDMSK OUTDMSK0 [0..0]  =============================================== */
typedef enum {                                  /*!< PE_OUTDMSK_OUTDMSK0                                                       */
  PE_OUTDMSK_OUTDMSK0_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PE_OUTDMSK_OUTDMSK0_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PE_OUTDMSK_OUTDMSK0_Enum;

/* =========================================================  DBCR  ========================================================== */
/* ================================================  PE DBCR DBCLK [16..18]  ================================================= */
typedef enum {                                  /*!< PE_DBCR_DBCLK                                                             */
  PE_DBCR_DBCLK_HCLK1                  = 0,     /*!< HCLK1 : HCLK/1                                                            */
  PE_DBCR_DBCLK_HCLK4                  = 1,     /*!< HCLK4 : HCLK/4                                                            */
  PE_DBCR_DBCLK_HCLK16                 = 2,     /*!< HCLK16 : HCLK/16                                                          */
  PE_DBCR_DBCLK_HCLK64                 = 3,     /*!< HCLK64 : HCLK/64                                                          */
  PE_DBCR_DBCLK_HCLK256                = 4,     /*!< HCLK256 : HCLK/256                                                        */
  PE_DBCR_DBCLK_HCLK1024               = 5,     /*!< HCLK1024 : HCLK/1024                                                      */
} PE_DBCR_DBCLK_Enum;

/* ================================================  PE DBCR DBEN11 [11..11]  ================================================ */
typedef enum {                                  /*!< PE_DBCR_DBEN11                                                            */
  PE_DBCR_DBEN11_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN11_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN11_Enum;

/* ================================================  PE DBCR DBEN10 [10..10]  ================================================ */
typedef enum {                                  /*!< PE_DBCR_DBEN10                                                            */
  PE_DBCR_DBEN10_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN10_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN10_Enum;

/* =================================================  PE DBCR DBEN9 [9..9]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN9                                                             */
  PE_DBCR_DBEN9_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN9_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN9_Enum;

/* =================================================  PE DBCR DBEN8 [8..8]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN8                                                             */
  PE_DBCR_DBEN8_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN8_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN8_Enum;

/* =================================================  PE DBCR DBEN7 [7..7]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN7                                                             */
  PE_DBCR_DBEN7_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN7_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN7_Enum;

/* =================================================  PE DBCR DBEN6 [6..6]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN6                                                             */
  PE_DBCR_DBEN6_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN6_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN6_Enum;

/* =================================================  PE DBCR DBEN5 [5..5]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN5                                                             */
  PE_DBCR_DBEN5_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN5_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN5_Enum;

/* =================================================  PE DBCR DBEN4 [4..4]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN4                                                             */
  PE_DBCR_DBEN4_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN4_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN4_Enum;

/* =================================================  PE DBCR DBEN3 [3..3]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN3                                                             */
  PE_DBCR_DBEN3_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN3_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN3_Enum;

/* =================================================  PE DBCR DBEN2 [2..2]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN2                                                             */
  PE_DBCR_DBEN2_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN2_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN2_Enum;

/* =================================================  PE DBCR DBEN1 [1..1]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN1                                                             */
  PE_DBCR_DBEN1_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN1_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN1_Enum;

/* =================================================  PE DBCR DBEN0 [0..0]  ================================================== */
typedef enum {                                  /*!< PE_DBCR_DBEN0                                                             */
  PE_DBCR_DBEN0_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PE_DBCR_DBEN0_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PE_DBCR_DBEN0_Enum;

/* ========================================================  PE_MOD  ========================================================= */
/* ========================================================  PE_TYP  ========================================================= */
/* =======================================================  PE_AFSR1  ======================================================== */
/* =======================================================  PE_AFSR2  ======================================================== */
/* ========================================================  PE_PUPD  ======================================================== */
/* ========================================================  PE_INDR  ======================================================== */
/* =======================================================  PE_OUTDR  ======================================================== */
/* ========================================================  PE_BSR  ========================================================= */
/* ========================================================  PE_BCR  ========================================================= */
/* ======================================================  PE_OUTDMSK  ======================================================= */
/* ========================================================  PE_DBCR  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            PF                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  MOD  ========================================================== */
/* ================================================  PF MOD MODE15 [30..31]  ================================================= */
typedef enum {                                  /*!< PF_MOD_MODE15                                                             */
  PF_MOD_MODE15_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE15_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE15_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE15_Enum;

/* ================================================  PF MOD MODE14 [28..29]  ================================================= */
typedef enum {                                  /*!< PF_MOD_MODE14                                                             */
  PF_MOD_MODE14_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE14_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE14_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE14_Enum;

/* ================================================  PF MOD MODE13 [26..27]  ================================================= */
typedef enum {                                  /*!< PF_MOD_MODE13                                                             */
  PF_MOD_MODE13_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE13_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE13_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE13_Enum;

/* ================================================  PF MOD MODE12 [24..25]  ================================================= */
typedef enum {                                  /*!< PF_MOD_MODE12                                                             */
  PF_MOD_MODE12_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE12_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE12_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE12_Enum;

/* ================================================  PF MOD MODE11 [22..23]  ================================================= */
typedef enum {                                  /*!< PF_MOD_MODE11                                                             */
  PF_MOD_MODE11_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE11_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE11_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE11_Enum;

/* ================================================  PF MOD MODE10 [20..21]  ================================================= */
typedef enum {                                  /*!< PF_MOD_MODE10                                                             */
  PF_MOD_MODE10_Input                  = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE10_Output                 = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE10_Alternative            = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE10_Enum;

/* =================================================  PF MOD MODE9 [18..19]  ================================================= */
typedef enum {                                  /*!< PF_MOD_MODE9                                                              */
  PF_MOD_MODE9_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE9_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE9_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE9_Enum;

/* =================================================  PF MOD MODE8 [16..17]  ================================================= */
typedef enum {                                  /*!< PF_MOD_MODE8                                                              */
  PF_MOD_MODE8_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE8_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE8_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE8_Enum;

/* =================================================  PF MOD MODE7 [14..15]  ================================================= */
typedef enum {                                  /*!< PF_MOD_MODE7                                                              */
  PF_MOD_MODE7_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE7_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE7_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE7_Enum;

/* =================================================  PF MOD MODE6 [12..13]  ================================================= */
typedef enum {                                  /*!< PF_MOD_MODE6                                                              */
  PF_MOD_MODE6_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE6_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE6_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE6_Enum;

/* =================================================  PF MOD MODE5 [10..11]  ================================================= */
typedef enum {                                  /*!< PF_MOD_MODE5                                                              */
  PF_MOD_MODE5_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE5_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE5_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE5_Enum;

/* ==================================================  PF MOD MODE4 [8..9]  ================================================== */
typedef enum {                                  /*!< PF_MOD_MODE4                                                              */
  PF_MOD_MODE4_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE4_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE4_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE4_Enum;

/* ==================================================  PF MOD MODE3 [6..7]  ================================================== */
typedef enum {                                  /*!< PF_MOD_MODE3                                                              */
  PF_MOD_MODE3_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE3_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE3_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE3_Enum;

/* ==================================================  PF MOD MODE2 [4..5]  ================================================== */
typedef enum {                                  /*!< PF_MOD_MODE2                                                              */
  PF_MOD_MODE2_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE2_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE2_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE2_Enum;

/* ==================================================  PF MOD MODE1 [2..3]  ================================================== */
typedef enum {                                  /*!< PF_MOD_MODE1                                                              */
  PF_MOD_MODE1_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE1_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE1_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE1_Enum;

/* ==================================================  PF MOD MODE0 [0..1]  ================================================== */
typedef enum {                                  /*!< PF_MOD_MODE0                                                              */
  PF_MOD_MODE0_Input                   = 0,     /*!< Input : Input Mode                                                        */
  PF_MOD_MODE0_Output                  = 1,     /*!< Output : Output Mode                                                      */
  PF_MOD_MODE0_Alternative             = 2,     /*!< Alternative : Alternative Function Mode                                   */
} PF_MOD_MODE0_Enum;

/* ==========================================================  TYP  ========================================================== */
/* =================================================  PF TYP TYP15 [15..15]  ================================================= */
typedef enum {                                  /*!< PF_TYP_TYP15                                                              */
  PF_TYP_TYP15_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP15_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP15_Enum;

/* =================================================  PF TYP TYP14 [14..14]  ================================================= */
typedef enum {                                  /*!< PF_TYP_TYP14                                                              */
  PF_TYP_TYP14_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP14_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP14_Enum;

/* =================================================  PF TYP TYP13 [13..13]  ================================================= */
typedef enum {                                  /*!< PF_TYP_TYP13                                                              */
  PF_TYP_TYP13_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP13_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP13_Enum;

/* =================================================  PF TYP TYP12 [12..12]  ================================================= */
typedef enum {                                  /*!< PF_TYP_TYP12                                                              */
  PF_TYP_TYP12_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP12_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP12_Enum;

/* =================================================  PF TYP TYP11 [11..11]  ================================================= */
typedef enum {                                  /*!< PF_TYP_TYP11                                                              */
  PF_TYP_TYP11_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP11_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP11_Enum;

/* =================================================  PF TYP TYP10 [10..10]  ================================================= */
typedef enum {                                  /*!< PF_TYP_TYP10                                                              */
  PF_TYP_TYP10_PushPull                = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP10_OpenDrain               = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP10_Enum;

/* ==================================================  PF TYP TYP9 [9..9]  =================================================== */
typedef enum {                                  /*!< PF_TYP_TYP9                                                               */
  PF_TYP_TYP9_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP9_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP9_Enum;

/* ==================================================  PF TYP TYP8 [8..8]  =================================================== */
typedef enum {                                  /*!< PF_TYP_TYP8                                                               */
  PF_TYP_TYP8_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP8_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP8_Enum;

/* ==================================================  PF TYP TYP7 [7..7]  =================================================== */
typedef enum {                                  /*!< PF_TYP_TYP7                                                               */
  PF_TYP_TYP7_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP7_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP7_Enum;

/* ==================================================  PF TYP TYP6 [6..6]  =================================================== */
typedef enum {                                  /*!< PF_TYP_TYP6                                                               */
  PF_TYP_TYP6_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP6_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP6_Enum;

/* ==================================================  PF TYP TYP5 [5..5]  =================================================== */
typedef enum {                                  /*!< PF_TYP_TYP5                                                               */
  PF_TYP_TYP5_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP5_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP5_Enum;

/* ==================================================  PF TYP TYP4 [4..4]  =================================================== */
typedef enum {                                  /*!< PF_TYP_TYP4                                                               */
  PF_TYP_TYP4_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP4_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP4_Enum;

/* ==================================================  PF TYP TYP3 [3..3]  =================================================== */
typedef enum {                                  /*!< PF_TYP_TYP3                                                               */
  PF_TYP_TYP3_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP3_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP3_Enum;

/* ==================================================  PF TYP TYP2 [2..2]  =================================================== */
typedef enum {                                  /*!< PF_TYP_TYP2                                                               */
  PF_TYP_TYP2_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP2_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP2_Enum;

/* ==================================================  PF TYP TYP1 [1..1]  =================================================== */
typedef enum {                                  /*!< PF_TYP_TYP1                                                               */
  PF_TYP_TYP1_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP1_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP1_Enum;

/* ==================================================  PF TYP TYP0 [0..0]  =================================================== */
typedef enum {                                  /*!< PF_TYP_TYP0                                                               */
  PF_TYP_TYP0_PushPull                 = 0,     /*!< PushPull : Push-Pull Output                                               */
  PF_TYP_TYP0_OpenDrain                = 1,     /*!< OpenDrain : Open-Drain Output                                             */
} PF_TYP_TYP0_Enum;

/* =========================================================  AFSR1  ========================================================= */
/* ================================================  PF AFSR1 AFSR7 [28..31]  ================================================ */
typedef enum {                                  /*!< PF_AFSR1_AFSR7                                                            */
  PF_AFSR1_AFSR7_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR1_AFSR7_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR1_AFSR7_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR1_AFSR7_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR1_AFSR7_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PF_AFSR1_AFSR7_Enum;

/* ================================================  PF AFSR1 AFSR6 [24..27]  ================================================ */
typedef enum {                                  /*!< PF_AFSR1_AFSR6                                                            */
  PF_AFSR1_AFSR6_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR1_AFSR6_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR1_AFSR6_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR1_AFSR6_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR1_AFSR6_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PF_AFSR1_AFSR6_Enum;

/* ================================================  PF AFSR1 AFSR5 [20..23]  ================================================ */
typedef enum {                                  /*!< PF_AFSR1_AFSR5                                                            */
  PF_AFSR1_AFSR5_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR1_AFSR5_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR1_AFSR5_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR1_AFSR5_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR1_AFSR5_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PF_AFSR1_AFSR5_Enum;

/* ================================================  PF AFSR1 AFSR4 [16..19]  ================================================ */
typedef enum {                                  /*!< PF_AFSR1_AFSR4                                                            */
  PF_AFSR1_AFSR4_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR1_AFSR4_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR1_AFSR4_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR1_AFSR4_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR1_AFSR4_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PF_AFSR1_AFSR4_Enum;

/* ================================================  PF AFSR1 AFSR3 [12..15]  ================================================ */
typedef enum {                                  /*!< PF_AFSR1_AFSR3                                                            */
  PF_AFSR1_AFSR3_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR1_AFSR3_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR1_AFSR3_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR1_AFSR3_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR1_AFSR3_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PF_AFSR1_AFSR3_Enum;

/* ================================================  PF AFSR1 AFSR2 [8..11]  ================================================= */
typedef enum {                                  /*!< PF_AFSR1_AFSR2                                                            */
  PF_AFSR1_AFSR2_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR1_AFSR2_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR1_AFSR2_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR1_AFSR2_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR1_AFSR2_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PF_AFSR1_AFSR2_Enum;

/* =================================================  PF AFSR1 AFSR1 [4..7]  ================================================= */
typedef enum {                                  /*!< PF_AFSR1_AFSR1                                                            */
  PF_AFSR1_AFSR1_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR1_AFSR1_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR1_AFSR1_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR1_AFSR1_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR1_AFSR1_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PF_AFSR1_AFSR1_Enum;

/* =================================================  PF AFSR1 AFSR0 [0..3]  ================================================= */
typedef enum {                                  /*!< PF_AFSR1_AFSR0                                                            */
  PF_AFSR1_AFSR0_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR1_AFSR0_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR1_AFSR0_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR1_AFSR0_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR1_AFSR0_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PF_AFSR1_AFSR0_Enum;

/* =========================================================  AFSR2  ========================================================= */
/* ===============================================  PF AFSR2 AFSR15 [28..31]  ================================================ */
typedef enum {                                  /*!< PF_AFSR2_AFSR15                                                           */
  PF_AFSR2_AFSR15_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR2_AFSR15_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR2_AFSR15_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR2_AFSR15_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR2_AFSR15_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PF_AFSR2_AFSR15_Enum;

/* ===============================================  PF AFSR2 AFSR14 [24..27]  ================================================ */
typedef enum {                                  /*!< PF_AFSR2_AFSR14                                                           */
  PF_AFSR2_AFSR14_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR2_AFSR14_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR2_AFSR14_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR2_AFSR14_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR2_AFSR14_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PF_AFSR2_AFSR14_Enum;

/* ===============================================  PF AFSR2 AFSR13 [20..23]  ================================================ */
typedef enum {                                  /*!< PF_AFSR2_AFSR13                                                           */
  PF_AFSR2_AFSR13_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR2_AFSR13_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR2_AFSR13_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR2_AFSR13_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR2_AFSR13_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PF_AFSR2_AFSR13_Enum;

/* ===============================================  PF AFSR2 AFSR12 [16..19]  ================================================ */
typedef enum {                                  /*!< PF_AFSR2_AFSR12                                                           */
  PF_AFSR2_AFSR12_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR2_AFSR12_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR2_AFSR12_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR2_AFSR12_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR2_AFSR12_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PF_AFSR2_AFSR12_Enum;

/* ===============================================  PF AFSR2 AFSR11 [12..15]  ================================================ */
typedef enum {                                  /*!< PF_AFSR2_AFSR11                                                           */
  PF_AFSR2_AFSR11_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR2_AFSR11_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR2_AFSR11_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR2_AFSR11_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR2_AFSR11_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PF_AFSR2_AFSR11_Enum;

/* ================================================  PF AFSR2 AFSR10 [8..11]  ================================================ */
typedef enum {                                  /*!< PF_AFSR2_AFSR10                                                           */
  PF_AFSR2_AFSR10_AF0                  = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR2_AFSR10_AF1                  = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR2_AFSR10_AF2                  = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR2_AFSR10_AF3                  = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR2_AFSR10_AF4                  = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PF_AFSR2_AFSR10_Enum;

/* =================================================  PF AFSR2 AFSR9 [4..7]  ================================================= */
typedef enum {                                  /*!< PF_AFSR2_AFSR9                                                            */
  PF_AFSR2_AFSR9_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR2_AFSR9_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR2_AFSR9_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR2_AFSR9_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR2_AFSR9_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PF_AFSR2_AFSR9_Enum;

/* =================================================  PF AFSR2 AFSR8 [0..3]  ================================================= */
typedef enum {                                  /*!< PF_AFSR2_AFSR8                                                            */
  PF_AFSR2_AFSR8_AF0                   = 0,     /*!< AF0 : Alternative Function 0 (AF0)                                        */
  PF_AFSR2_AFSR8_AF1                   = 1,     /*!< AF1 : Alternative Function 1 (AF1)                                        */
  PF_AFSR2_AFSR8_AF2                   = 2,     /*!< AF2 : Alternative Function 2 (AF2)                                        */
  PF_AFSR2_AFSR8_AF3                   = 3,     /*!< AF3 : Alternative Function 3 (AF3)                                        */
  PF_AFSR2_AFSR8_AF4                   = 4,     /*!< AF4 : Alternative Function 4 (AF4)                                        */
} PF_AFSR2_AFSR8_Enum;

/* =========================================================  PUPD  ========================================================== */
/* ================================================  PF PUPD PUPD15 [30..31]  ================================================ */
typedef enum {                                  /*!< PF_PUPD_PUPD15                                                            */
  PF_PUPD_PUPD15_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD15_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD15_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD15_Enum;

/* ================================================  PF PUPD PUPD14 [28..29]  ================================================ */
typedef enum {                                  /*!< PF_PUPD_PUPD14                                                            */
  PF_PUPD_PUPD14_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD14_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD14_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD14_Enum;

/* ================================================  PF PUPD PUPD13 [26..27]  ================================================ */
typedef enum {                                  /*!< PF_PUPD_PUPD13                                                            */
  PF_PUPD_PUPD13_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD13_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD13_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD13_Enum;

/* ================================================  PF PUPD PUPD12 [24..25]  ================================================ */
typedef enum {                                  /*!< PF_PUPD_PUPD12                                                            */
  PF_PUPD_PUPD12_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD12_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD12_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD12_Enum;

/* ================================================  PF PUPD PUPD11 [22..23]  ================================================ */
typedef enum {                                  /*!< PF_PUPD_PUPD11                                                            */
  PF_PUPD_PUPD11_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD11_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD11_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD11_Enum;

/* ================================================  PF PUPD PUPD10 [20..21]  ================================================ */
typedef enum {                                  /*!< PF_PUPD_PUPD10                                                            */
  PF_PUPD_PUPD10_Disable               = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD10_EnablePU              = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD10_EnablePD              = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD10_Enum;

/* ================================================  PF PUPD PUPD9 [18..19]  ================================================= */
typedef enum {                                  /*!< PF_PUPD_PUPD9                                                             */
  PF_PUPD_PUPD9_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD9_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD9_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD9_Enum;

/* ================================================  PF PUPD PUPD8 [16..17]  ================================================= */
typedef enum {                                  /*!< PF_PUPD_PUPD8                                                             */
  PF_PUPD_PUPD8_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD8_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD8_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD8_Enum;

/* ================================================  PF PUPD PUPD7 [14..15]  ================================================= */
typedef enum {                                  /*!< PF_PUPD_PUPD7                                                             */
  PF_PUPD_PUPD7_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD7_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD7_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD7_Enum;

/* ================================================  PF PUPD PUPD6 [12..13]  ================================================= */
typedef enum {                                  /*!< PF_PUPD_PUPD6                                                             */
  PF_PUPD_PUPD6_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD6_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD6_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD6_Enum;

/* ================================================  PF PUPD PUPD5 [10..11]  ================================================= */
typedef enum {                                  /*!< PF_PUPD_PUPD5                                                             */
  PF_PUPD_PUPD5_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD5_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD5_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD5_Enum;

/* =================================================  PF PUPD PUPD4 [8..9]  ================================================== */
typedef enum {                                  /*!< PF_PUPD_PUPD4                                                             */
  PF_PUPD_PUPD4_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD4_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD4_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD4_Enum;

/* =================================================  PF PUPD PUPD3 [6..7]  ================================================== */
typedef enum {                                  /*!< PF_PUPD_PUPD3                                                             */
  PF_PUPD_PUPD3_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD3_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD3_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD3_Enum;

/* =================================================  PF PUPD PUPD2 [4..5]  ================================================== */
typedef enum {                                  /*!< PF_PUPD_PUPD2                                                             */
  PF_PUPD_PUPD2_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD2_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD2_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD2_Enum;

/* =================================================  PF PUPD PUPD1 [2..3]  ================================================== */
typedef enum {                                  /*!< PF_PUPD_PUPD1                                                             */
  PF_PUPD_PUPD1_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD1_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD1_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD1_Enum;

/* =================================================  PF PUPD PUPD0 [0..1]  ================================================== */
typedef enum {                                  /*!< PF_PUPD_PUPD0                                                             */
  PF_PUPD_PUPD0_Disable                = 0,     /*!< Disable : Disable pull-up/down resistor.                                  */
  PF_PUPD_PUPD0_EnablePU               = 1,     /*!< EnablePU : Enable pull-up resistor.                                       */
  PF_PUPD_PUPD0_EnablePD               = 2,     /*!< EnablePD : Enable pull-down resistor.                                     */
} PF_PUPD_PUPD0_Enum;

/* =========================================================  INDR  ========================================================== */
/* =========================================================  OUTDR  ========================================================= */
/* ==========================================================  BSR  ========================================================== */
/* =================================================  PF BSR BSR15 [15..15]  ================================================= */
typedef enum {                                  /*!< PF_BSR_BSR15                                                              */
  PF_BSR_BSR15_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR15_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR15_Enum;

/* =================================================  PF BSR BSR14 [14..14]  ================================================= */
typedef enum {                                  /*!< PF_BSR_BSR14                                                              */
  PF_BSR_BSR14_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR14_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR14_Enum;

/* =================================================  PF BSR BSR13 [13..13]  ================================================= */
typedef enum {                                  /*!< PF_BSR_BSR13                                                              */
  PF_BSR_BSR13_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR13_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR13_Enum;

/* =================================================  PF BSR BSR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PF_BSR_BSR12                                                              */
  PF_BSR_BSR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR12_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR12_Enum;

/* =================================================  PF BSR BSR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PF_BSR_BSR11                                                              */
  PF_BSR_BSR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR11_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR11_Enum;

/* =================================================  PF BSR BSR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PF_BSR_BSR10                                                              */
  PF_BSR_BSR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR10_Set                     = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR10_Enum;

/* ==================================================  PF BSR BSR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR9                                                               */
  PF_BSR_BSR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR9_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR9_Enum;

/* ==================================================  PF BSR BSR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR8                                                               */
  PF_BSR_BSR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR8_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR8_Enum;

/* ==================================================  PF BSR BSR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR7                                                               */
  PF_BSR_BSR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR7_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR7_Enum;

/* ==================================================  PF BSR BSR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR6                                                               */
  PF_BSR_BSR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR6_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR6_Enum;

/* ==================================================  PF BSR BSR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR5                                                               */
  PF_BSR_BSR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR5_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR5_Enum;

/* ==================================================  PF BSR BSR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR4                                                               */
  PF_BSR_BSR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR4_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR4_Enum;

/* ==================================================  PF BSR BSR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR3                                                               */
  PF_BSR_BSR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR3_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR3_Enum;

/* ==================================================  PF BSR BSR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR2                                                               */
  PF_BSR_BSR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR2_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR2_Enum;

/* ==================================================  PF BSR BSR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR1                                                               */
  PF_BSR_BSR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR1_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR1_Enum;

/* ==================================================  PF BSR BSR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PF_BSR_BSR0                                                               */
  PF_BSR_BSR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BSR_BSR0_Set                      = 1,     /*!< Set : Set the corresponding OUTDRx bit (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BSR_BSR0_Enum;

/* ==========================================================  BCR  ========================================================== */
/* =================================================  PF BCR BCR15 [15..15]  ================================================= */
typedef enum {                                  /*!< PF_BCR_BCR15                                                              */
  PF_BCR_BCR15_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR15_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR15_Enum;

/* =================================================  PF BCR BCR14 [14..14]  ================================================= */
typedef enum {                                  /*!< PF_BCR_BCR14                                                              */
  PF_BCR_BCR14_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR14_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR14_Enum;

/* =================================================  PF BCR BCR13 [13..13]  ================================================= */
typedef enum {                                  /*!< PF_BCR_BCR13                                                              */
  PF_BCR_BCR13_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR13_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR13_Enum;

/* =================================================  PF BCR BCR12 [12..12]  ================================================= */
typedef enum {                                  /*!< PF_BCR_BCR12                                                              */
  PF_BCR_BCR12_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR12_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR12_Enum;

/* =================================================  PF BCR BCR11 [11..11]  ================================================= */
typedef enum {                                  /*!< PF_BCR_BCR11                                                              */
  PF_BCR_BCR11_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR11_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR11_Enum;

/* =================================================  PF BCR BCR10 [10..10]  ================================================= */
typedef enum {                                  /*!< PF_BCR_BCR10                                                              */
  PF_BCR_BCR10_NoEffect                = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR10_Clear                   = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR10_Enum;

/* ==================================================  PF BCR BCR9 [9..9]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR9                                                               */
  PF_BCR_BCR9_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR9_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR9_Enum;

/* ==================================================  PF BCR BCR8 [8..8]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR8                                                               */
  PF_BCR_BCR8_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR8_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR8_Enum;

/* ==================================================  PF BCR BCR7 [7..7]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR7                                                               */
  PF_BCR_BCR7_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR7_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR7_Enum;

/* ==================================================  PF BCR BCR6 [6..6]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR6                                                               */
  PF_BCR_BCR6_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR6_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR6_Enum;

/* ==================================================  PF BCR BCR5 [5..5]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR5                                                               */
  PF_BCR_BCR5_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR5_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR5_Enum;

/* ==================================================  PF BCR BCR4 [4..4]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR4                                                               */
  PF_BCR_BCR4_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR4_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR4_Enum;

/* ==================================================  PF BCR BCR3 [3..3]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR3                                                               */
  PF_BCR_BCR3_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR3_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR3_Enum;

/* ==================================================  PF BCR BCR2 [2..2]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR2                                                               */
  PF_BCR_BCR2_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR2_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR2_Enum;

/* ==================================================  PF BCR BCR1 [1..1]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR1                                                               */
  PF_BCR_BCR1_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR1_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR1_Enum;

/* ==================================================  PF BCR BCR0 [0..0]  =================================================== */
typedef enum {                                  /*!< PF_BCR_BCR0                                                               */
  PF_BCR_BCR0_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  PF_BCR_BCR0_Clear                    = 1,     /*!< Clear : Clear the corresponding OUTDRx bit. (Automatically cleared
                                                     to 0.)                                                                    */
} PF_BCR_BCR0_Enum;

/* ========================================================  OUTDMSK  ======================================================== */
/* =============================================  PF OUTDMSK OUTDMSK15 [15..15]  ============================================= */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK15                                                      */
  PF_OUTDMSK_OUTDMSK15_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK15_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK15_Enum;

/* =============================================  PF OUTDMSK OUTDMSK14 [14..14]  ============================================= */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK14                                                      */
  PF_OUTDMSK_OUTDMSK14_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK14_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK14_Enum;

/* =============================================  PF OUTDMSK OUTDMSK13 [13..13]  ============================================= */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK13                                                      */
  PF_OUTDMSK_OUTDMSK13_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK13_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK13_Enum;

/* =============================================  PF OUTDMSK OUTDMSK12 [12..12]  ============================================= */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK12                                                      */
  PF_OUTDMSK_OUTDMSK12_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK12_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK12_Enum;

/* =============================================  PF OUTDMSK OUTDMSK11 [11..11]  ============================================= */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK11                                                      */
  PF_OUTDMSK_OUTDMSK11_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK11_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK11_Enum;

/* =============================================  PF OUTDMSK OUTDMSK10 [10..10]  ============================================= */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK10                                                      */
  PF_OUTDMSK_OUTDMSK10_Unmask          = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK10_Mask            = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK10_Enum;

/* ==============================================  PF OUTDMSK OUTDMSK9 [9..9]  =============================================== */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK9                                                       */
  PF_OUTDMSK_OUTDMSK9_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK9_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK9_Enum;

/* ==============================================  PF OUTDMSK OUTDMSK8 [8..8]  =============================================== */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK8                                                       */
  PF_OUTDMSK_OUTDMSK8_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK8_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK8_Enum;

/* ==============================================  PF OUTDMSK OUTDMSK7 [7..7]  =============================================== */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK7                                                       */
  PF_OUTDMSK_OUTDMSK7_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK7_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK7_Enum;

/* ==============================================  PF OUTDMSK OUTDMSK6 [6..6]  =============================================== */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK6                                                       */
  PF_OUTDMSK_OUTDMSK6_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK6_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK6_Enum;

/* ==============================================  PF OUTDMSK OUTDMSK5 [5..5]  =============================================== */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK5                                                       */
  PF_OUTDMSK_OUTDMSK5_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK5_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK5_Enum;

/* ==============================================  PF OUTDMSK OUTDMSK4 [4..4]  =============================================== */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK4                                                       */
  PF_OUTDMSK_OUTDMSK4_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK4_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK4_Enum;

/* ==============================================  PF OUTDMSK OUTDMSK3 [3..3]  =============================================== */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK3                                                       */
  PF_OUTDMSK_OUTDMSK3_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK3_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK3_Enum;

/* ==============================================  PF OUTDMSK OUTDMSK2 [2..2]  =============================================== */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK2                                                       */
  PF_OUTDMSK_OUTDMSK2_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK2_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK2_Enum;

/* ==============================================  PF OUTDMSK OUTDMSK1 [1..1]  =============================================== */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK1                                                       */
  PF_OUTDMSK_OUTDMSK1_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK1_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK1_Enum;

/* ==============================================  PF OUTDMSK OUTDMSK0 [0..0]  =============================================== */
typedef enum {                                  /*!< PF_OUTDMSK_OUTDMSK0                                                       */
  PF_OUTDMSK_OUTDMSK0_Unmask           = 0,     /*!< Unmask : Unmask. The corresponding OUTDRx bit can be changed.             */
  PF_OUTDMSK_OUTDMSK0_Mask             = 1,     /*!< Mask : Mask. The corresponding OUTDRx bit is protected.                   */
} PF_OUTDMSK_OUTDMSK0_Enum;

/* =========================================================  DBCR  ========================================================== */
/* ================================================  PF DBCR DBCLK [16..18]  ================================================= */
typedef enum {                                  /*!< PF_DBCR_DBCLK                                                             */
  PF_DBCR_DBCLK_HCLK1                  = 0,     /*!< HCLK1 : HCLK/1                                                            */
  PF_DBCR_DBCLK_HCLK4                  = 1,     /*!< HCLK4 : HCLK/4                                                            */
  PF_DBCR_DBCLK_HCLK16                 = 2,     /*!< HCLK16 : HCLK/16                                                          */
  PF_DBCR_DBCLK_HCLK64                 = 3,     /*!< HCLK64 : HCLK/64                                                          */
  PF_DBCR_DBCLK_HCLK256                = 4,     /*!< HCLK256 : HCLK/256                                                        */
  PF_DBCR_DBCLK_HCLK1024               = 5,     /*!< HCLK1024 : HCLK/1024                                                      */
} PF_DBCR_DBCLK_Enum;

/* ================================================  PF DBCR DBEN11 [11..11]  ================================================ */
typedef enum {                                  /*!< PF_DBCR_DBEN11                                                            */
  PF_DBCR_DBEN11_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN11_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN11_Enum;

/* ================================================  PF DBCR DBEN10 [10..10]  ================================================ */
typedef enum {                                  /*!< PF_DBCR_DBEN10                                                            */
  PF_DBCR_DBEN10_Disable               = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN10_Enable                = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN10_Enum;

/* =================================================  PF DBCR DBEN9 [9..9]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN9                                                             */
  PF_DBCR_DBEN9_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN9_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN9_Enum;

/* =================================================  PF DBCR DBEN8 [8..8]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN8                                                             */
  PF_DBCR_DBEN8_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN8_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN8_Enum;

/* =================================================  PF DBCR DBEN7 [7..7]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN7                                                             */
  PF_DBCR_DBEN7_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN7_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN7_Enum;

/* =================================================  PF DBCR DBEN6 [6..6]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN6                                                             */
  PF_DBCR_DBEN6_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN6_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN6_Enum;

/* =================================================  PF DBCR DBEN5 [5..5]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN5                                                             */
  PF_DBCR_DBEN5_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN5_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN5_Enum;

/* =================================================  PF DBCR DBEN4 [4..4]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN4                                                             */
  PF_DBCR_DBEN4_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN4_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN4_Enum;

/* =================================================  PF DBCR DBEN3 [3..3]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN3                                                             */
  PF_DBCR_DBEN3_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN3_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN3_Enum;

/* =================================================  PF DBCR DBEN2 [2..2]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN2                                                             */
  PF_DBCR_DBEN2_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN2_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN2_Enum;

/* =================================================  PF DBCR DBEN1 [1..1]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN1                                                             */
  PF_DBCR_DBEN1_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN1_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN1_Enum;

/* =================================================  PF DBCR DBEN0 [0..0]  ================================================== */
typedef enum {                                  /*!< PF_DBCR_DBEN0                                                             */
  PF_DBCR_DBEN0_Disable                = 0,     /*!< Disable : Disable debounce filter.                                        */
  PF_DBCR_DBEN0_Enable                 = 1,     /*!< Enable : Enable debounce filter.                                          */
} PF_DBCR_DBEN0_Enum;

/* ========================================================  PF_MOD  ========================================================= */
/* ========================================================  PF_TYP  ========================================================= */
/* =======================================================  PF_AFSR1  ======================================================== */
/* =======================================================  PF_AFSR2  ======================================================== */
/* ========================================================  PF_PUPD  ======================================================== */
/* ========================================================  PF_INDR  ======================================================== */
/* =======================================================  PF_OUTDR  ======================================================== */
/* ========================================================  PF_BSR  ========================================================= */
/* ========================================================  PF_BCR  ========================================================= */
/* ======================================================  PF_OUTDMSK  ======================================================= */


/* =========================================================================================================================== */
/* ================                                            FMC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  ADR  ========================================================== */
/* =========================================================  IDR1  ========================================================== */
/* =========================================================  IDR2  ========================================================== */
/* ==========================================================  CR  =========================================================== */
/* ================================================  FMC CR WTIDKY [16..31]  ================================================= */
typedef enum {                                  /*!< FMC_CR_WTIDKY                                                             */
  FMC_CR_WTIDKY_Value                  = 27795, /*!< Value : Key Value (0x6c93)                                                */
} FMC_CR_WTIDKY_Enum;

/* ==========================================================  BCR  ========================================================== */
/* ================================================  FMC BCR WTIDKY [16..31]  ================================================ */
typedef enum {                                  /*!< FMC_BCR_WTIDKY                                                            */
  FMC_BCR_WTIDKY_Value                 = 49598, /*!< Value : Key Value (0xc1be)                                                */
} FMC_BCR_WTIDKY_Enum;

/* ========================================================  ERFLAG  ========================================================= */
/* ========================================================  PAGEBUF  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            WDT                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ================================================  WDT CR WTIDKY [16..31]  ================================================= */
typedef enum {                                  /*!< WDT_CR_WTIDKY                                                             */
  WDT_CR_WTIDKY_Value                  = 23145, /*!< Value : Key Value (0x5a69)                                                */
} WDT_CR_WTIDKY_Enum;

/* =================================================  WDT CR RSTEN [10..15]  ================================================= */
typedef enum {                                  /*!< WDT_CR_RSTEN                                                              */
  WDT_CR_RSTEN_Disable                 = 37,    /*!< Disable : Disable Watch-Dog Timer reset. (0x25)                           */
  WDT_CR_RSTEN_Enable                  = 0,     /*!< Enable : Enable Watch-Dog Timer reset.                                    */
} WDT_CR_RSTEN_Enum;

/* ==================================================  WDT CR CNTEN [4..9]  ================================================== */
typedef enum {                                  /*!< WDT_CR_CNTEN                                                              */
  WDT_CR_CNTEN_Disable                 = 26,    /*!< Disable : Disable Watch-Dog Timer counter. (0x1a)                         */
  WDT_CR_CNTEN_Enable                  = 0,     /*!< Enable : Enable Watch-Dog Timer counter.                                  */
} WDT_CR_CNTEN_Enum;

/* =================================================  WDT CR WINMIEN [3..3]  ================================================= */
typedef enum {                                  /*!< WDT_CR_WINMIEN                                                            */
  WDT_CR_WINMIEN_Disable               = 0,     /*!< Disable : Disable window data match interrupt.                            */
  WDT_CR_WINMIEN_Enable                = 1,     /*!< Enable : Enable window data match interrupt.                              */
} WDT_CR_WINMIEN_Enum;

/* =================================================  WDT CR UNFIEN [2..2]  ================================================== */
typedef enum {                                  /*!< WDT_CR_UNFIEN                                                             */
  WDT_CR_UNFIEN_Disable                = 0,     /*!< Disable : Disable Watch-Dog Timer underflow interrupt.                    */
  WDT_CR_UNFIEN_Enable                 = 1,     /*!< Enable : Enable Watch-Dog Timer underflow interrupt.                      */
} WDT_CR_UNFIEN_Enum;

/* =================================================  WDT CR CLKDIV [0..1]  ================================================== */
typedef enum {                                  /*!< WDT_CR_CLKDIV                                                             */
  WDT_CR_CLKDIV_fWDT4                  = 0,     /*!< fWDT4 : fWDT/4                                                            */
  WDT_CR_CLKDIV_fWDT16                 = 1,     /*!< fWDT16 : fWDT/16                                                          */
  WDT_CR_CLKDIV_fWDT64                 = 2,     /*!< fWDT64 : fWDT/64                                                          */
  WDT_CR_CLKDIV_fWDT256                = 3,     /*!< fWDT256 : fWDT/256                                                        */
} WDT_CR_CLKDIV_Enum;

/* ==========================================================  SR  =========================================================== */
/* ================================================  WDT SR DBGCNTEN [7..7]  ================================================= */
typedef enum {                                  /*!< WDT_SR_DBGCNTEN                                                           */
  WDT_SR_DBGCNTEN_Run                  = 0,     /*!< Run : The Watch-Dog Timer counter continues even if the core
                                                     is halted                                                                 */
  WDT_SR_DBGCNTEN_Stop                 = 1,     /*!< Stop : The Watch-Dog Timer counter is stopped when the core
                                                     is halted                                                                 */
} WDT_SR_DBGCNTEN_Enum;

/* ================================================  WDT SR WINMIFLAG [1..1]  ================================================ */
typedef enum {                                  /*!< WDT_SR_WINMIFLAG                                                          */
  WDT_SR_WINMIFLAG_NoRequest           = 0,     /*!< NoRequest : No request occurred.                                          */
  WDT_SR_WINMIFLAG_Request             = 1,     /*!< Request : Request occurred.                                               */
} WDT_SR_WINMIFLAG_Enum;

/* ================================================  WDT SR UNFIFLAG [0..0]  ================================================= */
typedef enum {                                  /*!< WDT_SR_UNFIFLAG                                                           */
  WDT_SR_UNFIFLAG_NoRequest            = 0,     /*!< NoRequest : No request occurred.                                          */
  WDT_SR_UNFIFLAG_Request              = 1,     /*!< Request : Request occurred.                                               */
} WDT_SR_UNFIFLAG_Enum;

/* ==========================================================  DR  =========================================================== */
/* ==========================================================  CNT  ========================================================== */
/* =========================================================  WINDR  ========================================================= */
/* =========================================================  CNTR  ========================================================== */
/* =================================================  WDT CNTR CNTR [0..7]  ================================================== */
typedef enum {                                  /*!< WDT_CNTR_CNTR                                                             */
  WDT_CNTR_CNTR_Reload                 = 106,   /*!< Reload : Reload the WDTDR value to Watch-Dog Timer counter and
                                                     re-start. (0x6a) (Automatically cleared to '0x00' after
                                                     operation.)                                                               */
  WDT_CNTR_CNTR_NoEffect               = 0,     /*!< NoEffect : No effect.                                                     */
} WDT_CNTR_CNTR_Enum;



/* =========================================================================================================================== */
/* ================                                            WT                                             ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ===================================================  WT CR WTEN [7..7]  =================================================== */
typedef enum {                                  /*!< WT_CR_WTEN                                                                */
  WT_CR_WTEN_Disable                   = 0,     /*!< Disable : Disable watch timer operation.                                  */
  WT_CR_WTEN_Enable                    = 1,     /*!< Enable : Enable watch timer operation.                                    */
} WT_CR_WTEN_Enum;

/* ==================================================  WT CR WTINTV [4..5]  ================================================== */
typedef enum {                                  /*!< WT_CR_WTINTV                                                              */
  WT_CR_WTINTV_fWT2Pow7                = 0,     /*!< fWT2Pow7 : fWT/2^7                                                        */
  WT_CR_WTINTV_fWT2Pow13               = 1,     /*!< fWT2Pow13 : fWT/2^13                                                      */
  WT_CR_WTINTV_fWT2Pow14               = 2,     /*!< fWT2Pow14 : fWT/2^14                                                      */
  WT_CR_WTINTV_fWT2Pow14DR             = 3,     /*!< fWT2Pow14DR : fWT/(2^14x(WTDR value + 1))                                 */
} WT_CR_WTINTV_Enum;

/* ==================================================  WT CR WTIEN [3..3]  =================================================== */
typedef enum {                                  /*!< WT_CR_WTIEN                                                               */
  WT_CR_WTIEN_Disable                  = 0,     /*!< Disable : Disable watch timer interrupt.                                  */
  WT_CR_WTIEN_Enable                   = 1,     /*!< Enable : Enable watch timer interrupt.                                    */
} WT_CR_WTIEN_Enum;

/* =================================================  WT CR WTIFLAG [1..1]  ================================================== */
typedef enum {                                  /*!< WT_CR_WTIFLAG                                                             */
  WT_CR_WTIFLAG_NoRequest              = 0,     /*!< NoRequest : No request occurred.                                          */
  WT_CR_WTIFLAG_Request                = 1,     /*!< Request : Request occurred.                                               */
} WT_CR_WTIFLAG_Enum;

/* ==================================================  WT CR WTCLR [0..0]  =================================================== */
typedef enum {                                  /*!< WT_CR_WTCLR                                                               */
  WT_CR_WTCLR_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  WT_CR_WTCLR_Clear                    = 1,     /*!< Clear : Clear the counter and divider. (Automatically cleared
                                                     to '0b' after operation)                                                  */
} WT_CR_WTCLR_Enum;

/* ==========================================================  DR  =========================================================== */
/* ==========================================================  CNT  ========================================================== */


/* =========================================================================================================================== */
/* ================                                          TIMER1n                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */


/* =========================================================================================================================== */
/* ================                                          TIMER10                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */


/* =========================================================================================================================== */
/* ================                                          TIMER11                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */


/* =========================================================================================================================== */
/* ================                                          TIMER12                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */


/* =========================================================================================================================== */
/* ================                                          TIMER13                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */


/* =========================================================================================================================== */
/* ================                                          TIMER14                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */


/* =========================================================================================================================== */
/* ================                                          TIMER15                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */


/* =========================================================================================================================== */
/* ================                                          TIMER16                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */


/* =========================================================================================================================== */
/* ================                                          TIMER2n                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */


/* =========================================================================================================================== */
/* ================                                          TIMER20                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */
/* ======================================================  TIMER20_CR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                          TIMER21                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */
/* ======================================================  TIMER21_CR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                          TIMER3n                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ===============================================  TIMER3n CR T3nEN [15..15]  =============================================== */
typedef enum {                                  /*!< TIMER3n_CR_T3nEN                                                          */
  TIMER3n_CR_T3nEN_Disable             = 0,     /*!< Disable : Disable TIMER3n Operation.                                      */
  TIMER3n_CR_T3nEN_Enable              = 1,     /*!< Enable : Enable TIMER3n Operation. (Counter Clear and Start)              */
} TIMER3n_CR_T3nEN_Enum;

/* ==============================================  TIMER3n CR T3nCLK [14..14]  =============================================== */
typedef enum {                                  /*!< TIMER3n_CR_T3nCLK                                                         */
  TIMER3n_CR_T3nCLK_IntPrescaledClock  = 0,     /*!< IntPrescaledClock : Select an Internal Prescaler Clock.                   */
  TIMER3n_CR_T3nCLK_ExtClock           = 1,     /*!< ExtClock : Select an External Clock.                                      */
} TIMER3n_CR_T3nCLK_Enum;

/* ===============================================  TIMER3n CR T3nMS [12..13]  =============================================== */
typedef enum {                                  /*!< TIMER3n_CR_T3nMS                                                          */
  TIMER3n_CR_T3nMS_IntervalMode        = 0,     /*!< IntervalMode : Interval mode. (All match interrupts can occur)            */
  TIMER3n_CR_T3nMS_CaptureMode         = 1,     /*!< CaptureMode : Capture mode. (The Period-match interrupt can
                                                     occur)                                                                    */
  TIMER3n_CR_T3nMS_BackToBackMode      = 2,     /*!< BackToBackMode : Back-to-back mode. (All interrupts can occur)            */
} TIMER3n_CR_T3nMS_Enum;

/* ==============================================  TIMER3n CR T3nECE [11..11]  =============================================== */
typedef enum {                                  /*!< TIMER3n_CR_T3nECE                                                         */
  TIMER3n_CR_T3nECE_FallingEdge        = 0,     /*!< FallingEdge : Select falling edge of external clock.                      */
  TIMER3n_CR_T3nECE_RisingEdge         = 1,     /*!< RisingEdge : Select rising edge of external clock.                        */
} TIMER3n_CR_T3nECE_Enum;

/* ===============================================  TIMER3n CR FORCA [10..10]  =============================================== */
typedef enum {                                  /*!< TIMER3n_CR_FORCA                                                          */
  TIMER3n_CR_FORCA_AllChannelMode      = 0,     /*!< AllChannelMode : 6-Channel mode. (The PWM3nxA/PWM3nxB pins are
                                                     outputs according to the TIMER30_xDR registers, respectively.)            */
  TIMER3n_CR_FORCA_AChannelMode        = 1,     /*!< AChannelMode : Force A-Channel mode. (All PWM3nxA/PWM3nxB pins
                                                     are outputs according only to the TIMER30_ADR register.)                  */
} TIMER3n_CR_FORCA_Enum;

/* ================================================  TIMER3n CR DLYEN [9..9]  ================================================ */
typedef enum {                                  /*!< TIMER3n_CR_DLYEN                                                          */
  TIMER3n_CR_DLYEN_Disable             = 0,     /*!< Disable : Disable delay time insertion to the PWM3nxA/PWM3nxB.            */
  TIMER3n_CR_DLYEN_Enable              = 1,     /*!< Enable : Enable delay time insertion to the PWM3nxA/PWM3nxB.              */
} TIMER3n_CR_DLYEN_Enum;

/* ===============================================  TIMER3n CR DLYPOS [8..8]  ================================================ */
typedef enum {                                  /*!< TIMER3n_CR_DLYPOS                                                         */
  TIMER3n_CR_DLYPOS_FrontABehindB      = 0,     /*!< FrontABehindB : Insert in front of PWM3nxA and behind PWM3nxB
                                                     pins.                                                                     */
  TIMER3n_CR_DLYPOS_BehindAFrontB      = 1,     /*!< BehindAFrontB : Insert behind PWM3nxA and in front of PWM3nxB
                                                     pins.                                                                     */
} TIMER3n_CR_DLYPOS_Enum;

/* ===============================================  TIMER3n CR T3nCPOL [6..7]  =============================================== */
typedef enum {                                  /*!< TIMER3n_CR_T3nCPOL                                                        */
  TIMER3n_CR_T3nCPOL_FallingEdge       = 0,     /*!< FallingEdge : Capture on falling edge.                                    */
  TIMER3n_CR_T3nCPOL_RisingEdge        = 1,     /*!< RisingEdge : Capture on rising edge.                                      */
  TIMER3n_CR_T3nCPOL_BothEdge          = 2,     /*!< BothEdge : Capture on both falling and rising edge.                       */
} TIMER3n_CR_T3nCPOL_Enum;

/* ================================================  TIMER3n CR UPDT [4..5]  ================================================= */
typedef enum {                                  /*!< TIMER3n_CR_UPDT                                                           */
  TIMER3n_CR_UPDT_AtWriting            = 0,     /*!< AtWriting : Update data to buffer at the time of writing.                 */
  TIMER3n_CR_UPDT_AtPeriodMatch        = 1,     /*!< AtPeriodMatch : Update data to buffer at period match.                    */
  TIMER3n_CR_UPDT_AtBottom             = 2,     /*!< AtBottom : Update data to buffer at bottom.                               */
} TIMER3n_CR_UPDT_Enum;

/* ================================================  TIMER3n CR PMOC [1..3]  ================================================= */
typedef enum {                                  /*!< TIMER3n_CR_PMOC                                                           */
  TIMER3n_CR_PMOC_Every1PeriodMatch    = 0,     /*!< Every1PeriodMatch : Once every 1 period match.                            */
  TIMER3n_CR_PMOC_Every2PeriodMatch    = 1,     /*!< Every2PeriodMatch : Once every 2 period match.                            */
  TIMER3n_CR_PMOC_Every3PeriodMatch    = 2,     /*!< Every3PeriodMatch : Once every 3 period match.                            */
  TIMER3n_CR_PMOC_Every4PeriodMatch    = 3,     /*!< Every4PeriodMatch : Once every 4 period match.                            */
  TIMER3n_CR_PMOC_Every5PeriodMatch    = 4,     /*!< Every5PeriodMatch : Once every 5 period match.                            */
  TIMER3n_CR_PMOC_Every6PeriodMatch    = 5,     /*!< Every6PeriodMatch : Once every 6 period match.                            */
  TIMER3n_CR_PMOC_Every7PeriodMatch    = 6,     /*!< Every7PeriodMatch : Once every 7 period match.                            */
  TIMER3n_CR_PMOC_Every8PeriodMatch    = 7,     /*!< Every8PeriodMatch : Once every 8 period match.                            */
} TIMER3n_CR_PMOC_Enum;

/* ===============================================  TIMER3n CR T3nCLR [0..0]  ================================================ */
typedef enum {                                  /*!< TIMER3n_CR_T3nCLR                                                         */
  TIMER3n_CR_T3nCLR_NoEffect           = 0,     /*!< NoEffect : No effect.                                                     */
  TIMER3n_CR_T3nCLR_Clear              = 1,     /*!< Clear : Clear TIMER3n counter and prescaler. (Automatically
                                                     cleared to '0b' after operation)                                          */
} TIMER3n_CR_T3nCLR_Enum;

/* ==========================================================  PDR  ========================================================== */
/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* ==========================================================  CDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */
/* =========================================================  OUTCR  ========================================================= */
/* ==============================================  TIMER3n OUTCR POLB [15..15]  ============================================== */
typedef enum {                                  /*!< TIMER3n_OUTCR_POLB                                                        */
  TIMER3n_OUTCR_POLB_StartLow          = 0,     /*!< StartLow : Low level start. (The PWM3nxB pins are started with
                                                     low level after counting.)                                                */
  TIMER3n_OUTCR_POLB_StartHigh         = 1,     /*!< StartHigh : High level start. (The PWM3nxB pins are started
                                                     with high level after counting)                                           */
} TIMER3n_OUTCR_POLB_Enum;

/* ==============================================  TIMER3n OUTCR POLA [14..14]  ============================================== */
typedef enum {                                  /*!< TIMER3n_OUTCR_POLA                                                        */
  TIMER3n_OUTCR_POLA_StartLow          = 0,     /*!< StartLow : Low level start. (The PWM3nxA pins are started with
                                                     low level after counting.)                                                */
  TIMER3n_OUTCR_POLA_StartHigh         = 1,     /*!< StartHigh : High level start. (The PWM3nxA pins are started
                                                     with high level after counting)                                           */
} TIMER3n_OUTCR_POLA_Enum;

/* =============================================  TIMER3n OUTCR PABOE [13..13]  ============================================== */
typedef enum {                                  /*!< TIMER3n_OUTCR_PABOE                                                       */
  TIMER3n_OUTCR_PABOE_Disable          = 0,     /*!< Disable : Disable output.                                                 */
  TIMER3n_OUTCR_PABOE_Enable           = 1,     /*!< Enable : Enable output.                                                   */
} TIMER3n_OUTCR_PABOE_Enum;

/* =============================================  TIMER3n OUTCR PBBOE [12..12]  ============================================== */
typedef enum {                                  /*!< TIMER3n_OUTCR_PBBOE                                                       */
  TIMER3n_OUTCR_PBBOE_Disable          = 0,     /*!< Disable : Disable output.                                                 */
  TIMER3n_OUTCR_PBBOE_Enable           = 1,     /*!< Enable : Enable output.                                                   */
} TIMER3n_OUTCR_PBBOE_Enum;

/* =============================================  TIMER3n OUTCR PCBOE [11..11]  ============================================== */
typedef enum {                                  /*!< TIMER3n_OUTCR_PCBOE                                                       */
  TIMER3n_OUTCR_PCBOE_Disable          = 0,     /*!< Disable : Disable output.                                                 */
  TIMER3n_OUTCR_PCBOE_Enable           = 1,     /*!< Enable : Enable output.                                                   */
} TIMER3n_OUTCR_PCBOE_Enum;

/* =============================================  TIMER3n OUTCR PAAOE [10..10]  ============================================== */
typedef enum {                                  /*!< TIMER3n_OUTCR_PAAOE                                                       */
  TIMER3n_OUTCR_PAAOE_Disable          = 0,     /*!< Disable : Disable output.                                                 */
  TIMER3n_OUTCR_PAAOE_Enable           = 1,     /*!< Enable : Enable output.                                                   */
} TIMER3n_OUTCR_PAAOE_Enum;

/* ==============================================  TIMER3n OUTCR PBAOE [9..9]  =============================================== */
typedef enum {                                  /*!< TIMER3n_OUTCR_PBAOE                                                       */
  TIMER3n_OUTCR_PBAOE_Disable          = 0,     /*!< Disable : Disable output.                                                 */
  TIMER3n_OUTCR_PBAOE_Enable           = 1,     /*!< Enable : Enable output.                                                   */
} TIMER3n_OUTCR_PBAOE_Enum;

/* ==============================================  TIMER3n OUTCR PCAOE [8..8]  =============================================== */
typedef enum {                                  /*!< TIMER3n_OUTCR_PCAOE                                                       */
  TIMER3n_OUTCR_PCAOE_Disable          = 0,     /*!< Disable : Disable output.                                                 */
  TIMER3n_OUTCR_PCAOE_Enable           = 1,     /*!< Enable : Enable output.                                                   */
} TIMER3n_OUTCR_PCAOE_Enum;

/* ==============================================  TIMER3n OUTCR LVLAB [6..6]  =============================================== */
typedef enum {                                  /*!< TIMER3n_OUTCR_LVLAB                                                       */
  TIMER3n_OUTCR_LVLAB_Low              = 0,     /*!< Low : Low level.                                                          */
  TIMER3n_OUTCR_LVLAB_High             = 1,     /*!< High : High level.                                                        */
} TIMER3n_OUTCR_LVLAB_Enum;

/* ==============================================  TIMER3n OUTCR LVLBB [5..5]  =============================================== */
typedef enum {                                  /*!< TIMER3n_OUTCR_LVLBB                                                       */
  TIMER3n_OUTCR_LVLBB_Low              = 0,     /*!< Low : Low level.                                                          */
  TIMER3n_OUTCR_LVLBB_High             = 1,     /*!< High : High level.                                                        */
} TIMER3n_OUTCR_LVLBB_Enum;

/* ==============================================  TIMER3n OUTCR LVLCB [4..4]  =============================================== */
typedef enum {                                  /*!< TIMER3n_OUTCR_LVLCB                                                       */
  TIMER3n_OUTCR_LVLCB_Low              = 0,     /*!< Low : Low level.                                                          */
  TIMER3n_OUTCR_LVLCB_High             = 1,     /*!< High : High level.                                                        */
} TIMER3n_OUTCR_LVLCB_Enum;

/* ==============================================  TIMER3n OUTCR LVLAA [2..2]  =============================================== */
typedef enum {                                  /*!< TIMER3n_OUTCR_LVLAA                                                       */
  TIMER3n_OUTCR_LVLAA_Low              = 0,     /*!< Low : Low level.                                                          */
  TIMER3n_OUTCR_LVLAA_High             = 1,     /*!< High : High level.                                                        */
} TIMER3n_OUTCR_LVLAA_Enum;

/* ==============================================  TIMER3n OUTCR LVLBA [1..1]  =============================================== */
typedef enum {                                  /*!< TIMER3n_OUTCR_LVLBA                                                       */
  TIMER3n_OUTCR_LVLBA_Low              = 0,     /*!< Low : Low level.                                                          */
  TIMER3n_OUTCR_LVLBA_High             = 1,     /*!< High : High level.                                                        */
} TIMER3n_OUTCR_LVLBA_Enum;

/* ==============================================  TIMER3n OUTCR LVLCA [0..0]  =============================================== */
typedef enum {                                  /*!< TIMER3n_OUTCR_LVLCA                                                       */
  TIMER3n_OUTCR_LVLCA_Low              = 0,     /*!< Low : Low level.                                                          */
  TIMER3n_OUTCR_LVLCA_High             = 1,     /*!< High : High level.                                                        */
} TIMER3n_OUTCR_LVLCA_Enum;

/* ==========================================================  DLY  ========================================================== */
/* =========================================================  INTCR  ========================================================= */
/* ==============================================  TIMER3n INTCR HIZIEN [6..6]  ============================================== */
typedef enum {                                  /*!< TIMER3n_INTCR_HIZIEN                                                      */
  TIMER3n_INTCR_HIZIEN_Disable         = 0,     /*!< Disable : Disable TIMER3n output high-impedance interrupt.                */
  TIMER3n_INTCR_HIZIEN_Enable          = 1,     /*!< Enable : Enable TIMER3n output high-impedance interrupt.                  */
} TIMER3n_INTCR_HIZIEN_Enum;

/* =============================================  TIMER3n INTCR T3nCIEN [5..5]  ============================================== */
typedef enum {                                  /*!< TIMER3n_INTCR_T3nCIEN                                                     */
  TIMER3n_INTCR_T3nCIEN_Disable        = 0,     /*!< Disable : Disable TIMER3n capture interrupt.                              */
  TIMER3n_INTCR_T3nCIEN_Enable         = 1,     /*!< Enable : Enable TIMER3n capture interrupt.                                */
} TIMER3n_INTCR_T3nCIEN_Enum;

/* =============================================  TIMER3n INTCR T3nBTIEN [4..4]  ============================================= */
typedef enum {                                  /*!< TIMER3n_INTCR_T3nBTIEN                                                    */
  TIMER3n_INTCR_T3nBTIEN_Disable       = 0,     /*!< Disable : Disable TIMER3n bottom interrupt.                               */
  TIMER3n_INTCR_T3nBTIEN_Enable        = 1,     /*!< Enable : Enable TIMER3n bottom interrupt.                                 */
} TIMER3n_INTCR_T3nBTIEN_Enum;

/* =============================================  TIMER3n INTCR T3nPMIEN [3..3]  ============================================= */
typedef enum {                                  /*!< TIMER3n_INTCR_T3nPMIEN                                                    */
  TIMER3n_INTCR_T3nPMIEN_Disable       = 0,     /*!< Disable : Disable TIMER3n period interrupt.                               */
  TIMER3n_INTCR_T3nPMIEN_Enable        = 1,     /*!< Enable : Enable TIMER3n period interrupt.                                 */
} TIMER3n_INTCR_T3nPMIEN_Enum;

/* =============================================  TIMER3n INTCR T3nAMIEN [2..2]  ============================================= */
typedef enum {                                  /*!< TIMER3n_INTCR_T3nAMIEN                                                    */
  TIMER3n_INTCR_T3nAMIEN_Disable       = 0,     /*!< Disable : Disable TIMER3n A-ch match interrupt.                           */
  TIMER3n_INTCR_T3nAMIEN_Enable        = 1,     /*!< Enable : Enable TIMER3n A-ch match interrupt.                             */
} TIMER3n_INTCR_T3nAMIEN_Enum;

/* =============================================  TIMER3n INTCR T3nBMIEN [1..1]  ============================================= */
typedef enum {                                  /*!< TIMER3n_INTCR_T3nBMIEN                                                    */
  TIMER3n_INTCR_T3nBMIEN_Disable       = 0,     /*!< Disable : Disable TIMER3n B-ch match interrupt.                           */
  TIMER3n_INTCR_T3nBMIEN_Enable        = 1,     /*!< Enable : Enable TIMER3n B-ch match interrupt.                             */
} TIMER3n_INTCR_T3nBMIEN_Enum;

/* =============================================  TIMER3n INTCR T3nCMIEN [0..0]  ============================================= */
typedef enum {                                  /*!< TIMER3n_INTCR_T3nCMIEN                                                    */
  TIMER3n_INTCR_T3nCMIEN_Disable       = 0,     /*!< Disable : Disable TIMER3n C-ch match interrupt.                           */
  TIMER3n_INTCR_T3nCMIEN_Enable        = 1,     /*!< Enable : Enable TIMER3n C-ch match interrupt.                             */
} TIMER3n_INTCR_T3nCMIEN_Enum;

/* ========================================================  INTFLAG  ======================================================== */
/* ============================================  TIMER3n INTFLAG HIZIFLAG [6..6]  ============================================ */
typedef enum {                                  /*!< TIMER3n_INTFLAG_HIZIFLAG                                                  */
  TIMER3n_INTFLAG_HIZIFLAG_NoRequest   = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER3n_INTFLAG_HIZIFLAG_Request     = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER3n_INTFLAG_HIZIFLAG_Enum;

/* ===========================================  TIMER3n INTFLAG T3nCIFLAG [5..5]  ============================================ */
typedef enum {                                  /*!< TIMER3n_INTFLAG_T3nCIFLAG                                                 */
  TIMER3n_INTFLAG_T3nCIFLAG_NoRequest  = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER3n_INTFLAG_T3nCIFLAG_Request    = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER3n_INTFLAG_T3nCIFLAG_Enum;

/* ===========================================  TIMER3n INTFLAG T3nBTIFLAG [4..4]  =========================================== */
typedef enum {                                  /*!< TIMER3n_INTFLAG_T3nBTIFLAG                                                */
  TIMER3n_INTFLAG_T3nBTIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER3n_INTFLAG_T3nBTIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER3n_INTFLAG_T3nBTIFLAG_Enum;

/* ===========================================  TIMER3n INTFLAG T3nPMIFLAG [3..3]  =========================================== */
typedef enum {                                  /*!< TIMER3n_INTFLAG_T3nPMIFLAG                                                */
  TIMER3n_INTFLAG_T3nPMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER3n_INTFLAG_T3nPMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER3n_INTFLAG_T3nPMIFLAG_Enum;

/* ===========================================  TIMER3n INTFLAG T3nAMIFLAG [2..2]  =========================================== */
typedef enum {                                  /*!< TIMER3n_INTFLAG_T3nAMIFLAG                                                */
  TIMER3n_INTFLAG_T3nAMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER3n_INTFLAG_T3nAMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER3n_INTFLAG_T3nAMIFLAG_Enum;

/* ===========================================  TIMER3n INTFLAG T3nBMIFLAG [1..1]  =========================================== */
typedef enum {                                  /*!< TIMER3n_INTFLAG_T3nBMIFLAG                                                */
  TIMER3n_INTFLAG_T3nBMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER3n_INTFLAG_T3nBMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER3n_INTFLAG_T3nBMIFLAG_Enum;

/* ===========================================  TIMER3n INTFLAG T3nCMIFLAG [0..0]  =========================================== */
typedef enum {                                  /*!< TIMER3n_INTFLAG_T3nCMIFLAG                                                */
  TIMER3n_INTFLAG_T3nCMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER3n_INTFLAG_T3nCMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER3n_INTFLAG_T3nCMIFLAG_Enum;

/* =========================================================  HIZCR  ========================================================= */
/* ==============================================  TIMER3n HIZCR HIZEN [7..7]  =============================================== */
typedef enum {                                  /*!< TIMER3n_HIZCR_HIZEN                                                       */
  TIMER3n_HIZCR_HIZEN_Disable          = 0,     /*!< Disable : Disable to control the output high-impedance.                   */
  TIMER3n_HIZCR_HIZEN_Enable           = 1,     /*!< Enable : Enable to control the output high-impedance.                     */
} TIMER3n_HIZCR_HIZEN_Enum;

/* ==============================================  TIMER3n HIZCR HIZSW [4..4]  =============================================== */
typedef enum {                                  /*!< TIMER3n_HIZCR_HIZSW                                                       */
  TIMER3n_HIZCR_HIZSW_NoEffect         = 0,     /*!< NoEffect : No effect.                                                     */
  TIMER3n_HIZCR_HIZSW_HiZ              = 1,     /*!< HiZ : PWM3nxA/PWM3nxB pins go into high impedance. (Automatically
                                                     cleared to '0' after operation)                                           */
} TIMER3n_HIZCR_HIZSW_Enum;

/* ==============================================  TIMER3n HIZCR HEDGE [2..2]  =============================================== */
typedef enum {                                  /*!< TIMER3n_HIZCR_HEDGE                                                       */
  TIMER3n_HIZCR_HEDGE_FallingEdge      = 0,     /*!< FallingEdge : Falling edge of the BLNK pin.                               */
  TIMER3n_HIZCR_HEDGE_RisingEdge       = 1,     /*!< RisingEdge : Rising edge of the BLNK pin.                                 */
} TIMER3n_HIZCR_HEDGE_Enum;

/* ==============================================  TIMER3n HIZCR HIZSTA [1..1]  ============================================== */
typedef enum {                                  /*!< TIMER3n_HIZCR_HIZSTA                                                      */
  TIMER3n_HIZCR_HIZSTA_NoHiZ           = 0,     /*!< NoHiZ : Indicates that the pins are not under a Hi-Z state.               */
  TIMER3n_HIZCR_HIZSTA_HiZ             = 1,     /*!< HiZ : Indicates that the pins are under a Hi-Z state.                     */
} TIMER3n_HIZCR_HIZSTA_Enum;

/* ==============================================  TIMER3n HIZCR HIZCLR [0..0]  ============================================== */
typedef enum {                                  /*!< TIMER3n_HIZCR_HIZCLR                                                      */
  TIMER3n_HIZCR_HIZCLR_NoEffect        = 0,     /*!< NoEffect : No effect.                                                     */
  TIMER3n_HIZCR_HIZCLR_Clear           = 1,     /*!< Clear : Clear high-impedance output. (The PWM3nxA/PWM3nxB pins
                                                     returns as output and this bit is automatically cleared
                                                     to '0' after operation.)                                                  */
} TIMER3n_HIZCR_HIZCLR_Enum;

/* =========================================================  ADTCR  ========================================================= */
/* =============================================  TIMER3n ADTCR T3nBTTG [4..4]  ============================================== */
typedef enum {                                  /*!< TIMER3n_ADTCR_T3nBTTG                                                     */
  TIMER3n_ADTCR_T3nBTTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by bottom.                 */
  TIMER3n_ADTCR_T3nBTTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by bottom.                   */
} TIMER3n_ADTCR_T3nBTTG_Enum;

/* =============================================  TIMER3n ADTCR T3nPMTG [3..3]  ============================================== */
typedef enum {                                  /*!< TIMER3n_ADTCR_T3nPMTG                                                     */
  TIMER3n_ADTCR_T3nPMTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by period match.           */
  TIMER3n_ADTCR_T3nPMTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by period match.             */
} TIMER3n_ADTCR_T3nPMTG_Enum;

/* =============================================  TIMER3n ADTCR T3nAMTG [2..2]  ============================================== */
typedef enum {                                  /*!< TIMER3n_ADTCR_T3nAMTG                                                     */
  TIMER3n_ADTCR_T3nAMTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by A-ch match.             */
  TIMER3n_ADTCR_T3nAMTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by A-ch match.               */
} TIMER3n_ADTCR_T3nAMTG_Enum;

/* =============================================  TIMER3n ADTCR T3nBMTG [1..1]  ============================================== */
typedef enum {                                  /*!< TIMER3n_ADTCR_T3nBMTG                                                     */
  TIMER3n_ADTCR_T3nBMTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by B-ch match.             */
  TIMER3n_ADTCR_T3nBMTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by B-ch match.               */
} TIMER3n_ADTCR_T3nBMTG_Enum;

/* =============================================  TIMER3n ADTCR T3nCMTG [0..0]  ============================================== */
typedef enum {                                  /*!< TIMER3n_ADTCR_T3nCMTG                                                     */
  TIMER3n_ADTCR_T3nCMTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by C-ch match.             */
  TIMER3n_ADTCR_T3nCMTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by C-ch match.               */
} TIMER3n_ADTCR_T3nCMTG_Enum;

/* =========================================================  ADTDR  ========================================================= */


/* =========================================================================================================================== */
/* ================                                          TIMER30                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ===============================================  TIMER30 CR T3nEN [15..15]  =============================================== */
typedef enum {                                  /*!< TIMER30_CR_T3nEN                                                          */
  TIMER30_CR_T3nEN_Disable             = 0,     /*!< Disable : Disable TIMER3n Operation.                                      */
  TIMER30_CR_T3nEN_Enable              = 1,     /*!< Enable : Enable TIMER3n Operation. (Counter Clear and Start)              */
} TIMER30_CR_T3nEN_Enum;

/* ==============================================  TIMER30 CR T3nCLK [14..14]  =============================================== */
typedef enum {                                  /*!< TIMER30_CR_T3nCLK                                                         */
  TIMER30_CR_T3nCLK_IntPrescaledClock  = 0,     /*!< IntPrescaledClock : Select an Internal Prescaler Clock.                   */
  TIMER30_CR_T3nCLK_ExtClock           = 1,     /*!< ExtClock : Select an External Clock.                                      */
} TIMER30_CR_T3nCLK_Enum;

/* ===============================================  TIMER30 CR T3nMS [12..13]  =============================================== */
typedef enum {                                  /*!< TIMER30_CR_T3nMS                                                          */
  TIMER30_CR_T3nMS_IntervalMode        = 0,     /*!< IntervalMode : Interval mode. (All match interrupts can occur)            */
  TIMER30_CR_T3nMS_CaptureMode         = 1,     /*!< CaptureMode : Capture mode. (The Period-match interrupt can
                                                     occur)                                                                    */
  TIMER30_CR_T3nMS_BackToBackMode      = 2,     /*!< BackToBackMode : Back-to-back mode. (All interrupts can occur)            */
} TIMER30_CR_T3nMS_Enum;

/* ==============================================  TIMER30 CR T3nECE [11..11]  =============================================== */
typedef enum {                                  /*!< TIMER30_CR_T3nECE                                                         */
  TIMER30_CR_T3nECE_FallingEdge        = 0,     /*!< FallingEdge : Select falling edge of external clock.                      */
  TIMER30_CR_T3nECE_RisingEdge         = 1,     /*!< RisingEdge : Select rising edge of external clock.                        */
} TIMER30_CR_T3nECE_Enum;

/* ===============================================  TIMER30 CR FORCA [10..10]  =============================================== */
typedef enum {                                  /*!< TIMER30_CR_FORCA                                                          */
  TIMER30_CR_FORCA_AllChannelMode      = 0,     /*!< AllChannelMode : 6-Channel mode. (The PWM3nxA/PWM3nxB pins are
                                                     outputs according to the TIMER30_xDR registers, respectively.)            */
  TIMER30_CR_FORCA_AChannelMode        = 1,     /*!< AChannelMode : Force A-Channel mode. (All PWM3nxA/PWM3nxB pins
                                                     are outputs according only to the TIMER30_ADR register.)                  */
} TIMER30_CR_FORCA_Enum;

/* ================================================  TIMER30 CR DLYEN [9..9]  ================================================ */
typedef enum {                                  /*!< TIMER30_CR_DLYEN                                                          */
  TIMER30_CR_DLYEN_Disable             = 0,     /*!< Disable : Disable delay time insertion to the PWM3nxA/PWM3nxB.            */
  TIMER30_CR_DLYEN_Enable              = 1,     /*!< Enable : Enable delay time insertion to the PWM3nxA/PWM3nxB.              */
} TIMER30_CR_DLYEN_Enum;

/* ===============================================  TIMER30 CR DLYPOS [8..8]  ================================================ */
typedef enum {                                  /*!< TIMER30_CR_DLYPOS                                                         */
  TIMER30_CR_DLYPOS_FrontABehindB      = 0,     /*!< FrontABehindB : Insert in front of PWM3nxA and behind PWM3nxB
                                                     pins.                                                                     */
  TIMER30_CR_DLYPOS_BehindAFrontB      = 1,     /*!< BehindAFrontB : Insert behind PWM3nxA and in front of PWM3nxB
                                                     pins.                                                                     */
} TIMER30_CR_DLYPOS_Enum;

/* ===============================================  TIMER30 CR T3nCPOL [6..7]  =============================================== */
typedef enum {                                  /*!< TIMER30_CR_T3nCPOL                                                        */
  TIMER30_CR_T3nCPOL_FallingEdge       = 0,     /*!< FallingEdge : Capture on falling edge.                                    */
  TIMER30_CR_T3nCPOL_RisingEdge        = 1,     /*!< RisingEdge : Capture on rising edge.                                      */
  TIMER30_CR_T3nCPOL_BothEdge          = 2,     /*!< BothEdge : Capture on both falling and rising edge.                       */
} TIMER30_CR_T3nCPOL_Enum;

/* ================================================  TIMER30 CR UPDT [4..5]  ================================================= */
typedef enum {                                  /*!< TIMER30_CR_UPDT                                                           */
  TIMER30_CR_UPDT_AtWriting            = 0,     /*!< AtWriting : Update data to buffer at the time of writing.                 */
  TIMER30_CR_UPDT_AtPeriodMatch        = 1,     /*!< AtPeriodMatch : Update data to buffer at period match.                    */
  TIMER30_CR_UPDT_AtBottom             = 2,     /*!< AtBottom : Update data to buffer at bottom.                               */
} TIMER30_CR_UPDT_Enum;

/* ================================================  TIMER30 CR PMOC [1..3]  ================================================= */
typedef enum {                                  /*!< TIMER30_CR_PMOC                                                           */
  TIMER30_CR_PMOC_Every1PeriodMatch    = 0,     /*!< Every1PeriodMatch : Once every 1 period match.                            */
  TIMER30_CR_PMOC_Every2PeriodMatch    = 1,     /*!< Every2PeriodMatch : Once every 2 period match.                            */
  TIMER30_CR_PMOC_Every3PeriodMatch    = 2,     /*!< Every3PeriodMatch : Once every 3 period match.                            */
  TIMER30_CR_PMOC_Every4PeriodMatch    = 3,     /*!< Every4PeriodMatch : Once every 4 period match.                            */
  TIMER30_CR_PMOC_Every5PeriodMatch    = 4,     /*!< Every5PeriodMatch : Once every 5 period match.                            */
  TIMER30_CR_PMOC_Every6PeriodMatch    = 5,     /*!< Every6PeriodMatch : Once every 6 period match.                            */
  TIMER30_CR_PMOC_Every7PeriodMatch    = 6,     /*!< Every7PeriodMatch : Once every 7 period match.                            */
  TIMER30_CR_PMOC_Every8PeriodMatch    = 7,     /*!< Every8PeriodMatch : Once every 8 period match.                            */
} TIMER30_CR_PMOC_Enum;

/* ===============================================  TIMER30 CR T3nCLR [0..0]  ================================================ */
typedef enum {                                  /*!< TIMER30_CR_T3nCLR                                                         */
  TIMER30_CR_T3nCLR_NoEffect           = 0,     /*!< NoEffect : No effect.                                                     */
  TIMER30_CR_T3nCLR_Clear              = 1,     /*!< Clear : Clear TIMER3n counter and prescaler. (Automatically
                                                     cleared to '0b' after operation)                                          */
} TIMER30_CR_T3nCLR_Enum;

/* ==========================================================  PDR  ========================================================== */
/* ==========================================================  ADR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* ==========================================================  CDR  ========================================================== */
/* =========================================================  CAPDR  ========================================================= */
/* =========================================================  PREDR  ========================================================= */
/* ==========================================================  CNT  ========================================================== */
/* =========================================================  OUTCR  ========================================================= */
/* ==============================================  TIMER30 OUTCR POLB [15..15]  ============================================== */
typedef enum {                                  /*!< TIMER30_OUTCR_POLB                                                        */
  TIMER30_OUTCR_POLB_StartLow          = 0,     /*!< StartLow : Low level start. (The PWM3nxB pins are started with
                                                     low level after counting.)                                                */
  TIMER30_OUTCR_POLB_StartHigh         = 1,     /*!< StartHigh : High level start. (The PWM3nxB pins are started
                                                     with high level after counting)                                           */
} TIMER30_OUTCR_POLB_Enum;

/* ==============================================  TIMER30 OUTCR POLA [14..14]  ============================================== */
typedef enum {                                  /*!< TIMER30_OUTCR_POLA                                                        */
  TIMER30_OUTCR_POLA_StartLow          = 0,     /*!< StartLow : Low level start. (The PWM3nxA pins are started with
                                                     low level after counting.)                                                */
  TIMER30_OUTCR_POLA_StartHigh         = 1,     /*!< StartHigh : High level start. (The PWM3nxA pins are started
                                                     with high level after counting)                                           */
} TIMER30_OUTCR_POLA_Enum;

/* =============================================  TIMER30 OUTCR PABOE [13..13]  ============================================== */
typedef enum {                                  /*!< TIMER30_OUTCR_PABOE                                                       */
  TIMER30_OUTCR_PABOE_Disable          = 0,     /*!< Disable : Disable output.                                                 */
  TIMER30_OUTCR_PABOE_Enable           = 1,     /*!< Enable : Enable output.                                                   */
} TIMER30_OUTCR_PABOE_Enum;

/* =============================================  TIMER30 OUTCR PBBOE [12..12]  ============================================== */
typedef enum {                                  /*!< TIMER30_OUTCR_PBBOE                                                       */
  TIMER30_OUTCR_PBBOE_Disable          = 0,     /*!< Disable : Disable output.                                                 */
  TIMER30_OUTCR_PBBOE_Enable           = 1,     /*!< Enable : Enable output.                                                   */
} TIMER30_OUTCR_PBBOE_Enum;

/* =============================================  TIMER30 OUTCR PCBOE [11..11]  ============================================== */
typedef enum {                                  /*!< TIMER30_OUTCR_PCBOE                                                       */
  TIMER30_OUTCR_PCBOE_Disable          = 0,     /*!< Disable : Disable output.                                                 */
  TIMER30_OUTCR_PCBOE_Enable           = 1,     /*!< Enable : Enable output.                                                   */
} TIMER30_OUTCR_PCBOE_Enum;

/* =============================================  TIMER30 OUTCR PAAOE [10..10]  ============================================== */
typedef enum {                                  /*!< TIMER30_OUTCR_PAAOE                                                       */
  TIMER30_OUTCR_PAAOE_Disable          = 0,     /*!< Disable : Disable output.                                                 */
  TIMER30_OUTCR_PAAOE_Enable           = 1,     /*!< Enable : Enable output.                                                   */
} TIMER30_OUTCR_PAAOE_Enum;

/* ==============================================  TIMER30 OUTCR PBAOE [9..9]  =============================================== */
typedef enum {                                  /*!< TIMER30_OUTCR_PBAOE                                                       */
  TIMER30_OUTCR_PBAOE_Disable          = 0,     /*!< Disable : Disable output.                                                 */
  TIMER30_OUTCR_PBAOE_Enable           = 1,     /*!< Enable : Enable output.                                                   */
} TIMER30_OUTCR_PBAOE_Enum;

/* ==============================================  TIMER30 OUTCR PCAOE [8..8]  =============================================== */
typedef enum {                                  /*!< TIMER30_OUTCR_PCAOE                                                       */
  TIMER30_OUTCR_PCAOE_Disable          = 0,     /*!< Disable : Disable output.                                                 */
  TIMER30_OUTCR_PCAOE_Enable           = 1,     /*!< Enable : Enable output.                                                   */
} TIMER30_OUTCR_PCAOE_Enum;

/* ==============================================  TIMER30 OUTCR LVLAB [6..6]  =============================================== */
typedef enum {                                  /*!< TIMER30_OUTCR_LVLAB                                                       */
  TIMER30_OUTCR_LVLAB_Low              = 0,     /*!< Low : Low level.                                                          */
  TIMER30_OUTCR_LVLAB_High             = 1,     /*!< High : High level.                                                        */
} TIMER30_OUTCR_LVLAB_Enum;

/* ==============================================  TIMER30 OUTCR LVLBB [5..5]  =============================================== */
typedef enum {                                  /*!< TIMER30_OUTCR_LVLBB                                                       */
  TIMER30_OUTCR_LVLBB_Low              = 0,     /*!< Low : Low level.                                                          */
  TIMER30_OUTCR_LVLBB_High             = 1,     /*!< High : High level.                                                        */
} TIMER30_OUTCR_LVLBB_Enum;

/* ==============================================  TIMER30 OUTCR LVLCB [4..4]  =============================================== */
typedef enum {                                  /*!< TIMER30_OUTCR_LVLCB                                                       */
  TIMER30_OUTCR_LVLCB_Low              = 0,     /*!< Low : Low level.                                                          */
  TIMER30_OUTCR_LVLCB_High             = 1,     /*!< High : High level.                                                        */
} TIMER30_OUTCR_LVLCB_Enum;

/* ==============================================  TIMER30 OUTCR LVLAA [2..2]  =============================================== */
typedef enum {                                  /*!< TIMER30_OUTCR_LVLAA                                                       */
  TIMER30_OUTCR_LVLAA_Low              = 0,     /*!< Low : Low level.                                                          */
  TIMER30_OUTCR_LVLAA_High             = 1,     /*!< High : High level.                                                        */
} TIMER30_OUTCR_LVLAA_Enum;

/* ==============================================  TIMER30 OUTCR LVLBA [1..1]  =============================================== */
typedef enum {                                  /*!< TIMER30_OUTCR_LVLBA                                                       */
  TIMER30_OUTCR_LVLBA_Low              = 0,     /*!< Low : Low level.                                                          */
  TIMER30_OUTCR_LVLBA_High             = 1,     /*!< High : High level.                                                        */
} TIMER30_OUTCR_LVLBA_Enum;

/* ==============================================  TIMER30 OUTCR LVLCA [0..0]  =============================================== */
typedef enum {                                  /*!< TIMER30_OUTCR_LVLCA                                                       */
  TIMER30_OUTCR_LVLCA_Low              = 0,     /*!< Low : Low level.                                                          */
  TIMER30_OUTCR_LVLCA_High             = 1,     /*!< High : High level.                                                        */
} TIMER30_OUTCR_LVLCA_Enum;

/* ==========================================================  DLY  ========================================================== */
/* =========================================================  INTCR  ========================================================= */
/* ==============================================  TIMER30 INTCR HIZIEN [6..6]  ============================================== */
typedef enum {                                  /*!< TIMER30_INTCR_HIZIEN                                                      */
  TIMER30_INTCR_HIZIEN_Disable         = 0,     /*!< Disable : Disable TIMER3n output high-impedance interrupt.                */
  TIMER30_INTCR_HIZIEN_Enable          = 1,     /*!< Enable : Enable TIMER3n output high-impedance interrupt.                  */
} TIMER30_INTCR_HIZIEN_Enum;

/* =============================================  TIMER30 INTCR T3nCIEN [5..5]  ============================================== */
typedef enum {                                  /*!< TIMER30_INTCR_T3nCIEN                                                     */
  TIMER30_INTCR_T3nCIEN_Disable        = 0,     /*!< Disable : Disable TIMER3n capture interrupt.                              */
  TIMER30_INTCR_T3nCIEN_Enable         = 1,     /*!< Enable : Enable TIMER3n capture interrupt.                                */
} TIMER30_INTCR_T3nCIEN_Enum;

/* =============================================  TIMER30 INTCR T3nBTIEN [4..4]  ============================================= */
typedef enum {                                  /*!< TIMER30_INTCR_T3nBTIEN                                                    */
  TIMER30_INTCR_T3nBTIEN_Disable       = 0,     /*!< Disable : Disable TIMER3n bottom interrupt.                               */
  TIMER30_INTCR_T3nBTIEN_Enable        = 1,     /*!< Enable : Enable TIMER3n bottom interrupt.                                 */
} TIMER30_INTCR_T3nBTIEN_Enum;

/* =============================================  TIMER30 INTCR T3nPMIEN [3..3]  ============================================= */
typedef enum {                                  /*!< TIMER30_INTCR_T3nPMIEN                                                    */
  TIMER30_INTCR_T3nPMIEN_Disable       = 0,     /*!< Disable : Disable TIMER3n period interrupt.                               */
  TIMER30_INTCR_T3nPMIEN_Enable        = 1,     /*!< Enable : Enable TIMER3n period interrupt.                                 */
} TIMER30_INTCR_T3nPMIEN_Enum;

/* =============================================  TIMER30 INTCR T3nAMIEN [2..2]  ============================================= */
typedef enum {                                  /*!< TIMER30_INTCR_T3nAMIEN                                                    */
  TIMER30_INTCR_T3nAMIEN_Disable       = 0,     /*!< Disable : Disable TIMER3n A-ch match interrupt.                           */
  TIMER30_INTCR_T3nAMIEN_Enable        = 1,     /*!< Enable : Enable TIMER3n A-ch match interrupt.                             */
} TIMER30_INTCR_T3nAMIEN_Enum;

/* =============================================  TIMER30 INTCR T3nBMIEN [1..1]  ============================================= */
typedef enum {                                  /*!< TIMER30_INTCR_T3nBMIEN                                                    */
  TIMER30_INTCR_T3nBMIEN_Disable       = 0,     /*!< Disable : Disable TIMER3n B-ch match interrupt.                           */
  TIMER30_INTCR_T3nBMIEN_Enable        = 1,     /*!< Enable : Enable TIMER3n B-ch match interrupt.                             */
} TIMER30_INTCR_T3nBMIEN_Enum;

/* =============================================  TIMER30 INTCR T3nCMIEN [0..0]  ============================================= */
typedef enum {                                  /*!< TIMER30_INTCR_T3nCMIEN                                                    */
  TIMER30_INTCR_T3nCMIEN_Disable       = 0,     /*!< Disable : Disable TIMER3n C-ch match interrupt.                           */
  TIMER30_INTCR_T3nCMIEN_Enable        = 1,     /*!< Enable : Enable TIMER3n C-ch match interrupt.                             */
} TIMER30_INTCR_T3nCMIEN_Enum;

/* ========================================================  INTFLAG  ======================================================== */
/* ============================================  TIMER30 INTFLAG HIZIFLAG [6..6]  ============================================ */
typedef enum {                                  /*!< TIMER30_INTFLAG_HIZIFLAG                                                  */
  TIMER30_INTFLAG_HIZIFLAG_NoRequest   = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER30_INTFLAG_HIZIFLAG_Request     = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER30_INTFLAG_HIZIFLAG_Enum;

/* ===========================================  TIMER30 INTFLAG T3nCIFLAG [5..5]  ============================================ */
typedef enum {                                  /*!< TIMER30_INTFLAG_T3nCIFLAG                                                 */
  TIMER30_INTFLAG_T3nCIFLAG_NoRequest  = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER30_INTFLAG_T3nCIFLAG_Request    = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER30_INTFLAG_T3nCIFLAG_Enum;

/* ===========================================  TIMER30 INTFLAG T3nBTIFLAG [4..4]  =========================================== */
typedef enum {                                  /*!< TIMER30_INTFLAG_T3nBTIFLAG                                                */
  TIMER30_INTFLAG_T3nBTIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER30_INTFLAG_T3nBTIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER30_INTFLAG_T3nBTIFLAG_Enum;

/* ===========================================  TIMER30 INTFLAG T3nPMIFLAG [3..3]  =========================================== */
typedef enum {                                  /*!< TIMER30_INTFLAG_T3nPMIFLAG                                                */
  TIMER30_INTFLAG_T3nPMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER30_INTFLAG_T3nPMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER30_INTFLAG_T3nPMIFLAG_Enum;

/* ===========================================  TIMER30 INTFLAG T3nAMIFLAG [2..2]  =========================================== */
typedef enum {                                  /*!< TIMER30_INTFLAG_T3nAMIFLAG                                                */
  TIMER30_INTFLAG_T3nAMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER30_INTFLAG_T3nAMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER30_INTFLAG_T3nAMIFLAG_Enum;

/* ===========================================  TIMER30 INTFLAG T3nBMIFLAG [1..1]  =========================================== */
typedef enum {                                  /*!< TIMER30_INTFLAG_T3nBMIFLAG                                                */
  TIMER30_INTFLAG_T3nBMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER30_INTFLAG_T3nBMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER30_INTFLAG_T3nBMIFLAG_Enum;

/* ===========================================  TIMER30 INTFLAG T3nCMIFLAG [0..0]  =========================================== */
typedef enum {                                  /*!< TIMER30_INTFLAG_T3nCMIFLAG                                                */
  TIMER30_INTFLAG_T3nCMIFLAG_NoRequest = 0,     /*!< NoRequest : No request occurred.                                          */
  TIMER30_INTFLAG_T3nCMIFLAG_Request   = 1,     /*!< Request : Request occurred. The bit will be cleared to '0' when
                                                     '1' is written to this bit.                                               */
} TIMER30_INTFLAG_T3nCMIFLAG_Enum;

/* =========================================================  HIZCR  ========================================================= */
/* ==============================================  TIMER30 HIZCR HIZEN [7..7]  =============================================== */
typedef enum {                                  /*!< TIMER30_HIZCR_HIZEN                                                       */
  TIMER30_HIZCR_HIZEN_Disable          = 0,     /*!< Disable : Disable to control the output high-impedance.                   */
  TIMER30_HIZCR_HIZEN_Enable           = 1,     /*!< Enable : Enable to control the output high-impedance.                     */
} TIMER30_HIZCR_HIZEN_Enum;

/* ==============================================  TIMER30 HIZCR HIZSW [4..4]  =============================================== */
typedef enum {                                  /*!< TIMER30_HIZCR_HIZSW                                                       */
  TIMER30_HIZCR_HIZSW_NoEffect         = 0,     /*!< NoEffect : No effect.                                                     */
  TIMER30_HIZCR_HIZSW_HiZ              = 1,     /*!< HiZ : PWM3nxA/PWM3nxB pins go into high impedance. (Automatically
                                                     cleared to '0' after operation)                                           */
} TIMER30_HIZCR_HIZSW_Enum;

/* ==============================================  TIMER30 HIZCR HEDGE [2..2]  =============================================== */
typedef enum {                                  /*!< TIMER30_HIZCR_HEDGE                                                       */
  TIMER30_HIZCR_HEDGE_FallingEdge      = 0,     /*!< FallingEdge : Falling edge of the BLNK pin.                               */
  TIMER30_HIZCR_HEDGE_RisingEdge       = 1,     /*!< RisingEdge : Rising edge of the BLNK pin.                                 */
} TIMER30_HIZCR_HEDGE_Enum;

/* ==============================================  TIMER30 HIZCR HIZSTA [1..1]  ============================================== */
typedef enum {                                  /*!< TIMER30_HIZCR_HIZSTA                                                      */
  TIMER30_HIZCR_HIZSTA_NoHiZ           = 0,     /*!< NoHiZ : Indicates that the pins are not under a Hi-Z state.               */
  TIMER30_HIZCR_HIZSTA_HiZ             = 1,     /*!< HiZ : Indicates that the pins are under a Hi-Z state.                     */
} TIMER30_HIZCR_HIZSTA_Enum;

/* ==============================================  TIMER30 HIZCR HIZCLR [0..0]  ============================================== */
typedef enum {                                  /*!< TIMER30_HIZCR_HIZCLR                                                      */
  TIMER30_HIZCR_HIZCLR_NoEffect        = 0,     /*!< NoEffect : No effect.                                                     */
  TIMER30_HIZCR_HIZCLR_Clear           = 1,     /*!< Clear : Clear high-impedance output. (The PWM3nxA/PWM3nxB pins
                                                     returns as output and this bit is automatically cleared
                                                     to '0' after operation.)                                                  */
} TIMER30_HIZCR_HIZCLR_Enum;

/* =========================================================  ADTCR  ========================================================= */
/* =============================================  TIMER30 ADTCR T3nBTTG [4..4]  ============================================== */
typedef enum {                                  /*!< TIMER30_ADTCR_T3nBTTG                                                     */
  TIMER30_ADTCR_T3nBTTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by bottom.                 */
  TIMER30_ADTCR_T3nBTTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by bottom.                   */
} TIMER30_ADTCR_T3nBTTG_Enum;

/* =============================================  TIMER30 ADTCR T3nPMTG [3..3]  ============================================== */
typedef enum {                                  /*!< TIMER30_ADTCR_T3nPMTG                                                     */
  TIMER30_ADTCR_T3nPMTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by period match.           */
  TIMER30_ADTCR_T3nPMTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by period match.             */
} TIMER30_ADTCR_T3nPMTG_Enum;

/* =============================================  TIMER30 ADTCR T3nAMTG [2..2]  ============================================== */
typedef enum {                                  /*!< TIMER30_ADTCR_T3nAMTG                                                     */
  TIMER30_ADTCR_T3nAMTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by A-ch match.             */
  TIMER30_ADTCR_T3nAMTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by A-ch match.               */
} TIMER30_ADTCR_T3nAMTG_Enum;

/* =============================================  TIMER30 ADTCR T3nBMTG [1..1]  ============================================== */
typedef enum {                                  /*!< TIMER30_ADTCR_T3nBMTG                                                     */
  TIMER30_ADTCR_T3nBMTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by B-ch match.             */
  TIMER30_ADTCR_T3nBMTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by B-ch match.               */
} TIMER30_ADTCR_T3nBMTG_Enum;

/* =============================================  TIMER30 ADTCR T3nCMTG [0..0]  ============================================== */
typedef enum {                                  /*!< TIMER30_ADTCR_T3nCMTG                                                     */
  TIMER30_ADTCR_T3nCMTG_Disable        = 0,     /*!< Disable : Disable ADC trigger signal generator by C-ch match.             */
  TIMER30_ADTCR_T3nCMTG_Enable         = 1,     /*!< Enable : Enable ADC trigger signal generator by C-ch match.               */
} TIMER30_ADTCR_T3nCMTG_Enum;

/* =========================================================  ADTDR  ========================================================= */
/* =======================================================  T30_OUTCR  ======================================================= */
/* ===========================================  TIMER30 T30_OUTCR WTIDKY [16..31]  =========================================== */
typedef enum {                                  /*!< TIMER30_T30_OUTCR_WTIDKY                                                  */
  TIMER30_T30_OUTCR_WTIDKY_Value       = 57452, /*!< Value : Key Value (0xe06c)                                                */
} TIMER30_T30_OUTCR_WTIDKY_Enum;



/* =========================================================================================================================== */
/* ================                                            ADC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* =================================================  ADC CR ADCEN [15..15]  ================================================= */
typedef enum {                                  /*!< ADC_CR_ADCEN                                                              */
  ADC_CR_ADCEN_Disable                 = 0,     /*!< Disable : Disable ADC module operation.                                   */
  ADC_CR_ADCEN_Enable                  = 1,     /*!< Enable : Enable ADC module operation.                                     */
} ADC_CR_ADCEN_Enum;

/* =================================================  ADC CR TRIG [11..13]  ================================================== */
typedef enum {                                  /*!< ADC_CR_TRIG                                                               */
  ADC_CR_TRIG_ADST                     = 0,     /*!< ADST : Select ADST.                                                       */
  ADC_CR_TRIG_TIMER10                  = 1,     /*!< TIMER10 : Select TIMER10 A-Match Signal.                                  */
  ADC_CR_TRIG_TIMER11                  = 2,     /*!< TIMER11 : Select TIMER11 A-Match Signal.                                  */
  ADC_CR_TRIG_TIMER12                  = 3,     /*!< TIMER12 : Select TIMER12 A-Match Signal.                                  */
  ADC_CR_TRIG_TIMER30                  = 4,     /*!< TIMER30 : Select ADC Trigger Signal from TIMER30.                         */
} ADC_CR_TRIG_Enum;

/* ================================================  ADC CR REFSEL [10..10]  ================================================= */
typedef enum {                                  /*!< ADC_CR_REFSEL                                                             */
  ADC_CR_REFSEL_Vdd                    = 0,     /*!< Vdd : Select analog power (VDD).                                          */
  ADC_CR_REFSEL_AVref                  = 1,     /*!< AVref : Select external reference (AVREF).                                */
} ADC_CR_REFSEL_Enum;

/* ==================================================  ADC CR ADST [8..8]  =================================================== */
typedef enum {                                  /*!< ADC_CR_ADST                                                               */
  ADC_CR_ADST_NoEffect                 = 0,     /*!< NoEffect : No effect.                                                     */
  ADC_CR_ADST_Start                    = 1,     /*!< Start : Trigger signal generation for conversion start.                   */
} ADC_CR_ADST_Enum;

/* =================================================  ADC CR ADCIEN [5..5]  ================================================== */
typedef enum {                                  /*!< ADC_CR_ADCIEN                                                             */
  ADC_CR_ADCIEN_Disable                = 0,     /*!< Disable : Disable ADC interrupt.                                          */
  ADC_CR_ADCIEN_Enable                 = 1,     /*!< Enable : Enable ADC interrupt.                                            */
} ADC_CR_ADCIEN_Enum;

/* ================================================  ADC CR ADCIFLAG [4..4]  ================================================= */
typedef enum {                                  /*!< ADC_CR_ADCIFLAG                                                           */
  ADC_CR_ADCIFLAG_NoRequest            = 0,     /*!< NoRequest : No request occurred.                                          */
  ADC_CR_ADCIFLAG_Request              = 1,     /*!< Request : Request occurred.                                               */
} ADC_CR_ADCIFLAG_Enum;

/* ==================================================  ADC CR ADSEL [0..3]  ================================================== */
typedef enum {                                  /*!< ADC_CR_ADSEL                                                              */
  ADC_CR_ADSEL_AN0                     = 0,     /*!< AN0 : Select AN0.                                                         */
  ADC_CR_ADSEL_AN1                     = 1,     /*!< AN1 : Select AN1.                                                         */
  ADC_CR_ADSEL_AN2                     = 2,     /*!< AN2 : Select AN2.                                                         */
  ADC_CR_ADSEL_AN3                     = 3,     /*!< AN3 : Select AN3.                                                         */
  ADC_CR_ADSEL_AN4                     = 4,     /*!< AN4 : Select AN4.                                                         */
  ADC_CR_ADSEL_AN5                     = 5,     /*!< AN5 : Select AN5.                                                         */
  ADC_CR_ADSEL_AN6                     = 6,     /*!< AN6 : Select AN6.                                                         */
  ADC_CR_ADSEL_AN7                     = 7,     /*!< AN7 : Select AN7.                                                         */
  ADC_CR_ADSEL_AN8                     = 8,     /*!< AN8 : Select AN8.                                                         */
  ADC_CR_ADSEL_AN9                     = 9,     /*!< AN9 : Select AN9.                                                         */
  ADC_CR_ADSEL_AN10                    = 10,    /*!< AN10 : Select AN10.                                                       */
  ADC_CR_ADSEL_AN11                    = 11,    /*!< AN11 : Select AN11                                                        */
  ADC_CR_ADSEL_AN12                    = 12,    /*!< AN12 : Select AN12                                                        */
  ADC_CR_ADSEL_AN13                    = 13,    /*!< AN13 : Select AN13                                                        */
} ADC_CR_ADSEL_Enum;

/* ==========================================================  DR  =========================================================== */
/* =========================================================  PREDR  ========================================================= */


/* =========================================================================================================================== */
/* ================                                          USART1n                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
/* ==============================================  USART1n CR1 USTnMS [14..15]  ============================================== */
typedef enum {                                  /*!< USART1n_CR1_USTnMS                                                        */
  USART1n_CR1_USTnMS_Async             = 0,     /*!< Async : Asynchronous Mode (UART)                                          */
  USART1n_CR1_USTnMS_Sync              = 1,     /*!< Sync : Synchronous Mode (USRT)                                            */
  USART1n_CR1_USTnMS_SPI               = 3,     /*!< SPI : SPI Mode                                                            */
} USART1n_CR1_USTnMS_Enum;

/* ==============================================  USART1n CR1 USTnP [12..13]  =============================================== */
typedef enum {                                  /*!< USART1n_CR1_USTnP                                                         */
  USART1n_CR1_USTnP_No                 = 0,     /*!< No : No Parity                                                            */
  USART1n_CR1_USTnP_Even               = 2,     /*!< Even : Even Parity                                                        */
  USART1n_CR1_USTnP_Odd                = 3,     /*!< Odd : Odd Parity                                                          */
} USART1n_CR1_USTnP_Enum;

/* ===============================================  USART1n CR1 USTnS [9..11]  =============================================== */
typedef enum {                                  /*!< USART1n_CR1_USTnS                                                         */
  USART1n_CR1_USTnS_5bit               = 0,     /*!< 5bit : 5 bit                                                              */
  USART1n_CR1_USTnS_6bit               = 1,     /*!< 6bit : 6 bit                                                              */
  USART1n_CR1_USTnS_7bit               = 2,     /*!< 7bit : 7 bit                                                              */
  USART1n_CR1_USTnS_8bit               = 3,     /*!< 8bit : 8 bit                                                              */
  USART1n_CR1_USTnS_9bit               = 7,     /*!< 9bit : 9 bit                                                              */
} USART1n_CR1_USTnS_Enum;

/* ================================================  USART1n CR1 ORDn [8..8]  ================================================ */
typedef enum {                                  /*!< USART1n_CR1_ORDn                                                          */
  USART1n_CR1_ORDn_lsbFirst            = 0,     /*!< lsbFirst : LSB First                                                      */
  USART1n_CR1_ORDn_msbFirst            = 1,     /*!< msbFirst : MSB First                                                      */
} USART1n_CR1_ORDn_Enum;

/* ===============================================  USART1n CR1 CPOLn [7..7]  ================================================ */
typedef enum {                                  /*!< USART1n_CR1_CPOLn                                                         */
  USART1n_CR1_CPOLn_IdleLow            = 0,     /*!< IdleLow : TXD Change @Rising Edge, RXD Change @Falling Edge               */
  USART1n_CR1_CPOLn_IdleHigh           = 1,     /*!< IdleHigh : TXD Change @Falling Edge, RXD Change @Rising Edge              */
} USART1n_CR1_CPOLn_Enum;

/* ===============================================  USART1n CR1 CPHAn [6..6]  ================================================ */
typedef enum {                                  /*!< USART1n_CR1_CPHAn                                                         */
  USART1n_CR1_CPHAn_StartIdle          = 0,     /*!< StartIdle : Start with idle state.                                        */
  USART1n_CR1_CPHAn_StartInverted      = 1,     /*!< StartInverted : Start with inverted idle state.                           */
} USART1n_CR1_CPHAn_Enum;

/* ==========================================================  CR2  ========================================================== */
/* ==========================================================  ST  =========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* ==========================================================  DR  =========================================================== */


/* =========================================================================================================================== */
/* ================                                          USART10                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
/* ==============================================  USART10 CR1 USTnMS [14..15]  ============================================== */
typedef enum {                                  /*!< USART10_CR1_USTnMS                                                        */
  USART10_CR1_USTnMS_Async             = 0,     /*!< Async : Asynchronous Mode (UART)                                          */
  USART10_CR1_USTnMS_Sync              = 1,     /*!< Sync : Synchronous Mode (USRT)                                            */
  USART10_CR1_USTnMS_SPI               = 3,     /*!< SPI : SPI Mode                                                            */
} USART10_CR1_USTnMS_Enum;

/* ==============================================  USART10 CR1 USTnP [12..13]  =============================================== */
typedef enum {                                  /*!< USART10_CR1_USTnP                                                         */
  USART10_CR1_USTnP_No                 = 0,     /*!< No : No Parity                                                            */
  USART10_CR1_USTnP_Even               = 2,     /*!< Even : Even Parity                                                        */
  USART10_CR1_USTnP_Odd                = 3,     /*!< Odd : Odd Parity                                                          */
} USART10_CR1_USTnP_Enum;

/* ===============================================  USART10 CR1 USTnS [9..11]  =============================================== */
typedef enum {                                  /*!< USART10_CR1_USTnS                                                         */
  USART10_CR1_USTnS_5bit               = 0,     /*!< 5bit : 5 bit                                                              */
  USART10_CR1_USTnS_6bit               = 1,     /*!< 6bit : 6 bit                                                              */
  USART10_CR1_USTnS_7bit               = 2,     /*!< 7bit : 7 bit                                                              */
  USART10_CR1_USTnS_8bit               = 3,     /*!< 8bit : 8 bit                                                              */
  USART10_CR1_USTnS_9bit               = 7,     /*!< 9bit : 9 bit                                                              */
} USART10_CR1_USTnS_Enum;

/* ================================================  USART10 CR1 ORDn [8..8]  ================================================ */
typedef enum {                                  /*!< USART10_CR1_ORDn                                                          */
  USART10_CR1_ORDn_lsbFirst            = 0,     /*!< lsbFirst : LSB First                                                      */
  USART10_CR1_ORDn_msbFirst            = 1,     /*!< msbFirst : MSB First                                                      */
} USART10_CR1_ORDn_Enum;

/* ===============================================  USART10 CR1 CPOLn [7..7]  ================================================ */
typedef enum {                                  /*!< USART10_CR1_CPOLn                                                         */
  USART10_CR1_CPOLn_IdleLow            = 0,     /*!< IdleLow : TXD Change @Rising Edge, RXD Change @Falling Edge               */
  USART10_CR1_CPOLn_IdleHigh           = 1,     /*!< IdleHigh : TXD Change @Falling Edge, RXD Change @Rising Edge              */
} USART10_CR1_CPOLn_Enum;

/* ===============================================  USART10 CR1 CPHAn [6..6]  ================================================ */
typedef enum {                                  /*!< USART10_CR1_CPHAn                                                         */
  USART10_CR1_CPHAn_StartIdle          = 0,     /*!< StartIdle : Start with idle state.                                        */
  USART10_CR1_CPHAn_StartInverted      = 1,     /*!< StartInverted : Start with inverted idle state.                           */
} USART10_CR1_CPHAn_Enum;

/* ==========================================================  CR2  ========================================================== */
/* ==========================================================  ST  =========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* ==========================================================  DR  =========================================================== */


/* =========================================================================================================================== */
/* ================                                          USART11                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
/* ==============================================  USART11 CR1 USTnMS [14..15]  ============================================== */
typedef enum {                                  /*!< USART11_CR1_USTnMS                                                        */
  USART11_CR1_USTnMS_Async             = 0,     /*!< Async : Asynchronous Mode (UART)                                          */
  USART11_CR1_USTnMS_Sync              = 1,     /*!< Sync : Synchronous Mode (USRT)                                            */
  USART11_CR1_USTnMS_SPI               = 3,     /*!< SPI : SPI Mode                                                            */
} USART11_CR1_USTnMS_Enum;

/* ==============================================  USART11 CR1 USTnP [12..13]  =============================================== */
typedef enum {                                  /*!< USART11_CR1_USTnP                                                         */
  USART11_CR1_USTnP_No                 = 0,     /*!< No : No Parity                                                            */
  USART11_CR1_USTnP_Even               = 2,     /*!< Even : Even Parity                                                        */
  USART11_CR1_USTnP_Odd                = 3,     /*!< Odd : Odd Parity                                                          */
} USART11_CR1_USTnP_Enum;

/* ===============================================  USART11 CR1 USTnS [9..11]  =============================================== */
typedef enum {                                  /*!< USART11_CR1_USTnS                                                         */
  USART11_CR1_USTnS_5bit               = 0,     /*!< 5bit : 5 bit                                                              */
  USART11_CR1_USTnS_6bit               = 1,     /*!< 6bit : 6 bit                                                              */
  USART11_CR1_USTnS_7bit               = 2,     /*!< 7bit : 7 bit                                                              */
  USART11_CR1_USTnS_8bit               = 3,     /*!< 8bit : 8 bit                                                              */
  USART11_CR1_USTnS_9bit               = 7,     /*!< 9bit : 9 bit                                                              */
} USART11_CR1_USTnS_Enum;

/* ================================================  USART11 CR1 ORDn [8..8]  ================================================ */
typedef enum {                                  /*!< USART11_CR1_ORDn                                                          */
  USART11_CR1_ORDn_lsbFirst            = 0,     /*!< lsbFirst : LSB First                                                      */
  USART11_CR1_ORDn_msbFirst            = 1,     /*!< msbFirst : MSB First                                                      */
} USART11_CR1_ORDn_Enum;

/* ===============================================  USART11 CR1 CPOLn [7..7]  ================================================ */
typedef enum {                                  /*!< USART11_CR1_CPOLn                                                         */
  USART11_CR1_CPOLn_IdleLow            = 0,     /*!< IdleLow : TXD Change @Rising Edge, RXD Change @Falling Edge               */
  USART11_CR1_CPOLn_IdleHigh           = 1,     /*!< IdleHigh : TXD Change @Falling Edge, RXD Change @Rising Edge              */
} USART11_CR1_CPOLn_Enum;

/* ===============================================  USART11 CR1 CPHAn [6..6]  ================================================ */
typedef enum {                                  /*!< USART11_CR1_CPHAn                                                         */
  USART11_CR1_CPHAn_StartIdle          = 0,     /*!< StartIdle : Start with idle state.                                        */
  USART11_CR1_CPHAn_StartInverted      = 1,     /*!< StartInverted : Start with inverted idle state.                           */
} USART11_CR1_CPHAn_Enum;

/* ==========================================================  CR2  ========================================================== */
/* ==========================================================  ST  =========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* ==========================================================  DR  =========================================================== */


/* =========================================================================================================================== */
/* ================                                          USART12                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
/* ==============================================  USART12 CR1 USTnMS [14..15]  ============================================== */
typedef enum {                                  /*!< USART12_CR1_USTnMS                                                        */
  USART12_CR1_USTnMS_Async             = 0,     /*!< Async : Asynchronous Mode (UART)                                          */
  USART12_CR1_USTnMS_Sync              = 1,     /*!< Sync : Synchronous Mode (USRT)                                            */
  USART12_CR1_USTnMS_SPI               = 3,     /*!< SPI : SPI Mode                                                            */
} USART12_CR1_USTnMS_Enum;

/* ==============================================  USART12 CR1 USTnP [12..13]  =============================================== */
typedef enum {                                  /*!< USART12_CR1_USTnP                                                         */
  USART12_CR1_USTnP_No                 = 0,     /*!< No : No Parity                                                            */
  USART12_CR1_USTnP_Even               = 2,     /*!< Even : Even Parity                                                        */
  USART12_CR1_USTnP_Odd                = 3,     /*!< Odd : Odd Parity                                                          */
} USART12_CR1_USTnP_Enum;

/* ===============================================  USART12 CR1 USTnS [9..11]  =============================================== */
typedef enum {                                  /*!< USART12_CR1_USTnS                                                         */
  USART12_CR1_USTnS_5bit               = 0,     /*!< 5bit : 5 bit                                                              */
  USART12_CR1_USTnS_6bit               = 1,     /*!< 6bit : 6 bit                                                              */
  USART12_CR1_USTnS_7bit               = 2,     /*!< 7bit : 7 bit                                                              */
  USART12_CR1_USTnS_8bit               = 3,     /*!< 8bit : 8 bit                                                              */
  USART12_CR1_USTnS_9bit               = 7,     /*!< 9bit : 9 bit                                                              */
} USART12_CR1_USTnS_Enum;

/* ================================================  USART12 CR1 ORDn [8..8]  ================================================ */
typedef enum {                                  /*!< USART12_CR1_ORDn                                                          */
  USART12_CR1_ORDn_lsbFirst            = 0,     /*!< lsbFirst : LSB First                                                      */
  USART12_CR1_ORDn_msbFirst            = 1,     /*!< msbFirst : MSB First                                                      */
} USART12_CR1_ORDn_Enum;

/* ===============================================  USART12 CR1 CPOLn [7..7]  ================================================ */
typedef enum {                                  /*!< USART12_CR1_CPOLn                                                         */
  USART12_CR1_CPOLn_IdleLow            = 0,     /*!< IdleLow : TXD Change @Rising Edge, RXD Change @Falling Edge               */
  USART12_CR1_CPOLn_IdleHigh           = 1,     /*!< IdleHigh : TXD Change @Falling Edge, RXD Change @Rising Edge              */
} USART12_CR1_CPOLn_Enum;

/* ===============================================  USART12 CR1 CPHAn [6..6]  ================================================ */
typedef enum {                                  /*!< USART12_CR1_CPHAn                                                         */
  USART12_CR1_CPHAn_StartIdle          = 0,     /*!< StartIdle : Start with idle state.                                        */
  USART12_CR1_CPHAn_StartInverted      = 1,     /*!< StartInverted : Start with inverted idle state.                           */
} USART12_CR1_CPHAn_Enum;

/* ==========================================================  CR2  ========================================================== */
/* ==========================================================  ST  =========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* ==========================================================  DR  =========================================================== */


/* =========================================================================================================================== */
/* ================                                          USART13                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR1  ========================================================== */
/* ==============================================  USART13 CR1 USTnMS [14..15]  ============================================== */
typedef enum {                                  /*!< USART13_CR1_USTnMS                                                        */
  USART13_CR1_USTnMS_Async             = 0,     /*!< Async : Asynchronous Mode (UART)                                          */
  USART13_CR1_USTnMS_Sync              = 1,     /*!< Sync : Synchronous Mode (USRT)                                            */
  USART13_CR1_USTnMS_SPI               = 3,     /*!< SPI : SPI Mode                                                            */
} USART13_CR1_USTnMS_Enum;

/* ==============================================  USART13 CR1 USTnP [12..13]  =============================================== */
typedef enum {                                  /*!< USART13_CR1_USTnP                                                         */
  USART13_CR1_USTnP_No                 = 0,     /*!< No : No Parity                                                            */
  USART13_CR1_USTnP_Even               = 2,     /*!< Even : Even Parity                                                        */
  USART13_CR1_USTnP_Odd                = 3,     /*!< Odd : Odd Parity                                                          */
} USART13_CR1_USTnP_Enum;

/* ===============================================  USART13 CR1 USTnS [9..11]  =============================================== */
typedef enum {                                  /*!< USART13_CR1_USTnS                                                         */
  USART13_CR1_USTnS_5bit               = 0,     /*!< 5bit : 5 bit                                                              */
  USART13_CR1_USTnS_6bit               = 1,     /*!< 6bit : 6 bit                                                              */
  USART13_CR1_USTnS_7bit               = 2,     /*!< 7bit : 7 bit                                                              */
  USART13_CR1_USTnS_8bit               = 3,     /*!< 8bit : 8 bit                                                              */
  USART13_CR1_USTnS_9bit               = 7,     /*!< 9bit : 9 bit                                                              */
} USART13_CR1_USTnS_Enum;

/* ================================================  USART13 CR1 ORDn [8..8]  ================================================ */
typedef enum {                                  /*!< USART13_CR1_ORDn                                                          */
  USART13_CR1_ORDn_lsbFirst            = 0,     /*!< lsbFirst : LSB First                                                      */
  USART13_CR1_ORDn_msbFirst            = 1,     /*!< msbFirst : MSB First                                                      */
} USART13_CR1_ORDn_Enum;

/* ===============================================  USART13 CR1 CPOLn [7..7]  ================================================ */
typedef enum {                                  /*!< USART13_CR1_CPOLn                                                         */
  USART13_CR1_CPOLn_IdleLow            = 0,     /*!< IdleLow : TXD Change @Rising Edge, RXD Change @Falling Edge               */
  USART13_CR1_CPOLn_IdleHigh           = 1,     /*!< IdleHigh : TXD Change @Falling Edge, RXD Change @Rising Edge              */
} USART13_CR1_CPOLn_Enum;

/* ===============================================  USART13 CR1 CPHAn [6..6]  ================================================ */
typedef enum {                                  /*!< USART13_CR1_CPHAn                                                         */
  USART13_CR1_CPHAn_StartIdle          = 0,     /*!< StartIdle : Start with idle state.                                        */
  USART13_CR1_CPHAn_StartInverted      = 1,     /*!< StartInverted : Start with inverted idle state.                           */
} USART13_CR1_CPHAn_Enum;

/* ==========================================================  CR2  ========================================================== */
/* ==========================================================  ST  =========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* ==========================================================  DR  =========================================================== */


/* =========================================================================================================================== */
/* ================                                           UARTn                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  RBR  ========================================================== */
/* ==========================================================  THR  ========================================================== */
/* ==========================================================  IER  ========================================================== */
/* ==========================================================  IIR  ========================================================== */
/* ==========================================================  LCR  ========================================================== */
/* ==========================================================  DCR  ========================================================== */
/* ==========================================================  LSR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* ==========================================================  BFR  ========================================================== */
/* =================================================  UARTn BFR BFR [0..7]  ================================================== */
typedef enum {                                  /*!< UARTn_BFR_BFR                                                             */
  UARTn_BFR_BFR_Disable                = 0,     /*!< Disable : Disable fraction counter.                                       */
} UARTn_BFR_BFR_Enum;

/* =========================================================  IDTR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           UART0                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  RBR  ========================================================== */
/* ==========================================================  THR  ========================================================== */
/* ==========================================================  IER  ========================================================== */
/* ==========================================================  IIR  ========================================================== */
/* ==========================================================  LCR  ========================================================== */
/* ==========================================================  DCR  ========================================================== */
/* ==========================================================  LSR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* ==========================================================  BFR  ========================================================== */
/* =================================================  UART0 BFR BFR [0..7]  ================================================== */
typedef enum {                                  /*!< UART0_BFR_BFR                                                             */
  UART0_BFR_BFR_Disable                = 0,     /*!< Disable : Disable fraction counter.                                       */
} UART0_BFR_BFR_Enum;

/* =========================================================  IDTR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           UART1                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  RBR  ========================================================== */
/* ==========================================================  THR  ========================================================== */
/* ==========================================================  IER  ========================================================== */
/* ==========================================================  IIR  ========================================================== */
/* ==========================================================  LCR  ========================================================== */
/* ==========================================================  DCR  ========================================================== */
/* ==========================================================  LSR  ========================================================== */
/* ==========================================================  BDR  ========================================================== */
/* ==========================================================  BFR  ========================================================== */
/* =================================================  UART1 BFR BFR [0..7]  ================================================== */
typedef enum {                                  /*!< UART1_BFR_BFR                                                             */
  UART1_BFR_BFR_Disable                = 0,     /*!< Disable : Disable fraction counter.                                       */
} UART1_BFR_BFR_Enum;

/* =========================================================  IDTR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           I2Cn                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==========================================================  ST  =========================================================== */
/* =========================================================  SAR1  ========================================================== */
/* =========================================================  SAR2  ========================================================== */
/* ==========================================================  DR  =========================================================== */
/* =========================================================  SDHR  ========================================================== */
/* =========================================================  SCLR  ========================================================== */
/* =========================================================  SCHR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           I2C0                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==========================================================  ST  =========================================================== */
/* =========================================================  SAR1  ========================================================== */
/* =========================================================  SAR2  ========================================================== */
/* ==========================================================  DR  =========================================================== */
/* =========================================================  SDHR  ========================================================== */
/* =========================================================  SCLR  ========================================================== */
/* =========================================================  SCHR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           I2C1                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==========================================================  ST  =========================================================== */
/* =========================================================  SAR1  ========================================================== */
/* =========================================================  SAR2  ========================================================== */
/* ==========================================================  DR  =========================================================== */
/* =========================================================  SDHR  ========================================================== */
/* =========================================================  SCLR  ========================================================== */
/* =========================================================  SCHR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           I2C2                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==========================================================  ST  =========================================================== */
/* =========================================================  SAR1  ========================================================== */
/* =========================================================  SAR2  ========================================================== */
/* ==========================================================  DR  =========================================================== */
/* =========================================================  SDHR  ========================================================== */
/* =========================================================  SCLR  ========================================================== */
/* =========================================================  SCHR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            LCD                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==================================================  LCD CR IRSEL [6..7]  ================================================== */
typedef enum {                                  /*!< LCD_CR_IRSEL                                                              */
  LCD_CR_IRSEL_RLCD3                   = 0,     /*!< RLCD3 : RLCD3: 105/105/80[kohm] @(1/2)/(1/3)/(1/4) bias                   */
  LCD_CR_IRSEL_RLCD1                   = 1,     /*!< RLCD1 : RLCD1: 10/10/10[kohm] @(1/2)/(1/3)/(1/4) bias                     */
  LCD_CR_IRSEL_RLCD2                   = 2,     /*!< RLCD2 : RLCD2: 66/66/50[kohm] @(1/2)/(1/3)/(1/4) bias                     */
  LCD_CR_IRSEL_RLCD4                   = 3,     /*!< RLCD4 : RLCD4: 320/320/240[kohm] @(1/2)/(1/3)/(1/4) bias                  */
} LCD_CR_IRSEL_Enum;

/* ===================================================  LCD CR DBS [3..5]  =================================================== */
typedef enum {                                  /*!< LCD_CR_DBS                                                                */
  LCD_CR_DBS_Duty8Bias4                = 0,     /*!< Duty8Bias4 : 1/8 duty, 1/4 bias                                           */
  LCD_CR_DBS_Duty6Bias4                = 1,     /*!< Duty6Bias4 : 1/6 duty, 1/4 bias                                           */
  LCD_CR_DBS_Duty5Bias3                = 2,     /*!< Duty5Bias3 : 1/5 duty, 1/3 bias                                           */
  LCD_CR_DBS_Duty4Bias3                = 3,     /*!< Duty4Bias3 : 1/4 duty, 1/3 bias                                           */
  LCD_CR_DBS_Duty3Bias3                = 4,     /*!< Duty3Bias3 : 1/3 duty, 1/3 bias                                           */
  LCD_CR_DBS_Duty3Bias2                = 5,     /*!< Duty3Bias2 : 1/3 duty, 1/2 bias                                           */
} LCD_CR_DBS_Enum;

/* ==================================================  LCD CR LCLK [1..2]  =================================================== */
typedef enum {                                  /*!< LCD_CR_LCLK                                                               */
  LCD_CR_LCLK_fLCD256                  = 0,     /*!< fLCD256 : 128Hz                                                           */
  LCD_CR_LCLK_fLCD128                  = 1,     /*!< fLCD128 : 256Hz                                                           */
  LCD_CR_LCLK_fLCD64                   = 2,     /*!< fLCD64 : 512Hz                                                            */
  LCD_CR_LCLK_fLCD32                   = 3,     /*!< fLCD32 : 1024Hz                                                           */
} LCD_CR_LCLK_Enum;

/* ==================================================  LCD CR DISP [0..0]  =================================================== */
typedef enum {                                  /*!< LCD_CR_DISP                                                               */
  LCD_CR_DISP_Off                      = 0,     /*!< Off : Display off                                                         */
  LCD_CR_DISP_On                       = 1,     /*!< On : Normal display on                                                    */
} LCD_CR_DISP_Enum;

/* =========================================================  BCCR  ========================================================== */
/* ===============================================  LCD BCCR LCDABC [12..12]  ================================================ */
typedef enum {                                  /*!< LCD_BCCR_LCDABC                                                           */
  LCD_BCCR_LCDABC_Off                  = 0,     /*!< Off : LCD automatic bias is off                                           */
  LCD_BCCR_LCDABC_On                   = 1,     /*!< On : LCD automatic bias is on                                             */
} LCD_BCCR_LCDABC_Enum;

/* ================================================  LCD BCCR BMSEL [8..10]  ================================================= */
typedef enum {                                  /*!< LCD_BCCR_BMSEL                                                            */
  LCD_BCCR_BMSEL_BMA1Clk               = 0,     /*!< BMA1Clk : 'Bias Mode A' for 1-clock of fLCD                               */
  LCD_BCCR_BMSEL_BMA2Clk               = 1,     /*!< BMA2Clk : 'Bias Mode A' for 2-clock of fLCD                               */
  LCD_BCCR_BMSEL_BMA3Clk               = 2,     /*!< BMA3Clk : 'Bias Mode A' for 3-clock of fLCD                               */
  LCD_BCCR_BMSEL_BMA4Clk               = 3,     /*!< BMA4Clk : 'Bias Mode A' for 4-clock of fLCD                               */
  LCD_BCCR_BMSEL_BMA5Clk               = 4,     /*!< BMA5Clk : 'Bias Mode A' for 5-clock of fLCD                               */
  LCD_BCCR_BMSEL_BMA6Clk               = 5,     /*!< BMA6Clk : 'Bias Mode A' for 6-clock of fLCD                               */
  LCD_BCCR_BMSEL_BMA7Clk               = 6,     /*!< BMA7Clk : 'Bias Mode A' for 7-clock of fLCD                               */
  LCD_BCCR_BMSEL_BMA8Clk               = 7,     /*!< BMA8Clk : 'Bias Mode A' for 8-clock of fLCD                               */
} LCD_BCCR_BMSEL_Enum;

/* =================================================  LCD BCCR LCTEN [5..5]  ================================================= */
typedef enum {                                  /*!< LCD_BCCR_LCTEN                                                            */
  LCD_BCCR_LCTEN_Disable               = 0,     /*!< Disable : Disable LCD driver contrast.                                    */
  LCD_BCCR_LCTEN_Enable                = 1,     /*!< Enable : Enable LCD driver contrast.                                      */
} LCD_BCCR_LCTEN_Enum;

/* =================================================  LCD BCCR VLCD [0..3]  ================================================== */
typedef enum {                                  /*!< LCD_BCCR_VLCD                                                             */
  LCD_BCCR_VLCD_Step0                  = 0,     /*!< Step0 : VDD x 16/31 Step                                                  */
  LCD_BCCR_VLCD_Step1                  = 1,     /*!< Step1 : VDD x 16/30 Step                                                  */
  LCD_BCCR_VLCD_Step2                  = 2,     /*!< Step2 : VDD x 16/29 Step                                                  */
  LCD_BCCR_VLCD_Step3                  = 3,     /*!< Step3 : VDD x 16/28 Step                                                  */
  LCD_BCCR_VLCD_Step4                  = 4,     /*!< Step4 : VDD x 16/27 Step                                                  */
  LCD_BCCR_VLCD_Step5                  = 5,     /*!< Step5 : VDD x 16/26 Step                                                  */
  LCD_BCCR_VLCD_Step6                  = 6,     /*!< Step6 : VDD x 16/25 Step                                                  */
  LCD_BCCR_VLCD_Step7                  = 7,     /*!< Step7 : VDD x 16/24 Step                                                  */
  LCD_BCCR_VLCD_Step8                  = 8,     /*!< Step8 : VDD x 16/23 Step                                                  */
  LCD_BCCR_VLCD_Step9                  = 9,     /*!< Step9 : VDD x 16/22 Step                                                  */
  LCD_BCCR_VLCD_Step10                 = 10,    /*!< Step10 : VDD x 16/21 Step                                                 */
  LCD_BCCR_VLCD_Step11                 = 11,    /*!< Step11 : VDD x 16/20 Step                                                 */
  LCD_BCCR_VLCD_Step12                 = 12,    /*!< Step12 : VDD x 16/19 Step                                                 */
  LCD_BCCR_VLCD_Step13                 = 13,    /*!< Step13 : VDD x 16/18 Step                                                 */
  LCD_BCCR_VLCD_Step14                 = 14,    /*!< Step14 : VDD x 16/17 Step                                                 */
  LCD_BCCR_VLCD_Step15                 = 15,    /*!< Step15 : VDD x 16/16 Step                                                 */
} LCD_BCCR_VLCD_Enum;

/* ==========================================================  DR0  ========================================================== */
/* ==========================================================  DR1  ========================================================== */
/* ==========================================================  DR2  ========================================================== */
/* ==========================================================  DR3  ========================================================== */
/* ==========================================================  DR4  ========================================================== */
/* ==========================================================  DR5  ========================================================== */
/* ==========================================================  DR6  ========================================================== */
/* ==========================================================  DR7  ========================================================== */
/* ==========================================================  DR8  ========================================================== */
/* ==========================================================  DR9  ========================================================== */
/* =========================================================  DR10  ========================================================== */
/* =========================================================  DR11  ========================================================== */
/* =========================================================  DR12  ========================================================== */
/* =========================================================  DR13  ========================================================== */
/* =========================================================  DR14  ========================================================== */
/* =========================================================  DR15  ========================================================== */
/* =========================================================  DR16  ========================================================== */
/* =========================================================  DR17  ========================================================== */
/* =========================================================  DR18  ========================================================== */
/* =========================================================  DR19  ========================================================== */
/* =========================================================  DR20  ========================================================== */
/* =========================================================  DR21  ========================================================== */
/* =========================================================  DR22  ========================================================== */
/* =========================================================  DR23  ========================================================== */
/* =========================================================  DR24  ========================================================== */
/* =========================================================  DR25  ========================================================== */
/* =========================================================  DR26  ========================================================== */
/* =========================================================  DR27  ========================================================== */
/* =========================================================  DR28  ========================================================== */
/* =========================================================  DR29  ========================================================== */
/* =========================================================  DR30  ========================================================== */
/* =========================================================  DR31  ========================================================== */
/* =========================================================  DR32  ========================================================== */
/* =========================================================  DR33  ========================================================== */
/* =========================================================  DR34  ========================================================== */
/* =========================================================  DR35  ========================================================== */
/* =========================================================  DR36  ========================================================== */
/* =========================================================  DR37  ========================================================== */
/* =========================================================  DR38  ========================================================== */
/* =========================================================  DR39  ========================================================== */
/* =========================================================  DR40  ========================================================== */
/* =========================================================  DR41  ========================================================== */
/* =========================================================  DR42  ========================================================== */
/* =========================================================  DR43  ========================================================== */


/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==================================================  CRC CR MODS [7..7]  =================================================== */
typedef enum {                                  /*!< CRC_CR_MODS                                                               */
  CRC_CR_MODS_UserMode                 = 0,     /*!< UserMode : User Mode (Calculate every data written to the CRC_IN
                                                     register)                                                                 */
  CRC_CR_MODS_AutoMode                 = 1,     /*!< AutoMode : Auto Mode (Calculate till CRC_SADR == CRC_EADR)                */
} CRC_CR_MODS_Enum;

/* =================================================  CRC CR RLTCLR [6..6]  ================================================== */
typedef enum {                                  /*!< CRC_CR_RLTCLR                                                             */
  CRC_CR_RLTCLR_NoEffect               = 0,     /*!< NoEffect : No effect.                                                     */
  CRC_CR_RLTCLR_Init                   = 1,     /*!< Init : Initialize the CRC_RLT register with the value of CRC_INIT.
                                                     (This bit is automatically cleared to '0' after operation.)               */
} CRC_CR_RLTCLR_Enum;

/* ==================================================  CRC CR MDSEL [5..5]  ================================================== */
typedef enum {                                  /*!< CRC_CR_MDSEL                                                              */
  CRC_CR_MDSEL_CRC                     = 0,     /*!< CRC : Select CRC.                                                         */
  CRC_CR_MDSEL_Checksum                = 1,     /*!< Checksum : Select Checksum.                                               */
} CRC_CR_MDSEL_Enum;

/* ==================================================  CRC CR POLYS [4..4]  ================================================== */
typedef enum {                                  /*!< CRC_CR_POLYS                                                              */
  CRC_CR_POLYS_CRC16_CCITT             = 0,     /*!< CRC16_CCITT : CRC16-CCITT (G1(x) = x16 + x12 + x5 + 1)                    */
  CRC_CR_POLYS_CRC16                   = 1,     /*!< CRC16 : CRC16 (G2(x) = x16 + x15 + x2 + 1)                                */
} CRC_CR_POLYS_Enum;

/* =================================================  CRC CR SARINC [3..3]  ================================================== */
typedef enum {                                  /*!< CRC_CR_SARINC                                                             */
  CRC_CR_SARINC_Disable                = 0,     /*!< Disable : No effect.                                                      */
  CRC_CR_SARINC_Enable                 = 1,     /*!< Enable : The CRC/Checksum start address register is incremented
                                                     as the selected input size every writing to the CRC_IN
                                                     register.                                                                 */
} CRC_CR_SARINC_Enum;

/* =================================================  CRC CR FIRSTBS [1..1]  ================================================= */
typedef enum {                                  /*!< CRC_CR_FIRSTBS                                                            */
  CRC_CR_FIRSTBS_msbFirst              = 0,     /*!< msbFirst : msb first                                                      */
  CRC_CR_FIRSTBS_lsbFirst              = 1,     /*!< lsbFirst : lsb first                                                      */
} CRC_CR_FIRSTBS_Enum;

/* =================================================  CRC CR CRCRUN [0..0]  ================================================== */
typedef enum {                                  /*!< CRC_CR_CRCRUN                                                             */
  CRC_CR_CRCRUN_Stop                   = 0,     /*!< Stop : Not busy. The CRC operation can be finished by writing
                                                     '0' to this bit while running.                                            */
  CRC_CR_CRCRUN_Start                  = 1,     /*!< Start : Start CRC operation. This bit is automatically cleared
                                                     to '0' when the value of CRC_SADR register reaches the
                                                     value of CRC_EADR register.                                               */
} CRC_CR_CRCRUN_Enum;

/* ==========================================================  IN  =========================================================== */
/* ==========================================================  RLT  ========================================================== */
/* =========================================================  INIT  ========================================================== */
/* =========================================================  SADR  ========================================================== */
/* =========================================================  EADR  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           COA0                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  TRIM00  ========================================================= */
/* ========================================================  TRIM01  ========================================================= */
/* ========================================================  TRIM02  ========================================================= */
/* ========================================================  TRIM03  ========================================================= */
/* ========================================================  TRIM04  ========================================================= */
/* ========================================================  TRIM05  ========================================================= */
/* ========================================================  TRIM06  ========================================================= */
/* ========================================================  TRIM07  ========================================================= */
/* ========================================================  TRIM08  ========================================================= */
/* ========================================================  TRIM09  ========================================================= */
/* ========================================================  TRIM10  ========================================================= */
/* ========================================================  TRIM11  ========================================================= */
/* ========================================================  TRIM12  ========================================================= */
/* ========================================================  TRIM13  ========================================================= */
/* ========================================================  TRIM14  ========================================================= */
/* ========================================================  TRIM15  ========================================================= */
/* ========================================================  TRIM16  ========================================================= */
/* ========================================================  TRIM17  ========================================================= */
/* ========================================================  TRIM18  ========================================================= */
/* ========================================================  TRIM19  ========================================================= */
/* =====================================================  CONF_MF1CNFIG  ===================================================== */
/* =====================================================  CONF_MF2CNFIG  ===================================================== */
/* =====================================================  CONF_MF3CNFIG  ===================================================== */
/* =====================================================  CONF_MF4CNFIG  ===================================================== */
/* ========================================================  TRIM24  ========================================================= */
/* ========================================================  TRIM25  ========================================================= */
/* ========================================================  TRIM26  ========================================================= */
/* ========================================================  TRIM27  ========================================================= */
/* ========================================================  TRIM28  ========================================================= */
/* ========================================================  TRIM29  ========================================================= */
/* ========================================================  TRIM30  ========================================================= */
/* ========================================================  TRIM31  ========================================================= */


/* =========================================================================================================================== */
/* ================                                           COA1                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  RPCNFIG  ======================================================== */
/* ==============================================  COA1 RPCNFIG WTIDKY [4..31]  ============================================== */
typedef enum {                                  /*!< COA1_RPCNFIG_WTIDKY                                                       */
  COA1_RPCNFIG_WTIDKY_Value            = 110922279,/*!< Value : Key Value (0x69c8a27)                                          */
} COA1_RPCNFIG_WTIDKY_Enum;

/* ===============================================  COA1 RPCNFIG READP [0..1]  =============================================== */
typedef enum {                                  /*!< COA1_RPCNFIG_READP                                                        */
  COA1_RPCNFIG_READP_Level0            = 3,     /*!< Level0 : No restriction for read/erase/write.                             */
  COA1_RPCNFIG_READP_Level1            = 2,     /*!< Level1 : 1. Not readable/erasable/writable by 'Debug' 2. Bulk
                                                     erasable only by 'Debug' 3. Readable/erasable/writable
                                                     by 'Instruction from Flash Memory and RAM'                                */
  COA1_RPCNFIG_READP_Level2            = 0,     /*!< Level2 : 1. Not readable/erasable/writable by 'Debug' / 'Instruction
                                                     from RAM' 2. Bulk erasable only by 'Instruction from RAM'
                                                     / 'Debug' 3. Readable/erasable/writable by 'Instruction
                                                     from Flash Memory'                                                        */
} COA1_RPCNFIG_READP_Enum;

/* =======================================================  WDTCNFIG  ======================================================== */
/* ==============================================  COA1 WDTCNFIG WRCMF [4..15]  ============================================== */
typedef enum {                                  /*!< COA1_WDTCNFIG_WRCMF                                                       */
  COA1_WDTCNFIG_WRCMF_BySW             = 2413,  /*!< BySW : By S/W (CLKSRCR Register) (0x96d)                                  */
  COA1_WDTCNFIG_WRCMF_AlwaysEnableExceptDeepSleep = 679,/*!< AlwaysEnableExceptDeepSleep : Always Enable Except for Deep
                                                     Sleep (0x2a7)                                                             */
  COA1_WDTCNFIG_WRCMF_AlwaysEnable     = 4095,  /*!< AlwaysEnable : Always Enable                                              */
} COA1_WDTCNFIG_WRCMF_Enum;

/* ==============================================  COA1 WDTCNFIG WCLKMF [2..2]  ============================================== */
typedef enum {                                  /*!< COA1_WDTCNFIG_WCLKMF                                                      */
  COA1_WDTCNFIG_WCLKMF_BySW            = 0,     /*!< BySW : By S/W (PPCLKSR Register)                                          */
  COA1_WDTCNFIG_WCLKMF_AlwaysWDTRC     = 1,     /*!< AlwaysWDTRC : Always WDTRC                                                */
} COA1_WDTCNFIG_WCLKMF_Enum;

/* ==============================================  COA1 WDTCNFIG WRSTMF [1..1]  ============================================== */
typedef enum {                                  /*!< COA1_WDTCNFIG_WRSTMF                                                      */
  COA1_WDTCNFIG_WRSTMF_AlwaysEnable    = 0,     /*!< AlwaysEnable : Always Enable                                              */
  COA1_WDTCNFIG_WRSTMF_BySW            = 1,     /*!< BySW : By S/W (WDTCR Register)                                            */
} COA1_WDTCNFIG_WRSTMF_Enum;

/* ==============================================  COA1 WDTCNFIG WCNTMF [0..0]  ============================================== */
typedef enum {                                  /*!< COA1_WDTCNFIG_WCNTMF                                                      */
  COA1_WDTCNFIG_WCNTMF_AlwaysEnable    = 0,     /*!< AlwaysEnable : Always Enable                                              */
  COA1_WDTCNFIG_WCNTMF_BySW            = 1,     /*!< BySW : By S/W (WDTCR Register)                                            */
} COA1_WDTCNFIG_WCNTMF_Enum;

/* =======================================================  LVRCNFIG  ======================================================== */
/* =============================================  COA1 LVRCNFIG LVRENM [8..15]  ============================================== */
typedef enum {                                  /*!< COA1_LVRCNFIG_LVRENM                                                      */
  COA1_LVRCNFIG_LVRENM_BySW            = 170,   /*!< BySW : By S/W (LVRCR Register) (0xaa)                                     */
  COA1_LVRCNFIG_LVRENM_AlwaysEnable    = 255,   /*!< AlwaysEnable : Always Enable (0xff)                                       */
} COA1_LVRCNFIG_LVRENM_Enum;

/* ==============================================  COA1 LVRCNFIG LVRVS [0..3]  =============================================== */
typedef enum {                                  /*!< COA1_LVRCNFIG_LVRVS                                                       */
  COA1_LVRCNFIG_LVRVS_1p62V            = 15,    /*!< 1p62V : 1.62V                                                             */
  COA1_LVRCNFIG_LVRVS_DNW14            = 14,    /*!< DNW14 : Do not write.                                                     */
  COA1_LVRCNFIG_LVRVS_DNW13            = 13,    /*!< DNW13 : Do not write.                                                     */
  COA1_LVRCNFIG_LVRVS_DNW12            = 12,    /*!< DNW12 : Do not write.                                                     */
  COA1_LVRCNFIG_LVRVS_2p00V            = 11,    /*!< 2p00V : 2.00V                                                             */
  COA1_LVRCNFIG_LVRVS_2p13V            = 10,    /*!< 2p13V : 2.13V                                                             */
  COA1_LVRCNFIG_LVRVS_2p28V            = 9,     /*!< 2p28V : 2.28V                                                             */
  COA1_LVRCNFIG_LVRVS_2p46V            = 8,     /*!< 2p46V : 2.46V                                                             */
  COA1_LVRCNFIG_LVRVS_2p67V            = 7,     /*!< 2p67V : 2.67V                                                             */
  COA1_LVRCNFIG_LVRVS_3p04V            = 6,     /*!< 3p04V : 3.04V                                                             */
  COA1_LVRCNFIG_LVRVS_3p20V            = 5,     /*!< 3p20V : 3.20V                                                             */
  COA1_LVRCNFIG_LVRVS_3p55V            = 4,     /*!< 3p55V : 3.55V                                                             */
  COA1_LVRCNFIG_LVRVS_3p75V            = 3,     /*!< 3p75V : 3.75V                                                             */
  COA1_LVRCNFIG_LVRVS_3p99V            = 2,     /*!< 3p99V : 3.99V                                                             */
  COA1_LVRCNFIG_LVRVS_4p25V            = 1,     /*!< 4p25V : 4.25V                                                             */
  COA1_LVRCNFIG_LVRVS_4p55             = 0,     /*!< 4p55 : 4.55V                                                              */
} COA1_LVRCNFIG_LVRVS_Enum;

/* =======================================================  CNFIGWTP1  ======================================================= */
/* ==============================================  COA1 CNFIGWTP1 CP3WP [2..2]  ============================================== */
typedef enum {                                  /*!< COA1_CNFIGWTP1_CP3WP                                                      */
  COA1_CNFIGWTP1_CP3WP_Enable          = 0,     /*!< Enable : Enable protection. (Not erasable/writable by instruction)        */
  COA1_CNFIGWTP1_CP3WP_Disable         = 1,     /*!< Disable : Disable protection. (Erasable/writable by instruction)          */
} COA1_CNFIGWTP1_CP3WP_Enum;

/* ==============================================  COA1 CNFIGWTP1 CP2WP [1..1]  ============================================== */
typedef enum {                                  /*!< COA1_CNFIGWTP1_CP2WP                                                      */
  COA1_CNFIGWTP1_CP2WP_Enable          = 0,     /*!< Enable : Enable protection. (Not erasable/writable by instruction)        */
  COA1_CNFIGWTP1_CP2WP_Disable         = 1,     /*!< Disable : Disable protection. (Erasable/writable by instruction)          */
} COA1_CNFIGWTP1_CP2WP_Enum;

/* ==============================================  COA1 CNFIGWTP1 CP1WP [0..0]  ============================================== */
typedef enum {                                  /*!< COA1_CNFIGWTP1_CP1WP                                                      */
  COA1_CNFIGWTP1_CP1WP_Enable          = 0,     /*!< Enable : Enable protection. (Not erasable/writable by instruction)        */
  COA1_CNFIGWTP1_CP1WP_Disable         = 1,     /*!< Disable : Disable protection. (Erasable/writable by instruction)          */
} COA1_CNFIGWTP1_CP1WP_Enum;

/* ========================================================  FMWTP1  ========================================================= */
/* ==============================================  COA1 FMWTP1 SWTP31 [31..31]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP31                                                        */
  COA1_FMWTP1_SWTP31_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP31_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP31_Enum;

/* ==============================================  COA1 FMWTP1 SWTP30 [30..30]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP30                                                        */
  COA1_FMWTP1_SWTP30_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP30_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP30_Enum;

/* ==============================================  COA1 FMWTP1 SWTP29 [29..29]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP29                                                        */
  COA1_FMWTP1_SWTP29_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP29_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP29_Enum;

/* ==============================================  COA1 FMWTP1 SWTP28 [28..28]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP28                                                        */
  COA1_FMWTP1_SWTP28_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP28_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP28_Enum;

/* ==============================================  COA1 FMWTP1 SWTP27 [27..27]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP27                                                        */
  COA1_FMWTP1_SWTP27_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP27_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP27_Enum;

/* ==============================================  COA1 FMWTP1 SWTP26 [26..26]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP26                                                        */
  COA1_FMWTP1_SWTP26_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP26_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP26_Enum;

/* ==============================================  COA1 FMWTP1 SWTP25 [25..25]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP25                                                        */
  COA1_FMWTP1_SWTP25_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP25_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP25_Enum;

/* ==============================================  COA1 FMWTP1 SWTP24 [24..24]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP24                                                        */
  COA1_FMWTP1_SWTP24_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP24_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP24_Enum;

/* ==============================================  COA1 FMWTP1 SWTP23 [23..23]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP23                                                        */
  COA1_FMWTP1_SWTP23_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP23_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP23_Enum;

/* ==============================================  COA1 FMWTP1 SWTP22 [22..22]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP22                                                        */
  COA1_FMWTP1_SWTP22_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP22_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP22_Enum;

/* ==============================================  COA1 FMWTP1 SWTP21 [21..21]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP21                                                        */
  COA1_FMWTP1_SWTP21_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP21_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP21_Enum;

/* ==============================================  COA1 FMWTP1 SWTP20 [20..20]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP20                                                        */
  COA1_FMWTP1_SWTP20_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP20_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP20_Enum;

/* ==============================================  COA1 FMWTP1 SWTP19 [19..19]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP19                                                        */
  COA1_FMWTP1_SWTP19_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP19_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP19_Enum;

/* ==============================================  COA1 FMWTP1 SWTP18 [18..18]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP18                                                        */
  COA1_FMWTP1_SWTP18_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP18_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP18_Enum;

/* ==============================================  COA1 FMWTP1 SWTP17 [17..17]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP17                                                        */
  COA1_FMWTP1_SWTP17_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP17_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP17_Enum;

/* ==============================================  COA1 FMWTP1 SWTP16 [16..16]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP16                                                        */
  COA1_FMWTP1_SWTP16_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP16_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP16_Enum;

/* ==============================================  COA1 FMWTP1 SWTP15 [15..15]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP15                                                        */
  COA1_FMWTP1_SWTP15_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP15_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP15_Enum;

/* ==============================================  COA1 FMWTP1 SWTP14 [14..14]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP14                                                        */
  COA1_FMWTP1_SWTP14_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP14_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP14_Enum;

/* ==============================================  COA1 FMWTP1 SWTP13 [13..13]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP13                                                        */
  COA1_FMWTP1_SWTP13_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP13_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP13_Enum;

/* ==============================================  COA1 FMWTP1 SWTP12 [12..12]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP12                                                        */
  COA1_FMWTP1_SWTP12_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP12_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP12_Enum;

/* ==============================================  COA1 FMWTP1 SWTP11 [11..11]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP11                                                        */
  COA1_FMWTP1_SWTP11_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP11_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP11_Enum;

/* ==============================================  COA1 FMWTP1 SWTP10 [10..10]  ============================================== */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP10                                                        */
  COA1_FMWTP1_SWTP10_Enable            = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP10_Disable           = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP10_Enum;

/* ===============================================  COA1 FMWTP1 SWTP9 [9..9]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP9                                                         */
  COA1_FMWTP1_SWTP9_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP9_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP9_Enum;

/* ===============================================  COA1 FMWTP1 SWTP8 [8..8]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP8                                                         */
  COA1_FMWTP1_SWTP8_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP8_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP8_Enum;

/* ===============================================  COA1 FMWTP1 SWTP7 [7..7]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP7                                                         */
  COA1_FMWTP1_SWTP7_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP7_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP7_Enum;

/* ===============================================  COA1 FMWTP1 SWTP6 [6..6]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP6                                                         */
  COA1_FMWTP1_SWTP6_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP6_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP6_Enum;

/* ===============================================  COA1 FMWTP1 SWTP5 [5..5]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP5                                                         */
  COA1_FMWTP1_SWTP5_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP5_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP5_Enum;

/* ===============================================  COA1 FMWTP1 SWTP4 [4..4]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP4                                                         */
  COA1_FMWTP1_SWTP4_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP4_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP4_Enum;

/* ===============================================  COA1 FMWTP1 SWTP3 [3..3]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP3                                                         */
  COA1_FMWTP1_SWTP3_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP3_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP3_Enum;

/* ===============================================  COA1 FMWTP1 SWTP2 [2..2]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP2                                                         */
  COA1_FMWTP1_SWTP2_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP2_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP2_Enum;

/* ===============================================  COA1 FMWTP1 SWTP1 [1..1]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP1                                                         */
  COA1_FMWTP1_SWTP1_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP1_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP1_Enum;

/* ===============================================  COA1 FMWTP1 SWTP0 [0..0]  ================================================ */
typedef enum {                                  /*!< COA1_FMWTP1_SWTP0                                                         */
  COA1_FMWTP1_SWTP0_Enable             = 0,     /*!< Enable : Protect 'flash memory sector n erase/write'                      */
  COA1_FMWTP1_SWTP0_Disable            = 1,     /*!< Disable : Permit 'flash memory sector n erase/write'                      */
} COA1_FMWTP1_SWTP0_Enum;



/* =========================================================================================================================== */
/* ================                                           COA2                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  UDATA00  ======================================================== */
/* ========================================================  UDATA01  ======================================================== */
/* ========================================================  UDATA02  ======================================================== */
/* ========================================================  UDATA03  ======================================================== */
/* ========================================================  UDATA04  ======================================================== */
/* ========================================================  UDATA05  ======================================================== */
/* ========================================================  UDATA06  ======================================================== */
/* ========================================================  UDATA07  ======================================================== */
/* ========================================================  UDATA08  ======================================================== */
/* ========================================================  UDATA09  ======================================================== */
/* ========================================================  UDATA10  ======================================================== */
/* ========================================================  UDATA11  ======================================================== */
/* ========================================================  UDATA12  ======================================================== */
/* ========================================================  UDATA13  ======================================================== */
/* ========================================================  UDATA14  ======================================================== */
/* ========================================================  UDATA15  ======================================================== */
/* ========================================================  UDATA16  ======================================================== */
/* ========================================================  UDATA17  ======================================================== */
/* ========================================================  UDATA18  ======================================================== */
/* ========================================================  UDATA19  ======================================================== */
/* ========================================================  UDATA20  ======================================================== */
/* ========================================================  UDATA21  ======================================================== */
/* ========================================================  UDATA22  ======================================================== */
/* ========================================================  UDATA23  ======================================================== */
/* ========================================================  UDATA24  ======================================================== */
/* ========================================================  UDATA25  ======================================================== */
/* ========================================================  UDATA26  ======================================================== */
/* ========================================================  UDATA27  ======================================================== */
/* ========================================================  UDATA28  ======================================================== */
/* ========================================================  UDATA29  ======================================================== */
/* ========================================================  UDATA30  ======================================================== */
/* ========================================================  UDATA31  ======================================================== */


/* =========================================================================================================================== */
/* ================                                           COA3                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  UDATA00  ======================================================== */
/* ========================================================  UDATA01  ======================================================== */
/* ========================================================  UDATA02  ======================================================== */
/* ========================================================  UDATA03  ======================================================== */
/* ========================================================  UDATA04  ======================================================== */
/* ========================================================  UDATA05  ======================================================== */
/* ========================================================  UDATA06  ======================================================== */
/* ========================================================  UDATA07  ======================================================== */
/* ========================================================  UDATA08  ======================================================== */
/* ========================================================  UDATA09  ======================================================== */
/* ========================================================  UDATA10  ======================================================== */
/* ========================================================  UDATA11  ======================================================== */
/* ========================================================  UDATA12  ======================================================== */
/* ========================================================  UDATA13  ======================================================== */
/* ========================================================  UDATA14  ======================================================== */
/* ========================================================  UDATA15  ======================================================== */
/* ========================================================  UDATA16  ======================================================== */
/* ========================================================  UDATA17  ======================================================== */
/* ========================================================  UDATA18  ======================================================== */
/* ========================================================  UDATA19  ======================================================== */
/* ========================================================  UDATA20  ======================================================== */
/* ========================================================  UDATA21  ======================================================== */
/* ========================================================  UDATA22  ======================================================== */
/* ========================================================  UDATA23  ======================================================== */
/* ========================================================  UDATA24  ======================================================== */
/* ========================================================  UDATA25  ======================================================== */
/* ========================================================  UDATA26  ======================================================== */
/* ========================================================  UDATA27  ======================================================== */
/* ========================================================  UDATA28  ======================================================== */
/* ========================================================  UDATA29  ======================================================== */
/* ========================================================  UDATA30  ======================================================== */
/* ========================================================  UDATA31  ======================================================== */

/** @} */ /* End of group EnumValue_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* A31G12X_H */


/** @} */ /* End of group A31G12x */

/** @} */ /* End of group VENDOR ABOV Semiconductor Co., Ltd. */
